<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github 遇到 443 报错的解决方法</title>
      <link href="/2023/09/07/github-03/"/>
      <url>/2023/09/07/github-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于某些不可名状的原因，在提交到 github 的时候会遇到报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to connect to github.com port 443</span><br></pre></td></tr></table></figure><p>而如果我们本地有开启了代理（fanqiang）但却还是报这个错误，说明提交的时候没有走代理，这个时候需要设置 git 的代理才可以。</p><blockquote><p>不可名状的原因：Github 间歇性被墙，因此有时能正常提交，有时候就不行了。</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>以 shadowsockets 为例，如下图所示，选择偏好设置。</p><p><img src="https://s2.loli.net/2023/09/07/tFPdNr9csQknzZo.jpg" alt="iShot_2023-09-07_19.22.06.jpg"></p><p>接着选择 HTTP，然后将“开启HTTP代理”，“全局模式时，在系统代理设置中设置HTTP代理服务器”一起勾选。</p><p><img src="https://s2.loli.net/2023/09/07/vLurOifRqcnBmda.jpg" alt="iShot_2023-09-07_19.20.29.jpg"></p><p>注意上面的 HTTP 代理服务器端口号码。</p><p>接着设置 git 全局代理，以我的为例，上面的 HTTP 代理端口号码是 1087，因此命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># http</span><br><span class="line">git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line"></span><br><span class="line"># https</span><br><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure><p>加上 <code>--global</code> 参数即代表全局，这个参数可以去掉，去掉的话就变成单独为当前仓库设置代理，有的时候我们会用国内的 coding 或者 gitee，如果用代理反而会让提交速度变慢，只有提交到 github.com 才需要用到代理。</p><p>这个时候再 push 就不会遇到 443 错误了，如果需要取消全局代理呢？</p><p>用下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 删除某个 commit 记录</title>
      <link href="/2023/09/07/github-02/"/>
      <url>/2023/09/07/github-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在提交 git 的时候，有时候会手快打错备注信息，或者有的时候不想被人发现自己提交了什么奇奇怪怪的东西，但是又不能影响到之后提交的代码，那么可以用下面的这种方法。</p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>假设现在有三个提交记录：commit_A，commit_B，commit_C，你现在想删掉中间的提交记录 commit_B，那么可以用下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i (commit-id) </span><br></pre></td></tr></table></figure><p><code>commit-id</code> 是想要删除的那个 commit 记录之前的那一条，而这个 ID 要取提交记录的哈希字符串。</p><p>假设三个提交记录分别如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:31 2008 -0700</span><br><span class="line"></span><br><span class="line">    第三次提交：commit_C</span><br><span class="line"></span><br><span class="line">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:21 2008 -0700</span><br><span class="line"></span><br><span class="line">    第二次提交：commit_B</span><br><span class="line"></span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class="line"></span><br><span class="line">    第一次提交：commit_A</span><br></pre></td></tr></table></figure><p>那就输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i ca82a6dff817ec66f44342007202690a93763949</span><br></pre></td></tr></table></figure><p>接着就会看到进入文本编辑界面，类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick a11bef0 commit_C</span><br><span class="line">pick 085bb3b commit_B</span><br><span class="line">pick ca82a6d commit_A</span><br></pre></td></tr></table></figure><p>然后把 commit_B 前面的 pick 改成 drop 就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick a11bef0 commit_C</span><br><span class="line">drop 085bb3b commit_B</span><br><span class="line">pick ca82a6d commit_A</span><br></pre></td></tr></table></figure><p>接着与 vim 一样保存退出，然后就会看到提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully rebased and updated refs&#x2F;heads&#x2F;master.</span><br></pre></td></tr></table></figure><p>最后把这个提交结果推送到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure><p>这样 commit_B 就被干掉了，到网页端的仓库提交历史记录检查一下，已经看不到这条记录了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种很新的编程方式</title>
      <link href="/2023/06/19/2023-news-3/"/>
      <url>/2023/06/19/2023-news-3/</url>
      
        <content type="html"><![CDATA[<h2 id="“传新”的编程方式"><a href="#“传新”的编程方式" class="headerlink" title="“传新”的编程方式"></a>“传新”的编程方式</h2><p>PHP 8 官方开始支持「注解」了，以前使用的 hyperf 框架也升级到了 3.0 版本，并且将原来的注解改成了官方注解方式，于是在新一代的 PHP 开发中，编程方式有了巨大的改变，注解应该是从 JAVA 传过来的，在 PHP 8 之前，注解只能用「反射」的方式来实现，这种“民间注解”现在已经被官方注解取代了。</p><p>让我们康康下面一段 <strong>登录接口</strong> 的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#[DuplicateLockAnnotation]</span><br><span class="line">#[FrequentLimitAnnotation(perTimes: 5, ttl: 60)]</span><br><span class="line">#[ModulePermissionAnnotation(</span><br><span class="line">    module: ModuleConstant::MODULE_SYSTEM,</span><br><span class="line">    key: ModuleConstant::SYSTEM_ENABLED_LOGIN,</span><br><span class="line">    required: Constant::ENABLED,</span><br><span class="line">    message: &#39;未开放登录&#39;</span><br><span class="line">)]</span><br><span class="line">#[RequestMapping(path: &quot;signin&quot;, methods: &quot;post&quot;)]</span><br><span class="line">public function signinSubmit(SigninFormRequest $request)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;responser-&gt;signinSubmit($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个控制器内的方法，而下面这段代码就是注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#[DuplicateLockAnnotation]</span><br><span class="line">#[FrequentLimitAnnotation(perTimes: 5, ttl: 60)]</span><br><span class="line">#[ModulePermissionAnnotation(</span><br><span class="line">    module: ModuleConstant::MODULE_SYSTEM,</span><br><span class="line">    key: ModuleConstant::SYSTEM_ENABLED_LOGIN,</span><br><span class="line">    required: Constant::ENABLED,</span><br><span class="line">    message: &#39;未开放登录&#39;</span><br><span class="line">)]</span><br><span class="line">#[RequestMapping(path: &quot;signin&quot;, methods: &quot;post&quot;)]</span><br></pre></td></tr></table></figure><p>注解类似注释，但与注释不同的是注解有「实际作用」而不是给码农看的而已，注解会被解析，有具体的功能用途，比如前面写的 AOP 面向切面编程，插入一段注解就会被当做一个「切面」，而且可以在注解上传入一些参数，总之，注解有很多功能性的用途。</p><p>回到正题，这段登录接口的代码与传统编程有何不同？</p><p>如果是传统编程，需要写成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public function signinSubmit()</span><br><span class="line">&#123;</span><br><span class="line">    # 检测是否重复提交，防止表单重复提交，比如用 redis 加一个临时的“锁”</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    # 检测是否多次提交（防止用户的密码被暴力破解）也是用 redis 加锁的方式</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    # 获取表单提交的参数</span><br><span class="line">    $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line"></span><br><span class="line">    # 判断表单是否填写完整，检测邮箱格式是否正确等</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    # 判断后台是否关闭了登录功能，比如系统在维护的时候防止用户登入</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    return $this-&gt;responser-&gt;signinSubmit($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似上面这样，我们需要很多个 if 来判断一些参数信息，这样代码不仅不美观，而且代码重复性也会很高，因为其他地方也会有 redis 加锁防止表单重复提交的情况，如果每个地方都来上这么一句，身心都会受不鸟。</p><p>这个时候如果是传统的编程方式就会考虑「封装」重复的代码，比如写一个专门判断 redis 锁的封装类，但还是没办法避免不断 if 判断的情况，代码会十分杂乱不堪。这个时候，如果不想写 if 判断条件就可以用到 AOP（切面编程）了，在提交表单的时候拦截请求，如果符合要求再放过去，不符合要求就返回失败的结果。</p><p>首先，我们需要拦截表单填写不正确的情况，比如用户提交了空表单或者填写了错误的邮箱格式，这个时候可以用依赖注入的方式直接过滤掉数据不正确的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function signinSubmit(SigninFormRequest $request)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;responser-&gt;signinSubmit($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>SigninFormRequest</code> 就是依赖注入，然后需要实现这个注入类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">namespace App\Request\Auth;</span><br><span class="line"></span><br><span class="line">use Hyperf\Validation\Request\FormRequest;</span><br><span class="line"></span><br><span class="line">class SigninFormRequest extends FormRequest</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Determine if the user is authorized to make this request.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function authorize(): bool</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Get the validation rules that apply to the request.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function rules(): array</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#39;email&#39; &#x3D;&gt; &#39;required|email|between:6,128&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;required|between:6,128&#39;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function attributes(): array</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#39;email&#39; &#x3D;&gt; &#39;邮箱&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;密码&#39;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个依赖注入类会被 Hyperf 框架处理，在提交请求的时候进行判断，提交的参数必须满足 <code>rules</code> 中规定的数据格式，比如 <code>email</code> 字段是必须的，并且还得是邮箱格式，同时将字符长度限制在 6 到 128 位的长度。</p><p>如果不符合这种格式就会抛出一个错误，然后全局捕捉这个错误，将错误的信息格式化返回即可。</p><p>这样就解决掉了烦人的表单数据过滤问题了。</p><p>接着就是第二烦人的情况，我们希望用户填写完表单，然后点击「一下」登录，但有时候会出现一种情况，比如我快速点击了登录两次（用户手滑之类的），那么就会请求两次登录接口，虽然登录接口连续请求两次没有什么严重的后果，但是其他接口就不一定了，比如每日签到如果快速点击两次就会请求两次签到接口，很可能会导致并发问题发放了两次签到奖励，这种情况就是我们不希望发生的。</p><p>因此，我们需要加上一个「锁」来防止用户重复提交，而常规的锁就是用 redis 写入一个简单的变量，再判断是否有这个变量，如果有就阻止提交，一般情况下会这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$redis &#x3D; RedisUtil::instance()-&gt;getRedis();</span><br><span class="line">if($redis-&gt;exists(&#39;lock&#39;)) &#123;</span><br><span class="line">    # 返回操作失败的提示</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 写入一个简单的变量，过期时间设置为3秒</span><br><span class="line">$redis-&gt;setEx(&#39;lock&#39;, 3, 1);</span><br><span class="line"></span><br><span class="line"># 进入下一步</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上述就是一个简单的 redis 锁的实现方式，写入一个过期时间 3 秒的变量，相当于锁住 3 秒的时间，而 redis 变量会在 3 秒后自动过期，因此 3 秒之后就可以再次提交了，但是这样依然很「繁琐」，还是要用大量的 if 来判断。</p><p>这个时候就可以用到 AOP 编程方式了，只需要在请求之前进行拦截，然后判断是否存在 redis 锁，如果存在就阻止下一步操作，而是提前返回失败的结果即可，如下所示，写一个用来拦截请求的切面类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author FireRabbit</span><br><span class="line"> * @date 2023&#x2F;3&#x2F;11 23:34</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Aspect\Front;</span><br><span class="line"></span><br><span class="line">use App\Annotation\DuplicateLockAnnotation;</span><br><span class="line">use App\Constant\Constant;</span><br><span class="line">use App\Util\RedisUtil;</span><br><span class="line">use Hyperf\Di\Annotation\Aspect;</span><br><span class="line">use Hyperf\Di\Aop\AbstractAspect;</span><br><span class="line">use Hyperf\Di\Aop\ProceedingJoinPoint;</span><br><span class="line">use function get_client_ip;</span><br><span class="line">use function multitude_error_response;</span><br><span class="line"></span><br><span class="line">#[Aspect]</span><br><span class="line">class DuplicateLockAspect extends AbstractAspect</span><br><span class="line">&#123;</span><br><span class="line">    public array $annotations &#x3D; [</span><br><span class="line">        DuplicateLockAnnotation::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function process(ProceedingJoinPoint $proceedingJoinPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        $cache &#x3D; RedisUtil::instance()-&gt;redis();</span><br><span class="line"></span><br><span class="line">        $className &#x3D; substr(strrchr($proceedingJoinPoint-&gt;className, &quot;\\&quot;), 1);</span><br><span class="line">        $keyName &#x3D; Constant::CACHE_KEY_DUPLICATELOCK_KEY . $className . &#39;:&#39; . $proceedingJoinPoint-&gt;methodName . &#39;:&#39; . get_client_ip();</span><br><span class="line"></span><br><span class="line">        if ($cache-&gt;exists($keyName)) &#123;</span><br><span class="line">            return multitude_error_response(&#39;操作太频繁,请稍等一会&#39;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $annontation &#x3D; $proceedingJoinPoint-&gt;getAnnotationMetadata()-&gt;method[DuplicateLockAnnotation::class];</span><br><span class="line">        $ttl &#x3D; $annontation-&gt;ttl;</span><br><span class="line">        $cache-&gt;setEx($keyName, $ttl, 1);</span><br><span class="line"></span><br><span class="line">        return $proceedingJoinPoint-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述切面类指定了一个注解：<code>DuplicateLockAnnotation</code>，这个注解后面会用到，而 redis 变量需要一个键名，为了「全自动」化，这里直接使用当前的类名和方法名作为 redis 变量的名字，并且为了让变量名短一点（少占用内存）去掉了命名空间。</p><p>最后 redis 变量会被自动命名为：<code>类名:方法名:ip</code>，然后再判断有没有这个变量就可以了，因为是自动获取当前的类名，所以这个切面可以用在「任何一个方法」，而不会与其他锁发生冲突，并且是根据用户的 IP 地址来加锁，这个锁就只针对这个 IP，而不会影响到其他用户。</p><p>接着再写一个注解类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author FireRabbit</span><br><span class="line"> * @date 2023&#x2F;3&#x2F;11 23:34</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Annotation;</span><br><span class="line"></span><br><span class="line">use Hyperf\Di\Annotation\AbstractAnnotation;</span><br><span class="line"></span><br><span class="line">#[\Attribute] class DuplicateLockAnnotation extends AbstractAnnotation</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 锁的时间</span><br><span class="line">     * @var int</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int $ttl &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解是可以传入参数的，这里传入锁的时间参数，并且指定一个默认值 3 秒，然后登录接口的代码就可以进行一番优化了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#[DuplicateLockAnnotation(ttl: 5)]</span><br><span class="line">public function signinSubmit(SigninFormRequest $request)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;responser-&gt;signinSubmit($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在方法上面加上这个注解就可以，并且还可以在注解上指定锁的时间参数，上述将锁的时间设置为 5 秒，即这个方法要 5 秒才能请求一次，好了，以后其他方法如果要防止表单重复提交，只要加上一行注解就可以，不再需要写很多 if 来判断了！</p><p>上面两个问题就是编程的一大痛点，表单的校验、请求的校验，如果是在平时需要写一大堆判断的代码，而现在可以通过依赖注入和切面编程全自动化处理，机械重复的劳动只需要一行代码就搞定！心情愉悦！</p><p>由于注解可以传参，因此以后很多校验的操作全部可以在注解完成了，比如下面是判断全局是否开放了登录功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#[ModulePermissionAnnotation(</span><br><span class="line">    module: ModuleConstant::MODULE_SYSTEM,</span><br><span class="line">    key: ModuleConstant::SYSTEM_ENABLED_LOGIN,</span><br><span class="line">    required: Constant::ENABLED,</span><br><span class="line">    message: &#39;未开放登录&#39;</span><br><span class="line">)]</span><br></pre></td></tr></table></figure><p>这是一个「通用」的注解，<code>module</code> 参数传入对应的模块信息，<code>key</code> 传入对应的键，<code>required</code> 则为预期的值，如果不满足预期的值就会抛出一个异常，并且返回 <code>message</code> 的提示信息。</p><p>这样就实现了完全的参数化开发方式，只需要配置注解参数，而不需要手动写逻辑代码。</p><h2 id="未来的期待"><a href="#未来的期待" class="headerlink" title="未来的期待"></a>未来的期待</h2><p>注解编程离我的梦想「无码」开发越来越近了。</p><blockquote><p>编程的最高境界是无码。——火兔语录</p></blockquote><p>所谓的无码就是指 <strong>没有代码</strong>，虽然作为一名码农，敲代码是日常，但是敲久了也会厌烦，特别是那种重复的机械化劳动，未来的编程方式我猜会是「参数编程」，即通过一些命令行自动生成代码文件（如 Laravel 的 artisan 命令就可以实现自动生成控制器、类等文件模板），而逻辑的实现可以完全由参数进行配置，再写一个解析器解析这些参数进行对应的处理，最后，编程就只需要像配置 excel 表格一样简单了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>注解开发虽然解放了双手，并且还实现了代码的解耦，但是这种编程感觉太丑了，复杂一点的请求可能要在方法上面写一大堆的注解，像叠罗汉一样……不过，反正用户也不知道后台的代码长啥样，但是一些有强迫症的码农可能就比较难受了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火兔游戏博客与火兔技术博客整合说明</title>
      <link href="/2023/04/21/combine-notice/"/>
      <url>/2023/04/21/combine-notice/</url>
      
        <content type="html"><![CDATA[<p>火兔游戏博客（huotuyouxi.com）与火兔技术博客（huotublog.com）都是我个人用来记录日常的博客，火兔游戏博客是用来记录游戏更新记录的博客，而火兔技术博客是用于记录非游戏相关的一些技术类文章，包括个人日常技术学习之类的，原本两个博客有不同的侧重点所以才会购买两个域名单独更新，然鹅，现在迫于经济压力，只能将两个博客整合成为一个，即保留火兔游戏博客，火兔技术博客域名过期后将不再续费。</p><p>整合之后，火兔游戏博客将会继承火兔技术博客的相关文章，后期如果有技术类文章也会在这里进行更新。</p><p>单个 com 域名就得￥72 大洋，阿里云的续费太特么贵了！！！<br><img src="https://s2.loli.net/2023/04/21/iOdzAtcQT6qEl13.jpg" alt="阿里云续费价格"></p><p>其实也不是因为少续费一个域名的问题，而是我持有的域名太多了，这次不仅决定舍弃 huotublog.com 这个域名，还包括大量 com 域名，很多都是年少不懂事时瞎买来玩的……坚持续费了四五年，每年光是域名续费成本就得 1~2k，实在太多了，所以这次要割肉放掉一些。</p><p>需要注意的是域名一但过期很容易被一些非法网站抢注，用来导向菠菜行业，比如我刚毕业时用来搭建学习博客的域名（php**friend.com），直到现在都被菠菜行业用来当做导航网站，所以在这里提前预警，如果发现 huotublog.com 之后被用来当做菠菜网站的导航，切勿相信！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos 使用 squid 作为 HTTP 代理服务器</title>
      <link href="/2023/04/02/proxy-squid/"/>
      <url>/2023/04/02/proxy-squid/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近大火的 ChatGPT 让我感受到新一代的工业革命即将到来，站在历史的转折点无比兴奋！于是就开始折腾一个自己的 ChatGPT 服务，因此需要对接到 OpenAI 的接口，但是 OpenAI 对大陆地区以及香港、台湾、澳门都有限制，导致我们很难使用，经过一番折腾，搞了一台美国服务器，用美国 IP 以及自己的谷歌账号注册了一个，发现账户余额只剩下 5 美元了（原来是 18 美元）看来是玩坏了……但是不要紧，虽然吃不上第一口热乎的，但本着科研精神，还是可以研究一下这个接口的。</p><p>同时为了潜心研究 AI 技术，特意买了个新域名：<a href="http://huotutu.com/">huotutu.com</a>，最新搭建的 ChatGPT 网页版已经实装了，注册即可在线体验。作为自己的第一个创业项目，也会适当的进行一些收费，毕竟购买美国服务器以及充值 ChatGPT 就是一笔不小的开支。</p><p>好了，接下来进入正题。</p><h2 id="squid-是什么？"><a href="#squid-是什么？" class="headerlink" title="squid 是什么？"></a>squid 是什么？</h2><p>这是一个可以让服务器变成代理服务器的东东，至于为什么要这东西，因为 ChatGPT 国内大陆地区不能访问接口，但是香港服务器可以，因此需要借助一台中间服务器代理访问 ChatGPT 的接口，而我尝试去搜了一下网上免费的代理 IP，发现全部都是假的，所以决定自己搞一台。</p><blockquote><p>聪明的小伙伴可能会问，既然你都搞两台服务器了，为什么不直接部署在美国服务器或者香港上面？</p></blockquote><p>这是因为我的域名是在国内备案过的，使用的是国内阿里云服务器，在国内延迟极低，可以做到秒开网页，延迟在 50ms 左右，而如果部署到香港或者美国，延迟都是 200ms 以上的，众所周知，影响网页体验的重要因素是打开速度，这么高的延迟明显不合适。</p><h2 id="安装-squid"><a href="#安装-squid" class="headerlink" title="安装 squid"></a>安装 squid</h2><p>直接使用 yum 命令即可安装，但是需要先安装 openssl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl</span><br><span class="line">yum install -y squid</span><br></pre></td></tr></table></figure><p>以上就完成了 squid 的安装，接下来需要启动服务，并且将其设置为开机启动项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start squid</span><br><span class="line">sudo systemctl enable squid</span><br></pre></td></tr></table></figure><p>通过以下命令可以查看运行状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status squid</span><br></pre></td></tr></table></figure><p>默认的端口是 3128，我们可以通过修改配置文件改变端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;squid&#x2F;squid.conf</span><br></pre></td></tr></table></figure><p>找到下面一行，我将其改成了 3999：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Squid normally listens to port 3128</span><br><span class="line">http_port 3999</span><br></pre></td></tr></table></figure><p>接着，重启一下服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart squid</span><br></pre></td></tr></table></figure><p>查询本机所有端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><p>可以看到 3999 端口信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp6       0      0 :::3999                 :::*                    LISTEN      12341&#x2F;(squid-1)     </span><br></pre></td></tr></table></figure><p>但是这里显示的是 <code>:::3999</code>，表示只允许本地访问，本地测试如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x 127.0.0.1:3999 https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;chat&#x2F;completions</span><br></pre></td></tr></table></figure><p>因为安全性问题，默认只允许本地访问，而我们需要用其他服务器来访问这个端口，因此继续编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;squid&#x2F;squid.conf</span><br></pre></td></tr></table></figure><p>在配置文件加入两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acl myclient src 175.xxx.111.111</span><br><span class="line">http_access allow myclient</span><br></pre></td></tr></table></figure><blockquote><p>如果要允许所有 IP 访问，可以添加一行 http_access allow all，但这种做法存在巨大风险，可能被他人利用。</p></blockquote><p><code>myclient</code> 是自己定义的一个字符，<code>src</code> 后面跟上你另一台服务器的 IP 地址，然后再设置 <code>http_access</code> 允许 <code>myclient</code> 这个自定义参数，这样就大功告成了，再重新启动一下服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart squid</span><br></pre></td></tr></table></figure><p>在 PHP 用 Guzzle 试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$client &#x3D; new Client();</span><br><span class="line">$url &#x3D; &#39;https:&#x2F;&#x2F;yousitedomain&#39;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $res &#x3D; $client-&gt;get($url, [</span><br><span class="line">        &#39;proxy&#39; &#x3D;&gt; &#39;175.xxx.111.111:3999&#39;,</span><br><span class="line">        &#39;connect_timeout&#39; &#x3D;&gt; 10,</span><br><span class="line">    ])-&gt;getBody()-&gt;getContents();</span><br><span class="line">&#125; catch (\Throwable $exception) &#123;</span><br><span class="line">    $res &#x3D; $exception-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>然后去看看自己另一台服务器上面 nginx 的访问日志即可，可以看到，这个时候使用的是代理的那台服务器的 IP。</p><p>然鹅，事情没有这么简单！在尝试调用 ChatGPT 接口却报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure><p>尝试在本地运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vx 175.xxx.111.111:3999 https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;chat&#x2F;completions</span><br></pre></td></tr></table></figure><p>加上 <code>v</code> 参数，可以列举出详细的请求信息，找到最下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Recv failure: Connection reset by peer</span><br><span class="line">* OpenSSL SSL_read: Connection reset by peer, errno 54</span><br><span class="line">* Failed receiving HTTP2 data</span><br><span class="line">* Send failure: Broken pipe</span><br><span class="line">* OpenSSL SSL_write: Broken pipe, errno 32</span><br><span class="line">* Failed sending HTTP2 data</span><br></pre></td></tr></table></figure><p>可以看到报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection reset by peer, errno 54</span><br></pre></td></tr></table></figure><p>初步判断应该是 ssl 证书的什么问题，连接被重置了，可能是 ChatGPT 追踪了来源……最后还是老老实实用香港服务器了（悲）。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械重复的事，就让机器来做吧</title>
      <link href="/2023/02/20/2023-news-2/"/>
      <url>/2023/02/20/2023-news-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>机器的诞生就是为了减轻人类的工作，科学的进步往往带来大量的失业，但这也意味着效率的提高，工厂的流水线作业总有一天会被机器人取代，而那些进厂打工的人就得重新寻找谋生的工作了，不论这种辛酸是否值得惋惜，但是使用机械取代人类代表着可以节约大量人力，腾出的人力就可以去做更多的事情了。</p><p>以码农为例，重复的代码好比流水线作业，日复一日重复着简单的增删改查，繁重的工作会让人饱受精神折磨，并且对技术的提升毫无作用，所以，如何避免重复性劳动成为重中之重。</p><h2 id="查询参数的优化"><a href="#查询参数的优化" class="headerlink" title="查询参数的优化"></a>查询参数的优化</h2><p>码农的日常工作无非就是写一些增删改查，写一个后台 WEB 系统就需要有用户管理、分类管理、文章管理……诸如此类，然后我们就得一个个写控制器，查询就得要有查询参数，增删改操作还得判断是否允许增删改，这些都是十分琐碎的事情，全部堆积起来就是恐怖的事情，例如以优雅著称的 Laravel 在遇到查询参数的时候也是“不优雅”了，如下图，这是一个常见的列表数据：</p><p><img src="https://s2.loli.net/2023/02/20/gACcn6TXBUH8oO9.jpg" alt="列表数据"></p><p>顶部有一个搜索栏，用来搜索指定名称、邮箱或者注册 IP 的用户，因而就需要用到查询参数，所以在 Laravel 中，获取用户列表的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public function getList(): \Hyperf\Contract\LengthAwarePaginatorInterface</span><br><span class="line">&#123;</span><br><span class="line">    $query &#x3D; User::query();</span><br><span class="line">    $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line"></span><br><span class="line">    if (isset($params[&#39;name&#39;])) &#123;</span><br><span class="line">        $query-&gt;where(&#39;name&#39;, &#39;like&#39;, &#39;%&#39; . $params[&#39;name&#39;] . &#39;%&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (isset($params[&#39;email&#39;])) &#123;</span><br><span class="line">        $query-&gt;where(&#39;email&#39;, &#39;like&#39;, &#39;%&#39; . $params[&#39;email&#39;] . &#39;%&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (isset($params[&#39;register_ip&#39;])) &#123;</span><br><span class="line">        $query-&gt;where(&#39;register_ip&#39;, &#39;like&#39;, &#39;%&#39; . $params[&#39;register_ip&#39;] . &#39;%&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $query-&gt;paginate(10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每有一个查询条件就得用 <code>if</code> 和 <code>isset</code> 判断一下，上面的代码除了参数不同，其他地方一模一样，这就属于机械重复劳动，因此可以使用一个循环来代替从而节省工作量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function getList(): \Hyperf\Contract\LengthAwarePaginatorInterface</span><br><span class="line">&#123;</span><br><span class="line">    $query &#x3D; User::query();</span><br><span class="line">    $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line">    $queryFields &#x3D; [&#39;name&#39;, &#39;email&#39;, &#39;register_ip&#39;];</span><br><span class="line"></span><br><span class="line">    foreach ($queryFields as $field) &#123;</span><br><span class="line">        if (isset($params[$field])) &#123;</span><br><span class="line">            $query-&gt;where($field, &#39;like&#39;, &#39;%&#39; . $params[$field] . &#39;%&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $query-&gt;paginate(10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在看起来是好多了，但是如果接下来要再添加一个分类管理和文章管理，下面循环体的部分又会成为「重复代码」：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foreach ($queryFields as $field) &#123;</span><br><span class="line">    if (isset($params[$field])) &#123;</span><br><span class="line">        $query-&gt;where($field, &#39;like&#39;, &#39;%&#39; . $params[$field] . &#39;%&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ORM 的设计者们也发现到了这个问题，于是可以使用下面的方式进行查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function getList(): \Hyperf\Contract\LengthAwarePaginatorInterface</span><br><span class="line">&#123;</span><br><span class="line">    $request &#x3D; $this-&gt;request;</span><br><span class="line">    return (new User())</span><br><span class="line">        -&gt;when($request-&gt;has(&#39;name&#39;), function ($query) use ($request) &#123;</span><br><span class="line">            $query-&gt;where(&#39;name&#39;, &#39;like&#39;, &#39;%&#39; . $request-&gt;input(&#39;name&#39;) . &#39;%&#39;);</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;when(!$request-&gt;has(&#39;email&#39;), function ($query) use ($request) &#123;</span><br><span class="line">            $query-&gt;where(&#39;email&#39;, &#39;like&#39;, &#39;%&#39; . $request-&gt;input(&#39;email&#39;) . &#39;%&#39;);</span><br><span class="line">        &#125;)-&gt;when(!$request-&gt;has(&#39;register_ip&#39;), function ($query) use ($request) &#123;</span><br><span class="line">            $query-&gt;where(&#39;register_ip&#39;, &#39;like&#39;, &#39;%&#39; . $request-&gt;input(&#39;register_ip&#39;) . &#39;%&#39;);</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;paginate(10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法也就是将 <code>if</code> 条件优化了一下而已，治标不治本，这样一坨代码看着就头大，甚至还不如我上面用循环体的方式处理来得简洁。每有一个列表需要展示，我们就得再重复写一次这个循环体，那为什么不能封装起来呢？上一篇文章写到协程调度器，那为什么查询就不能写一个「查询解析器」呢？类的封装就是为了复用代码，先分析一下现在的需求：</p><p>1、查询参数有多种查询模式，例如：等于、Like 等<br>2、判断查询参数是否存在，如果存在就给 SQL 附加查询条件</p><p>捋清楚思路之后就简单了，首先创建一个用来保存查询类型的枚举类 <code>QueryConstant</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum QueryConstant</span><br><span class="line">&#123;</span><br><span class="line">    case EQUAL;</span><br><span class="line">    case LIKE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着再将上面演示的循环体封装成一个类进行调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">namespace App\Query;</span><br><span class="line"></span><br><span class="line">use Hyperf\Database\Model\Builder;</span><br><span class="line"></span><br><span class="line">class QueryHandler</span><br><span class="line">&#123;</span><br><span class="line">    protected array $rules;</span><br><span class="line"></span><br><span class="line">    public function __construct(array $rules)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;rules &#x3D; $rules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function query(string $modelClass): Builder</span><br><span class="line">    &#123;</span><br><span class="line">        $query &#x3D; make($modelClass)-&gt;query();</span><br><span class="line">        $params &#x3D; request()-&gt;all();</span><br><span class="line"></span><br><span class="line">        foreach ($this-&gt;rules as $key &#x3D;&gt; $val) &#123;</span><br><span class="line"></span><br><span class="line">            if (!array_key_exists($key, $params)) continue;</span><br><span class="line"></span><br><span class="line">            switch ($val) &#123;</span><br><span class="line">                case QueryConstant::EQUAL:</span><br><span class="line">                    $query-&gt;where($key, $params[$key]);</span><br><span class="line">                    break;</span><br><span class="line">                case QueryConstant::LIKE:</span><br><span class="line">                    $query-&gt;where($key, &#39;like&#39;, &#39;%&#39; . $params[$key] . &#39;%&#39;);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $query;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将循环体封装成了「查询参数解析器」，接着修改控制器的获取列表代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function getList(): \Hyperf\Contract\LengthAwarePaginatorInterface</span><br><span class="line">&#123;</span><br><span class="line">    $handler &#x3D; new QueryHandler([</span><br><span class="line">        &#39;name&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">        &#39;email&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">        &#39;register_ip&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    return $handler-&gt;query($this-&gt;model)-&gt;paginate(10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样查询解析器就完成了，以后不管有多少查询列表的需求，如果需要用到查询参数就可以直接使用查询解析器来处理，代码更加简洁，而且重复的代码也全部去除了，心情愉♂悦，现在只需要传入一个数组类型的 <code>rules</code> 变量，就可以自动查询这些参数了。</p><h2 id="资源控制器"><a href="#资源控制器" class="headerlink" title="资源控制器"></a>资源控制器</h2><p>解决了查询参数繁琐重复的问题，可后台的功能无外乎增删改查，有用户管理、分类管理、文章管理……每一个控制器都需要写增删改查，在 Laravel 中可以使用命令一键生成资源控制器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller PhotoController --resource</span><br></pre></td></tr></table></figure><p>该命令将在您的控制器目录中创建一个 PhotoController.php 文件，并将自动创建 7 种方法 index ，show，create，store，edit，update，destroy。 所有这些方法都是空的，您必须为每个操作添加逻辑。</p><p>上述为 Laravel 文档的说明，也就是说可以通过命令节省了你创建文件的功夫，但每个控制器的方法还是得自己手撸，同样是治标不治本。当删除一个数据的时候，我们得判断一下是不是允许被删除，当创建一个数据的时候，我们也得判断新数据是否跟数据库其他数据有重复，这些同样是「重复性劳动」。</p><p>机器之所以能够取代人类部分工作，乃是因为可以将「重复」、「规律性」的行为交给机器去干，毕竟机器没有 AI，它只能进行机械的重复工作，换句话说只要找到规律就可以让机器去干重复的劳动。</p><p>以删除数据为例，它们有着共通点：</p><p>1、判断是否允许删除<br>2、执行删除<br>3、删除完成之后的操作</p><p>想删除一个商品的订单，那么首先应该判断这个数据是否还存在，并且是否可以被删除，比如用户下单之后，商家很快就发货了，订单处于发货状态，那这个订单就不能删掉了，所以在删除前需要进行两个判断：①订单数据是否还在（而不是已被删除了）②订单状态是否允许被删除，当满足了上面两个条件，就开始执行删除操作，删除完成之后也需要再执行一次回调，比如通知卖家该订单已删除，无需发货。</p><p>这其实就是前面一篇文章提到的面向切面编程相似的原理，也就是生命周期的概念：删除前、删除、删除后……诸如此类，参照 Laravel 资源控制器，我们可以知道有哪些常规的增删改查方法，那直接提取出来即可，我们来创建一个简单的资源控制器父类，一个资源控制器无非就是显示视图以及提供 API 给前端调用，控制器管理的是一个模型，比如用户控制器就管理 <code>user</code> 表的数据，而管理 MYSQL 数据可以使用 <code>Model</code> 类来处理，因此一个控制器对应一个 <code>Model</code>，而所有的视图为了规范我们也会放在同一个路径，因而提取出两个参数：<code>model</code> 和 <code>path</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author FireRabbit</span><br><span class="line"> * @date 2023&#x2F;2&#x2F;20 01:44</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Hyperf\Contract\LengthAwarePaginatorInterface;</span><br><span class="line">use Hyperf\ViewEngine\Contract\FactoryInterface;</span><br><span class="line">use Hyperf\ViewEngine\Contract\ViewInterface;</span><br><span class="line">use Psr\Http\Message\ResponseInterface;</span><br><span class="line">use function Hyperf\ViewEngine\view;</span><br><span class="line"></span><br><span class="line">abstract class ResourceController extends AbstractAdminController</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 当前资源的模型类名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected string $model;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 当前返回的基础视图路径</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected string $path;</span><br><span class="line"></span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $items &#x3D; $this-&gt;getList();</span><br><span class="line">        return $this-&gt;template(&#39;index&#39;, compact(&#39;items&#39;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function edit()</span><br><span class="line">    &#123;</span><br><span class="line">        $item &#x3D; make($this-&gt;model)-&gt;find($this-&gt;request-&gt;input(&#39;id&#39;));</span><br><span class="line">        $initParams &#x3D; $this-&gt;initViewParams();</span><br><span class="line">        $action &#x3D; &#39;编辑&#39;;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;template(&#39;edit&#39;, array_merge(compact(&#39;item&#39;, &#39;action&#39;), $initParams));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function create()</span><br><span class="line">    &#123;</span><br><span class="line">        $initParams &#x3D; $this-&gt;initViewParams();</span><br><span class="line">        $action &#x3D; &#39;创建&#39;;</span><br><span class="line">        return $this-&gt;template(&#39;edit&#39;, array_merge(compact(&#39;action&#39;), $initParams));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function store()</span><br><span class="line">    &#123;</span><br><span class="line">        $res &#x3D; $this-&gt;checkEnableCreate();</span><br><span class="line">        if (!is_bool($res)) &#123;</span><br><span class="line">            return $res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;onStore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        $res &#x3D; $this-&gt;checkEnableCreate();</span><br><span class="line">        if (!is_bool($res)) &#123;</span><br><span class="line">            return $res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;onUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function delete()</span><br><span class="line">    &#123;</span><br><span class="line">        $res &#x3D; $this-&gt;checkEnableDelete();</span><br><span class="line">        if (!is_bool($res)) &#123;</span><br><span class="line">            return $res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;onDelete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * create和edit方法传递给模板的数据（例如更新文章时的分类数据）</span><br><span class="line">     * @return array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function initViewParams(): array</span><br><span class="line">    &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 返回HTML模板</span><br><span class="line">     * @param $filename</span><br><span class="line">     * @param array $params</span><br><span class="line">     * @return FactoryInterface|ViewInterface</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function template($filename, array $params &#x3D; [])</span><br><span class="line">    &#123;</span><br><span class="line">        return view(&#39;admin.&#39; . $this-&gt;path . &#39;.&#39; . $filename, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract function getList(): LengthAwarePaginatorInterface;</span><br><span class="line"></span><br><span class="line">    protected abstract function onStore(): ResponseInterface;</span><br><span class="line"></span><br><span class="line">    protected abstract function onUpdate(): ResponseInterface;</span><br><span class="line"></span><br><span class="line">    protected abstract function onDelete(): ResponseInterface;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在创建数据时的条件判断</span><br><span class="line">     * @return bool|ResponseInterface</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function checkEnableCreate(): bool|ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 判断是否允许更新数据</span><br><span class="line">     * @return bool|ResponseInterface</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function checkEnableUpdate(): bool|ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在删除数据之前判断是否允许</span><br><span class="line">     * @return bool|ResponseInterface</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function checkEnableDelete(): bool|ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示列表、创建数据、编辑数据的视图都是统一的，我们只需要将唯一不同的地方抽取出来即可，每个资源控制器都有一个 <code>Model</code> 模型类，以及对应的视图路径，如果想创建一个资源控制器，只要让子类继承此父类即可，并且这个资源控制器父类是根据生命周期来进行自动化操作的，比如创建一个用户数据，因为邮箱是用来当做登录凭证的，并且也不允许用户有同名，所以在创建数据之前应该进行判断是否允许创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected function checkEnableCreate(): bool|ResponseInterface</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类通过重写这个方法，如果返回的是布尔值真，则表示允许创建，如果返回的是响应，那么代表创建数据时遇到问题不能创建（名字、邮箱被其他用户占用的情况），则返回响应即可，用户管理资源控制器示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author FireRabbit</span><br><span class="line"> * @date 2023&#x2F;2&#x2F;14 23:04</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Controller\Admin;</span><br><span class="line"></span><br><span class="line">use App\Controller\ResourceController;</span><br><span class="line">use App\Middleware\Admin\AuthPermission;</span><br><span class="line">use App\Model\User;</span><br><span class="line">use App\Query\QueryConstant;</span><br><span class="line">use App\Query\QueryHandler;</span><br><span class="line">use Hyperf\HttpServer\Annotation\AutoController;</span><br><span class="line">use Hyperf\HttpServer\Annotation\Middleware;</span><br><span class="line">use Psr\Http\Message\ResponseInterface;</span><br><span class="line"></span><br><span class="line">#[AutoController(prefix: &#39;&#x2F;admin&#x2F;user&#39;)]</span><br><span class="line">#[Middleware(AuthPermission::class)]</span><br><span class="line">class UserController extends ResourceController</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;model &#x3D; User::class;</span><br><span class="line">        $this-&gt;path &#x3D; &#39;user&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function getList(): \Hyperf\Contract\LengthAwarePaginatorInterface</span><br><span class="line">    &#123;</span><br><span class="line">        $handler &#x3D; new QueryHandler([</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">            &#39;email&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">            &#39;register_ip&#39; &#x3D;&gt; QueryConstant::LIKE,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        return $handler-&gt;query($this-&gt;model)-&gt;paginate(10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function checkEnableCreate(): bool|\Psr\Http\Message\ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line">        $exists &#x3D; User::where([</span><br><span class="line">            &#39;email&#39; &#x3D;&gt; $params[&#39;email&#39;],</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; $params[&#39;name&#39;],</span><br><span class="line">        ])-&gt;first();</span><br><span class="line"></span><br><span class="line">        if ($exists) &#123;</span><br><span class="line">            $msg &#x3D; $exists-&gt;name &#x3D;&#x3D; $params[&#39;name&#39;] ? &#39;名称已存在&#39; : &#39;邮箱已存在&#39;;</span><br><span class="line">            return api_error($msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function onStore(): \Psr\Http\Message\ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line">        $data &#x3D; [];</span><br><span class="line"></span><br><span class="line">        $fields &#x3D; [&#39;name&#39;, &#39;email&#39;];</span><br><span class="line">        foreach ($fields as $field) &#123;</span><br><span class="line">            $data[$field] &#x3D; $params[$field];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data[&#39;created&#39;] &#x3D; time();</span><br><span class="line">        User::create($data);</span><br><span class="line"></span><br><span class="line">        return api_success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function checkEnableUpdate(): bool|ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;checkEnableCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function onUpdate(): ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line">        User::where(&#39;id&#39;, $params[&#39;id&#39;])-&gt;update($params);</span><br><span class="line"></span><br><span class="line">        return api_success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function onDelete(): ResponseInterface</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; $this-&gt;request-&gt;all();</span><br><span class="line">        User::where(&#39;id&#39;, $params[&#39;id&#39;])-&gt;delete();</span><br><span class="line"></span><br><span class="line">        return api_success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除和更新的原理也是一样，基于生命周期的理念实现这种资源控制器可以大大节省人工判断的流程，毕竟增删改查在后台的开发中大量存在，如果每个控制器都得手撸一遍那会是非常痛苦的事情，针对一些复杂功能的，也可以直接重写资源控制器的各种方法，但后台的功能无外乎就是对数据增删改查，上述控制器已经可以满足大多数需要了。</p><p>有的时候，我们不应该一味的撸业务代码，而应该在开发流程上多花些功夫，如果说撸业务代码是为了赶进度，那么优化开发流程就是提升效率，如果开发效率低下，倒不如优先花点时间优化开发流程，提升效率远比埋头苦干好得多，这就是后发先至。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下最新学到的东西</title>
      <link href="/2023/02/15/2023-news-1/"/>
      <url>/2023/02/15/2023-news-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原本只打算用一年去做游戏，结果硬是拖了三年，现在总算做出来了，最后还是变成自己一个人在做，真是世事无常大肠包小肠，感兴趣的可以看看实机演示：<a href="https://www.bilibili.com/video/BV1XT411f7Pw/">https://www.bilibili.com/video/BV1XT411f7Pw/</a></p><p>最近重拾了这个博客，升级了下 hexo 的版本，并且也更换了主题与游戏博客保持一致，又新购了一个域名 huotutu.com，准备搭起来做一个小窝，研究前沿技术的同时顺便可以加入付费功能嘿嘿嘿~</p><p>好了，直接进入正题。</p><h2 id="PHP-是最好的语言吗？"><a href="#PHP-是最好的语言吗？" class="headerlink" title="PHP 是最好的语言吗？"></a>PHP 是最好的语言吗？</h2><p>因为使用 Unity 开发游戏，因此接触了 C#，结果现在重新撸 PHP，发现很不习惯了，比如 PHP 是弱类型语言，这样在编写代码的时候经常会很不规范，传来的值是什么，返回的值是什么都不清楚，就跟开盲盒一样……现在最新的 PHP 已经开始重视这点了，为了更加规范，PHP 也必须要注重变量类型和返回值的声明了。</p><p>第二点，PHP 的变量类型比较少，没有 Dictionary（字典），这个类型在开发游戏的时候非常好用，虽然 PHP 可以用关联数值实现相同的效果，但因为上面的第一点，会出现很复杂的情况，比如在 C# 可以用字典这么保存变量，声明一个敌人的模型数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 敌人模型数据</span><br><span class="line">public class Format_Enemy</span><br><span class="line">&#123;</span><br><span class="line">    public string id;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 敌人的等级</span><br><span class="line">    public int level;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 敌人的模型</span><br><span class="line">    public string prefab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，当游戏载入时，读取本地 json 文件，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;&quot;id&quot;: &quot;goblin&quot;, &quot;level&quot;: 1, &quot;prefab&quot;: &quot;Goblin&quot;&#125;,</span><br><span class="line">    &#123;&quot;id&quot;: &quot;monkey&quot;, &quot;level&quot;: 3, &quot;prefab&quot;: &quot;Monkey&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>enemy.json 文件以数组形式保存 model 类型的变量，接着将敌人数据载入字典：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 声明一个字典用来存储敌人模型数据</span><br><span class="line">Dictionary&lt;string, Format_Enemy&gt; models &#x3D; new Dictionary&lt;string, Format_Enemy&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化</span><br><span class="line">public void InitLoad()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里是读取json文件的方法</span><br><span class="line">    var items &#x3D; ModelUtil.GetInstance().Load&lt;List&lt;Format_Enemy&gt;&gt;(&quot;enemy&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 循环将敌人id作为键名保存到字典</span><br><span class="line">    foreach (var item in items)</span><br><span class="line">    &#123;</span><br><span class="line">        models.Add(item.id, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Debug.Log(&quot;敌人模板数据载入完成&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的时候就非常简单了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var monkey &#x3D; $models[&quot;monkey&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出monkey敌人的等级</span><br><span class="line">Debug.Log(monkey.level);</span><br></pre></td></tr></table></figure><p>因为字典是以 <code>key-object</code> 的形式保存数据，通过 model[id] 的形式获得的是一个 object 对象，因而可以直接调用对象的属性，可是 PHP 就不能这么做了，如下为 PHP 的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$enemies &#x3D; [</span><br><span class="line">    &#39;goblin&#39; &#x3D;&gt; [&#39;id&#39; &#x3D;&gt; &#39;goblin&#39;, &#39;level&#39; &#x3D;&gt; 1, &#39;prefab&#39; &#x3D;&gt; &#39;goblin&#39;],</span><br><span class="line">    &#39;monkey&#39; &#x3D;&gt; [&#39;id&#39; &#x3D;&gt; &#39;money&#39;, &#39;level&#39; &#x3D;&gt; 1, &#39;prefab&#39; &#x3D;&gt; &#39;money&#39;],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$monkey &#x3D; $enemies[&#39;monkey&#39;];</span><br><span class="line">var_dump($monkey[&#39;level&#39;]);</span><br></pre></td></tr></table></figure><p>调用方法如出一辙，可是区别在于，PHP 是弱类型的语言，这里的所有数据都是“凭空”输入的，因此在编译器上面无法判断是否出错，而在 C# 有类的约束，可以直接用 <code>.</code> 调出属性，如果有写错的地方，编译器第一时间就会报错。</p><p>PHP 的数组没有任何约数，甚至可以直接凭空捏造一个 <code>key</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr[&#39;abc&#39;] &#x3D; 123;</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure><p>上面是一段没有任何问题的 PHP 代码，输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [&quot;abc&quot;]&#x3D;&gt;</span><br><span class="line">  int(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要任何声明可以凭空调用，这既是优点也是缺点，优点是写起来很方便，缺点是撸代码很不规范，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function updateGoods(array $goods)</span><br><span class="line">&#123;</span><br><span class="line">    if ($goods[&#39;status&#39;] &#x3D;&#x3D; true) &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $price &#x3D; $goods[&#39;price&#39;];</span><br><span class="line">    var_dump($price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的数组调用，通过传入商品数据，在方法内更新商品状态，因为传入的是一个数组（关联数值），数组的键名完全就是凭空写进去的，没有任何约数，不知道的人根本不懂得应该传入什么键名，这样的代码后期无法维护，而当一个方法所需要的参数较多时，应该封装成类作为参数传入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class  GoodsData</span><br><span class="line">&#123;</span><br><span class="line">    public bool $status;</span><br><span class="line">    public int $price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function updateGoods(GoodsData $goods)</span><br><span class="line">&#123;</span><br><span class="line">    if ($goods-&gt;status &#x3D;&#x3D; true) &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 处理逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $price &#x3D; $goods-&gt;price;</span><br><span class="line">    var_dump($price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能起到约束作用，没有约束就没有规范，没有规范就难以维护，C# 虽然写起来更舒服一点，但是开发网站还是得 PHP 效率高，光是等编译就能节省一大堆的时间了。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解是新时代编程的主流，PHP 8 也很快就跟上了，所谓的注解，其实就是通过「反射」获取到注释的内容，再通过解析获得想要的结果。先来说一下什么是反射，反射就是程序获取到自身属性的行为，这么说很难理解，看下面的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 这是一个类</span><br><span class="line"> *&#x2F;</span><br><span class="line">class  TestClass</span><br><span class="line">&#123;</span><br><span class="line">    private string $name;</span><br><span class="line"></span><br><span class="line">    public function test(string $a, int $b): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($a, $b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 PHP 里面的一个类，有一个 string 类型的私有属性 <code>name</code>，还有一个简单的方法，那么问题来了，我们怎么获取到注释信息？你没看错，我们现在要获取这个类的<strong>注释</strong>……正常来说，哪有这么奇怪的需求啊？注释不是写给码农看的吗？我们要拿注释做什么呢？关于这个问题，下文会说明，但是先解决眼前的问题——我们到底该如何通过代码拿到注释信息呢？</p><p>我们顶多也就知道如何拿到类的名称，比如 PHP 8 里面最新加入了一个获取类名称的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$obj &#x3D; new TestClass();</span><br><span class="line">var_dump(get_debug_type($obj));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出结果</span><br><span class="line">string(9) &quot;TestClass&quot;</span><br></pre></td></tr></table></figure><p>可是老师从来没教过我们怎么获取注释……正确答案是：通过<strong>反射机制（Reflection）</strong>。反射就是程序获取自身属性的一种行为，不仅是注释，类有哪些属性，哪些方法等等都能给你查的明明白白，通过反射机制，类文件的任何标点符号都不会放过，一切尽收眼底~是不是很兴♂奋？</p><p>首先是类的注释，也就是在类声明上方的注释部分，为了通过反射获取类的注释，需要实例化反射类 <code>ReflectionClass</code>（PHP 自带）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$reflection &#x3D; new ReflectionClass ( TestClass::class );</span><br><span class="line">$ref &#x3D; $reflection-&gt;getDocComment();</span><br><span class="line"></span><br><span class="line">var_dump($ref);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(26) &quot;&#x2F;**</span><br><span class="line"> * 这是一个类</span><br><span class="line"> *&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>接下来，我们可以来点更“变态”的，我想要拿到类的方法，想知道它的参数名称！</p><blockquote><p>全部都要看光光！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$reflection &#x3D; new ReflectionClass (TestClass::class);</span><br><span class="line">$res &#x3D; $reflection-&gt;getMethod(&#39;test&#39;);</span><br><span class="line">$params &#x3D; $res-&gt;getParameters();</span><br><span class="line">foreach ($params as $param) &#123;</span><br><span class="line">    var_dump($param-&gt;getType()-&gt;getName() . &#39;_&#39; . $param-&gt;getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(8) &quot;string_a&quot;</span><br><span class="line">string(5) &quot;int_b&quot;</span><br></pre></td></tr></table></figure><p>不仅是变量类型，形参的名字都拿到了，这就是反射的神奇之处，它可以获取到自身的属性，同时还可以改变属性的值，例如上面的 <code>name</code> 属性是私有变量，按照我们的常规思想是无法通过调用属性来改变值的，但是通过反射却可以，为了方便演示，增加了一个 <code>show</code> 方法用来输出 <code>name</code> 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TestClass</span><br><span class="line">&#123;</span><br><span class="line">    private string $name;</span><br><span class="line"></span><br><span class="line">    public function show(): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，通过反射来修改 <code>name</code> 的值并调用 <code>show</code> 方法查看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$obj &#x3D; new TestClass();</span><br><span class="line"></span><br><span class="line">$reflection &#x3D; new ReflectionClass ($obj);</span><br><span class="line">$res &#x3D; $reflection-&gt;getProperty(&#39;name&#39;);</span><br><span class="line">$res-&gt;setAccessible(true);</span><br><span class="line">$res-&gt;setValue($obj, &#39;abc&#39;);</span><br><span class="line">$obj-&gt;show();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出结果</span><br><span class="line">string(3) &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>神奇吧！！！在无法访问私有变量的情况下，竟然可以通过反射修改私有变量的值。<br>emmm……仔细一想，虽然反射很牛杯，但是我一个只会增删改查的咸鱼，在开发中有什么用呢？<br>完全就是多此一举嘛~</p><p>如果想要修改变量的值，为什么不能直接写个 <code>get-set</code> 方法呢？<br>确实如此，反射在我们日常工作的用途并不大，也不会有多少人接触。<br>反射机制可以获取变量类型、方法名称、参数、注释信息等等，这些在日常处理业务几乎没有作用。<br>但是它在设计框架、构筑开发流程中非常重要！<br>就好比我们日常基本接触不到设计模式，可设计模式却是框架的核心。<br>而现代的主流框架已经开始利用反射机制实现独特的开发方式，现在很热门的“依赖注入”就是通过反射实现的，比如下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service &#x3D; new TestService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestService</span><br><span class="line">&#123;</span><br><span class="line">    public function show(): void</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;hell world&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有一个 <code>TestService</code> 类，我们想在 <code>TestController</code> 调用，需要手动 <code>new</code> 的方式在构造方法进行赋值，但是在 Laravel 框架里，却可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct(TestService $service)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service &#x3D; $service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗？现在不需要手动 <code>new</code> 创建对象了，因为当你在构造方法里设置了一个参数，在 Laravel 框架的作用下就会自动实例化这个对象进行赋值，这就叫做依赖注入，正如其名，你需要的“依赖”会被框架“注入”。</p><p>你可能会说，这不就是少写了一段代码吗？<br>实际上，别看着小小的变化，却涉及到整个编程流程方式的改变。</p><p>一个基本控制器如下，内有一个 <code>index</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    private TestService $service;</span><br><span class="line"></span><br><span class="line">    public function __construct(TestService $service)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service &#x3D; $service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; $request-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法通过依赖注入获取到了 <code>Request</code> 对象，而在 Laravel 中，这个对象保存了请求的信息，我们可以直接从这个对象获取到所有请求参数，是不是很方便？这样做既让编程更加“优雅”，同时也减少了系统之间的耦合度。</p><p>依赖注入是框架帮你实现的，上面我介绍了反射的原理，你完全可以自己写一个依赖注入来试试~</p><blockquote><p>框架并不是简单的函数封装，而是提供一个编程的环境。</p></blockquote><p>依赖注入和控制反转，还有反射……一大堆新的名词，老实说我十分反感，如果不能把复杂的问题简单的讲述，那说明理解不到位，或者故意把简单的说成复杂的，搞得好像很高大上一样，说的就是金融行业……如果你是初次看到这些名词，不用担心，因为你现在已经学 <del>废</del> 会了。</p><blockquote><p>我不推荐你去搜这些专有名词啥意思，因为看完你会更懵逼——by 傻瓜式编程指南（兔兔著）</p></blockquote><p>现在你已经知道了，依赖注入就是框架帮你注♂入一些东西，比如你想要的类的对象，只要写在方法的形参上，框架就会帮你实例化，你直接调用就完事。请参考 N 年之前我写的火兔引擎（开发框架），我在设计框架的时候就已经明确了目标：编程的最高境界是“无码”。</p><p>换句话说，除非你是非常喜欢写代码的人（高情商），否则，框架会自动帮你处理很多琐碎的事情，因此你不需要写太多的代码。市面上的 PHP 框架多如牛毛，什么阿猫阿狗阿兔都想“自创框架”，比如<strong>大名鼎鼎的 Fire Rabbit Engine</strong>，就是阿兔本兔原创的框架。</p><p>学习一门新的框架要不少时间成本，要我说的话，对大部分人来说，框架只要选择开发起来“舒服”的就行了，大部分情况下都不需要注意性能问题，小公司注重的是开发效率，指不定过完年公司就倒闭了 233，我以前上班的时候就是一个“项目杀手”，做一个项目死一个，入职一年，弄死的项目少则三个，多则五个！</p><p>其实是因为老板自己都不知道想干嘛就胡乱尝试，今天刚废了一个项目，第二天又看上新的东西，脑袋一热一拍屁股就决定要开发新项目了，很荣幸……当时的技术主管全丢给我了。最后，我离职了，原因是给的钱不多吗？不是，那个时候我才刚刚毕业，并不看重钱，而是每个项目都是我在负责，就好像辛辛苦苦养大的孩子突然夭折了……说多了都是泪。</p><p>所以，当一个项目立项的时候，如果负责人非得选用性能最好，开发舒适度最烂的时候，应该想想，这是不是一种傲慢，自信的认为这个项目一定能成功呢？小公司根本不在乎性能，只要快速构建项目，快速上线才是王道！尤其是老板催你进度的时候，那跟催命似的，到时候后悔就来不及了。</p><p>回归主题，接下来开始介绍什么是“注解”。注解其实就是注释的一种，原本注释是给人看的。现在，一些走在时尚前端的码农研究出了新的花活——让程序也能看注释。</p><p>例如 Java 里面有这种代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Deprecated</span><br><span class="line">@SuppressWarnings</span><br></pre></td></tr></table></figure><p>下面是我网上 copy 来的冒泡排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class BubbleSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span><br><span class="line">            boolean flag &#x3D; true;</span><br><span class="line"></span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    int tmp &#x3D; arr[j];</span><br><span class="line">                    arr[j] &#x3D; arr[j + 1];</span><br><span class="line">                    arr[j + 1] &#x3D; tmp;</span><br><span class="line"></span><br><span class="line">                    flag &#x3D; false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在方法上方加了一个 <code>@Override</code>，这个就是注解，它的作用是检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</p><p>这股时尚的潮流也 <del>内</del> 卷到 PHP 那边去了，于是，主打注解开发为亮点的 PHP 框架陆续出现，前有 Swoft，后有 Hyperf，Hyperf 的作者好像之前就是 Swoft 里的，后来单飞了，当然也有很多吃瓜事件，咱也不了解，至于为什么选择 Hyperf 而不是 Swoft，主要还是因为我个人对 Laravel 的偏爱，Hyperf 的代码几乎跟 Laravel 完全相似，相当于 Swoole 版的 Laravel，关于吃瓜问题就不多展开，技术本身无好坏，唯有人。本人也不了解真相就不多说了，看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Hyperf\HttpServer\Contract\RequestInterface;</span><br><span class="line">use Hyperf\HttpServer\Annotation\AutoController;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @AutoController()</span><br><span class="line"> *&#x2F;</span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Hyperf 会自动为此方法生成一个 &#x2F;index&#x2F;index 的路由，允许通过 GET 或 POST 方式请求</span><br><span class="line">    public function index(RequestInterface $request)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 从请求中获得 id 参数</span><br><span class="line">        $id &#x3D; $request-&gt;input(&#39;id&#39;, 1);</span><br><span class="line">        return (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过写注释的方式来定义路由，是不是很新鲜？除此之外，注解也可以实现上面提到的依赖注入，比如我们需要一个类的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @AutoController()</span><br><span class="line"> *&#x2F;</span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @Inject()</span><br><span class="line">     * @var UserService</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private $userService;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; &#x2F;index&#x2F;info</span><br><span class="line">    public function info(RequestInterface $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $id &#x3D; $request-&gt;input(&#39;id&#39;, 1);</span><br><span class="line">        return $this-&gt;userService-&gt;getInfoById((int)$id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在只要加入一个 <code>Inject</code> 注解，并且用 <code>var</code> 来声明变量的类型，框架就会自动为你注♂入这个类的实例，在 PHP 8 以前，注解都是非官方的，只是民间通过反射机制实现了 JAVA 类似的注解，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param Foo $argument</span><br><span class="line"> * @see https:&#x2F;xxxxxxxx&#x2F;xxxx&#x2F;xxx.html</span><br><span class="line"> *&#x2F;    </span><br><span class="line"> function dummy($Foo) &#123;&#125;</span><br></pre></td></tr></table></figure><p>而且这种注解一般没有什么实际的意义，就是一种人为的规定，比如 <code>@param</code> 我们视为一个参数，当然你也可以写成 <code>@canshu</code>，这都是可以的，因为这就是一个注释而已，注释在程序中不会被认为是代码，你怎么写都可以。</p><p>然后自己再写一个解析注释的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ref &#x3D; new ReflectionFunction(&quot;dummy&quot;);</span><br><span class="line">$doc &#x3D; $ref-&gt;getDocComment();</span><br><span class="line">$see &#x3D; substr($doc, strpos($doc, &quot;@see&quot;) + strlen(&quot;@see &quot;));</span><br></pre></td></tr></table></figure><p>上面是 PHP 最早的民间注解实现原理，而第一次尝试用注解作为开发的 Hyperf 框架很快就流行起来，习惯了这种开发方式会变得很愉♂悦，直到 PHP 8 开始，官方实现了 PHP 的注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#[Params(&quot;Foo&quot;, &quot;argument&quot;)]</span><br><span class="line">#[See(&quot;https:&#x2F;&#x2F;xxxxxxxx&#x2F;xxxx&#x2F;xxx.html&quot;)]</span><br><span class="line">function dummy($argument) &#123;&#125;</span><br></pre></td></tr></table></figure><p>简单地说：<br>注释（comment）是给人看的，程序看不懂；<br>注解（annotation）既是给人看的，程序也看得懂。</p><p>我们可以通过注解实现依赖注入等许多功能，人有多大胆，地有多大产，Hyperf 的做法属实是一种大胆的尝试了，无论是路由、控制器、中间件等等，都可以用注解的方式书写。</p><p>以前我最喜欢的是 Laravel 框架，而现在 Hyperf 是基于 swoole 的框架，而且框架的设计者应该也是 Laravel 的重度爱好者，从 Laravel 转 Hyperf 几乎没有任何学习成本，最新的火兔小窝（huotutu.com）将使用 v3.0 版本开发~</p><p>好了，以上就是关于注解的说明，注解（Annotation）并不属于程序的代码，而是一种开发方式，就是通过特殊的格式定义注释，好让系统看得懂，因为注解的存在，注释也变成了一种开发方式，经典例子就是 Hyperf 框架。</p><p>框架并不是简单的函数封装，选择什么框架开发项目就决定了你的开发方式，开发方式是由框架设计者决定的，Hyperf 框架也不过是 swoole 框架的一个可选方案，只是因为我喜欢 Laravel 的开发方式，所以选择它。</p><p>可以缩减写代码工作量的框架都是好框架，现在 ChatGPT 火爆，甚至还能帮你写代码，以后说不定还会被 AI 取代。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>双叒叕是一个令人头痛的新名词！<br>先让我们来看摊煎饼的数学问题，假设一个锅每次只能摊两个煎饼，煎饼要求两面摊到金黄，单面摊到金黄需要 1 分钟，现在有三张饼要摊，请问把三张饼摊到两面金黄需要多久？</p><p>正常人的思维：先弄 A 和 B 两张饼，两面都金黄一共需要 2 分钟，接着再下 C，两面金黄又需要 2 分钟，总计需要 4 分钟。</p><p>机智的人可能发现问题了，A 和 B 在锅里的时候，C 是空闲的，当 A 和 B 摊熟了，C 一个饼占了整个锅（一个锅是可以放两张饼的），那是不是有点浪费资源了？于是，聪明的人就有了新的方法：</p><p>第一分钟，A 和 B 下锅，把一面摊到金黄，接着把 B 拿出来放到一旁，把 C 下锅；<br>第二分钟，A 两面全熟拿起来放到盘子，再把 B 翻过来继续摊，接着把刚才摊了一面的 B 下锅；<br>第三分钟，BC 两面全熟，收锅关火！</p><p>同样的锅，同样是三张饼，用这种方法竟然节约了 1 分钟！这是因为锅一直都是保持两张饼，而第一种方法，锅会出现空闲状态，原本能同时摊两张饼，却只摊了一张，这就是浪费时间的因素。</p><p>所谓的协程就是这种原理，最大化的利用程序的效率，锅就是服务器，为了把服务器的性能榨干就不能让它闲着，要永远让它“干活”。要知道，程序的执行速度是不同的，有的程序执行起来很慢（如读取 Excel），有的很快（给变量赋值），我们都知道程序是从上至下执行的，前面的代码没执行完毕，后面的代码就会一直处于等待状态，这就是浪费“资源”，就像上面的锅一样，原本可以同时摊两张饼，可一张饼占了整个锅，效率自然就低了。</p><p>例如 PHP 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;hello&#39;;</span><br><span class="line">echo &#39;world&#39;;</span><br></pre></td></tr></table></figure><p>这段代码为什么永远都是按顺序输出 <code>hello</code> 和 <code>world</code> 呢？正是因为程序是自上而下执行的，而且这两段代码执行速度很快，所以瞬间就输出完毕了，接着我们再模拟一下，代码执行慢的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function loadFile()</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;hello&#39;;</span><br><span class="line">    sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayWorld()</span><br><span class="line">&#123;</span><br><span class="line">    echo &#39;world&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadFile();</span><br><span class="line">sayWorld();</span><br></pre></td></tr></table></figure><p>这段代码同样是输出两个单词，但是会发现因为 <code>sleep</code> 的存在，第一个 <code>hello</code> 输出完毕之后等了一秒才输出 <code>world</code>，两个单词的输出顺序依然没变，这是因为程序无论如何都是从上往下执行的，而这种「等待」完全就是不必要的，两个函数没有任何关联，为什么不能先让下面的代码进行输出呢？</p><p>就好比医院挂号，按照 1、2、3、4、5 顺序排列，1 号第一个进入窗口办理，很快就办完了，接下来轮到 2 号，可他身份证忘记带了，就打电话叫家人送过来，那么此时问题来了……现在确实是轮到 2 号办理手续，但是等他家人送身份证过来要半小时，后面的 3~5 号以及办理挂号的工作人员就这么干等着吗？那是不是可以通融一下，在 2 号的身份证送来之前，先让后面的人办理？等身份证到了，再让 2 号继续办理也不迟呀！</p><p>正常的程序可不会这么“通情达理”，程序是一定严格按照从上至下的顺序执行的，2 号蛮横的说：现在轮到我挂号，我没办完，凭什么让你们先办啊？所以此时必须等到 2 号身份证送来，后面的 3~5 号才能继续办理。</p><p>谁排到队谁就拥有“挂号权”，轮到 2 号挂号了，医院又没规定挂号的最大时间，那么自然 2 号有权等到自己身份证送来，后面的人就是得干等着没办法，虽然不通人情，但这也无可奈何，因为程序可不知道你下面的代码是不是跟上面的有关，万一执行顺序乱了就报错啦~</p><p>协程就是这个问题的解决方案：让你决定程序的控制权。<br>程序不知道该不该先让后面的代码执行，可是你知道呀！那交给你来控制不就完事了吗？</p><p>先来说一个 PHP 的关键词 <code>yield</code>，这个关键词并不是协程，而是用来生成迭代器（又叫生成器）的，迭代器就是一个能够被循环的对象，如果理解不了就直接认为是一个数组就好，例如下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$items &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不只是数组，只要实现了迭代器接口（Iterator）的类都可以被 <code>foreach</code> 循环，下面尝试自定义一个迭代器（注意，PHP 8.1 不支持）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Rabbit implements Iterator</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里我定义了一个 int 类型的指数物，用来标记当前进度，类似数组的下标</span><br><span class="line">    private int $pos;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当前返回的值</span><br><span class="line">    public function current()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将指数物向下移动一位，在foreach中每次调用都会前进一次</span><br><span class="line">    public function next()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 迭代器的key（类似关联数值的键名）</span><br><span class="line">    public function key()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断是否可以继续向下执行，如果数据已经没了，就返回false，这里小于10是随便写的，让它打印0~10个数</span><br><span class="line">    public function valid()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;pos &lt;&#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 重置指数物，该方法在迭代器执行一次就无法调用，否则报错</span><br><span class="line">    public function rewind()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pos &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rabbit &#x3D; new Rabbit();</span><br><span class="line">foreach ($rabbit as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我定义了一个迭代器 <code>Rabbit</code>，通过 <code>foreach</code> 循环依次输出 0~10。任何类只要实现了 <code>Iterator</code> 迭代器接口就可以被 <code>foreach</code> 循环输出，接着我们的主角 <code>yield</code> 关键词要出现了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function rabbit()</span><br><span class="line">&#123;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt;&#x3D; 10; $i++) &#123;</span><br><span class="line">        yield $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$items &#x3D; rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的结果也是依次输出 0~10，这就是 <code>yield</code> 关键词的作用，它看起来像是 <code>return</code>，但又不全是，因为 <code>return</code> 一旦返回函数就会结束，而 <code>yield</code> 返回了数字，但却没有退出函数，不仅如此，<code>yield</code> 的返回值是一个可以被循环体调用的迭代器。</p><p>接着再看有意思的一组数据，我们稍加修改代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function rabbit()</span><br><span class="line">&#123;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt;&#x3D; 10; $i++) &#123;</span><br><span class="line">        var_dump(&#39;a&#39; . $i);</span><br><span class="line">        yield $i;</span><br><span class="line">        var_dump(&#39;b&#39; . $i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$items &#x3D; rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>yield</code> 关键词上面和下面分别进行输出，我们再运行一次查看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">int(0)</span><br><span class="line">string(2) &quot;b0&quot;</span><br><span class="line">string(2) &quot;a1&quot;</span><br><span class="line">int(1)</span><br><span class="line">string(2) &quot;b1&quot;</span><br><span class="line">string(2) &quot;a2&quot;</span><br><span class="line">int(2)</span><br><span class="line">string(2) &quot;b2&quot;</span><br><span class="line">string(2) &quot;a3&quot;</span><br><span class="line">int(3)</span><br><span class="line">string(2) &quot;b3&quot;</span><br><span class="line">string(2) &quot;a4&quot;</span><br><span class="line">int(4)</span><br><span class="line">string(2) &quot;b4&quot;</span><br><span class="line">string(2) &quot;a5&quot;</span><br><span class="line">int(5)</span><br><span class="line">string(2) &quot;b5&quot;</span><br><span class="line">string(2) &quot;a6&quot;</span><br><span class="line">int(6)</span><br><span class="line">string(2) &quot;b6&quot;</span><br><span class="line">string(2) &quot;a7&quot;</span><br><span class="line">int(7)</span><br><span class="line">string(2) &quot;b7&quot;</span><br><span class="line">string(2) &quot;a8&quot;</span><br><span class="line">int(8)</span><br><span class="line">string(2) &quot;b8&quot;</span><br><span class="line">string(2) &quot;a9&quot;</span><br><span class="line">int(9)</span><br><span class="line">string(2) &quot;b9&quot;</span><br><span class="line">string(3) &quot;a10&quot;</span><br><span class="line">int(10)</span><br><span class="line">string(3) &quot;b10&quot;</span><br></pre></td></tr></table></figure><p>这里发现了奇怪的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">int(0)</span><br><span class="line">string(2) &quot;b0&quot;</span><br></pre></td></tr></table></figure><p>我们的循环体是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ($i &#x3D; 0; $i &lt;&#x3D; 10; $i++) &#123;</span><br><span class="line">    var_dump(&#39;a&#39; . $i);</span><br><span class="line">    yield $i;</span><br><span class="line">    var_dump(&#39;b&#39; . $i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照程序从上往下执行的观点，难道不是应该输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(2) &quot;a0&quot;</span><br><span class="line">string(2) &quot;b0&quot;</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure><p>这样才对吗？可为什么却先跳到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$items &#x3D; rabbit();</span><br><span class="line">foreach ($items as $item) &#123;</span><br><span class="line">    var_dump($item); &#x2F;&#x2F; 这个地方输出 int(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，程序是先返回了 0 这个数，接着再执行下面的 <code>var_dump</code> 输出 b，因为 <code>yield</code> 的存在导致程序的执行顺序发生了变化，接着继续演示 <code>yield</code> 是如何手动控制执行顺序的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function action_1()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;action_1_1&#39;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#39;action_1_2&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function action_2()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;action_2_1&#39;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#39;action_2_2&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$action_1 &#x3D; action_1();</span><br><span class="line">$action_2 &#x3D; action_1();</span><br><span class="line"></span><br><span class="line">$action_1-&gt;current();</span><br><span class="line">$action_2-&gt;current();</span><br><span class="line"></span><br><span class="line">var_dump(&#39;ok&#39;);</span><br><span class="line"></span><br><span class="line">$action_1-&gt;next();</span><br><span class="line">$action_2-&gt;next();</span><br></pre></td></tr></table></figure><p>上面有两个函数 <code>action_1</code> 和 <code>action_2</code>，通常情况下，如果没有 <code>yield</code> 关键词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&#39;action_1_1&#39;);</span><br><span class="line">var_dump(&#39;action_1_2&#39;);</span><br></pre></td></tr></table></figure><p>这段代码会一股脑的全部输出，但是因为有了 <code>yield</code> 关键词，我们就可以手动调用 <code>next</code> 方法让它往下执行，如果你不调用 <code>next</code>，那它就会在 <code>yield</code> 处返回，不再往下执行。</p><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string(10) &quot;action_1_1&quot;</span><br><span class="line">string(10) &quot;action_1_1&quot;</span><br><span class="line">string(2) &quot;ok&quot;</span><br><span class="line">string(10) &quot;action_1_2&quot;</span><br><span class="line">string(10) &quot;action_1_2&quot;</span><br></pre></td></tr></table></figure><p>可以发现，因为 <code>yield</code> 返回的是一个生成器，倘若我们执行了 <code>next</code> 方法，它才会继续向下执行，否则，它就会“卡”在 <code>yield</code> 的地方，这就是我们可以手动调控程序执行顺序的原因了。</p><p>换句话说，<code>yield</code> 就跟断点一样，我们想让程序在哪停下，就在哪用 <code>yield</code> 返回就行了，但是与 <code>return</code> 不同的是 <code>yield</code> 返回的是控制权，并不是让程序中断，这是利用了 <code>yield</code> 返回的是一个迭代器的原理实现的。</p><p>协程与多线程很容易混淆，我们会误以为是不是用 <code>yield</code> 改变了控制权，程序就可以不会再阻塞执行了呢？如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;1&#39;);</span><br><span class="line">    sleep(3);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#39;2&#39;);</span><br><span class="line">    yield;</span><br><span class="line">    var_dump(&#39;3&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; test();</span><br><span class="line">$test-&gt;current();</span><br><span class="line">$test-&gt;next();</span><br><span class="line">$test-&gt;next();</span><br></pre></td></tr></table></figure><p>结果我们发现，在输出第一个“1”的时候，程序还是卡了 3 秒才继续输出，换句话说，这个代码依然是同步执行的，上面的代码如果不执行完毕，还是会卡在执行过程，那这个 <code>yield</code> 到底有什么用呢？它还不是卡住了吗？</p><p>回到摊煎饼的问题，现在只有一口锅，一口锅最多每次只能摊两个煎饼，那么为了提高效率，可以按照上面三分钟的摊法，还有一种方法——再多加一口锅，两口锅就可以同时摊 4 个煎饼了！</p><p>再加一口锅即代表多线程，「协程」不是多线程，这两者很容易混淆，多线程是再切出一条线程处理程序，而「协程」还是在那个线程，只是我们通过任务调度的方式提高执行效率，还是那条线程，还是原来的味道！</p><blockquote><p>多线程是利用 CPU 多线程处理任务的优势，而协程是将单个线程的性能压榨到极致。</p></blockquote><p>那么这个 <code>yield</code> 到底哪里神奇了啊？<br>它本身就是在一个线程里面执行的，它的作用只是对程序进行“调度”而已，并不能解决程序阻塞问题。</p><p>正如上面的例子，多线程是加了一口锅，而协程是合理的利用这口锅，使它保持着最高效率——同时摊两个饼！<br>用多线程可以解决效率低下的问题，那为什么还要协程呢？</p><p>线程本身就是一种资源，协程就是最大化利用这条线程的性能，一口锅明明可以同时摊两个煎饼，为什么非要再开一个新锅呢？诚然，摊一个煎饼两面金黄要 2 分钟，摊三个煎饼，只要你拿出三口锅，时间就缩短到了 2 分钟了，岂不是比 3 分钟还快？那你家里可能有矿才能这么霍霍……</p><p>这就是痛点所在了：协程就是为了解决资源利不充分的问题。</p><p>利用协程的特性可以让锅一直都在摊饼，能同时摊两张，那就一定同时摊两张，一刻都不许闲着，像极了煤老板压榨矿工。为了实现这个“监工”需要一个名为“调度器”的东西，调度器的作用就是依次执行所有协程任务，直到所有协程任务结束了，调度器才结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function create_task($max)</span><br><span class="line">&#123;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $max; $i++) &#123;</span><br><span class="line">        yield $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$task1 &#x3D; create_task(3);</span><br><span class="line">$task2 &#x3D; create_task(5);</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    var_dump($task1-&gt;current());</span><br><span class="line">    var_dump($task2-&gt;current());</span><br><span class="line"></span><br><span class="line">    $task1-&gt;next();</span><br><span class="line">    $task2-&gt;next();</span><br><span class="line">&#125; while ($task1-&gt;valid() || $task2-&gt;valid());</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>create_task</code> 创建了两个数值不等的任务，所谓调度器其实就是 <code>do-while</code> 循环体，<code>valid</code> 方法判断这个任务是否结束，如果两个任务全部结束才跳出这个循环（调度器），但是因为我们给这两个任务不同的最大值，导致两个任务执行的次数不一样，第一个任务只返回 3 个值，第二个任务却返回了 5 个值，最后输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int(0)</span><br><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">int(1)</span><br><span class="line">int(2)</span><br><span class="line">int(2)</span><br><span class="line">NULL</span><br><span class="line">int(3)</span><br><span class="line">NULL</span><br><span class="line">int(4)</span><br></pre></td></tr></table></figure><p>前面三个数字，两个任务输出一模一样的结果，但是第一个任务从第四个数字开始就返回 <code>Null</code> 了，这是因为这个任务已经结束了，所以不再有新的返回值。同理，如果再添加任务三、任务四……那么这个调度器依然是依次执行所有任务，直到任务全部结束才跳出循环。</p><p>这就是协程的全部概念了……也就是说，协程是通过调度器实现依次执行全部的任务，这些任务绝对是不能阻塞进程的！否则任务阻塞了，后面的也得等在那边，所以如果使用协程，一定不能使用阻塞的代码，否则跟没用一样，协程的作用就是：把所有的煎饼都摊在锅里，这个锅能同时摊多少个煎饼，它就往里面塞多少个煎饼，而且雨露均沾，每个煎饼都只摊 1 秒，然后以迅雷不及掩耳之势换下一个煎饼，就这样，每个煎饼每次只摊 1 秒，直到全部的煎饼两面金黄为止。</p><blockquote><p>上面的 1 秒只是一个比喻，实际上程序的运行速度比这个快多了。</p></blockquote><p>协程的作用是控制程序的执行权限，通过权限转移的方式结合死循环（调度器）让每个任务每次循环都运行一次，直到所有任务结束才退出循环。</p><blockquote><p>上面的调度器也是举个栗子罢了，实际的调度器会优化性能，比方说上面 3 次循环结束了，后面全部都是 NULL，实际上应该把已经完成的任务从循环体去掉，避免重复执行节约性能，这里就不对调度器详细展开了。</p></blockquote><p>关于协程，我也是搞得很懵逼，最开始以为它跟多线程异步处理一样，就是把一些费时的任务切出去，然后执行下一段代码，其实并不是，如果两者混淆就理解不了协程了，协程……并不是异步处理，它也不是什么程序代码，它只是一种控制权转移。</p><p><strong>协程的调度器其实是利用协程的控制权转移让所有的代码放到一块轮番切换执行，直到全部的代码执行完成</strong>。它本身就是一段阻塞程序（用死循环来实现调度器，任务不全部结束就跳不出这个死循环），它只是在循环执行这些任务罢了。</p><p>协程本身并不是为你提供异步环境，它就是一个执行权限的转移而已，而它之所以能够异步执行……是因为你写的代码是异步的啊，不是协程的调度器是异步的，你写了异步代码，它就异步执行，你写的不是异步代码，它就会阻塞，只要把这个搞清楚就不会懵逼了。</p><p><strong>就跟打扑克一样，发牌的人每次都给在座的各位发一张扑克，直到所有玩家手牌满了才会停下，这就是协程的调度器，每次都只执行一次任务，然后遇到 yield 就立即切换到下一个任务，直到所有任务全部完成，这里的 yield 实现协程是 PHP 系统自带的，如果想要通过第三方实现，可以安装 swoole 扩展。</strong></p><h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><p>关于协程就抛到一边吧，因为理解起来很不容易，写完协程现在都凌晨一点半了，接下来看轻松一点的 AOP 编程，这也是现在很热门的编程思想，它就跟 OOP（面向对象编程）一样是现在广大码农喜欢的新理念。</p><p>切面（Aspect）是一个新的名词，理解起来非常简单，火腿肠吃过吧？现在我们有一根很♂粗的火腿肠，用刀从中间切开，然后塞一粒玉米进去，现在它就变成玉米热狗肠了！</p><blockquote><p>真特喵的黑心，一粒玉米也敢叫玉米肠？</p></blockquote><p>好了，结束，这就是面向切面编程。<br>用刀切开火腿肠，一刀两断，火腿肠赤果果的肉体的展示在你的面前，形成了两个完美的 Aspect（切面）。<br>面向切面编程，就是向这个切开的面塞入一粒玉米。</p><p>我们可以从任何地方切开火腿肠，在任何切面塞入玉米，甚至辣椒等等。<br>面向切面编程可以理解成「嵌入式」代码，你写一段代码，然后嵌入到任何其他代码里面。</p><blockquote><p>PHP 里面有一个 trait 可以复用代码，但这并不是切面，这只是复用代码，切面编程一定存在『拦截』。</p></blockquote><p>其实你早就用过 AOP 编程了，举个栗子就是 Laravel 的中间件，中间件会「拦截」请求，满足条件才进入下一步操作，如果不满足条件，那就 403 Forbidden，或者其他什么，总之，你通过中间件拦截请求，判断是否满足条件的这种行为就已经是面向切面编程了。</p><p>第二个栗子，如果你是前端开发，那么应该用过 Vue 框架，生命周期函数应该知道，就是那个什么 <code>beforeCreate</code>、<code>created</code> 之类的东西，如果你是 Unity 开发，那么也知道 <code>Monobehaviour</code> 也有生命周期函数，如 <code>Awake</code>、<code>Start</code> 等等，生命周期函数就是 AOP 的理念。</p><p>AOP 编程的核心理念就是「拦截请求」，通俗的说就是 “当 xxx 时，做 xxx”，这就是 AOP 编程的核心思想了，如下面一个更新用户积分的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class  UserController</span><br><span class="line">&#123;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; request()-&gt;all();</span><br><span class="line">        $model &#x3D; User::find($params[&#39;id&#39;]);</span><br><span class="line">        $model-&gt;update([&#39;score&#39; &#x3D;&gt; $params[&#39;score&#39;]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该控制器提供了一个更新用户积分的方法，只要传来 <code>id</code> 和 <code>score</code> 分数参数就能找到对应的用户并且更新积分，但这样有不少问题，首先没有任何权限验证，岂不是人人都可以利用这个接口来改自己的分数？第二个，积分流水没有任何记录，万一以后跟用户产生纠纷怎么办？为了解决这个问题（先别想中间件的事情），我们需要进行如下两项改动：</p><p>1、对权限进行验证，只有管理员才能更新用户数据<br>2、对积分流水进行记录</p><p>首先假设有一个 <code>checkAdmin</code> 方法，用来判断是否是管理员，该方法只需要传入一个 <code>jwt-token</code> 参数，如果是管理员就返回 true，否则返回 false，还有一个方法 <code>saveLog</code> 用来保存积分流水：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class  UserController</span><br><span class="line">&#123;</span><br><span class="line">    public function update()</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; request()-&gt;all();</span><br><span class="line"></span><br><span class="line">        if (!$this-&gt;checkAdmin($params[&#39;token&#39;])) &#123;</span><br><span class="line">            return response()-&gt;json([&#39;message&#39; &#x3D;&gt; &#39;没有修改权限&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $model &#x3D; User::find($params[&#39;id&#39;]);</span><br><span class="line">        $model-&gt;update([&#39;score&#39; &#x3D;&gt; $params[&#39;score&#39;]]);</span><br><span class="line"></span><br><span class="line">        saveLog($params[&#39;id&#39;], $model-&gt;score);</span><br><span class="line"></span><br><span class="line">        return response()-&gt;json([&#39;message&#39; &#x3D;&gt; &#39;修改成功&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function saveLog($userID, $score)</span><br><span class="line">    &#123;</span><br><span class="line">        ScoreLog::create([&#39;user_id&#39; &#x3D;&gt; $userID, &#39;score&#39; &#x3D;&gt; $score]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function checkAdmin($jwtToken)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 此处省略逻辑</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在看起来安全多了，接下来，如果有一个修改用户所属用户组的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function changeGroup()</span><br><span class="line">&#123;</span><br><span class="line">    $params &#x3D; request()-&gt;all();</span><br><span class="line"></span><br><span class="line">    if (!$this-&gt;checkAdmin($params[&#39;token&#39;])) &#123;</span><br><span class="line">        return response()-&gt;json([&#39;message&#39; &#x3D;&gt; &#39;没有修改权限&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...逻辑代码省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又得判断一次权限……很是繁琐，现在毫无疑问你会说出用中间件消灭这些重复的代码。没错，中间件处理权限验证是非常方便的，所有需要验证权限的请求先经过中间件，通过中间件过滤不符合条件的请求。</p><p>中间件就是一个嵌入式的代码，当请求进来的时候，为什么不会直接进入到控制器呢？因为 Laravel 框架对请求进行了拦截，只有通过你设定的中间件请求才会进入 Controller，否则就过滤掉，如果用生命周期来形容，就是 <code>before</code> 阶段就进行了处理，请求还没进入 Controller 就先被过滤掉了！</p><blockquote><p>Laravel 的中间件如何实现拦截请求可以看我开发 FireRabbitEngine 的相关文章</p></blockquote><p>中间件拦截不符合要求的请求，这就是通过切面“嵌入”一段代码，只要封装一个拦截器就可以实现这个功能了，但实际上拦截请求有很多种方式，接下来以 Hyperf 为例，演示如何通过切面的方式执行设计好的代码，假设有一个控制器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#[AutoController(prefix: &#39;&#x2F;test&#39;)]</span><br><span class="line">class TestController</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;test&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们要在这个控制器中嵌入其他代码，只需要声明一个切面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#[Aspect]</span><br><span class="line">class TestAspect extends AbstractAspect</span><br><span class="line">&#123;</span><br><span class="line">    public array $classes &#x3D; [</span><br><span class="line">        &#39;App\Controller\Front\TestController::test&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function process(ProceedingJoinPoint $proceedingJoinPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;insert&#39;);</span><br><span class="line">        return $proceedingJoinPoint-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>classes</code> 数组内加入想要插入的控制器方法，在 <code>process</code> 方法里面写入想要插入的代码，这段代码会在访问 <code>/test</code> 路由的时候一并被执行，注意，这里一定要返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $proceedingJoinPoint-&gt;process();</span><br></pre></td></tr></table></figure><p>这段代码是返回原控制器的处理结果，它跟 Laravel 的中间件几乎一模一样，如果你嵌入了多个切面，那么必须要全部返回，只要有一个没有返回程序就不会继续执行。</p><p>Hyperf 是以注解的方式开发的，我们还可以用注解的方式插入切面，声明一个注解，该注解还带有一个参数，参数在后面可以获取到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">namespace App\Annotation;</span><br><span class="line"></span><br><span class="line">use Hyperf\Di\Annotation\AbstractAnnotation;</span><br><span class="line"></span><br><span class="line">#[\Attribute] class TestAnnotation extends AbstractAnnotation</span><br><span class="line">&#123;</span><br><span class="line">    public string $val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改切面，把 classes 注释掉，改用注解的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class TestAspect extends AbstractAspect</span><br><span class="line">&#123;</span><br><span class="line">    public array $classes &#x3D; [</span><br><span class="line">&#x2F;&#x2F;        &#39;App\Controller\Front\TestController::test&#39;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public array $annotations &#x3D; [</span><br><span class="line">        TestAnnotation::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function process(ProceedingJoinPoint $proceedingJoinPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里拿到注解传来的参数</span><br><span class="line">        $val &#x3D; $proceedingJoinPoint-&gt;getAnnotationMetadata()-&gt;method[TestAnnotation::class];</span><br><span class="line">        var_dump($val-&gt;val);</span><br><span class="line"></span><br><span class="line">        return $proceedingJoinPoint-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着返回控制器，在想要嵌入的地方插入注解即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#[TestAnnotation(val: &#39;kkk&#39;)]</span><br><span class="line">public function test()</span><br><span class="line">&#123;</span><br><span class="line">    $res &#x3D; &#39;test-value&#39;;</span><br><span class="line">    var_dump(&#39;controller&#39;);</span><br><span class="line"></span><br><span class="line">    return $res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了，在切面里也可以拿到 <code>val</code> 的值。</p><p>关于切面有几个注意的地方，<code>process</code> 方法只会执行一次，所以不用担心如果有多个切面会重复执行的问题，放心大胆的 <code>return</code> 即可，第二点，classes 和注解的方式只要写一个即可，我个人比较偏向于用注解的方法，第三，被切入的地方，可以通过 <code>ProceedingJoinPoint $proceedingJoinPoint</code> 变量获取其他数据，比如方法的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; $proceedingJoinPoint-&gt;getArguments();</span><br><span class="line">var_dump($params);</span><br></pre></td></tr></table></figure><p>那么 AOP 到底有什么用呢？它就是一种编程理念而已，正如最开始说的那样，这只是决定了你开发方式，AOP 可以帮你节省很多重复的劳动，节约时间就是节约生命~中间件就是最好的例子，除此之外，一些数据库的更新操作，记录日志操作也可以用面向切面编程实现，因为这些都是重复性的劳动，全部交给框架去办才是正解。</p><p>除此之外，上面的代码几乎没有任何耦合，从而变得十分简洁优雅~</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道（Pipeline）就是因为像水管一样，从水管的这头输入一滴水，经过管道拐来拐去，最后流到你家里，这个过程呢，这滴水可能与其他管道流进来的水混合在一起，你最后得到的这滴水是混合了很多次的水。</p><p>去年冬奥会冰墩墩火到爆，如果你没看过冰墩墩的制作过程，那么我在这里科普一下，冰墩墩陶瓷版是全手工制作的，第一道工序就是烧陶瓷了，用模板烧出冰墩墩的模样，烧好的冰墩墩是就是个模具生产出来的粘土人而已，没有任何色彩，因此进入第二道工序，上色！冰墩墩的本体是熊猫，因此只要黑白两种颜色，用毛笔蘸一点颜料慢慢涂满整个冰墩墩，白色的身体，黑色的手手和眼睛鼻子，到这里第二道工序就完成了，涂了色的冰墩墩接下来要送到第三道工序——贴眼睛，眼睛是用贴片式的，把提前准备好的眼睛贴片沾到冰墩墩眼睛处即可，这样第三道工序也完成了，最后一道工序就是给冰墩墩套上宇航员外壳，ok，整个流程结束，冰墩墩制作完成。</p><p>现在让我们捋一捋，烧好的冰墩墩陶瓷是原始对象，送到 1~4 道工序加工后变成了一个成品的冰墩墩，用户拿到手的就是加工好的冰墩墩，这个制作流程就叫做「管道」，通过这个管道设计，输入一只无色陶瓷冰墩墩，经过管道出来的就是一只上好色的成品冰墩墩。</p><p>管道的理念是从 Unix 系统出来的，比如查看日志的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 300 text.log</span><br></pre></td></tr></table></figure><p>上面的命令会查询最新的 300 行日志，但是日志记录的内容太多了，我们如果想要某些关键词，比如 <code>rabbit</code>，可以用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 300 text.log |grep rabbit</span><br></pre></td></tr></table></figure><p>上述代码就会从日志最新的 300 行里过滤出包含 <code>rabbit</code> 关键词的行数，这其实就是一个链式调用，像 javascript 里面的 axios 可以通过如下调用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;).catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码表示发起一个 ajax 请求，当返回响应的时候，执行 <code>then</code> 的代码，如果执行过程发生异常就执行 <code>catch</code> 的代码，那么为什么可以用链式调用呢？其实很简单，就是让方法的返回值返回自身即可，用 PHP 来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class TestClass</span><br><span class="line">&#123;</span><br><span class="line">    private string $content;</span><br><span class="line"></span><br><span class="line">    public function __construct(string $content)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;content &#x3D; $content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function add(string $newStr): TestClass</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;content .&#x3D; $newStr;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function show()</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($this-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new TestClass(&#39;abc&#39;);</span><br><span class="line">$test-&gt;add(&#39;e&#39;)-&gt;add(&#39;f&#39;)-&gt;add(&#39;g&#39;)-&gt;show();</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;abcefg&quot;</span><br></pre></td></tr></table></figure><p>上面演示了最简单的链式调用，当一个对象的方法返回值是自身时，那么是不是可以继续调用其他方法？这就是链式调用的原理。现代主流框架基本都是支持这种链式调用的，比如 Laravel 框架的 ORM：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$users &#x3D; User::select([&#39;id&#39;])-&gt;where(&#39;score&#39;, &#39;&gt;&#39;, 100)</span><br><span class="line">            -&gt;limit(5)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;toArray();</span><br></pre></td></tr></table></figure><p>上面的代表表示查询用户积分大于 100 的用户 id，并且限制只取出 5 个数据，最后再把结果转化成数组形式。</p><p>管道还可以设计的更加复杂，例如上一个类执行完的结果，再传递给下一个类当做参数……简单地说，管道就是「传递」的过程，就好比一滴水从源头流进水管，万一水管接到了下水道，那这滴水不是被污染了吗？最后再流进你家里，当然，它也可能流到一根生锈的水管，因此融进了一些铁屑等杂质……诸如此类，这滴水流过什么样的水管就沾染上什么样的颜色，你把自己当成马里奥就行了，你想让管道怎么接就怎么接。</p><p>管道有很多实现的方法，比如 Laravel 的中间件，没错，又是它！只要你去研究 Laravel 中间件是如何实现的，你一定会被惊叹到，像洋葱一样一层一层剥开你的皮进入你的心……</p><p>总之，管道就是 <code>输入-输出</code> 的过程，如果说切面的核心是拦截，那么管道的核心就是「连接」与「传递」。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔女史诗</title>
      <link href="/2023/02/11/witch-04/"/>
      <url>/2023/02/11/witch-04/</url>
      
        <content type="html"><![CDATA[<h2 id="创世篇"><a href="#创世篇" class="headerlink" title="创世篇"></a>创世篇</h2><p>混沌初开，世界一片虚无，只有无尽的黑暗，没有时间，亦无空间。在这样的一片黑暗中不知从何处孕育了一个光点，光点逐渐扩大，数倍、数十倍、数百倍……数亿倍……在膨胀了无法估量的倍数之后又急速收缩，最终凝聚成一个无比闪耀的极小光点，持续一段时间后突然爆开，从光点中释放出了无数的物质，物质爆裂所到之处形成了空间，就这样世界不断膨胀，物质不断朝着外界飞去，物质所到之处即形成了空间，向外飞行的物质在不断拓宽着这个世界的范围，而那些因为碰撞而在原有空间内徘徊的物质，因为不断碰撞而凝结在一起，有的产生了反应，由单质形成了新的物质，新的物质又在空间里四处飞行，与其他物质碰撞在一起形成更加复杂的物质，这些复杂的物质不断碰撞，不断聚集，最终形成了最初的生命体，原初的超越者——被后世称为神的存在。</p><p>由于生命的出现，时间的概念也一并出现，最初，三位超越者并不知道自己诞生的意义，在这个空旷的世界里漂浮，不知道过了多久，他们发现自己拥有某些特殊的能力，分别是掌控时间、空间和生命的能力，当他们发现自己的能力之后，他们开始理解了自己的使命。</p><p>空间的超越者利用自己的能力不断扩展着这个空间，创造出一个又一个的世界，生命超越者在生成的世界里创造出新的生命，时间的超越者记录着所有世界发生的一切，然而，世界超越者创造的世界并不是完美的，时常因为物质的不稳定而崩塌毁灭；生命的超越者创造的生命，最初不过是细菌一般的存在，在创造出来的世界难以存活，而这些过程全都被时间超越者记录成为了一个时间的节点。</p><p>在不断创造、不断毁灭的过程中，由不同的物质混合生成了大片的陆地、海洋、空气……生命超越者创造出的细胞在这样的环境下也有了生存的条件，不断进化生长变异成长为巨大的个体，从原初巨大的生物，直到因为天灾被毁灭，在毁灭的大地上又长出新的生命，就这样一代代过了数亿年……终于有一个世界能够稳定的存在，那就是——人类的世界。</p><h2 id="启示篇"><a href="#启示篇" class="headerlink" title="启示篇"></a>启示篇</h2><p>三位原初超越者所不知道的是，在那个光点产生爆炸的同时，一些黑暗的物质也在不断聚集，就在原初超越者出现不久，原初的恶魔也形成了，如同三位超越者一般，原初的恶魔也在不断的扩张自己的势力，它们躲在世界的尽头，避开三位超越者的视线，偷偷观察着他们，并在人类世界出现之后决定动身夺取那个世界。</p><p>三位超越者引导人类创建了自己的文明，让不同区域的人们建造了自己的部族，不同的部落之间经常发生争夺领地、食物的冲突，然而这些超越者们并不会进行干涉，因为他们做的事情只有：观察这个文明的变化。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 魔女RPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 新作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔女RPG】测试版ver0.1.2</title>
      <link href="/2023/02/10/witch-03/"/>
      <url>/2023/02/10/witch-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次更新加入了怪物、技能、装备图鉴，并且完善了游戏中的装备系统，并且加入了大量带有特殊效果的装备，快来康康吧~</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>百度网盘: <a href="https://pan.baidu.com/s/1kKrQlORjoSvxoVOQ3wcVTA?pwd=h9lg">https://pan.baidu.com/s/1kKrQlORjoSvxoVOQ3wcVTA?pwd=h9lg</a><br>微云网盘：<a href="https://share.weiyun.com/sz2Dln1e">https://share.weiyun.com/sz2Dln1e</a></p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>由于目前仍为测试版，可能存在较多 BUG 以及不友好的体验（如存档升级后无法使用等问题），如介意可等待游戏更加完善再下载体验。</p><h2 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h2><ul><li>矿洞剧情</li><li>新增装备图鉴（完成源流镇剧情解锁）</li><li>新增灵魂商店（从怪物图鉴进入）</li><li>新增猫鹰、哥布林、小青蛇等怪物掉落装备</li><li>新增带有套装效果的装备</li><li>新增3个怪物掉落技能（哥布林、小青蛇、恶魔哥布林）</li></ul><h2 id="优化内容"><a href="#优化内容" class="headerlink" title="优化内容"></a>优化内容</h2><ul><li>优化了可穿透平台的手感</li><li>存档位置增加到20个</li></ul><h2 id="修复问题"><a href="#修复问题" class="headerlink" title="修复问题"></a>修复问题</h2><ul><li>修复查看哥布林女猎手、恶魔哥布林图鉴报错问题</li><li>修复查看图鉴敌人贴图缩放问题</li><li>修复查看图鉴某些情况下无法关闭问题</li><li>修复削减BOSS血量没有掉落掉落灵魂球问题（上期更新忘记实装了）</li><li>修复剧情中可以点击场景菜单问题</li><li>修复传送时可能莫名其妙死亡问题</li><li>修复技能图鉴等级数据显示异常问题</li><li>修复默认装备没有增加移速问题</li><li>修复打败恶魔哥布林时会卡死问题</li></ul><h2 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h2><p>新加入三大图鉴系统，分别为：怪物图鉴、装备图鉴和技能图鉴，当解锁了图鉴系统后，点击右上角的图鉴菜单即可进入图鉴系统，如图所示：</p><p><img src="https://s2.loli.net/2023/02/10/dOxoJSRYVLij2eB.jpg" alt="图鉴菜单"><br><img src="https://s2.loli.net/2023/02/10/8Feb2UAiIjrJXDc.jpg" alt="图鉴系统"></p><p>新加入了怪物图鉴，方便玩家查看怪物的掉落物和怪物的属性值，从而搭配合理的出装，拖动右下角的滑块可以调整查看怪物的等级以及对应的属性值，并且只要在场景中遇到该敌人，就可以将敌人的信息记录在内（并不需要打败敌人才能看到）：</p><p><img src="https://s2.loli.net/2023/02/10/mRy65EUb7vXeqah.jpg" alt="怪物详情"></p><p>通过消灭敌人可以获得怪物的灵魂，从而在灵魂商店兑换怪物的掉落物以及特殊的装备箱子（包括史诗级箱子和传说级箱子）。</p><p><img src="https://s2.loli.net/2023/02/10/sIHBrZSfyCV8UJK.jpg" alt="灵魂商店入口"><br><img src="https://s2.loli.net/2023/02/10/luNDy4pFUKETCqz.jpg" alt="灵魂商店"></p><p>打开装备箱子可以获得一件怪物掉落的自选装备。</p><p><img src="https://s2.loli.net/2023/02/10/MZer5dhHlbaD4kA.jpg" alt="装备自选箱子"></p><p>装备自选箱子可以自由选择一件想要获得的装备，包括武器和防具等等。</p><p><img src="https://s2.loli.net/2023/02/10/S6rkTCB3DLpY2jz.jpg" alt="选择一件想要得装备"></p><p>值得一提的是，获得装备的等级与玩家当前等级相同，也就是说，玩家等级越高获得的装备等级也越高。</p><p><img src="https://s2.loli.net/2023/02/10/krPTbvNF7gJC5GK.jpg" alt="获得对应品级的装备"></p><p>因为游戏里的装备数量众多，因此需要一本装备图鉴方便玩家查询装备的特效以及可能出现的附加属性值等等。</p><p><img src="https://s2.loli.net/2023/02/10/sbaJKfr16e87Dzy.jpg" alt="装备图鉴"></p><p>点击想要查看的装备，即可查看到装备的属性以及特效，拖动等级条可以查询对应等级的属性。</p><p><img src="https://s2.loli.net/2023/02/10/cn5GC9xa1VgQXpo.jpg" alt="装备详情1"><br><img src="https://s2.loli.net/2023/02/10/P1yrXFokit3xNqA.jpg" alt="装备详情2"><br><img src="https://s2.loli.net/2023/02/10/3jXuG5sxtg4BiTP.jpg" alt="装备详情3"></p><p>游戏中的技能也是相当丰富的，因此加入了技能图鉴方便玩家查看不同技能的效果和加成。</p><p><img src="https://s2.loli.net/2023/02/10/kh3cDZWa7EqSGmI.jpg" alt="技能详情1"><br><img src="https://s2.loli.net/2023/02/10/jla73PbStr6qGdQ.jpg" alt="技能详情2"><br><img src="https://s2.loli.net/2023/02/10/PB8ElsYqKW9LgbT.jpg" alt="技能详情3"></p><p>技能的获取途径十分简单，只需要击杀怪物掉落技能书即可获得。</p><p><img src="https://s2.loli.net/2023/02/10/nMR6lpOLw4mk7bj.jpg" alt="怪物掉落的技能书"></p><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>至此，游戏的核心系统已经实现了，剩下的会在后面的版本慢慢更新，从全职回家做游戏到现在已经三年了，原创系统的梦想已经实现，心里也没有什么遗憾了，三年了……失败了很多次，最后还是变成了孤军奋战的状态，浪费的时间太多，吸取的经验也不少，年纪也在不断变大，现实生活的事情也不容许自己那么任性了，接下来也要开始面对生活了，后期的更新进度可能会放缓，但是会一直保持更新直到游戏完结，这是个人第一部原创作品，直到游戏完结，接下来就会开发第二款原创游戏……如此反复，直到撸不动代码的那天为止，如果开发游戏不能成为职业，就当做余生的业余兴趣作伴了~</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 魔女RPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 新作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】对于空值异常NullPointerException的优雅处理方式</title>
      <link href="/2023/01/27/unity-tips-041/"/>
      <url>/2023/01/27/unity-tips-041/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>空指针异常（NullPointerException）在开发过程十分常见，在游戏开发中，因为基本所有的代码都在异步执行，很容易在某个地方销毁了对象，结果另一个地方却依然在调用，这就导致获取到空对象因而报错。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在游戏剧情模式下，我们需要生成一些 NPC 用来演出，比如 Player（玩家），Jonna（洁娜）等等，现在我们生成了这两个对象，并且用一个 <code>Dictionary&lt;string, GameObject&gt;</code> 字典将 NPC 的名称和实例化出来的 GameObject 保存起来，现在我们就可以用下面的方法来调用 NPC 对象了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 获取NPC对象</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;npcName&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">protected GameObject GetNPC(string npcName)</span><br><span class="line">&#123;</span><br><span class="line">    return npcs[npcName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是这个方法根本没有任何除错措施，上面我们只定义了 Player 和 Jonna 两个 NPC，如果我们调用了 Char（卡尔）呢？我们根本就没创建过这个 NPC，当然会直接报错，字典里没有这个 Key！</p><p>为了防止调用不存在的 NPC，我们可以加入一个判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected GameObject GetNPC(string npcName)</span><br><span class="line">&#123;</span><br><span class="line">    if (npcs.ContainsKey(npcName))</span><br><span class="line">    &#123;</span><br><span class="line">        return npcs[npcName];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这样这段代码肯定不会报错了，可是，在其他地方，我们需要调用这个 NPC 进行移动，这里却返回了一个 null，不出意外的弹出空指针异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将 Char NPC 移动到 x&#x3D;-7f </span><br><span class="line">Move(GetNPC(&quot;Char&quot;), -7f);</span><br></pre></td></tr></table></figure><p>那我们是不是也可以照猫画虎，在移动的方法里也写一个判断空值？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var npc &#x3D; GetNPC(&quot;Char&quot;);</span><br><span class="line">if(npc !&#x3D; null) &#123;</span><br><span class="line">    Move(GetNPC(&quot;Char&quot;), -7f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，这里也不会报错了！可是……如果下面又有一个演出事件，我们要让 Char 播放攻击动画呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var npc &#x3D; GetNPC(&quot;Char&quot;);</span><br><span class="line">if(npc !&#x3D; null) &#123;</span><br><span class="line">    PlayAnimate(npc, &quot;Attack&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，只要在调用 NPC 对象的时候，判断他是否是空值就可以解决报错问题了！</p><p>我们可以进一步的优化一下，在调用 NPC 的方法里进行判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected void PlayAnimate(string npcName, string anim) &#123;</span><br><span class="line">    var target &#x3D; GetNPC(npcName);</span><br><span class="line">    if(target !&#x3D; null) &#123; </span><br><span class="line">        target.GetComponent&lt;Animator&gt;().Play(anim);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，像这种操作 NPC 行为的方法有很多个，也不可能一个个都这么判断，冗余代码实在太多了！<strong>除非你真的很喜欢写代码，否则不要写重复代码！</strong></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我们可以将获取 NPC 的方法封装起来，然后增加一个回调方法，如果获取 NPC 成功，则将 NPC 对象传给回调方法进行处理，否则就报错，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 获取NPC对象，当获取成功时执行callback</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;npcName&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;callback&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">protected void GetNPC(string npcName, System.Action&lt;GameObject&gt; callback)</span><br><span class="line">&#123;</span><br><span class="line">    if (npcs.ContainsKey(npcName) &amp;&amp; npcs[npcName] !&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        callback(npcs[npcName]);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        SystemUtil.GetInstance().Print(&quot;NPC为空：&quot; + npcName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，大功告成！在需要调用 NPC 对象的时候，只需要像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GetNPC(npcName, (target) &#x3D;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var anim &#x3D; target.GetComponent&lt;Animator&gt;();</span><br><span class="line">    anim?.Play(animate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>是不是优雅了很多呢？</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔女RPG】测试版ver0.1.1</title>
      <link href="/2023/01/21/witch-02/"/>
      <url>/2023/01/21/witch-02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>赶在春节前更新了版本，距离上次发布刚好10天，优化了一下主要的字体和摄像机问题，作为 Demo 体验更好。</p><h1 id="实机演示"><a href="#实机演示" class="headerlink" title="实机演示"></a>实机演示</h1><iframe width="100%" height="544" src="//player.bilibili.com/player.html?aid=480012981&bvid=BV1XT411f7Pw&cid=960362616&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>视频链接：<a href="https://www.bilibili.com/video/BV1XT411f7Pw">https://www.bilibili.com/video/BV1XT411f7Pw</a></p><h1 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h1><p>ver0.1.1 版本更新内容记录。</p><h2 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h2><ul><li>加入1个新的技能【疾风手里剑】，可以击杀小猫鹰怪物掉落技能卷学习</li></ul><p>技能演示：<a href="https://www.bilibili.com/video/BV18Y411X71g/">https://www.bilibili.com/video/BV18Y411X71g/</a></p><h2 id="优化方面"><a href="#优化方面" class="headerlink" title="优化方面"></a>优化方面</h2><ul><li>UI字体更换</li><li>玩家视野优化</li><li>触发剧情时出现回血回蓝数字问题</li><li>怪物血条旁边增加显示怪物等级</li><li>优化副本选择操作</li><li>新增与boss怪物战斗时，每削减boss20%生命掉落随机数量的生命球和魔法球</li></ul><h2 id="新增系统"><a href="#新增系统" class="headerlink" title="新增系统"></a>新增系统</h2><ul><li>从高处坠落时，如果高度超过一定距离会损失生命值，可能会摔死</li><li>副本增加计时器，记录玩家通关次数、速通最短时间记录</li><li>怪物图鉴，完成研究员阿东任务解锁</li><li>技能图鉴，师傅留下的信解锁</li></ul><h2 id="预览截图"><a href="#预览截图" class="headerlink" title="预览截图"></a>预览截图</h2><p><img src="https://s2.loli.net/2023/01/21/Amxq2FchpHEzOKf.jpg" alt="图鉴系统"><br><img src="https://s2.loli.net/2023/01/21/Ds89G3kX2TtjPlz.jpg" alt="技能图鉴"><br><img src="https://s2.loli.net/2023/01/21/kfnUcuDdJRFXqb1.jpg" alt="怪物图鉴"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>版本号：ver0.1.1<br>百度云链接: <a href="https://pan.baidu.com/s/1cmLgSWATCvQVnqHJ25kaVw?pwd=34lq">https://pan.baidu.com/s/1cmLgSWATCvQVnqHJ25kaVw?pwd=34lq</a><br>微云链接：<a href="https://share.weiyun.com/yEtliOrh">https://share.weiyun.com/yEtliOrh</a></p><p>交流QQ群：84334403<br>作者QQ：874811226</p><p>欢迎提供建议或者 BUG 反馈！</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 魔女RPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 新作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】快速选中场景中带有某个组件的对象</title>
      <link href="/2023/01/12/unity-tips-040/"/>
      <url>/2023/01/12/unity-tips-040/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为要改动游戏的基础字体，这是个非常繁琐的工程，不仅费时而且费力，需要手动一个个选中场景中的 Text 然后修改字体，十分麻烦，我突然想到会不会在 Unity 中可以一键筛选出全部带有 Text 的对象，然后一键修改呢？抱着试一下的心态搜了一下，果然有！</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>在 Hierarchy 的上方有一个搜索框，如下图所示：</p><p><img src="https://s2.loli.net/2023/01/12/GeJMrNyY9UuFI5f.jpg" alt="Hierarchy 搜索框"></p><p>在搜索框输入：<code>t:text</code>，然后就可以看到，所有带有 <code>Text</code> 的组件全部显示出来了：</p><p><img src="https://s2.loli.net/2023/01/12/ZLhrxRw83VCz2c4.jpg" alt="搜索组件"></p><p>接着，点击第一个，再按住 <code>Shift</code> 键，拖到最底部，再点击最下面的那个 Text 对象就可以全选了：</p><p><img src="https://s2.loli.net/2023/01/12/14iOAqkfRrcwb7Y.jpg" alt="全选 Text 对象"></p><p>最后，在右侧的 Text 组件中修改 Font（字体）即可实现一键批量修改，工作量大大减少。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【新系列】魔女RPG测试版ver0.1.0</title>
      <link href="/2023/01/11/witch-01/"/>
      <url>/2023/01/11/witch-01/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏概述"><a href="#游戏概述" class="headerlink" title="游戏概述"></a>游戏概述</h1><p>魔女 RPG（暂名）是《名为怪物的游戏》和《魔王传说 4》无法继续推进进度时决定开发的一款新作，本作是横版卷轴 2D 像素风 RPG 类型的游戏，于 2022 年 7 月 30 日正式启动项目，同年 8 月 13 日发布了一个简单的操作体验版，到现在终于完成了序章剧情以及第一章的一小段剧情，可以发出来让大家体验啦！</p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>百度网盘: <a href="https://pan.baidu.com/s/1Og9fN8G7my918lA-kNIfxQ?pwd=ae77">https://pan.baidu.com/s/1Og9fN8G7my918lA-kNIfxQ?pwd=ae77</a><br>微云网盘：<a href="https://share.weiyun.com/VVLeAaWx">https://share.weiyun.com/VVLeAaWx</a></p><p>交流讨论 QQ 群：84334403<br>作者 QQ：874811226</p><h1 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h1><p>64 位 Win 系统。</p><h1 id="实机演示"><a href="#实机演示" class="headerlink" title="实机演示"></a>实机演示</h1><iframe width="100%" height="544" src="//player.bilibili.com/player.html?aid=480012981&bvid=BV1XT411f7Pw&cid=960362616&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p>这是一款横版卷轴挑战 BOSS 类型的 RPG 游戏，<del>刷刷刷</del> 收集装备，搭配不同技能挑战各种各样的 BOSS 就是游戏的主玩法。玩家操控主人公小魔女希雅，为了从魔物手中救回师傅而出发冒险，剧情也是常规的王道类型，在旅途中帮助村民解决难题，最终打败大魔王这种设定。</p><p>局限于技术力，无法做到 DNF 那种畅快的打击感，但却可以让你找回小时候玩冒险岛在金银岛打蜗牛、在绿水灵洞打绿水灵的感觉，对于本游戏，你可以直接忽略打击感，本质是一个 <del>刷刷刷</del> 用技能打 BOSS 的游戏，实际上操作空间不大。</p><p>当前版本中，玩家可以搭配 6 个不同的技能，以及 3 个固有技能：普通攻击、闪避、回复，总计 9 个技能，普通攻击后续可能会改成跟武器挂钩，比如你现在拿的是木杖，普通攻击就是发射一枚魔法弹，如果你换成火杖，普通攻击就会发射一枚火球。</p><p>后续版本还会新增符文系统、星命、天赋等养成系统，增加游戏的 <del>肝度</del> 养成度，让玩家体会到慢慢变强的乐趣。</p><p>装备系统方面，已实现随机属性系统，后期还会加入强化系统，总之，这是一个刷装备的游戏 <del>，不是打 BOSS 吗？</del>。</p><h1 id="截图展示"><a href="#截图展示" class="headerlink" title="截图展示"></a>截图展示</h1><p><img src="https://s2.loli.net/2023/01/11/GBWbhajeZtNHwKX.jpg" alt="装备系统"></p><p>目前可以装备的技能数量有限，后续会加入更多技能，魔女不止可以使用魔法，而且还可以进行“物理打击”，通过装备和技能的搭配，当一个「暴力」魔女也是可以的。</p><p><img src="https://s2.loli.net/2023/01/11/Fx2ZLWAzfaQNy57.jpg" alt="技能配置"></p><p>人物属性面板：</p><p><img src="https://s2.loli.net/2023/01/11/wIYUq3RSMxA5ary.jpg" alt="人物属性面板"></p><p>任务系统：</p><p><img src="https://s2.loli.net/2023/01/11/KrRtU2O7wbJmy61.jpg" alt="任务系统"></p><p>游戏场景：</p><p><img src="https://s2.loli.net/2023/01/11/Smh5k6H87Ix4alQ.jpg" alt="游戏场景"></p><p>背包系统：</p><p><img src="https://s2.loli.net/2023/01/11/mRpcU4I82GuJArh.jpg" alt="背包系统"></p><p>副本系统：</p><p><img src="https://s2.loli.net/2023/01/11/81Zh9pqvyCB4Dfa.jpg" alt="副本系统"></p><h1 id="游戏剧情"><a href="#游戏剧情" class="headerlink" title="游戏剧情"></a>游戏剧情</h1><p>传说中的三大魔女之一水魔女静流带着她的弟子希雅下山历练，在途中经过一个小村庄，发现有恶魔入侵了村庄，于是静流带着希雅来到村庄，发现村庄里的村民被恶魔抓走了，只剩下几个幸存者，于是带着希雅追击恶魔救出村民，消灭了沿途的魔物，静流感受到了前面不详的气息，在继续前进之前将与原初魔女相关的线索——一颗宝石交给希雅，并且叮嘱她一些事情，继续前进，来到燃烧的祭台，发现了一头不可名状的恶魔（其实是因为希雅的实力太弱，无法直视恶魔），恶魔正在举行活人献祭仪式，试图通过献祭村民的灵魂来复活魔神，静流让希雅救出村民，而她自己去牵制那头恶魔，希雅成功救出了村民，但却发现师傅被恶魔重创，希雅想要与师傅一起战斗，但却被师傅阻止了，并且用尽最后的魔力将希雅传送到了一起生活的山上，之后，静流的下落不明。</p><p>希雅在师傅叮嘱的小屋桌子上发现了一封信还有师傅留下来的魔法卷轴，从信中知道了关于「魔女的宿命」——人类与深渊魔物的战争，以及魔女代代相传的命运。希雅是特殊的，因为只有她能够学习风、水、火三种属性的魔法，而历代魔女除了原初魔女之外，只能学习一种属性，静流认为希雅或许是改变魔女一族命运之人，于是让希雅去寻找另外两大魔女，跟她们学习元素魔法，而希雅不在乎魔女的宿命，只想救出师傅，为此必须变强。</p><p>离开小屋，师傅的使魔（一只鹰）叼着一串项链交给希雅——那是师傅在最后时刻让使魔带回来给希雅的成年礼。</p><h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><p>方向键控制移动，以下为固定快捷键及其作用：</p><ul><li>Z：普通攻击，命中敌人时会回复一定的 MP</li><li>X：闪避技能，向前快速突进一小段距离，突进过程处于无敌状态</li><li>C：调查事件/拾取道具/下一段对话</li><li>V：自然回复技能，能够回复自身一定比例的生命/魔法</li><li>空格键：下一段对话，或者在对话过程点击屏幕也能进入下一段对话</li><li>上方向键：进入传送门</li><li>键盘上方数字键：当弹出选项时，按下键盘上方数字键可以快速选择对应的序号选项（而不需要用鼠标点击了）</li><li>鼠标右键：一些菜单面板在空白区域右键可以快速关闭菜单</li></ul><p>其他技能需要手动配置到：QWE/ASD 六个键位中。</p><h1 id="基础技能"><a href="#基础技能" class="headerlink" title="基础技能"></a>基础技能</h1><p>玩家初始自带三个攻击技能，分别是：</p><ul><li>水弹（Q）：向前方发射一枚水弹，命中敌人造成魔法伤害</li><li>踏浪（W）：在空中状态才能使用，快速下坠，碰到地面时向两边生成不断前进的浪花，命中敌人时还会减少它们的魔法抗性，最多叠加 5 层</li><li>魔法双击：对单体敌人造成两次魔法伤害，需要注意的是距离太远则无法击中</li></ul><h1 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h1><p>造成的伤害的基础值与「伤害」有关，而攻击/魔法强度只是起到了增幅伤害的作用，具体的伤害公式如下：</p><p>攻强增伤 = 攻强 / （攻强 + 3000）<br>抗性减伤 = 实际抗性 / （实际抗性 + 1000）<br>实际抗性 = 防御方抗性 - 攻击方穿透，该值最低为0<br><strong>攻强指的是：物攻强度或者魔法强度，如果使用的是物理伤害技能，则取物攻强度，如果是魔法伤害，则取魔法强度。</strong></p><p>基础伤害 = 面板伤害 x 技能倍率<br>抗性减伤 = （防御方抗性 - 攻击方穿透）/ （防御抗性 - 攻击方穿透 + 1000）<br>克制倍率 = 无克制关系（+0%）、克制（+50%）、（被克-50%）<br>暴击倍率 = 无暴击（+0%）、暴击（+面板暴击伤害）<br>随机系数 = 85~100%<br>伤害结果 = 基础伤害 x （1+攻强系数）x （1 - 抗性减伤）x（1+暴击倍率）x （1+克制倍率）x （1-防御方伤害减免）x 随机系数</p><h1 id="隐藏机制"><a href="#隐藏机制" class="headerlink" title="隐藏机制"></a>隐藏机制</h1><p>目前游戏内的隐藏机制。</p><h2 id="经验值倍率"><a href="#经验值倍率" class="headerlink" title="经验值倍率"></a>经验值倍率</h2><p>玩家击杀高于自身等级的敌人时，每超过1级，经验值提升5%，最多提升200%<br>玩家击杀低于自身等级的敌人时，每超过1级，经验值降低5%，最多降低至1</p><h2 id="怪物掉落灵魂球"><a href="#怪物掉落灵魂球" class="headerlink" title="怪物掉落灵魂球"></a>怪物掉落灵魂球</h2><p>灵魂球分为生命球和魔法球，在击杀怪物时有几率掉落其中一种，灵魂球的效果如下：</p><p>生命球：拾取后恢复一定比例生命值<br>魔法球：拾取后恢复一定比例魔法值</p><p>灵魂球在掉落时，玩家靠近就会自动吸附无需手动拾取。</p><h1 id="版本缺陷"><a href="#版本缺陷" class="headerlink" title="版本缺陷"></a>版本缺陷</h1><p>当前版本已知问题。</p><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><p>因为是像素风游戏，所以一开始想找个免费的像素字体，然后发现有很多缺失的字体以及部分文字看不清，下一个版本会取消使用像素字体。</p><h2 id="敌人-AI-问题"><a href="#敌人-AI-问题" class="headerlink" title="敌人 AI 问题"></a>敌人 AI 问题</h2><p>部分杂鱼怪物 AI 十分笨拙，容易卡在角落或者超出活动范围，后续版本会优化它们的“智商”。</p><h2 id="素材风格问题"><a href="#素材风格问题" class="headerlink" title="素材风格问题"></a>素材风格问题</h2><p>因为使用的大都是免费素材，出自不同的作者，因此会导致很多素材画风不统一，目前该问题比较难以解决，唯一的办法是找到可以替代的素材，如果有更好的素材后续会逐渐替换掉风格迥异的图片。</p><h2 id="BOSS-难度问题"><a href="#BOSS-难度问题" class="headerlink" title="BOSS 难度问题"></a>BOSS 难度问题</h2><p>目前登场的 BOSS 都比较呆傻，主要是考虑到新玩家入手需要适应，第一个 BOSS 就没设计得太复杂，不过不用担心，难度是会一步步提升的，当玩家解锁了游戏中主要的系统，并且可以自由搭配技能的时候，BOSS 的难度就会相应的提高。</p><h1 id="素材声明"><a href="#素材声明" class="headerlink" title="素材声明"></a>素材声明</h1><p>由于素材涉及到版权相对敏感，部分玩家对素材的来源要求极其严格，虽然本作是免费游戏，但侵权问题在独立游戏中十分常见，免费游戏不意味着可以随意使用他人的版权素材，关于这一点请放心。为避免发生无端纠纷，本人特此作出声明，本作使用的素材主要包括付费购买的正版素材、部分来自网络且原作者许可允许商用、网络素材、AI 创作，如您发现本作出现侵权素材，请联系本人告知，联系QQ：874811226（火烧兔子）</p><h2 id="正版素材（付费购买的）"><a href="#正版素材（付费购买的）" class="headerlink" title="正版素材（付费购买的）"></a>正版素材（付费购买的）</h2><p>主要为 itch.io 购买，以及 Unity Asset Store （Unity 官方素材商城）。</p><p>ITCH：<a href="https://itch.io/">https://itch.io/</a><br>Unity 官方商城：<a href="https://assetstore.unity.com/">https://assetstore.unity.com/</a></p><p>对于正版素材也就只能购买 $1~$3 的（折合 RMB 6~21 块），再贵的真滴买不起啦！虽然看单个素材也不贵，但是一个游戏用到的素材成百上千，堆叠起来就是一笔巨额开支，所以大部分素材只能找公开允许商用的免费素材。</p><p>付费购买资源证明截图：</p><p><img src="https://s2.loli.net/2023/01/11/UaEWTAnScRzl6r8.jpg" alt="购物凭证"><br><img src="https://s2.loli.net/2023/01/11/rCzPuIVBAyki58H.jpg" alt="购物凭证"></p><h2 id="公开允许商用的素材"><a href="#公开允许商用的素材" class="headerlink" title="公开允许商用的素材"></a>公开允许商用的素材</h2><p>关于这个，在我之前发的一篇博文里已经注明了网站来源（没看过的可以往上翻几页就有了），接下来是用到的素材网站名称：</p><ul><li>ITCH（主要为图片素材，包括序列帧动画、地图图块）</li><li>Unity 商城（主要为图块、插件、UI、图标素材）</li><li>Wingless Seraph（音乐素材）</li></ul><p>尤其是人物包含动作的序列帧素材极其难找，幸运的是 ITCH 站点有许多热心分享的网友，例如本作的女主（玩家）的素材来源为：<a href="https://9e0.itch.io/witches-pack">https://9e0.itch.io/witches-pack</a></p><p>该素材在 ITCH 为免费下载，作者为 9E0。</p><p>作者的话：</p><blockquote><p>Notes:<br>Feel free to use and modify the characters depending on your current project. If you have any suggestions regarding other  characters, items or backgrounds, which can fit with this pack, please let me know. I might work on a “Witches Tileset Pack” in  the future and it would definitely help to have some ideas. In case you want to offer me credits, please use my current username. Also, keep in mind that you can use this in your commercial projects, but please do not resell the assets individually. </p></blockquote><h2 id="网络素材"><a href="#网络素材" class="headerlink" title="网络素材"></a>网络素材</h2><p>主要为爱给网（aigei.com）这一部分基本上都是侵权的，不过后续会逐渐替换掉，如果有遗漏的地方欢迎指出。</p><h2 id="AI-创作"><a href="#AI-创作" class="headerlink" title="AI 创作"></a>AI 创作</h2><p>由本人搭载在本人电脑上的本地 AI 软件 stable-diffusion-webui 进行创作，目前仅有标题界面的背景图用到了 AI 生成素材，后期将会加入角色头像/立绘之类的，或者用 AI 来生成一些剧情 CG 似乎也不错？总之，AI 创作的图片，目前没有明确的版权问题，应该可以放心使用了。</p><p>注：该软件为开源软件，允许任何人安装使用。</p><h1 id="后续更新计划"><a href="#后续更新计划" class="headerlink" title="后续更新计划"></a>后续更新计划</h1><p>目前游戏的主要框架已经搭建完毕，还有一些天赋、符文之类的系统也会逐渐完善，接下来会按照每月一版本的进度更新。</p><h1 id="是否收费？"><a href="#是否收费？" class="headerlink" title="是否收费？"></a>是否收费？</h1><p>完全免费，包括以后正式版发布也会完全免费，不过，个人还是有个小目标就是上架 Steam，只在自己的博客和 6R 上发布展示太少了，毕竟也是自己的作品，不论好坏，还是希望能在更大的平台展示给更多玩家。</p><p>目前的品质也达不到商业作品的标准，如果有朝一日能把游戏当做事业自然是最好的，但目前来说只是爱好。</p><p>上架平台的好处是可以实现统一更新版本，而且有平台的审核，玩家下载到的软件十分安全。在某些盗版单机网站容易下载到捆绑了病毒木马/流氓软件的游戏，盗版游戏很大的问题不在于开发者的利益受到损害，而是——盗版网站不会更新版本！以魔王传说 1+2 为例，某些盗版网站的版本还停留在 v1.x 的版本，而我后面都更新到 v3.x 了，有一次遇到某玩家加到我，问我有个 xxx BUG 怎么解决，我一看这不是早就修好了吗？原来……是他下载的版本太过老旧。</p><p>盗版网站无法及时更新游戏版本是最大的痛点，而上架平台就不一样了，每次更新都可以在平台发一则公告，告诉玩家这次更新了什么，而且可以实现一键更新本地游戏。</p><p>盗版网站的安全性也是个大问题，如果游戏被盗版网站转载并且捆绑了病毒，而玩家下载游戏中毒了，最后却以为是游戏创作者捆绑了病毒，那真的百口莫辩了，所以，请认准火兔游戏官方网站（huotuyouxi.com）从我的博文提供的地址进行下载，避免下载到盗版网站“加了点东西”的版本。</p><h1 id="制作感言"><a href="#制作感言" class="headerlink" title="制作感言"></a>制作感言</h1><p>这款游戏是个人真正意义上的原创游戏，虽然不能实现 100% 纯原创（系统、音乐、图片），但至少在程序方面，作为一个码农已经心满意足了，大学毕业时就立志当个架构师，现在终于当了我自己项目的“架构师”了！从零开始编写自己的游戏框架，看着一张张静态的图片“动”了起来，就跟小时候玩多米诺骨牌一样，设计好“机关”，轻轻一推，程序就按照自己设计的那样“跑”了起来，这种感觉还是非常棒的——这就是我为什么选择当码农的原因了吧！</p><p>我的世界，在你手中——这句话原本是 6R 的口号“梦想世界，在你手中”。</p><p>但这是针对游戏开发者的，而我的理念是“我的世界，在你手中”，这是对玩家说的——心中所想，可以写小说，可以画漫画，可以制作一部动画……这些都是承载言语的载体，而我喜欢游戏，所以选择了用游戏当做表达方式，如果我喜欢看小说，说不定我就成为小说家了。</p><p>好了，下期见。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 魔女RPG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 新作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的副本为什么叫做“副本”？</title>
      <link href="/2022/12/26/shared-03/"/>
      <url>/2022/12/26/shared-03/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一些大型 MMORPG（大型多人角色扮演游戏）都存在”副本“的概念，通常而言，副本就是指通过与其他玩家组队一起挑战 BOSS 的地图场景，那么为什么会叫做”副本“这么奇怪的名字呢？这也是我很多年保持的疑惑。</p><h1 id="传奇"><a href="#传奇" class="headerlink" title="传奇"></a>传奇</h1><p>要解释副本，就要先说明一种没有副本的游戏，传奇就是一个经典例子，小时候玩过一个传奇私服叫做”沧桑之恋“，里面有很多野外地图，比如「沃玛神殿」、「祖玛神殿」等等，击杀沃玛教主或者祖玛教主会掉非常好的东西，其中沃玛教主会掉沃玛之角，可以用来创建公会，当时我想创建一个公会，但是每次去沃玛神殿都抢不到 BOSS，因而只能用一个很稀有的装备「三人行复活」（也就是复活戒指）跟其他玩家换了一个沃玛之角。</p><p>那么这个就是问题所在了，为什么要抢 BOSS 呢？这是因为一个游戏一旦日活跃玩家很多的话，就会有许多相同等级的玩家挤在一个地图刷怪，因此会发生抢怪的情况，可能会出现几十上百个玩家争抢一只 BOSS，最后发展到公会战大大出手，像梦幻西游这种回合制游戏，只要去贴吧逛逛，总是能看见什么「皇城PK」的经典案例，也就是某某某蹲点守 BOSS，然后被一个路人甲抢了，于是就到贴吧发帖挂人，开强行 PK 截杀等等。</p><p>为了避免玩家争抢 BOSS 的问题，一些早期的游戏就想出了一种奇妙的方法——还是原来的 BOSS，不同的是现在把场景拷贝成很多份，想挑战 BOSS 的玩家可以组好队，然后从 NPC 处进入地图，这个时候就生成一张新的地图，把你单独传送到新地图；下一个挑战者来找 NPC 对话，NPC 又会创建出一份新的地图，把第二位挑战者传送到新创建的地图，因此不论有多少玩家来打 BOSS，NPC 都会创建一个新的地图（包含一只新的 BOSS）。</p><p>像上面传奇的例子，之所以会发生玩家争抢 BOSS，是因为玩家都传送到同一个地图，我看得见你，你也看得见我，而新的模式每次有玩家挑战 BOSS，NPC 都会拷贝一份「复件」，然后把玩家传送到「复件」的地图里面，这也就是为什么叫做「副本」了。</p><p><img src="https://files.catbox.moe/riy1vy.jpg" alt="拷贝一个音乐文件，自动生成带有”副本“的后缀"></p><p>拷贝一个音乐文件，系统会自动加上”副本“两个字的后缀，副本就是拷贝出来的复印件，即与原文件一模一样，而在游戏里，一般把挑战 BOSS 的地图称作「地下城」，而副本就是拷贝一份地下城让玩家挑战，全称应该是「地下城（副本）」，或者叫做「副本地下城（Instanced Dungeon）」，其中 Instance 这个单次作为开发者肯定不陌生，因为 Unity 生成新的游戏对象就是用的 Instance 这个方法。</p>]]></content>
      
      
      <categories>
          
          <category> 随心分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】踩在上面可以站立，从下面跳跃可以穿透的平台</title>
      <link href="/2022/12/15/unity-tips-039/"/>
      <url>/2022/12/15/unity-tips-039/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平台跳跃游戏中，会遇到一种特殊的平台，从上面落下可以站在平台上面，从平台下面跳跃则可以穿透平台，如下图所示：<br><img src="https://s2.loli.net/2022/12/15/ytNpAsij6rQgxEM.gif" alt="可以穿透的平台"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>原以为实现这种效果要自己写代码，当玩家跳跃的时候发射一条射线检测是否与上方的平台发生碰撞，如果发生碰撞就把玩家的刚体组件关掉，等落到平台的时候再重新开启，但实际上 Unity 引擎自带了这种特殊的碰撞组件，即根据角度来判定是否产生碰撞。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>创建一个 2D 图块用来测试，调节 scale 让它变成一个长条形的平台，修改 Tag 和 Layer 为设定好的 Ground（地板），再给它加上刚体和碰撞盒子，如下图所示：<br><img src="https://s2.loli.net/2022/12/15/Cr8gAc1VH3Wxwud.jpg" alt="创建一个平台"></p><p>到上面为止都是常规操作，接下来再给这个对象添加一个特殊的组件“Platform Effector 2D”，然后碰撞盒子组件的“Used By Effector”也勾选上：<br><img src="https://s2.loli.net/2022/12/15/zhSHbCnEPcBs2Zj.jpg" alt="Platform Effector 2D"></p><p>神奇的一幕发生了！刚刚创建的平台，上面有个半圆形的区域，这个区域就是可碰撞范围了。至此，<strong>从上面落下可以站立，从下面跳跃可以穿透的平台</strong>就实现了！</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>如果要实现站在平台上，按下方向键可以穿透落下呢？这个时候就要用到上面的思路了，当玩家站在平台的时候，检测是否按下下方向键，如果按下下方向键就关闭玩家的刚体组件，直到玩家与平台离开接触的时候再恢复就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】让动画准确的显示在地面上（附LayerMask小知识）</title>
      <link href="/2022/12/05/unity-tips-038/"/>
      <url>/2022/12/05/unity-tips-038/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>假如有一个战争类的游戏，里面有一种燃烧瓶，玩家捡到了可以将燃烧瓶丢出去，碰到地面就会破碎爆炸，然后在地面生成一团持续燃烧的火焰，那么是怎么做到让这团火焰的动画精准的显示在地面上面的呢？</p><p>如下图所示，这是一个往前方生成「地火」的技能：</p><p><img src="https://s2.loli.net/2022/12/05/6F21YIxSQTgelV5.gif" alt="地火技能动画"></p><p>不管玩家是站在地面，还是跳跃状态，使用地火的时候，这个技能都应该在“地面冒出”，而不是突然出现在空中：</p><p><img src="https://s2.loli.net/2022/12/05/vA9G3dcrHPtIopa.gif" alt="地火技能动画（错误示范）"></p><p>这个技能的原理就是以玩家当前位置为坐标，按照一定的步长（固定距离）增加 x 坐标来生成地火。</p><p><img src="https://s2.loli.net/2022/12/05/qYHMVDfiSEyBUcl.jpg" alt="地火技能的原理"></p><p>实现这个技能的难点在于玩家的 y 坐标是不固定的，有可能是在跳跃状态下使用技能，但是地火必须刚好出现在地板上面，以玩家为参考点显然是不准确的（物理学中一般会找一个相对静止的物体当参考系）同理，我们应该以地面为参考系来计算地火的位置。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>为了让动画完美的显示在地板上方，我们需要获得地面上点的距离，地火的位置（x坐标）以玩家所在的位置为参考，向朝向的方向递增，比如玩家的 x 坐标是 0，那么第一团地火就是 1，第二团就是 2，以此类推。但是 y 坐标我们需要动态计算，如下图：</p><p><img src="https://s2.loli.net/2022/12/05/v3du4C2Ne6OzExm.jpg" alt="地火的生成坐标原理"></p><p>具体原理是：x 坐标依然是以玩家当前所在位置进行自增，而实际的生成位置是以当前点的正下方，且与地面相交的那个点。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>过一个点，发出一条竖直向下的射线，射线与地面相交的点即地火的生成位置。我们可以用 Unity 自带的射线检测机制获取这个点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected Vector2 GetGroundPoint(Vector2 origin, float offset &#x3D; 0f)</span><br><span class="line">&#123;</span><br><span class="line">    var hit &#x3D; Physics2D.Raycast(origin, Vector2.down, 999f, Context.gameManager.groundLayer);</span><br><span class="line">    var res &#x3D; hit.point;</span><br><span class="line">    res.y +&#x3D; offset;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 999f 是一个 float 类型的变量，用来指定射线检测的最大距离，<code>groundLayer</code> 为 LayerMask 类型的变量，就是在面板中右上角的“Layer”：</p><p><img src="https://s2.loli.net/2022/12/05/JbAIhsM1TyewFNQ.jpg" alt="Layer Mask"></p><p>只要在脚本中声明一个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public LayerMask groundLayer</span><br></pre></td></tr></table></figure><p>然后将这个脚本挂在物体上，就可以通过下拉选择 Layer 了。</p><blockquote><p>注意：layer 是自定义的属性，Ground 是我自己添加的。</p></blockquote><p><code>Physics2D.Raycast</code> 方法可以以某个点为原点，朝着某个方向发出一条射线，当这条射线与某个碰撞器发生碰撞的时候，我们就可以从中获取到碰撞的交点，通过赋值 LayerMask 参数来指定这条射线只与 Ground（地板）进行检测，这个交点就是我们需要的位置。上面加入了一个 offset（偏移量）用来防止位置计算不准确的情况。</p><p>下面用伪代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public override void Handle()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 生成地火的数量</span><br><span class="line">    int count &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成地火的间距，每隔2f生成一个</span><br><span class="line">    var distance &#x3D; new Vector3(2f, 0);</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        var bullet &#x3D; CreateBullet();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 以施法者为参照物，向施法者朝向的地方，按照偏移量生成地火</span><br><span class="line">        var origin &#x3D; skillData.user.transform.position + skillData.user.GetFaceTo() * (i + 1) * distance;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 上面的点与地面的交点，GetYoffset 返回一个 float 类型的变量，默认返回 0 即可（根据实际的动画图片手动修改）</span><br><span class="line">        var pos &#x3D; GetGroundPoint(origin, bullet.GetYoffset());</span><br><span class="line">        bullet.transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成地火</span><br><span class="line">Bullet_FireEruption CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    return skillData.user.CreateBullet&lt;Bullet_FireEruption&gt;(&quot;FireEruption&quot;, skillData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://s2.loli.net/2022/12/05/DUpQea6Bmouc5fI.gif" alt="地火技能（修改之后）"></p><p>现在当玩家处于跳跃状态时，地火也能显示在地板了，可是新的问题又来了，地火为什么会出现在地板下面一点的位置呢？这是由于动画的锚点是在中间，而当我们把动画的坐标设置为地面上方的时候：</p><p><img src="https://s2.loli.net/2022/12/05/JwOH3xGqFvnmoi8.jpg" alt="动画的锚点"></p><p>可以看到，动画的下面一部分”陷入“了地板，为了解决这个问题，就需要手动设置一个偏移量了，也就是上面的方法 <code>GetYoffset</code>，这个偏移值具体要以动画的大小人工进行调节，目前没有比较好的自动计算方法，除非一张图片是完美对称的，那么就可以取图片高度的一半作为偏移量，而实际情况却很难让美工把所有的动画都做出对称图形。</p><p>所以，这里就需要我们自己在场景中算出 y 轴的偏移值了。</p><p>让锚点在图片的正下方？很遗憾，往往也很难做到，除非有一个专门的美工能统一美术风格，而我们大多数是网上找的素材，每个美工的风格都不一样，注意看下面这两张素材，其中一张图片是紧紧贴合网格线下方的，而另外一个则是跟网格线存在很大的空白：<br><img src="https://s2.loli.net/2022/12/05/tRWJQd3kBMInX9m.jpg" alt="动画与网格线贴合，不存在空白"><br><img src="https://s2.loli.net/2022/12/05/k8HpUgQj4mDyXbL.jpg" alt="动画四周存在很多空白"></p><p>如果是第二种图片的类型，那么这个空白部分也没办法进行计算，除非是对素材进行重新加工，把动画素材的风格统一了才行。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>关于 LayerMask 的一个小技巧，上面我是用 public 变量手动选择 LayerMask 的方式，其实还有一种很简单的方法，首先点击一个游戏中的对象，在右侧面板右上角的位置，选择 Layer 下拉菜单：</p><p><img src="https://s2.loli.net/2022/12/05/ncFegwJRX1afLjz.jpg" alt="Layer 下拉菜单"></p><p>每个 Layer 前面都有一个序号，从 0 开始不断自增，记住这个编号，还有另一种引用的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&lt; 6</span><br></pre></td></tr></table></figure><p>这种写法其实就是说：“序号为 6 的 Layer”，也就是 Ground 了，我们再返回射线检测的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这里直接引用了 LayerMask 变量</span><br><span class="line">Physics2D.Raycast(origin, Vector2.down, 999f, Context.gameManager.groundLayer);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二种写法</span><br><span class="line">Physics2D.Raycast(origin, Vector2.down, 999f, 1 &lt;&lt; 6);</span><br></pre></td></tr></table></figure><p>上面这两种写法是等价的，两个左箭头 <code>&lt;&lt;</code> 是位运算，LayerMask 类型的变量，其实就是一个数字，而左侧的 1 也是有含义的，意思「要」检测序号为 6 的 Layer，聪明的小伙伴可能会猜出，如果「不要」检测的话，可以把 1 改成 0，即下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 不检测地面</span><br><span class="line">Physics2D.Raycast(origin, Vector2.down, 0 &lt;&lt; 6);</span><br></pre></td></tr></table></figure><p>如果要同时检测两个呢？同样是用位运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 同时检测序号为6和7的layerMask</span><br><span class="line">Physics2D.Raycast(origin, Vector2.down, 999f, 1 &lt;&lt; 6 | 1 &lt;&lt; 7);</span><br></pre></td></tr></table></figure><p>关于位运算就不再多解释了，感兴趣的自行查阅或参考（网上抄的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LayerMask mask &#x3D; 1 &lt;&lt; 2; &#x2F;&#x2F; 表示开启Layer2。</span><br><span class="line">LayerMask mask &#x3D; 0 &lt;&lt; 5; &#x2F;&#x2F; 表示关闭Layer5。</span><br><span class="line">LayerMask mask &#x3D; 1&lt;&lt;2|1&lt;&lt;8; &#x2F;&#x2F; 表示开启Layer2和Layer8。</span><br><span class="line">LayerMask mask &#x3D; 0&lt;&lt;3|0&lt;&lt;7; &#x2F;&#x2F; 表示关闭Layer3和Layer7。</span><br><span class="line">LayerMask mask &#x3D; ~(1&lt;&lt;3|1&lt;&lt;7); &#x2F;&#x2F; 表示关闭Layer3和Layer7。(同上)</span><br><span class="line">LayerMask mask &#x3D; 1&lt;&lt;2|0&lt;&lt;4; &#x2F;&#x2F; 表示开启Layer2并且同时关闭Layer4.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】改掉一些不必要的xp</title>
      <link href="/2022/11/14/unity-tips-037/"/>
      <url>/2022/11/14/unity-tips-037/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码不规范有时候会让开发者十分难受，但有时候过于追求规范也一样，换句话说不管是哪个极端都不是正常的。</p><p>以个人为例，我很喜欢「分门别类」把一些功能不一样的类拆分成单个文件，像下面这样定义一些数据类型：</p><p><img src="https://files.catbox.moe/ex20vx.jpg" alt="数据类"></p><p>这些数据类型是用来当做订阅模式发送消息用的，可以看到数量非常多，每个类基本都是下面这样的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">public class SubParam_EnemyDead : ObserverParams</span><br><span class="line">&#123;</span><br><span class="line">    public Format_Enemy enemyModel;</span><br><span class="line">    public int level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含一些很简单的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">public class SubParam_GetExp : ObserverParams</span><br><span class="line">&#123;</span><br><span class="line">    public int exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上并不需要为这些数据类型单独保存一个文件，将他们合并在一起就可以了，像下面这样，直接新建一个 <code>SubParam</code> 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">public class SubParam_EnemyDead : ObserverParams</span><br><span class="line">&#123;</span><br><span class="line">    public Format_Enemy enemyModel;</span><br><span class="line">    public int level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SubParam_GetExp : ObserverParams</span><br><span class="line">&#123;</span><br><span class="line">    public int exp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ... 其他类型</span><br></pre></td></tr></table></figure><p>也就是说把所有的类都放在同一个文件里面，不需要为每个类都单独创建一个文件。</p><p>研究了其他编程框架，基本上也是这么做的，这样不仅可以减少管理文件的难度，也大大加快了文件的加载和编译速度（因为读取文件是需要执行 IO 的，要读取的文件越多，表示要加载的次数也越多）最好的例子就是 PHP 制作的网页，每一名用户访问网站，PHP 解释器就要将整站的 PHP 代码加载一次，文件越多意味着要加载的次数越多，加载速度越慢。</p><p>效率往往和规范相冲突，例如以优雅著称的 Laravel 框架，实际上效率很低，至于如何取舍就取决于个人了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】限定条件与释放权限的时机</title>
      <link href="/2022/11/11/unity-tips-036/"/>
      <url>/2022/11/11/unity-tips-036/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在游戏中，存在许多限定条件，例如在对话状态下玩家就不能控制角色在场景左右移动，在很早之前开发《名为怪物游戏》的时候，开发菜单系统使用了「栈」这种数据结构来解决这个问题，但有的时候限定条件会存在多个触发器的问题。</p><p>名为怪物游戏菜单系统：<a href="https://huotuyouxi.com/2021/08/17/monster-game-14">https://huotuyouxi.com/2021/08/17/monster-game-14</a></p><p>以横版卷轴为例，玩家在场景中左右移动，按键释放技能等等，统一归纳为「玩家操作」，而如果玩家打开菜单或者与NPC进行对话的时候应该限制玩家不能操作，不然就太奇怪了；这种时候，使用栈不一定能很好解决问题，用栈可以很方便的解决多级菜单控制权问题，但是限制玩家操作的地方很多，例如前面的打开菜单和NPC对话，这种多对一的情况下，可能会出现乱序问题，比如玩家在打开菜单的情况下，因为某些情况发生了移动（比如站在斜面上因为重力影响而下滑）而恰好滑入了某个剧情触发器，进而自动弹出对话，那么这个时候，玩家的菜单并没有关闭，但是已经进入了对话系统，当对话结束的时候，菜单窗口还在，可是因为对话系统结束了，执行了出栈操作，解放了玩家的操作权，因而就会导致玩家明明开着菜单，却可以在地图移动的情况。</p><p><img src="https://i.niupic.com/images/2022/11/11/aauK.png" alt="多级菜单的控制权转移"></p><p>多级菜单可以逐级限制，逐级释放权限，但是很多场景并不是这么有序的情况。</p><p><img src="https://i.niupic.com/images/2022/11/11/aauL.jpg" alt="玩家操作权限"></p><p>玩家的操作权限受到很多其他系统的控制，如何保证有序的执行呢？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>当一个条件存在多引用的时候，何时释放权限成为了最大问题。<br>我想到了利用内存的垃圾回收机制——即计数器引用的方式来控制权限。<br>这是面试很常见的一道问题：</p><blockquote><p>请解释一个变量是如何被系统回收的？</p></blockquote><p>首先，变量在内存中有两个字段要保存，第一个是变量本身的值，第二个是变量的引用次数，每当变量被引用就会让计数器自增一次，而每当调用完毕就会让计数器自减，然后系统再根据变量的计数器来判断这个变量要不要被回收（即计数器为0的变量就会被判定为无用变量）。</p><p>由上面的思路，在写某些限定条件的时候，可以写一个如下的父类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 一个计数器模式</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">namespace FireRabbit</span><br><span class="line">&#123;</span><br><span class="line">    public class Counter</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 引用计数器</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        protected int count;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; 功能权限判定</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</span><br><span class="line">        public bool IsEnabled()</span><br><span class="line">        &#123;</span><br><span class="line">            return count &#x3D;&#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Increment()</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Decrement()</span><br><span class="line">        &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">public class Test : Counter</span><br><span class="line">&#123;</span><br><span class="line">    public void Handle()</span><br><span class="line">    &#123;</span><br><span class="line">        if (IsEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 执行某些逻辑</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 还存在未被释放的引用，无法执行的处理</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">    public void DoSomeThing(Test test)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始执行，先让Test的计数器自增，令其处于被引用状态</span><br><span class="line">        test.Increment();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; ... 这里执行A的逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 执行完毕后释放引用计数器</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;test&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">    public void OnCompleted(Test test)</span><br><span class="line">    &#123;</span><br><span class="line">        test.Decrement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class B</span><br><span class="line">&#123;</span><br><span class="line">    public void DoSomeThing(Test test)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始执行，先让Test的计数器自增，令其处于被引用状态</span><br><span class="line">        test.Increment();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; ... 这里执行A的逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 执行完毕后释放引用计数器</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;test&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">    public void OnCompleted(Test test)</span><br><span class="line">    &#123;</span><br><span class="line">        test.Decrement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    public void Method()</span><br><span class="line">    &#123;</span><br><span class="line">        var test &#x3D; new Test();</span><br><span class="line">        var a &#x3D; new A();</span><br><span class="line">        var b &#x3D; new B();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 没有任何引用的时候（正常执行）</span><br><span class="line">        test.Handle();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 依次执行a和b的方法</span><br><span class="line">        a.DoSomeThing(test);</span><br><span class="line">        b.DoSomeThing(test);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 现在就无法执行了（因为a和b还未释放引用）</span><br><span class="line">        test.Handle();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将A的引用释放</span><br><span class="line">        a.OnCompleted(test);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 因为还存在b的引用未被释放，所以还是执行不了</span><br><span class="line">        test.Handle();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 再将b释放</span><br><span class="line">        b.OnCompleted(test);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 至此，所有引用都已经被释放，可以正常执行了</span><br><span class="line">        test.Handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这就是利用了引用计数器模式解决无序权限的限制与释放时机问题。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】使用有限状态机实现怪物AI</title>
      <link href="/2022/10/28/unity-tips-035/"/>
      <url>/2022/10/28/unity-tips-035/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想要在游戏中实现敌人 AI，使用简单的 <code>if-else</code> 结构，虽然能实现功能，但是最终代码会乱成一团，有限状态机可以很好的解决敌人 AI 问题，并且使代码逻辑清晰、简洁。</p><h2 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h2><p>先来看看维基百科的说明：</p><blockquote><p>有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机（英语：finite-state automaton，缩写：FSA），简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。</p></blockquote><p>简单地说，状态机就是一种用于切换状态的机制，而有限则表示所有的状态数量是可以确定的。<br>例如水有三种状态，常温下是液态，高温下会蒸发为气态，低温下又会凝结成固态。<br>气温的变化就是状态转换的【条件】，而不同形态是【结果】。</p><h2 id="敌人行为"><a href="#敌人行为" class="headerlink" title="敌人行为"></a>敌人行为</h2><p>以横版卷轴游戏为例，玩家前面有一只哥布林，哥布林会在前面来回巡逻，而玩家如果靠得太近，哥布林就会追上来打玩家，而如果玩家快速逃跑，哥布林又会回到巡逻点继续巡逻。</p><p><img src="https://pic1.imgdb.cn/item/635b4f2c16f2c2beb1a0264f.gif" alt="敌人的巡逻状态"><br><img src="https://pic1.imgdb.cn/item/635b4f2c16f2c2beb1a02659.gif" alt="敌人的追击状态"></p><p>这里的状态可以简化为三种：1、巡逻，2、追击，3、攻击。</p><p>而状态的转换条件分别是：<br>1、当玩家距离太远时，哥布林没发现玩家就会在附近巡逻<br>2、当玩家距离哥布林很近时，哥布林会发现玩家然后前来追击<br>3、当哥布林追上玩家时就会用它手里的棍子敲打玩家</p><p>从上面的例子可以知道【距离远近】就是状态转换的条件。</p><p>接下来我们就可以在哥布林的 <code>Update</code> 方法内写下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 用于判断哥布林当前是否处于攻击状态</span><br><span class="line">bool isAttack &#x3D; false;</span><br><span class="line"></span><br><span class="line">if 玩家与哥布林距离 ≤ 10 &amp;&amp; isAttack &#x3D;&#x3D; false</span><br><span class="line">    向玩家移动</span><br><span class="line">else</span><br><span class="line">    返回巡逻点</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if 玩家与哥布林距离 ≤ 1</span><br><span class="line">    isAttack&#x3D;true</span><br><span class="line">    使用棍子攻击玩家</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if 哥布林攻击动画结束</span><br><span class="line">   isAttack&#x3D;false</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>业务代码的逻辑大致就是这样，用很多个 <code>if-else</code> 和布尔型变量来控制敌人的 AI，这样虽然可以实现功能，但维护性和复用性太差了。</p><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p>只需要写一个用于处理不同状态的【状态机】即可解决上述问题，状态机的代码十分简单，既然是【状态】，那我们就先定义一个状态接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace FireRabbit</span><br><span class="line">&#123;</span><br><span class="line">    public interface IState</span><br><span class="line">    &#123;</span><br><span class="line">        void OnEnter();</span><br><span class="line">        void OnExit();</span><br><span class="line">        void OnUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个状态都有 <code>OnEnter</code>（进入状态时的初始化操作），<code>OnExit</code>（状态被转换时的回调处理），<code>OnUpdate</code>（状态的实际处理方法），接下来我们再写一个用来处理状态转换的功能类——状态机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FireRabbit</span><br><span class="line">&#123;</span><br><span class="line">    public class FSM</span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;object, IState&gt; states &#x3D; new Dictionary&lt;object, IState&gt;();</span><br><span class="line">        IState currentState;</span><br><span class="line"></span><br><span class="line">        public void Add(object key, IState state)</span><br><span class="line">        &#123;</span><br><span class="line">            states.Add(key, state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Change(object key)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(&quot;切换状态：&quot; + key.ToString());</span><br><span class="line"></span><br><span class="line">            currentState?.OnExit();</span><br><span class="line">            currentState &#x3D; states[key];</span><br><span class="line">            currentState.OnEnter();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Working()</span><br><span class="line">        &#123;</span><br><span class="line">            currentState?.OnUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，状态机就是这么简单，上面的代码可以直接复制到项目中使用，只需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 引入命名空间</span><br><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">FSM fsm &#x3D; new();</span><br></pre></td></tr></table></figure><p>还需要定义几个状态类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># 敌人待机状态</span><br><span class="line">public class SkirmisherIdleState : IState</span><br><span class="line">&#123;</span><br><span class="line">    FSM fsm;</span><br><span class="line"></span><br><span class="line">    public SkirmisherIdleState(FSM fsm)</span><br><span class="line">    &#123;</span><br><span class="line">        this.fsm &#x3D; fsm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnEnter()</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnExit()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 敌人攻击状态</span><br><span class="line">public class SkirmisherAttackState : IState</span><br><span class="line">&#123;</span><br><span class="line">    FSM fsm;</span><br><span class="line"></span><br><span class="line">    public SkirmisherAttackState(FSM fsm)</span><br><span class="line">    &#123;</span><br><span class="line">        this.fsm &#x3D; fsm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnEnter()</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnExit()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态类实现 <code>IState</code> 接口，在构造函数内传入状态机以便用于切换状态。<br>定义好你需要的不同状态之后，就可以将这些状态加入状态机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">FSM fsm &#x3D; new();</span><br><span class="line">fsm.Add(&quot;idle&quot;, new SkirmisherIdleState(fsm));</span><br><span class="line">fsm.Add(&quot;attack&quot;, new SkirmisherAttackState(fsm));</span><br></pre></td></tr></table></figure><p>可以用一个字符串作为状态的名称，为了规范，可以使用枚举变量（enum）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum STATE &#123; IDLE, ATTACK &#125;;</span><br></pre></td></tr></table></figure><p>这样我们就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">FSM fsm &#x3D; new();</span><br><span class="line">fsm.Add(State.IDLE, new SkirmisherIdleState(fsm));</span><br><span class="line">fsm.Add(State.ATTACK, new SkirmisherAttackState(fsm));</span><br></pre></td></tr></table></figure><p>接着要执行状态机的方法，让状态机在敌人脚本的 <code>Update</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using FireRabbit;</span><br><span class="line"></span><br><span class="line">public abstract class Enemy_Skirmisher : Enemy</span><br><span class="line">&#123;</span><br><span class="line">    enum STATE &#123; IDLE, CHASE, ATTACK, PATROL, HURT, DEAD &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 巡逻点</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public List&lt;Transform&gt; patroals;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public List&lt;Vector3&gt; patroalPoints;</span><br><span class="line"></span><br><span class="line">    void Start() </span><br><span class="line">    &#123;</span><br><span class="line">        FSM fsm &#x3D; new();</span><br><span class="line">        fsm.Add(State.IDLE, new SkirmisherIdleState(fsm));</span><br><span class="line">        fsm.Add(State.ATTACK, new SkirmisherAttackState(fsm));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将巡逻点转化成坐标</span><br><span class="line">        patroalPoints &#x3D; new List&lt;Vector3&gt;();</span><br><span class="line">        foreach (var item in patroals)</span><br><span class="line">        &#123;</span><br><span class="line">            patroalPoints.Add(item.position);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 敌人的初始状态</span><br><span class="line">        fsm.Change(STATE.IDLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update() </span><br><span class="line">    &#123;</span><br><span class="line">        fsm.Working();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就设置好敌人的 AI 了，代码非常简单！<br>敌人的巡逻点可以用几个空对象作为标记，方便在场景直观看到：</p><p><img src="https://i.niupic.com/images/2022/10/28/a9US.jpg" alt="敌人巡逻点和“眼睛范围”"></p><p>敌人的“眼睛”其实就是一个碰撞盒子（触发器），用来检测玩家是否在触发器内：</p><p><img src="https://i.niupic.com/images/2022/10/28/a9UT.jpg" alt="检测玩家的触发器"></p><p>在写一个简单的类用来判断是否“看见玩家”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class EnemyComponent_Finder : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public bool isFind;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        if (collision.CompareTag(Constant.TAG_PLAYER))</span><br><span class="line">        &#123;</span><br><span class="line">            isFind &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerExit2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        if (collision.CompareTag(Constant.TAG_PLAYER))</span><br><span class="line">        &#123;</span><br><span class="line">            isFind &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当玩家进入触发器内，就能判断敌人“看见”玩家了。<br>敌人的 AI 只需要在状态类中具体实现即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 待机类，敌人会在原地待机1秒钟，然后进入巡逻状态</span><br><span class="line">public class SkirmisherIdleState : IState</span><br><span class="line">&#123;</span><br><span class="line">    FSM fsm;</span><br><span class="line">    Enemy_Skirmisher enemy;</span><br><span class="line"></span><br><span class="line">    float timer;</span><br><span class="line"></span><br><span class="line">    public SkirmisherIdleState(FSM fsm, Enemy_Skirmisher enemy)</span><br><span class="line">    &#123;</span><br><span class="line">        this.fsm &#x3D; fsm;</span><br><span class="line">        this.enemy &#x3D; enemy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnEnter()</span><br><span class="line">    &#123;</span><br><span class="line">        timer &#x3D; Time.time + 1f;</span><br><span class="line">        enemy.animator.Play(&quot;idle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnExit()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Time.time &gt;&#x3D; timer)</span><br><span class="line">        &#123;</span><br><span class="line">            fsm.Change(STATE.PATROL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于处理敌人巡逻的逻辑，当敌人发现玩家时就会转换成追击状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class SkirmisherPatrolState : IState</span><br><span class="line">&#123;</span><br><span class="line">    FSM fsm;</span><br><span class="line">    Enemy_Skirmisher enemy;</span><br><span class="line">    int index;</span><br><span class="line"></span><br><span class="line">    public SkirmisherPatrolState(FSM fsm, Enemy_Skirmisher enemy)</span><br><span class="line">    &#123;</span><br><span class="line">        this.fsm &#x3D; fsm;</span><br><span class="line">        this.enemy &#x3D; enemy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnEnter()</span><br><span class="line">    &#123;</span><br><span class="line">        enemy.animator.Play(&quot;run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnExit()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;结束&quot; + index);</span><br><span class="line"></span><br><span class="line">        index++;</span><br><span class="line">        if (index &#x3D;&#x3D; enemy.patroalPoints.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            index &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        var target &#x3D; enemy.patroalPoints[index];</span><br><span class="line">        enemy.SetFaceTo(target);</span><br><span class="line"></span><br><span class="line">        var pos &#x3D; new Vector3(target.x, enemy.transform.position.y);</span><br><span class="line">        enemy.transform.position &#x3D; Vector2.MoveTowards(enemy.transform.position, pos, enemy.moveSpeed * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        if (enemy.finder.isFind)</span><br><span class="line">        &#123;</span><br><span class="line">            fsm.Change(STATE.CHASE);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if (Vector3.Distance(enemy.transform.position, target) &lt;&#x3D; 1f)</span><br><span class="line">            &#123;</span><br><span class="line">                fsm.Change(STATE.IDLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里列举的仅用于演示，就不逐一把所有状态都贴上来了。</p><p>除了受伤状态之外，其他状态都是在对应状态类内实现转化，而受伤类比较特殊，必须在敌人被玩家攻击的时候才会判定，因此需要在敌人的受伤方法内调用状态机进行状态转换，敌人的父类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 敌人受到伤害（死亡在状态机进行判定）</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;damage&quot;&gt;&lt;&#x2F;param&gt;</span><br><span class="line">public override void TakeDamage(int damage)</span><br><span class="line">&#123;</span><br><span class="line">    if (invincible || isDead) return;</span><br><span class="line"></span><br><span class="line">    ShowDamageText(damage);</span><br><span class="line">    currentHP &#x3D; Mathf.Max(0, currentHP - damage);</span><br><span class="line"></span><br><span class="line">    OnHurtCallback(damage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>敌人子类实现回调方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnHurtCallback(int damage)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;剩余HP：&quot; + currentHP);</span><br><span class="line">    fsm.Change(STATE.HURT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后测试敌人死亡：</p><p><img src="https://pic1.imgdb.cn/item/635b4f2c16f2c2beb1a02663.gif" alt="敌人死亡状态"></p><h2 id="游戏日记"><a href="#游戏日记" class="headerlink" title="游戏日记"></a>游戏日记</h2><p>国庆期间用了一周多的时间写了横版卷轴新作的剧本，结果发现剧情超过预期的长度于是就废弃了（白白浪费一周时间），现在开始加急赶进度，将游戏的基本框架搭好，然后开始正式制作游戏流程，争取在今年内发布 Demo 版。</p><p>游戏的素材还是很缺，只能先找一些网络素材替代了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】EventSystems中IPointerEnterHandler与IPointerExitHandler同时触发导致闪烁问题的解决方法</title>
      <link href="/2022/09/09/unity-tips-034/"/>
      <url>/2022/09/09/unity-tips-034/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 EventSystems 制作 Tooltip（提示框）的时候，鼠标指针划入需要显示提示框的物体上，在旁边显示一个帮助窗口，需要用到 Unity 的 EventSystems 系统。并且在脚本组件实现两个接口：<code>IPointerEnterHandler</code> 和 <code>IPointerExitHandler</code>，这里就会出现一个很奇怪的问题，当鼠标指针滑入物体显示出提示框，但是很快又会消失，然后又瞬间出现——不断闪烁。</p><h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h2><p>这是因为鼠标是根据射线来检测的，在 Canvas 组件有 <code>Graphic Raycaster</code> 的组件用于检测鼠标指针。</p><p><img src="https://pic.imgdb.cn/item/631b45cd16f2c2beb1f4b6c1.jpg" alt="射线检测组件"></p><p>之所以会出现闪烁的情况是因为当鼠标移动到物体上面时，触发了显示窗口的方法，而弹出的窗口刚好遮挡了鼠标指针，导致触发 <code>OnPointerExit</code> 方法，而触发了该方法之后，一般我们会隐藏提示框，当提示框被隐藏之后，鼠标又检测到进入物体，接着又显示提示框……如此反复循环就出现闪烁的情况了。</p><p>最简单的解决方法是：错位。<br>即将提示框的位置进行偏移，避免遮挡到鼠标指针，或者直接修改提示框的锚点都可以，如下图所示，我将提示框的位置偏移到指针右下角，这样当提示框出现的时候就不会挡到鼠标指针了。</p><p><img src="https://pic.imgdb.cn/item/631b46ac16f2c2beb1f5cb87.jpg" alt="进行了偏移的提示框"></p><p>第二种方法就是移除 Canvas 的射线检测组件，但是 Canvas 上面会挂载其他 UI 节点，为避免影响其他 UI 对象的射线检测，我们需要添加一个专门存放提示窗口的 Tooltip Canvas，如下图所示：</p><p><img src="https://pic.imgdb.cn/item/631b476b16f2c2beb1f724c4.jpg" alt="ToolCanvas"></p><p>即场景中存在两个 Canvas，其中一个用来放置普通的 UI，另一个专门用来放置提示窗口的 UI。<br>接着将 ToolCanvas 的 <code>Graphic Raycaster</code> 组件删掉就行：</p><p><img src="https://pic.imgdb.cn/item/631b47c316f2c2beb1f83aa4.jpg" alt="移除ToolCanvas的射线检测组件"></p><p>然后所有的提示框都放到这个 Canvas 下面就不会出现闪烁的情况了。</p><h2 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h2><p>如果按照上面的方法依然出现闪烁，说明不是常规的情况。<br>比如一个背包的格子由两部分组成：格子和道具图标。</p><p><img src="https://pic.imgdb.cn/item/631b482f16f2c2beb1f8b92f.jpg"></p><p>格子就是背后的格子背景，就是一个方框而已。</p><p><img src="https://pic.imgdb.cn/item/631b486d16f2c2beb1f90b6c.jpg" alt="格子背景"></p><p>背包就是由格子和道具 Icon（图标）组成。<br>一般而言，我们会把脚本挂在格子背景上面，Icon 就是纯粹的图片，没有任何脚本挂在 Icon 上面。</p><p>用这种方法制作的背包格子，在鼠标滑入的时候会出现闪烁情况，而且按照方法一也无法解决，具体原因如下图所示：</p><p><img src="https://pic.imgdb.cn/item/631b498516f2c2beb1fa582d.jpg" alt="Icon与背景的间距"><br><img src="https://pic.imgdb.cn/item/631b498516f2c2beb1fa5839.jpg" alt="鼠标触碰到Icon的问题"></p><p>为了方便演示，我把 Icon 的大小调小了一些，这样我们就能清楚的看到 Icon 和格子之间的间距。<br>当鼠标指针滑入格子背景时就会触发 <code>OnPointerEnter</code> 方法，并且在格子与 Icon 的间距之间滑动没有任何问题，但是如果碰到 Icon 就会触发 <code>OnPointerExit</code> 方法。</p><p>这是因为我们的脚本是挂在格子背景上面，而 Icon 的层级是在格子之上的，因此鼠标会被 Icon 的图片遮挡导致触发了 <code>OnPointerExit</code>。</p><p>解决方法就是在 Icon 上挂显示提示框的脚本，或者不采用这种双层的格子，而只需要一张 Icon，不需要背后的方框，更简单粗暴的方法就是在美工层面把 Icon 和背后的格子方框通过 PS 合并成一张图，这样我们就不需要用双层节点实现了，也就不会被下面那层节点遮挡鼠标指针了。</p><h2 id="解决方法三（次日补充）"><a href="#解决方法三（次日补充）" class="headerlink" title="解决方法三（次日补充）"></a>解决方法三（次日补充）</h2><p>最新发现的方法可以不做任何修改，即使是双层嵌套（背景框+图标）也能使用，具体做法是将 Icon 的 Image 组件里面的 <code>Raycaster Target</code>（射线检测目标）勾选去掉即可，即忽视这个图片的射线检测，这样就不会遮挡到背景框，即使把脚本挂在背景框也没问题。<br><img src="https://pic.imgdb.cn/item/631c7cd816f2c2beb116e32d.jpg" alt="Raycaster Target"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>横版卷轴游戏（测试版）</title>
      <link href="/2022/08/13/scroll-game-01/"/>
      <url>/2022/08/13/scroll-game-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸽了两个月，《魔王传说4》暂时搁置了。感觉没什么人玩，开始思考是不是游戏模式不好玩呢？个人倒是挺喜欢这次的新战斗系统，不过玩家如果不喜欢的话就没意义了，所以这两个月一直都在找一个比较适合现阶段开发而且不会觉得无聊的新模式。</p><p>中间想过要不要先做个简单的类型，比如植物大战僵尸那种放置类的游戏，之前设想的「梦兽的世界」（口袋妖怪Like游戏）也重新进行考虑，还看了很多UP主试玩了各种类型的游戏，以此作为参考，但发现最后都避不开素材的问题。</p><p>最后决定在Unity素材商店寻找素材制作一款小游戏，游戏类型就选用小时候玩的FC游戏，如魂斗罗之类的射击游戏，于是就有了下面这部作品。</p><h2 id="兔子战记"><a href="#兔子战记" class="headerlink" title="兔子战记"></a>兔子战记</h2><h3 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h3><p>《兔子战记》是一款以兔子为主角的横版卷轴射击游戏，玩家操控兔子在一颗未知的星球上与怪物战斗，并且寻找失散的队友的故事。<br><img src="https://s2.loli.net/2022/08/13/wceQ5kRZWMtviqy.jpg" alt="兔子战记"></p><h3 id="游戏下载"><a href="#游戏下载" class="headerlink" title="游戏下载"></a>游戏下载</h3><p>下面两个链接都是一样的。<br>链接: <a href="https://pan.baidu.com/s/1fIz1NC790NdWl40csxyA-w?pwd=svh2">https://pan.baidu.com/s/1fIz1NC790NdWl40csxyA-w?pwd=svh2</a> 提取码: svh2<br>链接: <a href="https://pan.baidu.com/s/13RchGOecKegDsRcRCo6zmw?pwd=lfbo">https://pan.baidu.com/s/13RchGOecKegDsRcRCo6zmw?pwd=lfbo</a> 提取码: lfbo<br><strong>游戏好像还有BUG，应该不会修复了，只做了前面几关。</strong></p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>按方向键移动，空格键跳跃（可以二段跳），Z键发射子弹。<br>只有吃到武器的时候才能发射子弹。</p><h3 id="特色系统"><a href="#特色系统" class="headerlink" title="特色系统"></a>特色系统</h3><p>第一个是挑战BOSS的乐趣，游戏中有各种不同的BOSS可以挑战。<br><img src="https://s2.loli.net/2022/08/14/udsUQKipDzqh1aJ.gif" alt="森林巨怪"><br><img src="https://s2.loli.net/2022/08/14/fEW46R98xcQqKTB.gif" alt="森林巨怪"><br>第二个是游戏中有各种不同类型的武器，比如打败森林巨怪之后就可以得到「苹果」，玩家也可以用森林巨怪那样发射苹果攻击敌人。<br><img src="https://s2.loli.net/2022/08/14/VwlifZycQE4TXY3.gif" alt="苹果攻击"><br>后面还有一个BOSS火蜥蜴，打败火蜥蜴可以得到「火焰放射器」。<br>第三个是游戏有各种模式（没实现），比如城堡守卫战，玩家需要抵挡一波又一波的敌人进攻，保护“水晶”之类的东西。<br>第四个是游戏有武器改造系统，玩家搜集的武器可以在配置页面进行升级和强化改造，比如最开始的武器「斧头」是直接向前方丢出，而升级改造之后可以变成回旋斧之类的，而光线枪可以升级成快速发射或者带有穿透子弹，总之，一件武器可以根据玩家强化使用的材料改造成不同类型。<br>玩家在场景搜集的萝卜是兔星的「货币」，可以在商店交换物资，比如武器或者强化材料。<br>每次最多携带3把不同武器，可以在关卡里面切换。<br>虽然脑洞大开想了很多系统，但是都没实现就是了。</p><h3 id="制作总结"><a href="#制作总结" class="headerlink" title="制作总结"></a>制作总结</h3><p>制作过程还算比较顺利，只不过Unity免费的素材太少，而且风格也不统一，想做一些比较复杂的BOSS找不到包含各种动作的素材，局限性太大了，于是做到一半就放弃了。</p><h2 id="解决素材问题"><a href="#解决素材问题" class="headerlink" title="解决素材问题"></a>解决素材问题</h2><p>现在制作的游戏不能像 RPGMaker 随便使用盗版素材了。<br>因为现在的目标是做一款能上架Steam的游戏，只能选择免费可商用的素材。<br>素材始终是心头大患，所以这次就先从素材方面着手。<br>花了几天时间寻找素材，终于找到一个比较适合的类型了——2D横版卷轴像素风游戏。</p><h2 id="横版卷轴新作"><a href="#横版卷轴新作" class="headerlink" title="横版卷轴新作"></a>横版卷轴新作</h2><h3 id="新游设计"><a href="#新游设计" class="headerlink" title="新游设计"></a>新游设计</h3><p>说到横版卷轴，那就是小时候玩的QQ三国和冒险岛了。<br>当然因为现在是初学阶段，所以不打算做成DNF那样可以复杂连招还有打击感的游戏。<br>只要能做出冒险岛和QQ三国那种简单类型的就可以。<br>这次的主角是一个小魔女，如下图所示：<br><img src="https://s2.loli.net/2022/08/14/2DYqheGVB85OZQj.jpg" alt="横版卷轴"><br><img src="https://s2.loli.net/2022/08/14/lNGEW2ryq67FBPQ.jpg" alt="横版卷轴"><br>这种类型的素材还是挺多的，可能是现在比较流行银河恶魔城类型的游戏吧。<br>拿到素材之后就立即开工，经过两周的开发完成了一个简单的Demo。<br>冒险岛和QQ三国不是动作类型的游戏，因此操作体验不是很好。<br>于是，我在游戏中加入了一个带有无敌帧的瞬移技能增加操作感。<br>（还有近战法师的设定，偏向于操作性的）<br><img src="https://s2.loli.net/2022/08/14/bULYqTn6QDvAZma.gif" alt="横版卷轴"><br>BOSS也会释放各种技能，挑战BOSS是最大的乐趣。<br><img src="https://s2.loli.net/2022/08/14/ksEDy1d5Aj3bYOx.gif" alt="横版卷轴"><br>玩家可以释放很多不同种类的技能，这些技能可以自由配置。<br>因为现在是演示版，技能都是配好的，无法修改，临时制作了几个测试技能。<br><img src="https://s2.loli.net/2022/08/14/13VeS9k4ADxG6oM.gif" alt="横版卷轴"></p><h3 id="操作方法-1"><a href="#操作方法-1" class="headerlink" title="操作方法"></a>操作方法</h3><p>方向键控制移动，其他键位及技能如下：<br>Z：发射一枚冰菱。<br>X：瞬移一小段距离。<br>C：当角色与敌人在一定距离时，冻结敌人造成伤害。<br>A：一个增益的技能，暂无效果。<br>S：向前方发射寒气，按住可以连续发射，当发射的寒气达到一定次数时，会强化技能效果，发射速度更快、威力更强。<br>D：在空中才能使用，快速下坠并且在地面制造冰锥。<br>Q：发射一枚冰弹，击中敌人造成爆炸。<br>W：发射一个巨大的冰轮。<br>E：发生三枚冰手里剑。<br>空格键：跳跃，短按小跳，长按可以跳到最大高度。</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>链接: <a href="https://pan.baidu.com/s/1fBesq1e7qwgdfe2yWKgHFg?pwd=9tqe">https://pan.baidu.com/s/1fBesq1e7qwgdfe2yWKgHFg?pwd=9tqe</a> 提取码: 9tqe<br>链接: <a href="https://pan.baidu.com/s/1YZ3WBexAPE7WGwu072pr9g?pwd=qmc5">https://pan.baidu.com/s/1YZ3WBexAPE7WGwu072pr9g?pwd=qmc5</a> 提取码: qmc5</p><h3 id="制作总结-1"><a href="#制作总结-1" class="headerlink" title="制作总结"></a>制作总结</h3><p>开发过程还是有不少问题的，比如打击判定、敌人AI等等，比之前做的都难。<br>现在的Demo版应该看起来更像是「游戏」了，角色因为有了复杂的动作而更加生动。<br>角色素材的问题解决了，现在又发现动画的素材很难找……<br>真是一言难尽，素材始终是难以逾越的大山。<br>这次只能先找一些盗版素材临时凑数了，先做完再说。<br>如果游戏真能做到完整版，到时候再氪金买正版素材全部替换掉吧。<br>辞职回家的第三个年头了，这三年算上班工资都能存下来十几二十万了吧。<br>有时可能还真的直接氪金买更方便，何至于现在还做不出来……</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>魔王传说4应该会搁置一段时间，等以后再看看能不能继续做下去吧。<br>现在应该会重点制作这个横版卷轴游戏，希望这次不要再遇到什么大问题了……<br>做个完整版的游戏咋那么难呢！</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 横版卷轴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 提高 push 速度的方法</title>
      <link href="/2022/05/10/github-01/"/>
      <url>/2022/05/10/github-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 GitHub 托管代码的时候经常会提交失败或者速度超级慢，本文提供了一种解决此问题的方法。</p><h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><p>常见报错是 SSL 超时问题，报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60</span><br></pre></td></tr></table></figure><p>又或者是这样的报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to connect to github.com port 443 after 75010 ms: Operation timed out</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>网上提供的一般是下面这条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure><p>这条命令确实可以解决 SSL 证书认证的问题，即直接跳过了认证。<br>而提交速度慢的原因却不是因为证书，而是因为 GitHub 的主机是在国外，国内的访问速度很慢。</p><h2 id="push-超时的原因"><a href="#push-超时的原因" class="headerlink" title="push 超时的原因"></a>push 超时的原因</h2><p>为了解决这个问题要先科普一个网页开发的知识。当用户在浏览器的地址栏敲下一个地址并且进行访问的时候，首先需要将域名解析成 IP 地址，然后定向到 IP 地址所在的服务器，服务器根据用户的请求返回 HTML 文档，浏览器再解析文档变成可视化的页面 UI。</p><p>GitHub 提交慢的一个原因就在于把域名解析成 IP 的过程，解决方法就是我们自己手动设定 IP，跳过 DNS 解析环节。</p><h2 id="解决解析问题"><a href="#解决解析问题" class="headerlink" title="解决解析问题"></a>解决解析问题</h2><p>IP 查询：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a><br>（在查询的时候需要翻墙，记得开启可以访问外网的 VPN）</p><p>分别查询下面这三个地址：</p><p>1、github.com<br>2、github.global.ssl.fastly.net<br>3、assets-cdn.github.com</p><p>查到地址之后，执行 <code>sudu vim /etc/hosts</code> 命令编辑本地的解析文件：</p><p><img src="https://img3.qq.tc/2022/05/10/imagef7d58c18db25e0f1.png" alt="hosts"><br>（IP 地址要改成自己查询的结果，因为 CDN 服务器分布在全世界，每个人查到的可能都不同）</p><p>Window 系统则是找到 hosts 文件，再以管理员身份运行。<br>保存好之后再使用 push 命令就会直接推送了！<br>因为本地设定了 IP 地址就直接跳过了 DNS 解析的过程，速度直接起飞。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】战国篇v0.4.0版本发布</title>
      <link href="/2022/05/08/legend-of-the-devil-06/"/>
      <url>/2022/05/08/legend-of-the-devil-06/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>4 月因为只有两周时间更新，所以本次更新内容不是很多。</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>当前版本依旧为测试版，并非「正式版」。<br>测试版中极有可能存在大量 BUG，严重情况下甚至直接卡死，造成不好的游戏体验。<br>并且不保证存档可以继承，意味着每次更新可能都要重头开始。<br>如果你希望体验到流畅的游戏流程，那么可以等更新到稳定版之后才入坑。</p><p>素材来源声明：<a href="https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/">https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/</a></p><h2 id="相关下载"><a href="#相关下载" class="headerlink" title="相关下载"></a>相关下载</h2><p>链接: <a href="https://pan.baidu.com/s/1L7bRP6j35jGfKNaWJ2qIUw">https://pan.baidu.com/s/1L7bRP6j35jGfKNaWJ2qIUw</a> 提取码: 0q1s<br>奶牛快传：<a href="https://cowtransfer.com/s/6a0cbe0eb4c14f">https://cowtransfer.com/s/6a0cbe0eb4c14f</a> 传输口令：i8yz10 </p><p>如果百度云下载限速，可改用奶牛快传下载。</p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>逐渐完善游戏的基本玩法，4 月把药田完成了，接下来还有矿洞玩法。其次是扩展技能和心术的丰富度，让每一个 NPC 都有自己的特色技能，这次更新之后可以向云仙城的总管小梅请教，学习剑系技能和暗器有关的技能，玩家可以尝试「暗器流」，不过比较费钱就是了，后续会更新暗器打造功能让玩家减少购买暗器的消耗。</p><p>至此云仙城相关的角色灵技和心术已经全部完成，可以请教的角色包括：小竹、白露、小梅，云仙城的城主令也可以兑换到云仙城特有的灵技和心术，如果能集齐一套，那就可以实现「云仙闪避流」。</p><p>在这之后会增加一些非主要 NPC 也可以请教的功能，比如可以跟路人角色请教获得一些物资。</p><h2 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h2><p>在城主府可以向小梅请教了。</p><p><img src="https://pic.imgdb.cn/item/6277317e09475431290ce82d.jpg" alt="请教小梅"></p><p>增加了可以直接放弃战斗的选项。</p><p><img src="https://pic.imgdb.cn/item/6277317e09475431290ce83a.jpg" alt="放弃战斗"></p><p>增加跳过对话选项，并且增加两个提示按钮，如果是鼠标操作则可以直接点击右上角的跳过按钮。</p><p><img src="https://pic.imgdb.cn/item/6277317e09475431290ce843.jpg" alt="跳过对话和提示按钮"></p><p>在白露医馆可以跟白露对话然后合成药物。</p><p><img src="https://pic.imgdb.cn/item/6277317e09475431290ce85f.jpg" alt="合成药物"></p><p>接下来是本次更新比较大的一个系统：药园系统。<br>在完成云仙城剿灭盗贼任务后就可以进入云仙城药田，只要花费 1 万金币就可以租用药田（永久性的）。</p><p><img src="https://pic.imgdb.cn/item/6277317e09475431290ce86d.jpg" alt="租用药田"></p><p>云仙城的药田因为荒废了，上面长满了杂草，需要手动点击进行清除。</p><p><img src="https://pic.imgdb.cn/item/6277323f09475431290eb1af.jpg" alt="荒废的药田"></p><p>将鼠标移动到作物上，可以看到作物当前的成长状况。</p><p><img src="https://pic.imgdb.cn/item/6277323f09475431290eb1b2.jpg" alt="查看作物状态"></p><p>如果成长度达到成熟值就可以采摘了。</p><p><img src="https://pic.imgdb.cn/item/6277323f09475431290eb1ba.jpg" alt="采摘作物"></p><p>在采摘作物的时候，还有几率额外得到该作物的种子。</p><p><img src="https://pic.imgdb.cn/item/6277323f09475431290eb1cc.jpg" alt="作物的种子"></p><p>作物的种子在野外探险可以获得，在药园管理人处也可以花费金币直接购买。</p><p>游戏没有时间，因此使用战斗胜利作为时间流逝的判定条件。<br>当玩家每次战斗胜利的时候作物就会自动生长，而作物的生长速度与土质等级和肥沃度有关。</p><p><img src="https://pic.imgdb.cn/item/627733550947543129112914.jpg" alt="肥沃度"></p><p>肥沃度即肥料，玩家可以通过焚烧魔物掉落的素材给土壤施肥。</p><p><img src="https://pic.imgdb.cn/item/62773355094754312911290b.jpg" alt="焚烧肥料"></p><p>肥沃度可以直接变成作物的成长度，但是吸收的效率与土质等级有关。<br>土质等级越高，作物吸收肥料的效率也就越高。<br>土质等级只能通过作物收成增加，种植越稀有的作物增加的土质经验就越多。</p><p><img src="https://pic.imgdb.cn/item/627733550947543129112928.jpg" alt="土质等级"></p><h2 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h2><ul><li>新增放弃战斗按钮，可以快速结束战斗</li><li>新增云仙城危机剧情（第一部分正式完结）</li><li>现在可以在白露医馆向白露请教灵技和心术了</li><li>现在可以在城主府向小梅请教了</li><li>云仙城药田功能开放，可以搜集种子种植药材</li><li>新增炼药/道具合成系统，与白露对话可以炼药</li><li>新增乌林城商会2-5楼场景（功能暂未实现）</li></ul><h2 id="优化内容"><a href="#优化内容" class="headerlink" title="优化内容"></a>优化内容</h2><ul><li>优化打开野外探险地图时性能无端消耗问题</li><li>战斗场景非玩家回合隐藏指令栏</li><li>优化对话按键手感</li><li>优化战斗过程的UI显示，非玩家回合隐藏操作菜单</li></ul><h2 id="修复内容"><a href="#修复内容" class="headerlink" title="修复内容"></a>修复内容</h2><ul><li>修复野兽小道场景兽王巢穴无法进入的问题</li><li>修复多次战斗敌人详情名字会有一个”name“叠加的问题</li><li>修复心术升级或遗忘未更新当前界面问题</li></ul><h2 id="平衡调整"><a href="#平衡调整" class="headerlink" title="平衡调整"></a>平衡调整</h2><ul><li>增加锻造的野狼套装基础属性</li><li>境界突破增加的属性提高</li><li>打败敌人获得经验和金钱提高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 魔王传说：战国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML开发的坑——IMG标签导致页面请求两次问题</title>
      <link href="/2022/04/28/html-01/"/>
      <url>/2022/04/28/html-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在做一个网页项目的时候，无意中发现一篇文章在访问的时候会请求两次。<br>这个问题其实很难被发现，因为前端几乎看不出来，如果不看 Network 的记录根本不知道请求了两次。</p><p>发现这个问题也是偶然，我在测试文章 ID 的加密，然后在控制台打印加密的结果。<br>突然发现刷新一次页面居然会打印出两个结果，类似下面这样：<br><img src="https://s2.loli.net/2022/04/28/jR4b8CemH9vEug2.jpg" alt="访问一次页面，控制台却打印两次结果"></p><p>一开始我以为是后端代码的问题，结果找了个遍也没发现什么问题。<br>接着我看了下网络请求，发现确实是请求了两次，可以肯定不是后端的问题了：</p><p><img src="https://s2.loli.net/2022/04/28/xVLWtswKQjaYN8P.jpg" alt="网页被请求了两次"></p><h2 id="排查工作"><a href="#排查工作" class="headerlink" title="排查工作"></a>排查工作</h2><p>出现请求两次的情况一般是 META 标签有可能有什么预加载的指令，<br>或者 JavaScript 脚本刷新了页面，又或者 Ajax 发送的试探性 HEAD 请求。</p><p>排查的方法其实很简单，就是一段代码一段代码的删掉。<br>首先把奇怪的 META 标签全部删掉，发现没有解决；<br>接着把所有的 JS 脚本全部删掉，发现还是没有解决；</p><p>这样就很奇怪了，能够引起页面重新加载的因素都被排除了，那还有什么我不知道的原因？</p><h2 id="所有的可能性"><a href="#所有的可能性" class="headerlink" title="所有的可能性"></a>所有的可能性</h2><p>现在页面删的只剩下 HTMl 代码了，总不可能是 HTML 代码的问题吧？</p><p>虽然感觉自己很傻，但还是尝试删除 HTML 代码。<br>一段一段的删除 HTML 代码，删一段就测试一遍。</p><p>结果最后……居然还真是 HTML 代码的问题。<br>福尔摩斯说过：“排除了一切不可能之后，剩下的即使多么难以置信那都是真相”。</p><p>原来 HTML 代码也会导致页面重新加载，这就属于我的知识盲区了。</p><h2 id="分析请求头"><a href="#分析请求头" class="headerlink" title="分析请求头"></a>分析请求头</h2><p>把两次访问记录的请求头扒下来，关键部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;res&#x2F;239243 HTTP&#x2F;1.1</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: mqq.ht</span><br><span class="line">Referer: http:&#x2F;&#x2F;test.ht&#x2F;admin&#x2F;resources&#x2F;index</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure><p>第二个请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;res&#x2F;239243 HTTP&#x2F;1.1</span><br><span class="line">Accept: image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,image&#x2F;svg+xml,image&#x2F;*,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: mqq.ht</span><br><span class="line">Referer: http:&#x2F;&#x2F;test.ht&#x2F;res&#x2F;239243</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure><p>分析上面两个请求头，可以得到很多有用的信息。<br>我们可以从 Referer（来源页）判断第一次请求是从后台地址：<code>/admin/resources/index</code> 直接打开文章链接的，<br>而第二次 Referer 却是当前文章的链接：<code>/res/239243</code>。</p><p>所以我们可以确定从后台打开文章的时候，又发起了一次请求。</p><p>接着再看 <code>Accept</code> 字段，这是当前请求可以接受的返回资源类型。<br>第一个 Accept 第一个是：<code>text/html</code>，即接收 HTML 文档。<br>而第二个 Accept 却是接收 <code>image</code> 类型为主的资源数据。</p><p>通过上面的分析，我们可以得到两个线索：</p><ul><li>第一次请求是从后台来的，第二次请求是从当前页面来的</li><li>第二次请求的是图片类型的资源</li></ul><p>通过上面两点可以猜出是文章页面的某个图片多发出一次请求。<br>最开始我以为是图片懒加载的原因，但是删掉所有 JS 代码都没有解决。</p><h2 id="找出原因"><a href="#找出原因" class="headerlink" title="找出原因"></a>找出原因</h2><p>一段段删除代码测试之后，发现下面这段问题代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;navbar-brand&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;navbar-logo&quot; href&#x3D;&quot;&#x2F;&quot; title&#x3D;&quot;LOGO&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;#&quot; alt&#x3D;&quot;LOGO&quot;&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这到底有什么问题？根本就看不出来。<br>语法上完全没错，也没有 JavaScript（如懒加载等）。</p><p>哪怕把所有的 css 样式全部去掉，a 标签也去掉，改成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;img src&#x3D;&quot;#&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这么简单的一段 HTML 代码都会导致页面重新加载两次。<br>img 标签的 src 属性是图片的地址，这个地址是后台可以动态改变的：</p><p><img src="https://s2.loli.net/2022/04/28/NjI296rFLOaUt8Y.jpg" alt="后台配置显示的LOGO图片"></p><p>因为还没设计好网页的 LOGO，所以我临时用井号作为占位符。<br>问题就出在这个 img 标签上，而且非常匪夷所思。</p><h2 id="IMG-标签的坑"><a href="#IMG-标签的坑" class="headerlink" title="IMG 标签的坑"></a>IMG 标签的坑</h2><p>IMG 标签在 src 属性为空或者无法正常读取图片地址的时候，某些浏览器就会认为这是一个缺省值，然后以当前页面当做图片的路径进行加载，这就是为什么会导致网页加载两次的原因了。</p><p>同类型的 HTMl 标签还有 form，即使你不配置提交的地址，它也会默认提交到当前页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; title&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>上面的代码等同于在当前页面提交表单。<br>当不填写 action 属性，浏览器就会自动配置一个缺省值，也就是当前地址。</p><h2 id="避免请求两次"><a href="#避免请求两次" class="headerlink" title="避免请求两次"></a>避免请求两次</h2><p>不同的浏览器的处理结果也会不一样，比如火狐和谷歌，对于 img 标签的 src 默认值处理方式可能不同。<br>假设一个图片的链接是动态的，那么最好是不要像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;img src &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>而应该写成如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img&gt;</span><br><span class="line">&lt;img &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这样就可以避免因为图片的地址缺省值导致页面加载两次了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】提升开发效率 - 禁用资源修改自动重载</title>
      <link href="/2022/04/11/unity-tips-033/"/>
      <url>/2022/04/11/unity-tips-033/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 Unity 的时候，如果修改了脚本或者更新了资源那么 Unity 就要重新编译一次，这个功能咋看之下好像很人性化，其实在开发过程是一个超级烦人的存在，例如修改了脚本的一行代码，按了下保存就得重新编译一次，真的令人抓狂了，血压直线飙升，如下图所示：</p><p><img src="https://s2.loli.net/2022/04/11/8IhpbSY3Krls9FA.jpg" alt="修改代码就要重新编译"></p><p>这是人干的事吗？就跟你玩王者农药打团的时候突然弹出 20% 电量提醒一样。<br>多弹几次可能连手机都给你摔了有木有！<br>虽然 IOS 系统没法关闭电量提醒，但是 Unity 可以关闭热加载啊！</p><h2 id="关闭自动编译"><a href="#关闭自动编译" class="headerlink" title="关闭自动编译"></a>关闭自动编译</h2><p>因为 C# 是编译型语言，如果关闭了自动加载脚本变化的功能，每次在运行游戏测试的时候就要手动按下 CTRL+R 来重新编译，否则改动的脚本就无法被重新编译，所以有利有弊，但总体来说是利大于弊的，至少我们开发的过程可以不那么抓狂了。</p><p>打开 Unity，选择左上角的 Preferences 按钮：</p><p><img src="https://s2.loli.net/2022/04/11/fyu6aZxbL5BGXc9.jpg" alt="首选项"></p><p>接着在左侧菜单找到 AssetPipeline，把 Auto Refresh 取消勾选：</p><p><img src="https://s2.loli.net/2022/04/11/O8cYX9uAfrSCdBD.jpg" alt="AssetPipeline"></p><p>OK，大功告成！现在可以舒心的开发了，记得在调试的时候按下 CTRL+R 来手动编译。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】战国篇v0.3.1版本发布</title>
      <link href="/2022/04/02/legend-of-the-devil-05/"/>
      <url>/2022/04/02/legend-of-the-devil-05/</url>
      
        <content type="html"><![CDATA[<h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>《魔王传说：战国篇》是由火烧兔子独立制作的魔王传说系列第四部 RPG 作品。<br>本作以剑与魔法的战国时期为背景，讲述玩家与索尔、拉薇三人组成小分队在乱世中闯出一片天的故事。</p><p>游戏为 Unity 开发，延续了系列的「策略回合制」战斗体系。<br>玩家可以自由组合技能（灵技）和被动技能（心术）实现以弱胜强的局势，并不需要依靠等级碾压 BOSS。</p><p>游戏没有明确的等级概念，而是采用修仙游戏的「境界」设定。<br>玩家不需要刻意去练级，吃道具、做任务等等，有着许多可以获得经验值的方法。<br>还可以与场景的 NPC 进行互动，例如赠送礼物、请教绝技、切磋等等许多互动玩法。</p><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>当前版本依旧为测试版，并非「正式版」。<br>测试版中极有可能存在大量 BUG，严重情况下甚至直接卡死，造成不好的游戏体验。<br>并且不保证存档可以继承，意味着每次更新可能都要重头开始。<br>如果你希望体验到流畅的游戏流程，那么可以等更新到稳定版之后才入坑。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>百度云下载链接: <a href="https://pan.baidu.com/s/1AU2K_HvbwzBJgsoQWHZYiA">https://pan.baidu.com/s/1AU2K_HvbwzBJgsoQWHZYiA</a> 提取码: a6f8<br>奶牛快传下载链接：<a href="https://cowtransfer.com/s/4ed780a5585a46">https://cowtransfer.com/s/4ed780a5585a46</a> 使用传输口令：0rablo</p><p>素材来源声明：<a href="https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/">https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/</a></p><h2 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h2><p>本月更新图文介绍。</p><h3 id="魔兽商人"><a href="#魔兽商人" class="headerlink" title="魔兽商人"></a>魔兽商人</h3><p>云仙城坊市心中魔兽商人，可以在此处用掉落材料交换回复道具。<br><img src="https://pic.imgdb.cn/item/6245933927f86abb2a9c4114.jpg" alt="云仙城坊市"><br><img src="https://pic.imgdb.cn/item/6245933927f86abb2a9c4116.jpg" alt="魔兽商人交换道具"></p><h3 id="NPC-互动功能"><a href="#NPC-互动功能" class="headerlink" title="NPC 互动功能"></a>NPC 互动功能</h3><p>赠送礼物获得 NPC 的好感之后，可以向他们索取技能秘籍。<br>这些技能秘籍包含他们特有的技能，除了请教的方法之外没有其他获取途径。</p><p><img src="https://pic.imgdb.cn/item/6245939a27f86abb2a9d1d69.jpg" alt="NPC指令面板"><br><img src="https://pic.imgdb.cn/item/6245939a27f86abb2a9d1dcd.jpg" alt="赠送礼物"><br><img src="https://pic.imgdb.cn/item/6245939a27f86abb2a9d1eb3.jpg" alt="请教秘籍"></p><h3 id="UI-界面大更新"><a href="#UI-界面大更新" class="headerlink" title="UI 界面大更新"></a>UI 界面大更新</h3><p>这次对 UI 进行了一番较大的更新，现在看起来应该更加舒服了。</p><p><img src="https://pic.imgdb.cn/item/6245944a27f86abb2a9ea517.jpg" alt="菜单道具"><br><img src="https://pic.imgdb.cn/item/6245944a27f86abb2a9ea523.jpg" alt="菜单心术"><br><img src="https://pic.imgdb.cn/item/6245944a27f86abb2a9ea529.jpg" alt="菜单属性"><br><img src="https://pic.imgdb.cn/item/6245944a27f86abb2a9ea538.jpg" alt="菜单任务"><br><img src="https://pic.imgdb.cn/item/624594cc27f86abb2a9fcdaf.jpg" alt="战斗前观察敌人的属性"></p><h3 id="战斗场景美化"><a href="#战斗场景美化" class="headerlink" title="战斗场景美化"></a>战斗场景美化</h3><p>对战斗场景的 UI 也进行了一番美化。<br><img src="https://pic.imgdb.cn/item/624594e927f86abb2aa00b82.jpg" alt="战斗场景UI美化"></p><h3 id="天赋的实现"><a href="#天赋的实现" class="headerlink" title="天赋的实现"></a>天赋的实现</h3><p>上一个版本部分天赋是没有实际效果的，这次更新基本实现了。<br>并且本次还增加了一些开局策略性的天赋效果，可以降低游戏难度。</p><p><img src="https://pic.imgdb.cn/item/6245955227f86abb2aa0f176.jpg" alt="天赋效果"><br><img src="https://pic.imgdb.cn/item/6245955327f86abb2aa0f1e1.jpg" alt="新的天赋"></p><h3 id="人物悟性"><a href="#人物悟性" class="headerlink" title="人物悟性"></a>人物悟性</h3><p>在上一个版本悟性还没有任何作用，这次实现了悟性的功能。<br>例如在升级心术的时候，悟性越高升级心术需要的历练值（经验）就会越少。<br>在人物突破境界的时候同理，悟性越高突破境界需要的历练值也会相应的减少。<br>在人物悟性达到 200 的时候，降低的历练值即可达到最大值，最多可以减少一半的历练值要求。</p><p><img src="https://pic.imgdb.cn/item/6245968827f86abb2aa35d1d.jpg" alt="心术升级"></p><h3 id="锻造功能"><a href="#锻造功能" class="headerlink" title="锻造功能"></a>锻造功能</h3><p>当玩家完成乌林城剧情之后就可以解锁铁匠铺锻造功能了。<br>锻造时需要「设计图」和相应的魔物掉落材料。<br>玩家还可以自由添加一些特殊材料提升锻造装备的最终品质，如淬炼石、强化剂等等。<br>（目前添加剂的功能还未实装）</p><p><img src="https://pic.imgdb.cn/item/6245978a27f86abb2aa541f6.jpg" alt="购买锻造材料"><br><img src="https://pic.imgdb.cn/item/6245978a27f86abb2aa542b7.jpg" alt="装备设计图纸"><br><img src="https://pic.imgdb.cn/item/6245978b27f86abb2aa54323.jpg" alt="装备添加剂"><br><img src="https://pic.imgdb.cn/item/6245978b27f86abb2aa543be.jpg" alt="锻造界面"><br><img src="https://pic.imgdb.cn/item/6245978c27f86abb2aa545d9.jpg" alt="预览装备属性"></p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>本部分包含一些条条框框的细节更新说明。</p><h3 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h3><ul><li>增加副本通关奖励</li><li>标题界面关于我们</li><li>标题界面系统设置</li><li>野兽小道、毒蛇巢穴增加新的探险场景</li><li>云仙城剿灭盗贼剧情</li><li>乌林城剧情</li><li>云仙城危机剧情</li><li>狐族剧情</li><li>增加大量道具、装备</li><li>增加更多的灵技、心术</li><li>云仙城坊市增加可以兑换材料的魔兽商人</li><li>增加白发长者切磋剧情，可获得神秘剑系秘籍</li><li>境界突破解锁新的心术格子</li><li>增加跳过对话功能</li><li>增加锻造装备功能</li><li>增加 NPC 好感度</li><li>增加赠送礼物功能</li><li>增加NPC索取灵技、心术秘籍和道具功能</li><li>增加可以提升角色属性上限的道具</li><li>增加可以直接获得经验值的道具</li><li>新增开局天赋：恩赐之宝，可以在开局获得“霞之宝玉”，用来送人可以直接将好感度提升至最大</li><li>新增开局天赋：另辟蹊径，可以减少境界突破需要的历练值</li><li>新增开局天赋：心技合一，在使用与灵技相同属性的武器时，技能威力额外提升</li><li>新增开局天赋：幸运儿，战斗胜利掉落物品的几率提高</li><li>新增开局天赋：贤者模式，使用魔法攻击伤害提高</li><li>新增悟性效果，可以降低境界突破需要的历练值和升级心术消耗的历练值</li></ul><h3 id="优化内容"><a href="#优化内容" class="headerlink" title="优化内容"></a>优化内容</h3><ul><li>装备随机属性完善</li><li>野外探险加速效果提升</li><li>战斗回合切换、敌人行动间隔加快，整体战斗节奏变快</li><li>野外探险场景关卡数减少</li><li>战斗中使用物品增加灵力值消耗提示</li><li>移除战斗中的逃跑按钮</li><li>装备的随机附加属性不再出现小数点</li><li>菜单灵技详情面板显示技能类型和威力</li><li>优化部分角色头像</li><li>无法切磋的 NPC 不再显示切磋按钮</li><li>UI 大更新，美化了一遍</li><li>所有任务完成时可以获得经验值</li><li>当 NPC、场景有任务时，显示任务标志</li><li>优化减伤类状态计算公式</li><li>增加教程类对话</li><li>场景、菜单UI增加指示物</li></ul><h3 id="修复内容"><a href="#修复内容" class="headerlink" title="修复内容"></a>修复内容</h3><ul><li>修复云仙城书店无法退出问题</li><li>修复某些场合下，可以打开菜单问题</li><li>修复解毒剂没有解除中毒状态问题</li><li>修复野外探险场景无法打开菜单问题</li><li>修复在敌方回合仍然可以点击使用道具问题</li><li>修复灵力不足仍可以使用道具问题</li><li>修复战斗状态层数超过100显示不全问题</li><li>修复某些情况下造成伤害会变成回复HP问题</li><li>修复在敌人回合可以点出道具菜单问题</li><li>修复属性加成类心术未对敌人生效问题</li><li>存档UI重做，解决点击位置不准确问题</li><li>修复部分装备数据无法正常读取问题</li></ul><h3 id="平衡性调整"><a href="#平衡性调整" class="headerlink" title="平衡性调整"></a>平衡性调整</h3><ul><li>初级自愈、初级愈合回复效果提升</li><li>剑刃斩消耗 SP 增加，威力提升</li><li>使用药物时增加“药物中毒”状态，连续使用治疗效果降低</li></ul><h2 id="简易攻略"><a href="#简易攻略" class="headerlink" title="简易攻略"></a>简易攻略</h2><p>补充一些简单的游戏攻略。</p><h3 id="境界突破解锁心术格子"><a href="#境界突破解锁心术格子" class="headerlink" title="境界突破解锁心术格子"></a>境界突破解锁心术格子</h3><p>最开始只能配置 3 个心术，随着境界的提高会不断解锁。<br>突破到「御气境」的时候，可以解锁第 4 个心术格子。</p><p>前期建议配置增加生命值或者伤害的心术，不需要考虑太多的策略。</p><h3 id="白发长者的指教"><a href="#白发长者的指教" class="headerlink" title="白发长者的指教"></a>白发长者的指教</h3><p>在云仙城坊市与白发长者对话，如果在他的店铺购买过秘籍，就可以与他进行切磋。<br>战胜他之后可以获得「灵技·剑气斩」、「心术·无名剑诀」、「心术·以气化剑」。</p><p>这三本基础剑系秘籍，可以通过叠加剑意状态来造成更大的伤害。<br>如果不知道怎么搭配技能，直接配置上述三个技能，再加上索尔赠送的「刺杀剑法」，一个简单的套路就形成了。</p><p>最后再买一本「灵技·剑刃连击」，可以快速叠加剑意，并且还能享受到「刺杀剑法」的剑系伤害加成。<br>通过上面的组合，前期应该不会有什么卡关的 BOSS。</p><h3 id="剿灭盗贼"><a href="#剿灭盗贼" class="headerlink" title="剿灭盗贼"></a>剿灭盗贼</h3><p>有一定的难度，建议完成白发长者的剧情以及拿到小梅的戒指之后再去盗贼据点。<br>该任务有两个 BOSS，以刀系的技能为主，他们会削减自己的生命值来给玩家造成巨大的伤害。</p><p>推荐先去野兽小道刷装备，优先刷出武器和衣服，伤害和护甲堆高点。<br>地图的怪物不用打，就是去捡装备而已，碰到打不过的就直接结束冒险，重新进入，直到捡到满意的装备为止。</p><p>打败盗贼兄弟后，可以选择放走他们或者杀了他们。<br>放走他们可以得到藏宝图，并解锁盗贼据点新场景：藏宝库（一次性探险地图），藏宝库有一本特殊刀系秘籍。<br>藏宝图记载着一处新的野外场景，在魔兽山谷，藏宝图任务会触发狐族剧情，后期可以解锁特殊门派「栖霞谷」。<br>如果选择杀了他们，则可以获得小梅的好感度，解锁云仙城的特殊剧情（要到下个版本才能实现）。</p><h3 id="快速获得历练值（经验）"><a href="#快速获得历练值（经验）" class="headerlink" title="快速获得历练值（经验）"></a>快速获得历练值（经验）</h3><p>除了完成任务、野外地图探险，还有一种方法就是与场景的 NPC 切磋。<br>前期可以和云仙城城主府的小竹切磋快速获得历练值。</p><h3 id="多选项问题"><a href="#多选项问题" class="headerlink" title="多选项问题"></a>多选项问题</h3><p>在游戏中玩家会经常遇到二选一或者多选的情况。<br>一些分支选项会触发不同的剧情，但所有选项都对结局没有影响，因为游戏设定是单结局的。<br>所有的选项都没有对错和好坏之分，即使触发了不同的剧情也只是一种奇遇，按照个人的喜好选择就可以。</p><p>游戏中还有一些“无意义”的选项，大多是用来体现玩家的想法的。<br>比如像吃一个苹果，你可以选择“啊，真好吃！”和“这苹果是酸的！”。<br>这两个选项只会触发不同的剧情对话，没有其他影响。<br>此类选项的作用只是增加玩家代入感而已，增加一定的交互性避免冗长的剧情导致疲劳感。</p><h3 id="快速变强小技巧"><a href="#快速变强小技巧" class="headerlink" title="快速变强小技巧"></a>快速变强小技巧</h3><p>这里有一个变强的小技巧，在云仙城城主府小梅处接取「遗失的戒指」任务；<br>然后前往魔兽山谷的野兽小道第二个场景，可以找到小梅的戒指。<br>先别急着提交任务，任务戒指是一件装备，可以带在身上，提供高额的生命值和伤害加成，带着它前期难度减少很多。</p><h3 id="绯夜战斗"><a href="#绯夜战斗" class="headerlink" title="绯夜战斗"></a>绯夜战斗</h3><p>绯夜是前期卡关的一个 BOSS，需要玩家通过特殊的心术组合才能战胜。<br>绯夜的战斗方式是牺牲生命值来获得高额伤害加成，而且前面三回合有不死状态。<br>只要撑过前面三回合就可以轻易击败她，因此推荐到乌林城购买伤害减免类型的心术。<br>除此之外，绯夜可以通过高额的吸血和生命值回复来获得强力的续航，可以购买弱疗类的心术、灵技限制她的回复效果。</p><h3 id="官方“作弊”法"><a href="#官方“作弊”法" class="headerlink" title="官方“作弊”法"></a>官方“作弊”法</h3><p>本次更新的天赋“恩赐之宝”送给 NPC 可以获得最大好感度。<br>在开头的剧情时，拉薇会在客栈休息，只要将霞之宝玉送给拉薇就可以跟她请教秘籍了。<br>当然也可以留着这件宝物，等到完成乌林城剧情的时候送给绯夜来获得物理系的强大技能秘籍。</p><h3 id="嗑药？熬战-BOSS！"><a href="#嗑药？熬战-BOSS！" class="headerlink" title="嗑药？熬战 BOSS！"></a>嗑药？熬战 BOSS！</h3><p>回合制中的一种嗑药战斗方法，即一边吃药一边输出。<br>这样的战斗其实很无聊，很容易让玩家想要开修改器把金钱改到最大，然后买满背包的药去打 BOSS。<br>本游戏既然是策略回合制，就不会允许出现这种没有策略可言的打法。<br>在使用药物回血的时候会获得 1 层药物中毒状态，降低 20% 的治疗效果。<br>意味着每次嗑药，下一次的回血就会大大降低，无法通过一直嗑药打败 BOSS。</p><p>不过也有例外，在云仙城白露医馆跟白露请教可以获得「白露为霜」的特殊回复道具。<br>该道具可以直接回复 50% 的生命值，同时还不会进入药物中毒状态。<br>不过这件道具类似「大师球」一样稀有，只能在非常重要的战斗才能奢侈的吃掉它们。</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 魔王传说：战国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】战国篇测试版v0.2.3发布！</title>
      <link href="/2022/03/01/legend-of-the-devil-04/"/>
      <url>/2022/03/01/legend-of-the-devil-04/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《魔王传说：战国篇》是魔王传说系列第四部作品，这次的新作与以往的作品风格大不相同，本作结合了卡牌游戏的玩法和修仙游戏的设定，取消传统 RPG 4 人小队制的战斗以及等级成长体系，采用 1V1 的回合制作为战斗系统。通过学习「灵技」和「心术」可以实现不同的策略组合，因为没有了「等级」的概念，无法再通过刷级的方式碾压 BOSS，而是需要考略灵技和心术的搭配，通过策略战胜 BOSS。</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>作者 QQ：874811226<br>讨论 Q 群：84334403</p><p>其他游戏作品：<a href="https://huotuyouxi.com/2021/12/13/download/">https://huotuyouxi.com/2021/12/13/download/</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>百度网盘: <a href="https://pan.baidu.com/s/1gQFAFtJkXqF7w_8aW9H2rw">https://pan.baidu.com/s/1gQFAFtJkXqF7w_8aW9H2rw</a><br>提取码: mhar</p><p>奶牛快传：<a href="https://cowtransfer.com/s/50df217dd6ad42">https://cowtransfer.com/s/50df217dd6ad42</a><br>口令：y4b8ej</p><p>本作使用的素材来源于网络公开可商用的素材以及 RPG Maker 自带的纸娃娃系统，如果游戏中出现了不可免费商用的素材，请联系本人处理，关于使用的素材可参照：<a href="https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/">https://huotuyouxi.com/2022/01/06/legend-of-the-devil-02/</a></p><h2 id="前排提示"><a href="#前排提示" class="headerlink" title="前排提示"></a>前排提示</h2><p>本次发布的版本仅为测试版，剧情非常短，所以这次测试并不是让大家体验剧情，而是游戏的玩法，因为这次的作品与以往的作品风格相差很大，不过核心的「策略回合制」不会改变，你依然可以像《魔王传说2》那样自由搭配技能，打出自己的风格。</p><p>本此测试需要注意以下几点：</p><ul><li>存档数据无法保证能够继承到下一个版本，面临新版本发布就要重头开始的风险。</li><li>游戏会出现很多不可预料的 BUG，甚至直接卡死。</li><li>游戏的 UI 风格仅仅只是临时的，看起来十分简陋。</li><li>因为是测试版，所以你得到的不是「正常游戏」的体验。</li></ul><p>如果你希望自己能够以「玩家」的身份游玩，那么这个版本不适合你。<br>建议你可以等更新完几个版本，游戏系统更加稳定之后才考虑下载。</p><p>当前版本可玩内容极少，仅展示游戏核心系统，你可以从中判断是否值得期待未来的更新。</p><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>游戏以《魔王传说2》为背景故事，讲述的是剑之城和魔法之城战争时代的故事。<br>玩家将扮演第一人称视角的角色，与索尔、拉薇一起冒险，在乱世中斩头露角，最后成为名扬天下的传说。</p><p><img src="https://s2.loli.net/2022/03/01/LbxQpdviNwDt9oJ.jpg" alt="魔王传说4战国篇"></p><h2 id="游戏系统"><a href="#游戏系统" class="headerlink" title="游戏系统"></a>游戏系统</h2><p>游戏以鼠标+键盘的方式进行操作。<br>在场景中按下 X 键可以打开菜单，查看人物属性、装备和技能。</p><h3 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h3><p>游戏为策略回合制，采用 1V1 的模式。<br>在进入战斗时，你可以预先查看敌人的属性和技能。</p><p><img src="https://s2.loli.net/2022/03/01/edbJt7pS3YMVKGc.jpg" alt="敌人面板"><br><img src="https://s2.loli.net/2022/03/01/3fZ2FQaAte1jwG9.jpg" alt="敌人详情"></p><p>通过提前观察敌人的属性和技能可以制订战斗策略。<br>进入战斗后，玩家需要点击底部的技能图标来释放技能，只要灵力值没有归零，一回合可以行动多次，行动结束后需要手动点击「结束回合」。</p><p><img src="https://s2.loli.net/2022/03/01/8lvdbC9jci4WynK.jpg" alt="战斗界面"></p><p>将鼠标移动到血条下方的状态图标可以查看状态详细说明。</p><p><img src="https://s2.loli.net/2022/03/01/fyXP78E5DticZMa.jpg" alt="状态说明"></p><h3 id="灵技系统"><a href="#灵技系统" class="headerlink" title="灵技系统"></a>灵技系统</h3><p>灵技就是在战斗中主动使用的技能，需要消耗灵力值才能发动，并且有的还有冷却时间，学习的灵技需要在菜单配置为战斗状态才能使用。<br>![灵技配置]](<a href="https://s2.loli.net/2022/03/01/eoQ3FHLUWrfy9pE.jpg">https://s2.loli.net/2022/03/01/eoQ3FHLUWrfy9pE.jpg</a>)</p><h3 id="心术系统"><a href="#心术系统" class="headerlink" title="心术系统"></a>心术系统</h3><p>心术即被动技能，除了增加属性的效果之外，还有许多奇奇怪怪的功能。<br>心术与灵技一样，需要配置后才能生效，没有设置的心术战斗时没有任何效果。</p><p><img src="https://s2.loli.net/2022/03/01/FnADxsLuCiMy6zQ.jpg" alt="心术配置"></p><p>与灵技不同的是心术可以升级，目前最多可以强化到 5 级。</p><p><img src="https://s2.loli.net/2022/03/01/DJzibaq4fUL8AkN.jpg" alt="心术升级"></p><p>升级消耗历练值（经验值），可以在野外探险获得。</p><h2 id="场景系统"><a href="#场景系统" class="headerlink" title="场景系统"></a>场景系统</h2><h3 id="大地图"><a href="#大地图" class="headerlink" title="大地图"></a>大地图</h3><p>大地图上面有许多建筑物，可以点击进入。<br>随着剧情的发展，大地图会解锁更多的可前往区域。<br><img src="https://s2.loli.net/2022/03/01/oqMkNumhpRYliJL.jpg" alt="大地图"></p><h3 id="场景地图"><a href="#场景地图" class="headerlink" title="场景地图"></a>场景地图</h3><p>游戏简化了移动方式，参考了手游的模式。<br>可以直接点击前往任何一个想去的地方。<br><img src="https://s2.loli.net/2022/03/01/NIEMOh9qWaPtu6G.jpg" alt="场景地图"></p><p>左侧是附近的 NPC 列表，点击 NPC 可以与之对话。</p><h3 id="探险地图"><a href="#探险地图" class="headerlink" title="探险地图"></a>探险地图</h3><p>探险地图是游戏中的副本，玩家主要获取历练值的地方。<br><img src="https://s2.loli.net/2022/03/01/wJhiT3vtFqW8XZ6.jpg" alt="探险地图"><br><img src="https://s2.loli.net/2022/03/01/4KChLQZ9STrBxsc.jpg" alt="探险场景"></p><h2 id="装备系统"><a href="#装备系统" class="headerlink" title="装备系统"></a>装备系统</h2><p>在探险地图可以获得随机属性的装备，也可以搜集怪物素材打造装备。<br>装备系统后续会扩充一些强化、镶嵌、套装之类的功能。<br><img src="https://s2.loli.net/2022/03/01/2uoHbUegrcxfQqD.jpg" alt="装备系统"></p><h2 id="委托任务"><a href="#委托任务" class="headerlink" title="委托任务"></a>委托任务</h2><p>在城主府与小梅对话，可以接受委托任务。<br>完成委托任务可以获得”城主令“，与小兰对话可以兑换特殊秘籍。</p><p><img src="https://s2.loli.net/2022/03/01/6Gvx9pqz7OsrkZL.jpg" alt="找小梅领取任务"><br><img src="https://s2.loli.net/2022/03/01/94wAtypTuxB8RQj.jpg" alt="委托任务"><br><img src="https://s2.loli.net/2022/03/01/J7pftQoNcjhZdle.jpg" alt="菜单中确认任务内容"></p><h2 id="切磋系统"><a href="#切磋系统" class="headerlink" title="切磋系统"></a>切磋系统</h2><p>与场景 NPC 可以进行切磋，这些 NPC 一般都具有专属技能。<br>在后面更新中玩家可以与他们增加好感度，然后「请教」学到手。</p><p><img src="https://s2.loli.net/2022/03/01/1fVoe4XAn5aBhTK.jpg" alt="切磋系统"></p><h2 id="境界突破"><a href="#境界突破" class="headerlink" title="境界突破"></a>境界突破</h2><p>由于取消了等级的概念，参考了修仙游戏的境界设定。<br>玩家需要手动在菜单属性面板，选择境界突破，当历练值满了之后就可以突破了。<br><img src="https://s2.loli.net/2022/03/01/YIGqc9HMDVf5AWn.jpg" alt="属性面板"><br><img src="https://s2.loli.net/2022/03/01/hdnzbCYQy4NDk7P.jpg" alt="境界突破"><br><img src="https://s2.loli.net/2022/03/01/jxmylUSsBFM7ktH.jpg" alt="突破成功"></p><h2 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h2><p>以后会按照月的周期进行更新，下一次更新时间为 4 月 1 日（愚人节？！）。<br>下个月的更新内容可能也不会很多，因为还有好多系统没完善。</p><h2 id="开发故事"><a href="#开发故事" class="headerlink" title="开发故事"></a>开发故事</h2><p>从去年 12 月到现在已经开发了三个月，都在搭建游戏的基本系统，直到现在还是没把基础设施搭完，下个月可能还得花好多时间把系统完善，原创系统的过程很艰辛，尤其是现在只能摸着石头过河，一路上都是磕磕碰碰的，没有人能帮你解答问题，只能自己慢慢尝试，不过看着自己写的系统「真的运行起来了」还是很开心的。</p><p>辞职回家开发游戏已经是第三个年头了，前两年尝试和 Cee 合作开发的全部以失败告终，即使我再喜欢游戏，但一直都在失败热情也是会消散的，有一个月甚至开始开始自暴自弃，整天看动漫玩游戏，看到鬼谷八荒更新了，就重头玩了一遍，沉浸在游戏里三天三夜不知疲倦。</p><p>不玩游戏的时候就看动漫，看着时间一天一天的过去，晚上睡觉的时候躺在床上翻来覆去，除了叹息也没有办法了。突然失去了梦想变得跟咸鱼差不多，直到一天觉得很不甘心，做不出来还当做无事发生，那天好像是晚上十二点了，直接从床上蹦起来打开电脑，新建工程……</p><p>接下来一个月完全沉浸在报复性的工作中，最后做出了这样一个战斗系统：<a href="https://www.bilibili.com/video/BV1zu41117Rg/">https://www.bilibili.com/video/BV1zu41117Rg/</a></p><p>可惜做出来发现效果不好，再一次废弃了。<br>然后……又失去梦想变成一条咸鱼，就开始随便翻一些游戏论坛和看看 Steam 上面别人做的游戏。</p><p>偶然打开 Steam 看到了《觅长生》这个游戏，看着他们写的开发故事，原来他们也是一个小团队，并且还坚持更新了两年以上，我开始自愧不如，然后直接买下来，本来只是想支持一下，顺便看看做的怎么样，结果一玩就沉迷了，还通宵了两天。</p><p>在这里还是想感谢一下这部作品的作者，要不然我可能走不出失败的阴影。<br>这次的魔王传说续作，我也一定会坚持做完，即使要更新一年、两年……它一定会是完结的。</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 魔王传说：战国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】字符串转化为类的实例化对象</title>
      <link href="/2022/02/17/unity-tips-032/"/>
      <url>/2022/02/17/unity-tips-032/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍一种将字符串转化为实例化对象的方法，假设我们需要将一个字符串动态转化为某个类，再执行类的某个方法，就可以使用这种方法。</p><h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><p>网上大多都是复制粘贴一大堆代码，然后用反射机制实现，但本文介绍的是一种超级简单的方法，仅需要几行代码即可，原理是利用 C# 自带的 Activator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设有一个简单的类</span><br><span class="line">public class Person </span><br><span class="line">&#123;</span><br><span class="line">    public string prefix;</span><br><span class="line">    public string name;</span><br><span class="line"></span><br><span class="line">    public string GetFullName() &#123;</span><br><span class="line">        return  prefix + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入System</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 待实例化的字符串</span><br><span class="line">string component &#x3D; &quot;Person&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获得类的类型变量</span><br><span class="line">Type type &#x3D; Type.GetType(component);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 实例化该类型的对象</span><br><span class="line">var person &#x3D; Activator.CreateInstance(type) as Person;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 现在就可以调用属性和方法了</span><br><span class="line">person.prefix &#x3D; &quot;aa&quot;;</span><br><span class="line">preson.name &#x3D; &quot;bb&quot;;</span><br><span class="line"></span><br><span class="line">string fullname &#x3D; person.GetFullName();</span><br></pre></td></tr></table></figure><p>OK，完成！</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响彻云霄，直击心灵的神曲</title>
      <link href="/2022/02/04/shared-02/"/>
      <url>/2022/02/04/shared-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前排提示"><a href="#前排提示" class="headerlink" title="前排提示"></a>前排提示</h2><p>顺序不分先后，配合耳机食用效果更佳。</p><h2 id="Despacito"><a href="#Despacito" class="headerlink" title="Despacito"></a>Despacito</h2><p>YouTube 播放量高达 77 亿的神曲：<a href="https://www.youtube.com/watch?v=kJQP7kiw5Fk">https://www.youtube.com/watch?v=kJQP7kiw5Fk</a></p><p>这是一首西班牙语的歌曲，有一种非常“奇妙”的节奏，听完总想再循环一遍。<br>据说楼下新疆羊肉串在营业的时候都会放这首歌。</p><h2 id="Alan-Walker"><a href="#Alan-Walker" class="headerlink" title="Alan Walker"></a>Alan Walker</h2><p>Alan Walker 为挪威的电音制作人，他的作品大都极为令人震撼，磅礴大气又带有淡淡的忧伤。<br>他还入驻了 B 站，官方号地址：<a href="https://space.bilibili.com/474390659">https://space.bilibili.com/474390659</a></p><h3 id="Faded"><a href="#Faded" class="headerlink" title="Faded"></a>Faded</h3><p>Alan Walker 的成名曲。<br>YouTube 地址：<a href="https://www.youtube.com/watch?v=60ItHLz5WEA">https://www.youtube.com/watch?v=60ItHLz5WEA</a></p><p>B 站有 3D 环绕版，带上支持 3D 环绕的耳机感受到什么叫做颅内响荡曲。<br>3D 环绕版 Faded：<a href="https://www.bilibili.com/video/BV1Ns411b779?from=search&seid=17276339187138123020">https://www.bilibili.com/video/BV1Ns411b779?from=search&amp;seid=17276339187138123020</a></p><h3 id="The-Spectre"><a href="#The-Spectre" class="headerlink" title="The Spectre"></a>The Spectre</h3><p>Alan Walker 的洗脑神曲之一。<br>Youtube 地址：<a href="https://www.youtube.com/watch?v=wJnBTPUQS5A">https://www.youtube.com/watch?v=wJnBTPUQS5A</a><br>B 站中英文字幕版：<a href="https://www.bilibili.com/video/BV1ax411G7qh?from=search&seid=11258148980049446962">https://www.bilibili.com/video/BV1ax411G7qh?from=search&amp;seid=11258148980049446962</a></p><p>当 Faded 和 The Spectre 两首神曲混合在一起，会发生什么？第三首神曲出现！<br>B 混音地址：<a href="https://www.bilibili.com/video/BV1Gx41157Vo/?spm_id_from=333.788.recommend_more_video.11">https://www.bilibili.com/video/BV1Gx41157Vo/?spm_id_from=333.788.recommend_more_video.11</a></p><h3 id="Alone"><a href="#Alone" class="headerlink" title="Alone"></a>Alone</h3><p>Youtube 地址：<a href="https://www.youtube.com/watch?v=1-xGerv5FOk">https://www.youtube.com/watch?v=1-xGerv5FOk</a></p><h3 id="On-My-Way"><a href="#On-My-Way" class="headerlink" title="On My Way"></a>On My Way</h3><p>YouTube 地址：<a href="https://www.youtube.com/watch?v=dhYOPzcsbGM">https://www.youtube.com/watch?v=dhYOPzcsbGM</a></p><h3 id="Darkside"><a href="#Darkside" class="headerlink" title="Darkside"></a>Darkside</h3><p>YouTube 地址：<a href="https://www.youtube.com/watch?v=M-P4QBt-FWw">https://www.youtube.com/watch?v=M-P4QBt-FWw</a></p><p>虽然 Darkside 指的是黑暗面的意思，但是听起来却并不会让人觉得很阴暗，前奏十分柔和，随后迸发出来一种积极向上的感觉。</p><h2 id="Canon"><a href="#Canon" class="headerlink" title="Canon"></a>Canon</h2><p>神曲卡农，已经衍生出无数个版本了，什么二胡版、电音版、唢呐版……<br>B 站试听：<a href="https://www.bilibili.com/video/BV1BJ411a7Ld">https://www.bilibili.com/video/BV1BJ411a7Ld</a></p><p>不管你是谁，不管你用什么乐器，只要卡农的旋律一响，你的灵魂就会颤动。<br>卡农众多版本里，最出名的应该就是 D 大调卡农了：<a href="https://www.bilibili.com/video/BV1gr4y1Y7Xa">https://www.bilibili.com/video/BV1gr4y1Y7Xa</a></p><h2 id="Scarborough-Fair"><a href="#Scarborough-Fair" class="headerlink" title="Scarborough Fair"></a>Scarborough Fair</h2><p>斯卡布罗的集市，被翻唱成无数个不同版本。<br>B 站带中英文字幕地址：<a href="https://www.bilibili.com/video/BV1yx411e7ud">https://www.bilibili.com/video/BV1yx411e7ud</a></p><h2 id="銀の龍の背に乗って"><a href="#銀の龍の背に乗って" class="headerlink" title="銀の龍の背に乗って"></a>銀の龍の背に乗って</h2><p>意为乘在银色之龙的背上。<br>网抑云：<a href="https://music.163.com/song?id=28661544&userid=1622169631">https://music.163.com/song?id=28661544&amp;userid=1622169631</a></p><p>后来被翻唱为最初的梦想，其实并不是盗版，而是因为当时的年代版权就在那几家唱片公司上面，所以属于授权改编，同样的还有红日。</p><h2 id="二刺猿神曲"><a href="#二刺猿神曲" class="headerlink" title="二刺猿神曲"></a>二刺猿神曲</h2><p>听神曲，送动画。<br>此部分对于非宅可能无法理解，这些神曲配合动画的场景表现力十分震撼。</p><h3 id="竈門炭治郎のうた"><a href="#竈門炭治郎のうた" class="headerlink" title="竈門炭治郎のうた"></a>竈門炭治郎のうた</h3><p>灶门炭治郎之歌，出自第 19 集炭治郎与下弦蜘蛛战斗，鬼灭之刃神插曲——最强插曲之一。<br>可以到 B 站看评论区：<a href="https://www.bilibili.com/bangumi/play/ep267869">https://www.bilibili.com/bangumi/play/ep267869</a><br>网抑云：<a href="https://music.163.com/song?id=1397097038&userid=1622169631">https://music.163.com/song?id=1397097038&amp;userid=1622169631</a></p><p>我们从未知道那首节奏这么慢的歌为什么这么燃？<br>如果不配合动画，这首歌的食用性会减半，而如果配合动画观看，你可以感受到炭治郎与下弦战斗时的压抑感，祢豆子被蜘蛛丝吊在上面受到折磨，而身为哥哥的炭治郎为了救出妹妹使出了浑身解数，但却斩不断下弦的蜘蛛丝，而祢豆子在昏迷中，依稀回忆起了妈妈和弟弟们，他们在极力的唤醒祢豆子，哥哥正在遭遇重大的危险，需要她帮助，祢豆子一听到哥哥有危险，瞬间醒来同时还觉醒了血鬼术，用自己的血引燃了蜘蛛丝，而炭治郎也觉醒了火之神乐，在兄妹二人合力之下炭治郎终于斩断蜘蛛丝，连同下弦的头一起斩落。</p><p>而且这集下弦虚构的“家人”和炭治郎祢豆子的兄妹情形成鲜明的对比。</p><h3 id="To-the-beginning"><a href="#To-the-beginning" class="headerlink" title="To the beginning"></a>To the beginning</h3><p>「Fate/Zero」OP2。<br>Fate（圣杯战争）这部动画的 OP 和 ED 千万别随便跳过！塑造角色的最高的境界不是以角色的台词，而是包括音乐、氛围等等，戴上耳机看这部动画，你就知道为什么会被称为神作了，这首 OP 唱起来似乎铿锵有力，但给我的感觉却是有些凄凉。<br>网抑云：<a href="https://music.163.com/song?id=28814322&userid=1622169631">https://music.163.com/song?id=28814322&amp;userid=1622169631</a></p><h3 id="满天"><a href="#满天" class="headerlink" title="满天"></a>满天</h3><p>最强神插曲之一，卫宫切嗣的回忆的 18、19 集 ED。<br>B 站在线观看：<a href="https://www.bilibili.com/bangumi/play/ep13867">https://www.bilibili.com/bangumi/play/ep13867</a><br>第一次响起这个插曲的时候，切嗣杀死了亲身父亲；第二次响起的时候，切嗣杀死了抚养自己长大，宛如亲生妈妈一样的娜塔莉，18、19 两集卫宫切嗣的回忆是整部动画中的亮点，前面的剧情极度压抑，卫宫切嗣之所以冷漠无情，是因为他的遭遇实在太惨了，像个工具人一般的活着，直到最后 25 集卫宫切嗣陨落时，听到士郎说要代替自己实现英雄的梦想，微微一笑，然后安详的闭上了眼睛——塑造角色达到了巅峰！</p><p>网抑云：<a href="https://music.163.com/song?id=1313102756&userid=1622169631">https://music.163.com/song?id=1313102756&amp;userid=1622169631</a></p><h3 id="空は高く風は歌う"><a href="#空は高く風は歌う" class="headerlink" title="空は高く風は歌う"></a>空は高く風は歌う</h3><p>天空高阔 清风吟唱，TV动画《Fate/Zero 第二季》片尾曲，这首也是最强插曲之一。<br>网抑云：<a href="https://music.163.com/song?id=583225&userid=1622169631">https://music.163.com/song?id=583225&amp;userid=1622169631</a></p><h3 id="放課後ディストラクション"><a href="#放課後ディストラクション" class="headerlink" title="放課後ディストラクション"></a>放課後ディストラクション</h3><p>咋听之下似乎达不到神插曲的要求，但是——如果配合动画观看的话，就会感觉活了！<br>其中有一集，大野晶离家出走，于是春雄出去找她，果然在街机厅发现了她，只能陪她一起玩，直到晚上春雄想带她回家，但是大野晶却不想，于是只好去附近的家庭餐厅过夜，第二天，两人回来，结果却被小春抓了个正着，ED 此时上线。<br>网抑云：<a href="https://music.163.com/song?id=1297747757&userid=1622169631">https://music.163.com/song?id=1297747757&amp;userid=1622169631</a></p><h3 id="いつもこの場所で"><a href="#いつもこの場所で" class="headerlink" title="いつもこの場所で"></a>いつもこの場所で</h3><p>一如既往的地点，出自剧场版《命运石之门 负荷领域的既视感》。<br>都是命运石之门的选择，嘟嘟噜！<br>网抑云：<a href="https://music.163.com/song?id=26259014&userid=1622169631">https://music.163.com/song?id=26259014&amp;userid=1622169631</a></p><h3 id="Swordland"><a href="#Swordland" class="headerlink" title="Swordland"></a>Swordland</h3><p>出自《刀剑神域》，桐姥爷开挂神曲，燃爆！<br>B 站试听：<a href="https://www.bilibili.com/video/BV1ca4y1Y7E4/">https://www.bilibili.com/video/BV1ca4y1Y7E4/</a></p><p>第一部前面其实代入感超强，包括第二部，可惜后面结尾都做的不好，再后面枪战系列就没有之前两作那么精彩了，再到后面爱丽丝的就感觉有些不知所云，然后还有大量卖肉，逐渐沦为肉番，而不再燃了。</p><h3 id="魔女狩り"><a href="#魔女狩り" class="headerlink" title="魔女狩り"></a>魔女狩り</h3><p>前奏一股强烈的最终 BOSS 味道！出自《魔法少女小圆》狩猎魔女的 BGM。<br>网抑云：<a href="https://music.163.com/song?id=22731513&userid=1622169631">https://music.163.com/song?id=22731513&amp;userid=1622169631</a></p><p>PS.猜猜这篇文章有多少首燃曲的作者是梶浦由記？</p><h3 id="Melody"><a href="#Melody" class="headerlink" title="Melody"></a>Melody</h3><p>梶浦大神不仅对于燃曲驾轻就熟，对于抒情类的 BGM 也是相当拿手。<br>这首 Melody 出自《潘多拉之心》。</p><p>网抑云：<a href="https://music.163.com/song?id=591371&userid=1622169631">https://music.163.com/song?id=591371&amp;userid=1622169631</a></p><h3 id="砂尘の彼方へ"><a href="#砂尘の彼方へ" class="headerlink" title="砂尘の彼方へ"></a>砂尘の彼方へ</h3><p>《砂尘の彼方へ》是Revo+尾浦由记同音乐会《Dream Port 2008》的主题曲（非动画）。<br>网抑云：<a href="https://music.163.com/song?id=816214&userid=1622169631">https://music.163.com/song?id=816214&amp;userid=1622169631</a></p><h3 id="暁の車"><a href="#暁の車" class="headerlink" title="暁の車"></a>暁の車</h3><p>拂晓之车； TV动画《机动战士高达SEED》插曲。<br>网抑云：<a href="https://music.163.com/song?id=724495&userid=1622169631">https://music.163.com/song?id=724495&amp;userid=1622169631</a></p><h3 id="焔の扉"><a href="#焔の扉" class="headerlink" title="焔の扉"></a>焔の扉</h3><p>焰之扉； 《机动战士高达SEED DESTINY》插曲。<br>网抑云：<a href="https://music.163.com/song?id=724424&userid=1622169631">https://music.163.com/song?id=724424&amp;userid=1622169631</a></p><h3 id="花守の丘"><a href="#花守の丘" class="headerlink" title="花守の丘"></a>花守の丘</h3><p>北斗神拳剧场版真救世主传说托奇传插曲。<br>网抑云：<a href="https://music.163.com/song?id=22750773&userid=1622169631">https://music.163.com/song?id=22750773&amp;userid=1622169631</a></p><h3 id="Distance"><a href="#Distance" class="headerlink" title="Distance"></a>Distance</h3><p>TV动画《机动战士高达Seed》ED2。<br>网抑云：<a href="https://music.163.com/song?id=724001&userid=1622169631">https://music.163.com/song?id=724001&amp;userid=1622169631</a></p><h3 id="時の向こう-幻の空"><a href="#時の向こう-幻の空" class="headerlink" title="時の向こう　幻の空"></a>時の向こう　幻の空</h3><p>TV动画《神隐》OP1。<br>网抑云：<a href="https://music.163.com/song?id=28233060&userid=1622169631">https://music.163.com/song?id=28233060&amp;userid=1622169631</a></p><h3 id="君の知らない物語"><a href="#君の知らない物語" class="headerlink" title="君の知らない物語"></a>君の知らない物語</h3><p>TV动画《化物语》ED1。<br>网抑云：<a href="https://music.163.com/song?id=461089&userid=1622169631">https://music.163.com/song?id=461089&amp;userid=1622169631</a></p><p>除了梶浦由记之外，神前晓的作品也相当之优秀，比如物语系列。</p><h3 id="片翼の天使"><a href="#片翼の天使" class="headerlink" title="片翼の天使"></a>片翼の天使</h3><p>没人能够在我的 BGM 里面打败我！——手提 40 米大砍刀的萨菲罗斯。<br>网抑云：<a href="https://music.163.com/song?id=538761&userid=1622169631">https://music.163.com/song?id=538761&amp;userid=1622169631</a></p><p>此曲颇有二战时期的交响曲的味道，前奏很长，很燃。<br>请参考弥撒曲，The Mass：<a href="https://www.bilibili.com/video/BV1u54y1z79R/">https://www.bilibili.com/video/BV1u54y1z79R/</a></p><h3 id="ハレ晴レユカイ"><a href="#ハレ晴レユカイ" class="headerlink" title="ハレ晴レユカイ"></a>ハレ晴レユカイ</h3><p>晴天好心情，出自《凉宫春日的忧郁》ED。<br>B 站在线看 ED：<a href="https://www.bilibili.com/video/BV1n4411L7vM">https://www.bilibili.com/video/BV1n4411L7vM</a></p><h3 id="雪、无音、窓辺にて。"><a href="#雪、无音、窓辺にて。" class="headerlink" title="雪、无音、窓辺にて。"></a>雪、无音、窓辺にて。</h3><p>同样出自凉宫春日。<br>网抑云：<a href="https://music.163.com/song?id=640567&userid=1622169631">https://music.163.com/song?id=640567&amp;userid=1622169631</a></p><h3 id="God-knows"><a href="#God-knows" class="headerlink" title="God knows"></a>God knows</h3><p>同样出自凉宫春日，这部动画的神曲太多。</p><h3 id="STYX-HELIX"><a href="#STYX-HELIX" class="headerlink" title="STYX HELIX"></a>STYX HELIX</h3><p>少年，要来一斤苹果吗？TV 动画《Re:从零开始异世界生活》ED1。<br>网抑云：<a href="https://music.163.com/song?id=27876224&userid=1622169631">https://music.163.com/song?id=27876224&amp;userid=1622169631</a></p><h3 id="DoriDori"><a href="#DoriDori" class="headerlink" title="DoriDori"></a>DoriDori</h3><p>神奇宝贝XY&amp;Z - 瑟蕾娜の终极演出 DoriDori - The Ultimate Performance<br>这首纯属夹带私货，瑟蕾娜赛高！！！</p><p>配合 MAD 使用，效果更佳：<a href="https://www.bilibili.com/video/BV1MV411W7ue?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1MV411W7ue?spm_id_from=333.999.0.0</a></p><p>可以跳转到 3min 处，此处的镜头（动画本身的摄影）配合 DoriDori 的旋律简直神了！<br>YouTube 地址：<a href="https://www.youtube.com/watch?v=0V3KfeoId1I">https://www.youtube.com/watch?v=0V3KfeoId1I</a></p><p>网抑云：<a href="https://music.163.com/#/song?id=863530723&userid=1622169631">https://music.163.com/#/song?id=863530723&amp;userid=1622169631</a></p><p>虽然知道 Doki Doki 心惊肉跳文学部，但是 DoriDori（ドリドリ） 在日文是什么意思呢？</p><h3 id="GLISTENING♭"><a href="#GLISTENING♭" class="headerlink" title="GLISTENING♭"></a>GLISTENING♭</h3><p>《路人女主的养成方法♭》第 11 集插曲，女主角加藤惠的角色歌。<br>GLISTENING 意为闪耀的，而 ♭ 则指代加藤惠，所以歌名可以理解为：闪闪发光的惠。<br>先有圣人后有天，我惠美如画中仙：<a href="https://zhuanlan.zhihu.com/p/26680648">https://zhuanlan.zhihu.com/p/26680648</a></p><p>网抑云：<a href="https://music.163.com/song?id=486194382&userid=1622169631">https://music.163.com/song?id=486194382&amp;userid=1622169631</a></p><h3 id="Cherish-you"><a href="#Cherish-you" class="headerlink" title="Cherish you"></a>Cherish you</h3><p>Cherish you 翻译过来就是“珍惜你”。<br>同样是出自路人女主，第 12 集插曲，冰堂美智留的角色歌。</p><p>网抑云：<a href="https://music.163.com/song?id=486194378&userid=1622169631">https://music.163.com/song?id=486194378&amp;userid=1622169631</a></p><h3 id="翼をください"><a href="#翼をください" class="headerlink" title="翼をください"></a>翼をください</h3><p>意为”给我一双翅膀“，是日本里面一首童谣，原著为乡村音乐团体赤い鳥（红鸟）于1971年2月5日发表的『竹田搖籃曲/翼をください』的B面曲。后来林原惠美唱的版本随着 EVA 的火爆而爆红，《日常》的某个 ED、《轻音少女》为了诱骗呆唯加入轻音部，三人合奏的歌曲也是这首。<br>B 站地址：<a href="https://www.bilibili.com/video/BV1hx411w7VY">https://www.bilibili.com/video/BV1hx411w7VY</a></p><h3 id="No-Thank-You"><a href="#No-Thank-You" class="headerlink" title="No, Thank You!"></a>No, Thank You!</h3><p>出自轻音少女 ED：<a href="https://www.bilibili.com/video/BV1EE411J7z6">https://www.bilibili.com/video/BV1EE411J7z6</a><br>前奏太震撼了！！！</p><h3 id="ふわふわ時間"><a href="#ふわふわ時間" class="headerlink" title="ふわふわ時間"></a>ふわふわ時間</h3><p>滑滑蛋，哦不，轻飘飘时间，同样出自轻音少女。<br>网抑云：<a href="https://music.163.com/song?id=26201899&userid=1622169631">https://music.163.com/song?id=26201899&amp;userid=1622169631</a><br>这部动画的音乐基本都是神曲，就不再一一介绍了，后面还有一部剧场版，讲述了前辈们在毕业之前为梓喵制作专属歌曲的故事，强烈推荐去康康。</p><h3 id="Continued-Story"><a href="#Continued-Story" class="headerlink" title="Continued Story"></a>Continued Story</h3><p>撸撸羞陨落曲，出自动画《反叛的鲁路修》。该动画讲的是一个妹控为了让妹妹过上幸福生活，毁灭了世界，然后又创造了一个新世界的故事，撸撸羞一个人背负起所有的罪恶，然后将新世界交给了妹妹，实现了自己对妹妹的承诺。<br>网抑云：<a href="https://music.163.com/song?id=29593561&userid=1622169631">https://music.163.com/song?id=29593561&amp;userid=1622169631</a></p><h3 id="僕は、鳥になる"><a href="#僕は、鳥になる" class="headerlink" title="僕は、鳥になる"></a>僕は、鳥になる</h3><p>撸撸羞第二季洛洛角色歌，第二季第 19 集洛洛死的时候的插曲，配合动画食用，最强插曲之一。洛洛的能力是时间停止，代价是连自己的心脏也会停止跳动，而撸撸羞被一群人追杀，洛洛为了让撸撸羞逃脱，不断发动时停能力，每一次的时停，就连撸撸羞劝阻洛洛的话，也变得断断续续的，当时看的是真的泪目了。<br>网抑云：<a href="https://music.163.com/song?id=591599&userid=1622169631">https://music.163.com/song?id=591599&amp;userid=1622169631</a></p><h3 id="You"><a href="#You" class="headerlink" title="You"></a>You</h3><p>治愈系神曲，《寒蝉鸣泣之时》片尾曲。<br>网抑云：<a href="https://music.163.com/song?id=672188&userid=1622169631">https://music.163.com/song?id=672188&amp;userid=1622169631</a></p><h3 id="Spider-Dance"><a href="#Spider-Dance" class="headerlink" title="Spider Dance"></a>Spider Dance</h3><p>蜘蛛之舞，出自游戏《传说之下》。<br>网抑云：<a href="https://music.163.com/song?id=428350825&userid=1622169631">https://music.163.com/song?id=428350825&amp;userid=1622169631</a><br>游戏原声：<a href="https://music.163.com/song?id=39227616&userid=1622169631">https://music.163.com/song?id=39227616&amp;userid=1622169631</a><br>这部游戏不仅剧情好，BGM 也非常棒，像狂妄之人都被各种短视频用烂了……还有一个比较冷门的是 VS 不灭安黛因。</p><h3 id="Forever"><a href="#Forever" class="headerlink" title="Forever"></a>Forever</h3><p>出自《武器种族传说》OP。<br>网抑云：<a href="https://music.163.com/song?id=646024&userid=1622169631">https://music.163.com/song?id=646024&amp;userid=1622169631</a></p><h3 id="夕顔"><a href="#夕顔" class="headerlink" title="夕顔"></a>夕顔</h3><p>治愈系神曲，冢本八云角色歌。<br>网抑云：<a href="https://music.163.com/song?id=624670&userid=1622169631">https://music.163.com/song?id=624670&amp;userid=1622169631</a></p><h3 id="For-フルーツバスケット"><a href="#For-フルーツバスケット" class="headerlink" title="For フルーツバスケット"></a>For フルーツバスケット</h3><p>TV动画《水果篮子》片头曲，治愈神曲。<br>网抑云：<a href="https://music.163.com/song?id=22782779&userid=1622169631">https://music.163.com/song?id=22782779&amp;userid=1622169631</a></p><h3 id="「名探偵コナン」-メインテーマ"><a href="#「名探偵コナン」-メインテーマ" class="headerlink" title="「名探偵コナン」~メインテーマ"></a>「名探偵コナン」~メインテーマ</h3><p>DNA 动了！名侦探柯南凶手处刑曲，BGM 一出，凶手即无路可逃，有一个小细节：每个剧场版都是变奏的。<br>网抑云：<a href="https://music.163.com/song?id=27570832&userid=1622169631">https://music.163.com/song?id=27570832&amp;userid=1622169631</a></p><h3 id="FAIRY-TAIL-Main-Theme"><a href="#FAIRY-TAIL-Main-Theme" class="headerlink" title="FAIRY TAIL Main Theme"></a>FAIRY TAIL Main Theme</h3><p>出自《妖精的尾巴》，公会主题曲，纳兹开挂曲。<br>网抑云：<a href="https://music.163.com/song?id=1838698976&userid=1622169631">https://music.163.com/song?id=1838698976&amp;userid=1622169631</a></p><p>有一集会长儿子叛乱，结果被驱逐出公会，然后全公会的人都来送别，响起插曲，燃+感动到泪目。其实这部动画首尾呼应，有一次我想回忆就从头开始看，结果不小心点错了看到最新一季的其中一话，然后看完又回到第一季，好像纳兹从第一集就对露西承诺了某件事，然后居然在最后一集实现了？！</p><p>同样的还有《爆漫王》（也叫做食梦者）这部动画，我第一次搜索的时候搜到了一个名叫《食梦者玛丽》的，结果看了第一集，发现并没有传说中那么神，直到我毕业出来工作，然后想再看看这部到底为什么会被称为神作，就从第二集开始看，结果这次搜索的是真的食梦者，因为跳过了第一集，留下了悬念，但是我存着，直到看完四季再回头看第一集，也带来了极大的享受。</p><p>除此之外，还有《暗杀教室》也是同理，我是从第二季开始看的，其实真正的观看顺序就应该是第二季，然后第一季，因为第一季已经解答了老师为什么会变成触手怪的原因，但第二季却没有提到，正序看反而不那么惊艳，如果反着看的话有一种豁然开朗的感觉。</p><h3 id="Blumenkranz"><a href="#Blumenkranz" class="headerlink" title="Blumenkranz"></a>Blumenkranz</h3><p>出自《斩服少女》女二她妈登场的背景音乐，此曲同样是最强插曲！女二她妈每次登场都伴随着七彩光芒，而这个插曲完美的展现了什么叫做七彩斑斓。<br>网抑云：<a href="https://music.163.com/song?id=28152391&userid=1622169631">https://music.163.com/song?id=28152391&amp;userid=1622169631</a></p><h3 id="Lost-Princess"><a href="#Lost-Princess" class="headerlink" title="Lost Princess"></a>Lost Princess</h3><p>出自手游《公主连接》主题曲，二人合唱的部分简直神了！<br>网抑云：<a href="https://music.163.com/song?id=1309903594&userid=1622169631">https://music.163.com/song?id=1309903594&amp;userid=1622169631</a></p><h3 id="ゲキテイ-檄-帝国華撃団"><a href="#ゲキテイ-檄-帝国華撃団" class="headerlink" title="ゲキテイ!(檄!帝国華撃団)"></a>ゲキテイ!(檄!帝国華撃団)</h3><p>帝国滑稽团，出自《樱花大战》，前奏与公主连接的主题曲十分相似，我甚至怀疑是不是同一个人作曲的。<br>网抑云：<a href="https://music.163.com/song?id=29436685&userid=1622169631">https://music.163.com/song?id=29436685&amp;userid=1622169631</a></p><h3 id="届かない恋"><a href="#届かない恋" class="headerlink" title="届かない恋"></a>届かない恋</h3><p>无法传达的恋情，出自白色相簿2。<br>网抑云：<a href="https://music.163.com/song?id=509106602&userid=1622169631">https://music.163.com/song?id=509106602&amp;userid=1622169631</a></p><h3 id="桃幻浪漫"><a href="#桃幻浪漫" class="headerlink" title="桃幻浪漫"></a>桃幻浪漫</h3><p>出自 Galgame《千之刃涛、桃花染之皇姬 -柳暗花明-》，明明是个小黄油，OP 搞得这么燃真的好吗？<br>网抑云：<a href="https://music.163.com/song?id=1395939524&userid=1622169631">https://music.163.com/song?id=1395939524&amp;userid=1622169631</a></p><h3 id="最高の片想い"><a href="#最高の片想い" class="headerlink" title="最高の片想い"></a>最高の片想い</h3><p>弥足珍贵的单相思； TV动画《彩云国物语》ED1。<br>网抑云：<a href="https://music.163.com/song?id=4898499&userid=1622169631">https://music.163.com/song?id=4898499&amp;userid=1622169631</a></p><h3 id="素敌だね"><a href="#素敌だね" class="headerlink" title="素敌だね"></a>素敌だね</h3><p>PS2游戏《最终幻想10》主题曲，最早听到这首歌是在优酷看到一个 360P 画质的剪辑，然后我抱着试一下的心态搜了下，居然还在！<br>优酷在线播放：<a href="https://v.youku.com/v_show/id_XMjY0Nzc4NDU2.html">https://v.youku.com/v_show/id_XMjY0Nzc4NDU2.html</a></p><h3 id="LILIUM"><a href="#LILIUM" class="headerlink" title="LILIUM"></a>LILIUM</h3><p>《妖精旋律》主题曲，极其压抑，而且还十分恐怖，以前看得怕怕的！<br>网抑云：<a href="https://music.163.com/song?id=783014&userid=1622169631">https://music.163.com/song?id=783014&amp;userid=1622169631</a></p><h3 id="冷たい部屋、一人"><a href="#冷たい部屋、一人" class="headerlink" title="冷たい部屋、一人"></a>冷たい部屋、一人</h3><p>出自动画「K」的 ED。<br>网抑云：<a href="https://music.163.com/song?id=31649017&userid=1622169631">https://music.163.com/song?id=31649017&amp;userid=1622169631</a></p><p>推荐配合动画的 ED 使用，画面超级完美的贴合旋律，画面中是一只猫蜷缩着睡着了，其实这只白猫是动画里的女主角，平时是猫的形态，可以变成人形，整首歌曲调十分悲凉，配合猫咪柔弱的形态以及歌名”冰冷的房间、独自一人”极其凄凉。</p><p>B 站 UP 主手绘的 ED 及翻唱：<a href="https://www.bilibili.com/video/BV1Db411J7Eb">https://www.bilibili.com/video/BV1Db411J7Eb</a></p><p>“猫是小白的猫，小白是猫的小白”。</p><p>【彩蛋】原本唱 OP（KINGS）的 angela 也来唱 ED 啦！<br>网抑云：<a href="https://music.163.com/song?id=28785963&userid=1622169631">https://music.163.com/song?id=28785963&amp;userid=1622169631</a></p><h3 id="炎のカタチ"><a href="#炎のカタチ" class="headerlink" title="炎のカタチ"></a>炎のカタチ</h3><p>同样出自「K」，其中某集的神插曲，櫛名安娜的角色歌，与上面的冰冷部屋有着同样的凄凉。<br>第一次听到的时候极其震撼：<br>黑夜里，白毛萝莉站在雪地上，红毛跟她告别，天空飘落着白花花的雪，少女呼喊着红毛的名字，但是红毛却已经不在了，随后缓缓响起了「炎のカタチ」的旋律——我愿称之为最强插曲之一。<br>网抑云：<a href="https://music.163.com/song?id=31649010&userid=1622169631">https://music.163.com/song?id=31649010&amp;userid=1622169631</a></p><h3 id="Flame-of-Red"><a href="#Flame-of-Red" class="headerlink" title="Flame of Red"></a>Flame of Red</h3><p>即使你不看「K」这部动画，光是看着剪辑都会泪目：<a href="https://www.bilibili.com/video/av2266946">https://www.bilibili.com/video/av2266946</a></p><p>你以为这首是催泪曲？然而在安娜觉醒时，随着那句“No Blood，No Bone，No ash”响起的 レクイエム・オブ・レッド 燃到爆！<br>网抑云：<a href="https://music.163.com/song?id=31649021&userid=1622169631">https://music.163.com/song?id=31649021&amp;userid=1622169631</a></p><h3 id="レクイエム・オブ・レッド"><a href="#レクイエム・オブ・レッド" class="headerlink" title="レクイエム・オブ・レッド"></a>レクイエム・オブ・レッド</h3><p>同上，出自「K」安娜觉醒时的插曲，没看过动画的可以看上面的剪辑，完美与动画内容同步，前奏十分凄凉，压抑了许久的情感随着安娜觉醒瞬间爆发出来，燃到爆！！！<br>网抑云：<a href="https://music.163.com/song?id=31649021&userid=1622169631">https://music.163.com/song?id=31649021&amp;userid=1622169631</a></p><h3 id="恋色空"><a href="#恋色空" class="headerlink" title="恋色空"></a>恋色空</h3><p>出自《白色相簿》，需要配合动画观看，这是一个插曲。动画中女主角为了等另一个双马尾，故意拖了很久的前奏，导致许多观众开始不耐烦，甚至有开始离场的，但是等她开口的时候，所有正要离开的观众全部驻足停下来，感受这天籁之音，最强插曲之一。</p><p>网抑云：<a href="https://music.163.com/song?id=29562700&userid=1622169631">https://music.163.com/song?id=29562700&amp;userid=1622169631</a></p><p>白色相簿里面太多神曲了，比如 POWDER SNOW、深愛、</p><h3 id="大河よ共に泣いてくれ"><a href="#大河よ共に泣いてくれ" class="headerlink" title="大河よ共に泣いてくれ"></a>大河よ共に泣いてくれ</h3><p>大河啊，陪我一起哭泣吧！出自《佐贺偶像是传奇：卷土重来》。<br>谁能想到这样一部唱歌类的偶像番，居然如此之燃？！<br>尤其是花魁篇，只用短短几集却描绘出一位有情有义的女主。</p><p>网抑云：<a href="https://music.163.com/song?id=1837037141&userid=1622169631">https://music.163.com/song?id=1837037141&amp;userid=1622169631</a></p><h3 id="風の強い日は嫌いか？"><a href="#風の強い日は嫌いか？" class="headerlink" title="風の強い日は嫌いか？"></a>風の強い日は嫌いか？</h3><p>讨厌风强的日子吗？同样出自佐贺偶像，队长主唱，继承了白龙的意志（深夜电台）。<br>网抑云：<a href="https://music.163.com/song?id=1837036357&userid=1622169631">https://music.163.com/song?id=1837036357&amp;userid=1622169631</a><br>队长曾经崇拜说唱歌手白龙，如今却被岁月洗去了曾经的风光，只留下沧桑，但是一代偶像并未因此而落幕，新的一代（僵尸）继承了他的意志！用她们的声音鼓励着更多因为生活不如意而陷入绝望的人们。</p><h3 id="夕暮れ"><a href="#夕暮れ" class="headerlink" title="夕暮れ"></a>夕暮れ</h3><p>其实原作是一曲日本的励志歌，《旋转少女》ED 也有这首歌。<br>B 站试听：<a href="https://www.bilibili.com/video/BV1rZ4y1F7Lk">https://www.bilibili.com/video/BV1rZ4y1F7Lk</a><br>PS.看了这个剪辑，有点想补掉这个动画了。</p><p>原作是 The Blue Hearts（80 年代的日本乐队）。<br>原作网抑云：<a href="https://music.163.com/song?id=22668285&userid=1622169631">https://music.163.com/song?id=22668285&amp;userid=1622169631</a></p><h3 id="BAD-NEWS-黒い予感"><a href="#BAD-NEWS-黒い予感" class="headerlink" title="BAD NEWS(黒い予感)"></a>BAD NEWS(黒い予感)</h3><p>出自《回转企鹅》，歌曲听起来十分欢快，但是据说剧情很致郁。<br>网抑云：<a href="https://music.163.com/song?id=22813885&userid=1622169631">https://music.163.com/song?id=22813885&amp;userid=1622169631</a></p><h3 id="A-Song-of-Storm-and-Fire"><a href="#A-Song-of-Storm-and-Fire" class="headerlink" title="A Song of Storm and Fire"></a>A Song of Storm and Fire</h3><p>风暴与火焰之歌，出自《翼年代记》插曲。<br>B 站观看：<a href="https://www.bilibili.com/video/BV1ks411z7Qj">https://www.bilibili.com/video/BV1ks411z7Qj</a><br>小狼拔剑神曲（伪）：<a href="https://www.bilibili.com/video/BV1RW411j7c1">https://www.bilibili.com/video/BV1RW411j7c1</a></p><p>其实上面的是翼年代记和魔卡少女小樱的剪辑。</p><h3 id="Romantic-summer"><a href="#Romantic-summer" class="headerlink" title="Romantic summer"></a>Romantic summer</h3><p>配合动画使用更佳：<a href="https://www.bilibili.com/video/BV13x411T7TR?from=search&seid=1800496375498371745&spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV13x411T7TR?from=search&amp;seid=1800496375498371745&amp;spm_id_from=333.337.0.0</a></p><p>无杂音网抑云：<a href="https://music.163.com/song?id=27771878&userid=1622169631">https://music.163.com/song?id=27771878&amp;userid=1622169631</a><br>这部动画的 OP 简直太有魔性了，歌曲这么好听，根本舍不得跳过，唯一一部动画从未跳过开头的。</p><h3 id="パペピプ♪パピペプ♪パペピプポ♪"><a href="#パペピプ♪パピペプ♪パペピプポ♪" class="headerlink" title="パペピプ♪パピペプ♪パペピプポ♪"></a>パペピプ♪パピペプ♪パペピプポ♪</h3><p>TV动画《恶魔奶爸》ED4，超魔性的 ED，舍不得跳过的 ED。</p><p>在线看萌娃跳舞：<a href="https://www.bilibili.com/video/BV1Ds411A7jj?p=9">https://www.bilibili.com/video/BV1Ds411A7jj?p=9</a><br>网抑云：<a href="https://music.163.com/song?id=34364635&userid=1622169631">https://music.163.com/song?id=34364635&amp;userid=1622169631</a></p><h3 id="あいぞめ"><a href="#あいぞめ" class="headerlink" title="あいぞめ"></a>あいぞめ</h3><p>出自《地狱少女》蓝染； TVアニメ「地獄少女 二籠」EDテーマ。<br>网抑云：<a href="https://music.163.com/song?id=532936&userid=1622169631">https://music.163.com/song?id=532936&amp;userid=1622169631</a></p><h3 id="迷い子さがし"><a href="#迷い子さがし" class="headerlink" title="迷い子さがし"></a>迷い子さがし</h3><p>出自《刀语》，姐姐七实的角色歌。<br>网抑云：<a href="https://music.163.com/song?id=625630&userid=1622169631">https://music.163.com/song?id=625630&amp;userid=1622169631</a></p><p>作者是物语系列的西尾维新，这部刀语其实也是一部很好看的动画，但是画风可能会让一些人接受不了，但角色的塑造真的太好了，包括反派的凤凰因为手下违反了自己和女主定下的规则而自断一只手，看的有点感动，姐姐的角色设定也超好，姐姐拥有看穿一切技能的“见稽古”，任何招式只要看一眼就可以直接学到满级，但是她的才华被上天嫉妒，因此在她出生的时候就中了无法治愈的毒，身体极度虚弱，但即使这样的她为了弟弟的收刀之旅，用自己的生命强化了弟弟的绝技。</p><h3 id="谁そ彼の月华"><a href="#谁そ彼の月华" class="headerlink" title="谁そ彼の月华"></a>谁そ彼の月华</h3><p>同样来自《刀语》ED，第一次听到直接震惊了！场景是白毛女主拖着一头长长的头发，和男主背对背坐在那儿，颇有一番云天河和韩菱纱的感觉。<br>B 站在线观看：<a href="https://www.bilibili.com/video/BV1nx41167fz">https://www.bilibili.com/video/BV1nx41167fz</a><br>网抑云：<a href="https://music.163.com/song?id=867400&userid=1622169631">https://music.163.com/song?id=867400&amp;userid=1622169631</a></p><h3 id="Only-my-railgun"><a href="#Only-my-railgun" class="headerlink" title="Only my railgun"></a>Only my railgun</h3><p>TVアニメ「とある科学の超電磁砲」OP1テーマ。<br>网抑云：<a href="https://music.163.com/song?id=33255251&userid=1622169631">https://music.163.com/song?id=33255251&amp;userid=1622169631</a></p><h3 id="Shangri-La"><a href="#Shangri-La" class="headerlink" title="Shangri-La"></a>Shangri-La</h3><p>这首香格里拉出自 TV 动画《苍穹之法芙娜》片头曲:TVアニメ，感受 angela 的逆天唱功，这首歌就好比咱们的《青藏高原》。<br>网抑云：<a href="https://music.163.com/song?id=26170003&userid=1622169631">https://music.163.com/song?id=26170003&amp;userid=1622169631</a></p><h3 id="くちづけ"><a href="#くちづけ" class="headerlink" title="くちづけ"></a>くちづけ</h3><p>出自《尸鬼》，动画也是相当好看，并不是名字那样的恐怖片，剧情与《自新世界》一样压抑。<br>网抑云：<a href="https://music.163.com/song?id=741286&userid=1622169631">https://music.163.com/song?id=741286&amp;userid=1622169631</a></p>]]></content>
      
      
      <categories>
          
          <category> 随心分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】Ajax 请求无法正常获取 JSON 数据问题</title>
      <link href="/2022/02/02/unity-tips-031/"/>
      <url>/2022/02/02/unity-tips-031/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在制作对话的时候，我用 HTML 实现了一个可视化的剧情生成器，但是今天打开剧情编辑器却发现无法正常加载 JSON 数据，Ajax 请求既没有跨域，又没有发生异常，而是返回正常的 200 状态码，并且控制台也没报任何异常，但就是 success 方法没有执行，反而会执行 error 方法，打印出异常信息，返回的却是正常的数据。</p><p>这就十分离奇了。</p><p>相关的 JavaScript 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 读取角色名称</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;GET&quot;,</span><br><span class="line">    url: api + baseApi + &quot;name.json&quot;,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    success: (res) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        console.log(&quot;读取角色名称&quot;);</span><br><span class="line"></span><br><span class="line">        names &#x3D; res;</span><br><span class="line"></span><br><span class="line">        for (let key in res) &#123;</span><br><span class="line"></span><br><span class="line">            $(&#39;#dialog-event-name&#39;).append(&#96;&lt;option value&#x3D;&quot;$&#123;key&#125;&quot;&gt;$&#123;res[key]&#125;&lt;&#x2F;option&gt;&#96;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 获取角色文本</span><br><span class="line">            $.getJSON(api + dialogApi + key + &quot;.json&quot;, (res) &#x3D;&gt; &#123;</span><br><span class="line">                contents[key] &#x3D; res;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(e) &#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面实现了读取角色名称以及该角色所有台词的数据加载，通常情况下是没有问题的，但是却发现控制台输出了一串字符串，也就是说发生了某种错误，但这个问题十分离奇，它本身并不是报异常，而是正常的返回状态码 200，并且控制台输出了：</p><blockquote><p>{readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}</p></blockquote><p>这不是一次正常的请求结果吗？那为什么会不执行 success，反而去执行 error 了？</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>网上搜了一下相关的问题，有的人说是要加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType: &quot;json&quot;</span><br></pre></td></tr></table></figure><p>用于严格的判断返回数据类型，可是加了也没用，显然不是这个原因。<br>真正的原因其实是因为 JSON 文件加了注释导致的，<code>name.json</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; NPC名称</span><br><span class="line">    &quot;test&quot;: &quot;测试NPC&quot;,</span><br><span class="line">    &quot;pangbai&quot;: &quot;旁白&quot;,</span><br><span class="line">    &quot;suoer&quot;: &quot;索尔&quot;,</span><br><span class="line">    &quot;lawei&quot;: &quot;拉薇&quot;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 敌人名称</span><br><span class="line">    &quot;dushe&quot;: &quot;毒蛇&quot;,</span><br><span class="line">    &quot;tuntianmang&quot;: &quot;吞天蟒&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要把注释去掉就行了，对于 Ajax 请求，返回的数据必须是严格的 JSON 数据，不能加注释。</p><p>非要加注释的话，就设置成一个字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;remark_1&quot;: &quot;------------------角色的名称------------------&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;测试NPC&quot;,</span><br><span class="line">    &quot;pangbai&quot;: &quot;旁白&quot;,</span><br><span class="line">    &quot;suoer&quot;: &quot;索尔&quot;,</span><br><span class="line">    &quot;lawei&quot;: &quot;拉薇&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;remark_2&quot;: &quot;------------------敌人的名称------------------&quot;,</span><br><span class="line">    &quot;dushe&quot;: &quot;毒蛇&quot;,</span><br><span class="line">    &quot;tuntianmang&quot;: &quot;吞天蟒&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只加入几行字段而已，无伤大雅，也不会影响什么效率之类的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】C# 拷贝对象问题</title>
      <link href="/2022/02/01/unity-tips-030/"/>
      <url>/2022/02/01/unity-tips-030/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对象即是引用是很多程序语言的共通特性，在 C# 也是如此。因此在使用对象类型的时候就要十分小心因为修改了对象的属性而导致结果发生变化的情况，今天的制作游戏战斗状态的时候又遇到新的问题：拷贝出来的对象的某些属性依然是引用？！</p><h2 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h2><p>只要让一个类实现 <code>ICloneable</code> 接口即可令其变为可以克隆的对象。<br>现在要实现一个技能【破刃斩】攻击敌人同时降低目标一定百分百的护甲，降低的护甲与角色当前的”剑意“层数有关。</p><p>创建一个战斗状态类用来保存状态的各种属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class FormatterBattleState : FormatterData, ICloneable</span><br><span class="line">&#123;</span><br><span class="line">    public string icon;</span><br><span class="line">    public string name;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 持续回合数,-1代表无限回合</span><br><span class="line">    public int remain_time;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 状态的最大层数，达到该值后则无法继续叠加，只会刷新回合</span><br><span class="line">    public int max_count &#x3D; 1;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 附加属性，基础属性后缀为_percent则为百分比，负值代表减少</span><br><span class="line">     * atk: 物理攻击</span><br><span class="line">     * def: 物理防御</span><br><span class="line">     * mat: 魔法攻击</span><br><span class="line">     * def: 魔法防御</span><br><span class="line">     * mov: 速度</span><br><span class="line">     * skill_power: 技能威力</span><br><span class="line">     * damage_decrement: 伤害减免</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Dictionary&lt;string, decimal&gt; attributes &#x3D; new Dictionary&lt;string, decimal&gt;();</span><br><span class="line"></span><br><span class="line">    public object Clone()</span><br><span class="line">    &#123;</span><br><span class="line">        return this as object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的战斗状态类已经可以被克隆了，接着还有一个读取状态的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public FormatterBattleState GetState(string id)</span><br><span class="line">&#123;</span><br><span class="line">    var states &#x3D; TableLoader.GetInstance().GetStateTable();</span><br><span class="line">    var state &#x3D; states.ContainsKey(id) ? states[id] : null;</span><br><span class="line"></span><br><span class="line">    if (state &#x3D;&#x3D; null) return null;</span><br><span class="line"></span><br><span class="line">    return state.Clone() as FormatterBattleState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后完成技能附加状态的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnSkillHit()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里是一些业务逻辑，不用管</span><br><span class="line">    int maxCount &#x3D; 10;</span><br><span class="line">    int currentCount &#x3D; battleSkillData.user.info.GetStateCount(&quot;jianyi&quot;);</span><br><span class="line">    int spentCount &#x3D; Mathf.Min(currentCount, maxCount);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这是计算破防状态具体减少多少护甲的公式</span><br><span class="line">    decimal percent &#x3D; (20 + spentCount * 1) * -1;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 得到上面的那个类的实例</span><br><span class="line">    FormatterBattleState state &#x3D; BattleStateLoader.GetInstance().GetState(&quot;porenzhan&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 赋值状态的破甲属性</span><br><span class="line">    state.attributes.Add(&quot;def_percent&quot;, percent);</span><br><span class="line"></span><br><span class="line">    battleSkillData.target.info.TakeState(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来没什么问题了，虽然 state 是引用，但是在获取 state 的时候使用了克隆，按理说 <code>attributes</code> 属性也应该会被克隆一份，可实际上如果连续使用破刃斩两次，就会提示 <code>def_percent</code> 这个 Key 已经存在了。</p><p>也就是说虽然克隆了 state 出来，但是 state 里面的 <code>attributes</code> 属性却依然还是引用。</p><p>为了验证自己的观点，将获取状态的方法改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public FormatterBattleState GetState(string id)</span><br><span class="line">&#123;</span><br><span class="line">    var states &#x3D; TableLoader.GetInstance().GetStateTable();</span><br><span class="line">    var state &#x3D; states.ContainsKey(id) ? states[id] : null;</span><br><span class="line"></span><br><span class="line">    if (state &#x3D;&#x3D; null) return null;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 注释掉，看看是不是因为克隆的问题</span><br><span class="line">    &#x2F;&#x2F;return state.Clone() as FormatterBattleState;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建一个新的对象，然后手动赋值</span><br><span class="line">    var temp &#x3D; new FormatterBattleState</span><br><span class="line">    &#123;</span><br><span class="line">        id &#x3D; state.id,</span><br><span class="line">        icon &#x3D; state.icon,</span><br><span class="line">        attributes &#x3D; new Dictionary&lt;string, decimal&gt;(state.attributes),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进入游戏测试，连续使用两次破刃斩不会报错了。<br>果然是克隆不完全的关系，然后我就去查了一下克隆的更细致说明，得到下面的结论。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝只是将对象的值逐一赋值到一个新的对象，值类型的变量没问题，因为拷贝的是副本；但是引用类型的变量，拷贝到新的变量却依旧是引用类型，所以对于含有引用类型数据的类不能直接用浅拷贝，而应该用深拷贝。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深层拷贝有许多方法，比如上面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var temp &#x3D; new FormatterBattleState</span><br><span class="line">&#123;</span><br><span class="line">    id &#x3D; state.id,</span><br><span class="line">    icon &#x3D; state.icon,</span><br><span class="line">    attributes &#x3D; new Dictionary&lt;string, decimal&gt;(state.attributes),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>直接赋值给一个新创建的实例，但这种方法每次都要手写，十分繁琐。</p><h2 id="深拷贝的方法"><a href="#深拷贝的方法" class="headerlink" title="深拷贝的方法"></a>深拷贝的方法</h2><h3 id="二进制序列化"><a href="#二进制序列化" class="headerlink" title="二进制序列化"></a>二进制序列化</h3><p>第二种就是将一个对象序列化，再反序列化，就变成一个新的实例了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 序列化注解</span><br><span class="line">[Serializable]</span><br><span class="line">public class FormatterBattleState : FormatterData, ICloneable</span><br><span class="line">&#123;</span><br><span class="line">    public string icon;</span><br><span class="line">    public string name;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 持续回合数,-1代表无限回合</span><br><span class="line">    public int remain_time;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 状态的最大层数，达到该值后则无法继续叠加，只会刷新回合</span><br><span class="line">    public int max_count &#x3D; 1;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 附加属性，基础属性后缀为_percent则为百分比，负值代表减少</span><br><span class="line">     * atk: 物理攻击</span><br><span class="line">     * def: 物理防御</span><br><span class="line">     * mat: 魔法攻击</span><br><span class="line">     * def: 魔法防御</span><br><span class="line">     * mov: 速度</span><br><span class="line">     * skill_power: 技能威力</span><br><span class="line">     * damage_decrement: 伤害减免</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Dictionary&lt;string, decimal&gt; attributes &#x3D; new Dictionary&lt;string, decimal&gt;();</span><br><span class="line"></span><br><span class="line">    public object Clone()</span><br><span class="line">    &#123;</span><br><span class="line">        return this as object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 二进制序列化</span><br><span class="line">    public FormatterBattleState DeepClone()</span><br><span class="line">    &#123;</span><br><span class="line">        using (Stream objectStream &#x3D; new MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            IFormatter formatter &#x3D; new BinaryFormatter();</span><br><span class="line">            formatter.Serialize(objectStream, this);</span><br><span class="line">            objectStream.Seek(0, SeekOrigin.Begin);</span><br><span class="line">            return formatter.Deserialize(objectStream) as FormatterBattleState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给类加上一个注解：<code>[Serializable]</code>，注意不要打错成：<code>[SerializeField]</code>，后者是给类的字段添加的注解，然后这个类就可以被序列化了。</p><h3 id="JSON-序列化"><a href="#JSON-序列化" class="headerlink" title="JSON 序列化"></a>JSON 序列化</h3><p>第三种是把类转化成 JSON 字符串，然后再把 JSON 字符串转回对象，得到的也是一个新的实例，可以使用 LitJson 插件。</p><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>第四种是利用反射原理实现自动赋值变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static TOut TransReflection&lt;TIn, TOut&gt;(TIn tIn)</span><br><span class="line">&#123;</span><br><span class="line">    TOut tOut &#x3D; Activator.CreateInstance&lt;TOut&gt;();</span><br><span class="line">    var tInType &#x3D; tIn.GetType();</span><br><span class="line">    foreach (var itemOut in tOut.GetType().GetProperties())</span><br><span class="line">    &#123;</span><br><span class="line">        var itemIn &#x3D; tInType.GetProperty(itemOut.Name); ;</span><br><span class="line">        if (itemIn !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            itemOut.SetValue(tOut, itemIn.GetValue(tIn));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return tOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NewUserInfo newInfo &#x3D; TransReflection&lt;UserInfo, NewUserInfo&gt;(info);</span><br></pre></td></tr></table></figure><h3 id="AutoMapper"><a href="#AutoMapper" class="headerlink" title="AutoMapper"></a>AutoMapper</h3><p>这个对于初学 C# 的我来说比较陌生，其实跟反射差不多，官方文档：<a href="https://docs.automapper.org/en/latest/">https://docs.automapper.org/en/latest/</a></p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Foo</span><br><span class="line">&#123;</span><br><span class="line">    public int ID &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FooDto</span><br><span class="line">&#123;</span><br><span class="line">    public int ID &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void Map()</span><br><span class="line">&#123;</span><br><span class="line">    var config &#x3D; new MapperConfiguration(cfg &#x3D;&gt; cfg.CreateMap&lt;Foo, FooDto&gt;());</span><br><span class="line"></span><br><span class="line">    var mapper &#x3D; config.CreateMapper();</span><br><span class="line"></span><br><span class="line">    Foo foo &#x3D; new Foo &#123; ID &#x3D; 1, Name &#x3D; &quot;Tom&quot; &#125;;</span><br><span class="line"></span><br><span class="line">    FooDto dto &#x3D; mapper.Map&lt;FooDto&gt;(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>教程介绍：<a href="https://www.cnblogs.com/gl1573/p/13098031.html">https://www.cnblogs.com/gl1573/p/13098031.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】最新作：战国篇——游戏预告</title>
      <link href="/2022/01/15/legend-of-the-devil-03/"/>
      <url>/2022/01/15/legend-of-the-devil-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为《魔王1》和《魔王2》都没有真正实现自己的想法（局限于 RPG Maker）。现在我已经可以自己写脚本了，不再需要被 RM 的脚本束缚，使用 Unity 制作的魔王传说可以实现所有想法。为了保证游戏一定能做出来，美术的问题就必须得到解决。这次我决定直接使用一些允许商用的公开素材再加上 RPG Maker 的纸娃娃来生成人物。<br>（现在只能保证系统是原创的，虽然买了数位板学画画，但也是有生之年系列……不会画画的码农不是好程序猿，太难了）</p><p>本文主要为游戏的一些设定，文字比较多。<br>如果不喜欢看设定的，可以直接跳转到底部<strong>游戏概述</strong>。<br>由于是本人第一次原创系统的作品，因此许多地方可能看起来很“稚嫩”。<br>重要的是先做出来，这样以后还有机会逐渐完善，如果做不出来就什么都没有了。<br>这是一个长期维护的作品，剧情也比较长，我会用很长的时间来保持更新。</p><p>最后……还有一件事，关于《名为怪物的游戏》可以确定已经鸽了，Cee 目前也没继续干活了，只剩下我自己没办法做出美术素材，所以之后就由我自己一个人完成《魔王传说》的新作，对于等了《怪物游戏》这么多年的玩家十分抱歉，全职在家两年都没做出来，也是十分无奈，虽然我还是想不通到底为什么做不出来，但没时间再磨蹭了，这次的魔王传说新作不会再鸽了。</p><h2 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h2><p>新作《魔王传说：战国篇》以《魔王传说2》为背景故事。<br>这次玩家将扮演一名旁观者参与到剑之城与魔法之城的战争中。</p><p>索尔和拉薇则是游戏中的男主角和女主角。<br>游戏前期三人将组成探险小队，一起游历，磨炼自身的实力。</p><p>索尔因为自己无力改变剑城内部的腐败而选择历练自己，直到变得更强。<br>拉薇因为魔法之城在剑城的攻势下节节败退，为了寻求解救魔法之城的方法外出求援。<br>作为小队之一的玩家则是为了在乱世之中追求属于自己的一片天。<br>三人从乱世中的小虾米，不断成长为像费奥纳、希亚那样名扬天下的大人物。</p><p>游戏计划有十三章，其中十二章为主线剧情，第十三章为特别篇，通关之后开放。</p><h2 id="各大势力"><a href="#各大势力" class="headerlink" title="各大势力"></a>各大势力</h2><p>游戏的背景是剑与魔法的战争时代。<br>在这样不太平的乱世中，有许多势力异军突起，占据一方土地。</p><h3 id="剑之城"><a href="#剑之城" class="headerlink" title="剑之城"></a>剑之城</h3><p>当今天下第一大城，费奥纳凭借举世无双的剑术征服了大陆的强者，建立了剑之城。<br>“剑城无弱者”——此乃天下皆知的道理。</p><p>费奥纳常年在外征战，剑城的事务均由「幻」代为执掌。<br>幻是费奥纳救下的一名与索尔差不多大的孩子，对魔法一族有着深深的仇恨。<br>在费奥纳的培养以及自身的天赋和努力下，没过多久实力突飞猛进。<br>由一名战争中的孤儿变为实力仅次于费奥纳的存在。</p><p>费奥纳对他十分信任，外出征战时令其管理剑城事务，同时训练自己不成器的弟弟。<br>幻也对费奥纳极度崇拜，在后方支持费奥纳的远征事业。</p><p>然而，剑城内部却异常腐败。<br>许多加入剑城的人都是想要借助费奥纳的名气趁机发一笔横财。<br>进而出现许多借着剑城名义敲诈勒索事件。<br>原本费奥纳制定的规则也因为山高皇帝远而变成一纸空文。</p><p>为了改变剑城，索尔决定外出历练，直到变得足够强大为止。</p><h3 id="魔法之城"><a href="#魔法之城" class="headerlink" title="魔法之城"></a>魔法之城</h3><p>魔法一族原本是十分零落的，各个部落之间经常发生争斗。<br>后来森林中出现了一名魔女，名为希亚。<br>在希亚的带领下统一了各个部落，建立了魔法之城。</p><p>后来魔法之城受到剑城侵略，希亚带着族人反抗。<br>然而，在希亚生下拉薇和艾琳之后身体极度虚弱，附近城池因此接连沦陷。</p><p>如今只能在同盟的帮助下勉强减缓剑城的攻势。</p><h3 id="御兽国"><a href="#御兽国" class="headerlink" title="御兽国"></a>御兽国</h3><p>以驯服魔物并且操控魔物的一个特殊势力。<br>他们借助魔物的力量抵御剑城的攻势，因而没有被剑城侵占，是一方独立的势力。</p><h3 id="妖精城"><a href="#妖精城" class="headerlink" title="妖精城"></a>妖精城</h3><p>由小精灵组成的很小的一座城。<br>帮助希亚与剑之城抗衡。</p><h3 id="魔王城"><a href="#魔王城" class="headerlink" title="魔王城"></a>魔王城</h3><p>在远古时代，大陆曾是魔族的天下，人类不过是猎物。</p><p>后来人类的「智者」修建了地下城，将大部分的魔物引入地下。<br>人类的生命安全才得以保障，文明高速发展，诞生出与魔族对抗的手段。</p><p>但是魔族经过千年的发展，一些顶级的魔物也进化出人类一般的智慧，此类是纯血魔族。<br>纯血魔族最强的一只被称为“魔王”，它们也像人类那般进化出文明。<br>在魔王的带领下，一些魔族强者也聚集起来，那个地方叫做「万魔殿」。</p><p>万魔殿曾经是大陆上最强大的势力，聚集了最顶级的魔族强者。<br>横行天下无人能敌，大陆上的绝大多数领地都被魔王占领。</p><p>魔族侵略人类村庄后与人类繁衍剩下的混血称为半血魔族。<br>半血魔族属于低等魔族，在魔族被当做奴隶，在人族被当做驱逐的对象。</p><p>人类和魔族的战争持续了千年，直到费奥纳和希亚的出现。<br>万魔殿的强者被尽数诛灭，老魔王也被费奥纳重伤，在魔族残党拼死护送下逃到边境的蛮荒之地。<br>老魔王重伤不治，召集了剩余的魔族临终托孤，带着对人类的怨恨离世。</p><p>魔族被逐出大陆后，费奥纳对希亚宣战，随后开始了持续多年的战争。<br>而魔族却趁机养精蓄锐，并派出奸细在各大势力间招兵买马、挑拨离间，欲图再次入侵大陆。</p><p>魔王之女亦被称为历代魔王最强，一场腥风血雨将掀起。</p><h3 id="涂山"><a href="#涂山" class="headerlink" title="涂山"></a>涂山</h3><p>涂山乃是隐世狐族的居所，山外云雾缭绕，外人不可进其内。<br>狐族也是纯血魔族，但它们不需要修炼千年也能够变幻为人形。</p><p>狐族的祖先并不强大，而是通过“智慧”一直繁衍至今。<br>因而狐族的血脉传承着祖先的遗志，一直过着隐士般的生活。</p><p>狐族大都是经过千年修行的狐妖，实力远超人类。<br>每修行百年，其尾巴就会分裂出一条，以一尾至十尾区分实力。<br>狐族的历史可参考：<a href="https://huotuyouxi.com/2021/12/29/legend-of-the-devil-01/">妖狐列传</a><br>虽然狐族多为隐士，但也有一小部分“贪玩”的小狐狸偷偷跑出涂山，甚至还开宗立派。</p><h3 id="栖霞谷"><a href="#栖霞谷" class="headerlink" title="栖霞谷"></a>栖霞谷</h3><p>狐钰本是涂山内定的下任族长。<br>然而偶然间有一名人类误入涂山，狐族盛情款待留下人类。<br>每到夜里，人类都会为她讲述了外界的故事。<br>少女开始对外面的世界充满好奇心。</p><p>后来人类因为思念亲人逃出涂山，狐钰便一同离开了。<br>发现姐姐不见的狐雪也偷偷溜出涂山与姐姐团聚。</p><p>两人找到一处山谷开宗立派，欲图将狐族秘术发扬光大，这里就是栖霞谷。<br>在狐雪的帮助下，如今栖霞谷也是大陆上不容小觑的势力。<br>不过他们的理念是隐世修行，不参与任何争端。</p><p>传说只有当雨过天晴天空架起彩虹桥之时，从虹桥走过，尽头便是栖霞谷。</p><h3 id="青丘城"><a href="#青丘城" class="headerlink" title="青丘城"></a>青丘城</h3><p>涂山狐族长老们发现偷跑的狐狸越来越多，不得不在外开设一个分部，也就是青丘城。<br>青丘城由几名长者管理，主要是吸纳那些没有归处的狐族，在这里保护它们的安全。</p><h2 id="门派"><a href="#门派" class="headerlink" title="门派"></a>门派</h2><p>听起来有点像武侠小说？？？<br>不过也想不到什么其他形容词了，暂时就用这个。</p><p>门派有别于势力，玩家可以加入门派，修习对应的技能。</p><p>物理系门派分为：剑、刀、枪。<br>魔法系门派分为：火、水、风、雷。</p><p>每一个门派主修一个属性，还有一些辅修的，比如剑和风属性组合之类的。<br>加入门派之后就不能再换了，不过玩家可以在探险时发现一些「技能卷轴」从而学到门派没有的属性。</p><h2 id="游戏概述"><a href="#游戏概述" class="headerlink" title="游戏概述"></a>游戏概述</h2><p>游戏依然是采用回合制，而且这次是完全不一样的一次尝试。<br>那就是——1V1 的回合制！！！<br>这下真的变成互 A 的游戏了？？？</p><p>在我玩了《觅长生》之后，发现的确可以做到 1V1 的回合制，而且不会无聊。<br>其实主要还是看敌人的 AI 蠢不蠢，这个就比较考验我的码农水平了……</p><p>回合制之所以有趣是因为策略性，而策略性体现在不同的技能组合。<br>因此本作延续《魔王2》的技能组合系统，并且对其进行了一些改造。</p><p>玩家依然可以自由搭配组合，并且还有上面提到的剑+风，剑+火……诸如此类剑与魔法奇葩的组合。</p><h2 id="前排提示"><a href="#前排提示" class="headerlink" title="前排提示"></a>前排提示</h2><p>如果游戏中有一些色彩搭配十分奇怪的地方也可以指出来。<br>本文中写的一些设定也可能根据实际情况进行一些修改，一切都以实际发布为准。<br>总之，争取在下个月发布 Demo，早日交到玩家手中实际体验。</p><p><strong>PS.当前版本的 UI 很丑，不过以后都是会优化的，目前玩法最重要，在这个阶段可以尽量提一些玩法的建议，好在开始的时候大改，不然以后定型了就不好改了，UI 都是次要的，可以随便改动，很多地方为了缩短工期存在“偷工减料”的嫌疑。</strong></p><h2 id="标题界面"><a href="#标题界面" class="headerlink" title="标题界面"></a>标题界面</h2><p><img src="https://pic.imgdb.cn/item/61e2cdba2ab3f51d917cc2ee.jpg" alt="魔王传说：战国篇"></p><h2 id="初始人物"><a href="#初始人物" class="headerlink" title="初始人物"></a>初始人物</h2><p>为了让每个玩家都有不同的区分度，同时增加一些代入感，参考了修仙游戏的设定：初始人物，玩家可以自由设定角色的初始能力和性别，如果玩家第一次玩没玩好想要重开存档，可以通过不同的天赋点数来避免重复的游戏体验，开局的天赋点数很重要，它基本决定了玩家后期主修的技能，比如你想主修剑系就可以点出剑系的天赋。</p><p><img src="https://pic.imgdb.cn/item/61e2ce922ab3f51d917d85b4.jpg" alt="设定性别"></p><p>选择不同的性别在游戏中会有一点点的不一样，比如某些门派要求只能男性或者只能女性。<br>还有一些特殊的支线，总之建议大家女装大佬体验一次。</p><p>一些 RPG 游戏有「难度」的设定，总觉得很奇怪。<br>又不是街机游戏，如果有分数的概念那么倒可以设置难度。</p><p>不过有一些玩家可能喜欢这种设定，为了兼顾两者我决定用一种特殊的方式来当做”难度“，那就是人物的出身。人物的出身决定了天赋点数的多少，流浪孤儿是最少的，因此可以认为难度最大。如果有喜欢挑战难度的也可以自由选择，不喜欢难度的就可以选择其他的了。</p><p><img src="https://pic.imgdb.cn/item/61e2cedc2ab3f51d917dc4cb.jpg" alt="人物出身"></p><p>不同的出身有不同的效果，严格意义上来说也不属于难度。<br>主要目的是让玩家可以体验到不同的开局能力：</p><p><img src="https://pic.imgdb.cn/item/61e2cf6c2ab3f51d917e39b8.jpg" alt="出身能力"></p><p>接着可以设定「体质」，例如开局暴毙：</p><p><img src="https://pic.imgdb.cn/item/61e2d0062ab3f51d917ead92.jpg" alt="体质"></p><p>接着设定「奇遇」，例如风云的麒麟洞？？</p><p><img src="https://pic.imgdb.cn/item/61e2d0ee2ab3f51d917f67e5.jpg" alt="麒麟洞？？"></p><p>最后设定「后天学习」：</p><p><img src="https://pic.imgdb.cn/item/61e2d1312ab3f51d917f9dfe.jpg" alt="魔剑双修"></p><p>为什么要参考修仙游戏？<br><del>因为我最近看了凡人修仙传、完美世界、斗破苍穹、斗罗大陆……</del></p><p>因为这是我亲身体验的感觉，《太吾绘卷》、《鬼谷八荒》、《觅长生》、《部落与弯刀》等等国产游戏都有这样的设定，而且我玩了之后感觉加入这种系统比较不容易腻，让玩家每次开局都不一样，而不是重复同样的开局。</p><p>比如玩家这次剑修，下次开局就可以点出刀修，两套的技能体系完全不同。<br>所以本作是可以重复游玩多次的，只要选择主修不同的派系就可以了。</p><p>在有限的天赋点数里进行选择，本身也是一种策略。<br>（开局由玩家自己设定角色，这样也会产生”莫名其妙“的代入感）</p><p><strong>PS.本来想实现纸娃娃捏脸，可是考虑到工程量太大就放弃了，就像口袋妖怪那样让玩家从两个角色里面选择一个吧。</strong></p><h2 id="等级体系"><a href="#等级体系" class="headerlink" title="等级体系"></a>等级体系</h2><p>我比较反感用属性碾压 BOSS，然后一刀 9999 直接秒了 BOSS。<br>如果是通过技能组合搭配打出高额伤害，那么属于策略，但是通过属性压制就不叫策略了。</p><p>游戏取消了等级的概念，而是参考修仙游戏的境界提升。<br>比如练气、筑基、金丹那些，不过咱这个并不是修仙游戏，所以境界也存在一些不同。<br>主要是用来区分玩家成长度的，因为没有等级所以谁强谁弱就不好判断了。</p><p>比如前期有一只比较强的怪物，玩家一股脑撸上去，结果直接暴毙。<br>这样体验就十分不友好了，因而需要有一个指标让玩家参考打不打得过。</p><p>除此之外，学习高等级的技能也有境界的要求，还有装备。<br>通过境界限制前期获取属性比较高的物品，防止属性过度膨胀。</p><p>如果直接取消等级，这样玩家没有一点成长的感觉；<br>所以最终决定参考修仙这样成长感比较强的境界设定。</p><h2 id="技能体系"><a href="#技能体系" class="headerlink" title="技能体系"></a>技能体系</h2><p>本作的技能体系延续《魔王2》的技能组合系统。<br>分为主动技能和被动技能，并且天赋技能改为门派技能。</p><p>为了让技能体系更加明确，将根据武器、魔法属性来区分不同的”派系“。</p><p>通用技能照旧，可以在游戏过程收集不同的技能卷学习。<br>因为是 1V1 的回合制，技能少了就谈不上策略了，因此这次主动技能有至少 8 个可设定的。</p><p>主动技能叫做「灵技」，被动技能叫做「心术」。<br>灵技比较好理解，就是利用灵力驱动的技能。<br>但是心术……心术不正？？？<br>来看看百科的释义：</p><p><img src="https://pic.imgdb.cn/item/61e2d61f2ab3f51d9183bc69.jpg" alt="心术"></p><blockquote><p>意思是指修心体道之术。基本解释为心思或主意、计策。</p></blockquote><p>修心体道，我觉得作为被动技能的释义十分贴切。<br>假装下面的是一本技能书：</p><p><img src="https://pic.imgdb.cn/item/61e2d7432ab3f51d9184a351.jpg" alt="技能书"></p><p>直接右键”吃掉“即可学习上面的技能：</p><p><img src="https://pic.imgdb.cn/item/61e2d7432ab3f51d9184a357.jpg" alt="学习技能"></p><p><img src="https://pic.imgdb.cn/item/61e2d7432ab3f51d9184a35c.jpg" alt="新的技能"></p><p>学好的技能需要像《魔王2》那样设定才会生效。<br>直接用鼠标把技能拖到战斗区域进行设定：</p><p><img src="https://pic.imgdb.cn/item/61e2d7432ab3f51d9184a369.jpg" alt="将技能拖到战斗技能区域"></p><p>心术（被动技能）的设定是在另外一个页面，与灵技的设定相似，但不是一开始就能设置 8 个，而是当玩家突破境界的时候就会解锁一个格子，直到最后 8 个全部解锁，最开始只能配置 3 个，避免玩家第一次玩的时候眼花缭乱不知所措。</p><p><img src="https://pic.imgdb.cn/item/61ee8ec62ab3f51d916a03d4.jpg" alt="设置心术"></p><p>一些已经设定好的灵技及心术：<br><img src="https://pic.imgdb.cn/item/61ee86e82ab3f51d91636555.jpg" alt="剑系灵技设定(点击查看大图)"><br><img src="https://pic.imgdb.cn/item/61ee86e82ab3f51d91636558.jpg" alt="剑系心术设定(点击查看大图)"><br><img src="https://pic.imgdb.cn/item/61ee882e2ab3f51d91646edc.jpg" alt="刀系灵技设定（点击查看大图）"><br><img src="https://pic.imgdb.cn/item/61ee882e2ab3f51d91646ee2.jpg" alt="刀系心术设定（点击查看大图）"><br>心术不同于灵技是可以升级的，每次升级可以提高附加属性（变得更强）。<br>上面的剑系和刀系的两派就存在很大的区别，剑系通过叠加剑意使伤害更加凌厉；刀系则是通过”控血“，通过消耗生命值来换取血刃状态，然后消耗血刃对敌人造成巨大伤害，以挨打反击为核心，如果再搭配一些其他通用的心术或者技能，玩家可以自由组合的可能性就很多了。同时每个流派也存在不同的分支，比如刀系可以叠加血刃和流血，这两者是没办法兼得的，因为灵技和心术只能配置 8 个，如果想要两者兼得，最后就会高不成低不就，玩家只能取舍。<br>技能的数量远远不止这些，预估能有将近千个不同的灵技和心术，玩家可以组合的策略非常多。</p><h2 id="装备系统"><a href="#装备系统" class="headerlink" title="装备系统"></a>装备系统</h2><p>由于本次是原创系统，所以装备的随机属性、强化、锻造全部都能实现。<br>甚至是套装系统也没有问题，例如像怪物猎人那样打龙掉素材，然后锻造成套的装备。</p><p>装备系统是游戏中一大系统，可以满足喜欢搜集养成玩家的乐趣。</p><h2 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h2><p>战斗采用 1V1 回合制，玩家只需要培养一个角色即可。<br>速度快的先手行动，只要灵力值（右下角的圆形）没有用光，就可以一直释放技能。<br>如果要结束回合，则需要手动点击【结束回合】。</p><p><img src="https://pic.imgdb.cn/item/61e2ff202ab3f51d91a362c8.jpg" alt="左侧为玩家角色，右侧为敌人正在行动"><br><img src="https://pic.imgdb.cn/item/61e2ff202ab3f51d91a362d1.jpg" alt="敌人使用攻击技能对玩家造成伤害"></p><p>角色行动结束时，灵力值就会自动回复至全满。<br>灵力值类似魔法值，是使用技能和道具的必要条件。<br>为了避免玩家”永动机“一回合无限行动，所以有灵力值进行限制。</p><p>除此之外，技能存在冷却回合的概念。<br>一般的攻击技能冷却回合是 0，只要灵力值足够就可以无限使用，可以认为是“普通攻击”。<br>有一些威力比较大的技能就有冷却回合了，防止玩家直接秒掉 BOSS。</p><p>还有一些辅助技能，比如可以回复灵力值的，如果想要一回合打出爆发伤害，可以配合这些辅助技能。冷却系统也可以理解为卡牌游戏里用一次就消失的那种特殊牌，目的都是为了限制玩家使用过于 BUG 的效果。</p><p>回合制游戏的节奏本身是比较慢的，但如果结合卡牌游戏的战斗就可以解决这个问题了。<br>（话说，卡牌游戏好像也是回合制……）</p><p>在与一些比较弱的敌人战斗，甚至可以一套连招直接秒掉怪物。<br>这样可以大大减少战斗时间，降低游戏疲劳度。</p><p><strong>题外话</strong><br>为什么参考的是卡牌游戏的战斗体系？<br>是为了要完成这部游戏，因为 1V1 卡牌战斗系统比起常规 RPG 回合制简单得多。<br>同时卡牌游戏本身就是极具策略的，符合策略性回合制战斗的概念。<br>而且我也亲身体验了几十个小时的觅长生，觉得这种方案确实可行。<br>既能保证自己有完成游戏的把握，同时也能保证战斗系统与计划的一样。</p><h2 id="地图系统"><a href="#地图系统" class="headerlink" title="地图系统"></a>地图系统</h2><p>每个章节都会有一个大地图，地图系统十分简单，类似手游那样直接点击即可传送。<br>其实本来用 Tilemap 制作了 RPG Maker 那种四方向行走的，但后来发现这样工作量实在太大了，根本做不完。而且四方向行走也不是必要的，最终都是为了走到某个目的地，所以像手游那样直接点击传送未尝不可，还可以节约走路的时间。</p><p>大地图如下所示：<br><img src="https://pic.imgdb.cn/item/61e309ae2ab3f51d91aae53b.jpg" alt="大地图"></p><p>大地图里面会有许多小建筑物，包括：副本地图、城镇等。<br>点击建筑物即可查看详情：</p><p><img src="https://pic.imgdb.cn/item/61e309ae2ab3f51d91aae53f.jpg" alt="城镇详情"></p><p>因为是战国类型的游戏，所以会存在攻城的特殊玩法。<br>如果占领了这个城镇，就可以点击城镇建设，然后可以种田什么的。<br>毕竟背景故事的设定就是：玩家是为了在乱世中谋求自己一片天，当然是要统一天下了。<br>不过最后得看有没有时间做出来了，因为游戏的剧情就很长，一些细节没办法全部实现。</p><p>进入城镇内部之后：</p><p><img src="https://pic.imgdb.cn/item/61e309ae2ab3f51d91aae545.jpg" alt="城镇内部"></p><p>左上角是任务、菜单和设置之类的功能图标。<br>左侧列表是城镇里的 NPC，直接点击即可与之对话。<br>右侧会显示一些场景中的传送点，同样点击一下就可以进入到对应的场景。</p><h2 id="副本地图"><a href="#副本地图" class="headerlink" title="副本地图"></a>副本地图</h2><p>副本地图同样是非常简单的，有点类似 Galgame。<br>进入副本后即开启各种随机事件。</p><p><img src="https://pic.imgdb.cn/item/61e30c5e2ab3f51d91acd3bb.jpg" alt="副本地图"></p><p>中途会出现一些选项让玩家选择。<br>比如在路上发现一棵野花，然后弹出选项【摘了它】、【无视，继续前进】。</p><p><img src="https://pic.imgdb.cn/item/61e30cef2ab3f51d91ad2aba.jpg" alt="副本选项"></p><p>直到走到最底层进入 BOSS 战，探险结束，然后进入结算。<br>因为是单机游戏，所以副本可以无限挑战，刷装备、材料。</p><h2 id="小恶魔商店"><a href="#小恶魔商店" class="headerlink" title="小恶魔商店"></a>小恶魔商店</h2><p>小恶魔商店是在副本中随机遇到的特殊事件，可以在这里购买一些城里没卖的东西。</p><p>小恶魔也是魔族，不过他们的能力并没有纯血魔族那么强大。据说他们通常躲在没人找得到的地方生存，但是迫于生计，他们会在人类不敢去的地方”捡垃圾“，然后卖附近路过的旅行者。有的时候甚至会被粗暴的旅行者强抢，最终没赚到一分钱，是一个十分可怜的种族。</p><p><img src="https://pic.imgdb.cn/item/61e30f3f2ab3f51d91ae7a02.jpg" alt="小恶魔商店"></p><p>小恶魔还会根据玩家的操作作出不同的反应（立绘下方的气泡文字）。<br>比如你不买东西就离开了，那么他们就会表现得有些生气。<br>如果你把他们的货物全部买下，那么他们还会把你当成大佬好感值大幅提高。<br>如果你经常光顾他们，他们也会给你打折扣，但如果你强抢他们的货物，那么他们下次见到你就会跑掉。</p><h2 id="剧情的补充"><a href="#剧情的补充" class="headerlink" title="剧情的补充"></a>剧情的补充</h2><p>这几天开始制作剧情，结果发现工作量比想象的大很多。<br>可能也跟我的制作经验有关，在网上搜了一遍也没找到比较好的实现方法。<br>只能用最傻的方法来实现剧情了，但因为这样工作量大了很多。<br>（跟太吾绘卷一万个 if 差不多……）</p><p>要是多线剧情的话，不知道能不能完成。<br>所以我重新考虑了一下，把那些原计划多结局的剧情改成支线任务。<br>首先保证主线剧情能顺利完成，然后再去扩展一些隐藏的支线任务。</p><p>除了剧情之外还有技能系统，假设每个系都只有 20 个技能，最保守的估计都有 300 个，实际可能上千个。设计技能也是一个不小的工作量，更不用说还有装备系统了。要是能跟鸣人学影分身之术就好了……一个人要做这么多工作，鸭梨山大。</p><p>如果因为一些细节而忽视了最重要的进度，那就得不偿失了，因此现在都是以进度为优先考虑的。</p><h2 id="下次预告"><a href="#下次预告" class="headerlink" title="下次预告"></a>下次预告</h2><p>到今天（1 月 24 日）为止，已经实现了上面 Excel 里面的剑系灵技，目前正在制作被动技能（心术），本月是没办法玩到 Demo 了，所以我就提前先把预告发出来吧，心术的脚本其实都写好了，就差一个个去实现了，这两天应该就能做出来，这样整个游戏的系统就基本搭建好了，从 2 月开始才能真正制作游戏的流程，不出意外再制作一个月就能让大家玩到第一章的 Demo 了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新游预告 </tag>
            
            <tag> 魔王传说：战国 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】切图神器 ShoeBox（鞋盒）下载及 Adobe AIR 安装教程</title>
      <link href="/2022/01/15/unity-tips-029/"/>
      <url>/2022/01/15/unity-tips-029/</url>
      
        <content type="html"><![CDATA[<h2 id="ShoeBox-介绍"><a href="#ShoeBox-介绍" class="headerlink" title="ShoeBox 介绍"></a>ShoeBox 介绍</h2><p>ShoeBox 是一款免费使用的切图工具，可以把图集分割成单张的小图。<br>而与之相对的则是 TexturePackager，它将散图打包成单张的合集。</p><p>利用这两个软件可以实现切图和合图。<br>本文仅介绍 ShoeBox 的安装方法。</p><h2 id="ShoeBox-下载"><a href="#ShoeBox-下载" class="headerlink" title="ShoeBox 下载"></a>ShoeBox 下载</h2><p>官方下载：<a href="http://renderhjs.net/shoebox/">http://renderhjs.net/shoebox/</a><br>下载之后得到的是一个名叫 <code>ShoeBox_3.6.5_public.air</code> 的文件。</p><p>要安装 air 后缀的文件必须先下载 Adobe 的 AIR 运行时（Runtime）。<br>参考文档：<a href="https://help.adobe.com/zh_CN/air/build/WS5b3ccc516d4fbf351e63e3d118666ade46-7fee.html">安装 Adobe AIR</a></p><p>如果看不懂英文，可以直接点击：<a href="https://airsdk.harman.com/runtime">https://airsdk.harman.com/runtime</a><br>上面的页面可以直接下载 AIR 运行时，根据操作系统选择对应的版本下载即可。<br>微软系统选择 <code>Adobe AIR for Windows</code> 即可，另一个是苹果 MAC 系统。 </p><p>下载之后双击安装即可，AIR 运行时安装完成之后进入下一步。</p><h2 id="ShoeBox-安装"><a href="#ShoeBox-安装" class="headerlink" title="ShoeBox 安装"></a>ShoeBox 安装</h2><p>这时已经可以直接打开 <code>ShoeBox_3.6.5_public.air</code> 了。<br><img src="https://pic.imgdb.cn/item/61e281662ab3f51d913dbd68.jpg" alt="安装ShoeBox"></p><p>安装好了之后可以找到这样的图标：</p><p><img src="https://pic.imgdb.cn/item/61e281d42ab3f51d913e2bda.jpg" alt="ShoeBox"></p><p>点击打开 ShoeBox，把需要切割的图片拖到 Extract 按钮上面就可以进行切图了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>今年换了新的 M1 Pro 笔记本，居然不支持这个软件……</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】触发器与剧情管理器</title>
      <link href="/2022/01/08/unity-tips-028/"/>
      <url>/2022/01/08/unity-tips-028/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在以前开发《名为怪物的游戏》中介绍了「触发器」的概念：<a href="https://huotuyouxi.com/2021/08/10/monster-game-12/#%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E5%99%A8">事件触发器</a></p><p>原来的触发器是模仿 RPG Maker 的事件页系统。<br>但是后来我发现这种模式很难适应复杂场景。</p><p>例如，玩家同时完成了任务 A 和 任务 B。<br>接着与发布任务的 NPC 对话，用原来的事件页系统，只能处理其中一个任务，另一个任务会被忽略。<br>即玩家提交了 A 任务，事件就“翻页”了，翻页的过程直接把事件 B 那页给跳过了，导致事件 B 无法触发。</p><p>也就是说，事件页系统每次只能处理一个事件，无法胜任多个事件的情况。<br>为了解决这个问题，我想到用「队列」来实现。</p><p>剧情系统是游戏中最复杂的系统之一，因此本文会用较多篇幅介绍基本技能需求。</p><h2 id="队列系统"><a href="#队列系统" class="headerlink" title="队列系统"></a>队列系统</h2><p>队列是在 WEB 开发或者其他服务器开发中的概念。<br>拿一个简单的例子来举例，比如注册账号要发送短信验证码。<br>发送短信验证码的操作比较费时间（大概要3~5秒）。<br>但为什么我们注册点了“发送短信”按钮页面却立即响应了？</p><p>这是由于系统并不是真正发完短信了，而是先给你一个提示，然后把发送短信的任务延后处理。<br>不然用户点击发送短信，页面卡顿 3~5 秒，会造成不好的体验。</p><p>发送短信的任务会推送到服务端进行处理。<br>这就存在一个问题了，如果存在很多个用户同时点击发送短信呢？<br>服务器一次性就要接受 N 个发送短信任务，如何处理？</p><p>并行处理的话，一次性处理 N 个任务，这个 N 可能是一个极为庞大的数字。<br>如果任务太多，服务器处理不过来就崩掉了。</p><p>所以，任务的处理需要有一个『调度器』。<br>调度器也就是“指挥中心”，意思是说，任务先囤在一个“仓库”，然后又指挥中心分配任务。</p><p>好比京东的物流，快递员并不是直接把货物从商家那边发给买家。<br>而是先把货物送到该城市的仓库中心，然后由该仓库分配快递员送到买家手里。<br>（如果用淘宝比喻的话，就是货物发到菜鸟驿站，然后买家自己上门取件）</p><p>这样做的好处是对“货物”可控。<br>比如一个仓库最多存储 100 件商品，超过 100 件就拒收。<br>如此一来，这间仓库里的货物永远不会超过最大存储量，换句话说就是不会“爆仓”。</p><p>同理，对服务器来说，也不能“爆仓”，爆仓就直接挂掉了。<br>因此我们需要有一个调度中心来分发任务。</p><p>用来存储货物的仓库可以有很多个，每个仓库最多容纳 100 件商品，那么 10 个仓库就能容纳总计 1000 件商品。<br>在服务端也是同样的，一台服务器可以同时处理 100 个发送短信任务，那如果有 100 台服务器就可以同时处理 1000 个短信任务。</p><p>货物发到哪个仓库，有一个调度中心在控制，这就是京东或者淘宝合作的快递的物流网络。<br>而服务端负责调度的地方，叫做『负载均衡』。</p><p>负载均衡就如同字面意思。<br>『负』可以理解为“负重”，就是一个人能承担的任务繁重程度，比如 100ml 水。<br>『载』就是承载的意思，比如能装 100ml 水的空瓶子。</p><p>负载均衡做的事情就是把 100ml 水装到能装 100ml 水的瓶子里。<br>并且负载均衡器是“智能”的，例如有一个 250ml 的空瓶子，第一次装瓶会装 100ml，第二次发现它还没装满，就再装 100ml，第三次发现它还是没满，但只能装 50ml 了，那就再装 50 ml，直到瓶子“饱和”为止，就不再装水了。</p><p>现在负载均衡的概念也已经十分清楚了，接着回到发送短信的问题上面。<br>首先，用户点击发送短信按钮，服务端就接收到一个发送短信的<strong>任务</strong>。<br>这个任务该由谁来完成呢？当然是<strong>空闲状态</strong>的服务器了。<br>调度中心会把这个任务<strong>转发</strong>给空闲的服务器处理。<br>空闲的服务器<strong>接收到任务</strong>之后，就开始真正执行发送短信的操作。</p><blockquote><p>空闲状态指的是“未饱和”，即还没达到最大承载的“重量”。比如老板剥削打工人：你那么早下班干嘛？今天结束了吗？你就走了？给我干到 23：59：59 再下班！换句话说，只要没有被 <strong>「压榨到极致」</strong> 那它就属于“未饱和”状态。</p></blockquote><p>上面涉及到三个概念：</p><ul><li>任务创建者：即用户本身，因为用户点击了发送短信，制造了一个新的任务</li><li>调度中心：负责分发任务给空闲的服务器</li><li>任务消费者：即处理发送短信的服务器</li></ul><p>我们由此可以得到基本概念：</p><p><img src="https://pic.imgdb.cn/item/61d90d2b2ab3f51d91c04832.jpg" alt="任务队列概念"></p><p>客户执行了某个操作，制造了需求，老板就把任务分配给打工人完成需求。<br>现在已经捋清楚了，回到文章开头的问题：</p><p>如果玩家同时完成多个委托，准备向 NPC 提交任务领取奖励，如何实现每次只领取其中一个，并且其他任务不会被略过？<br>任务队列本来是为了处理高并发场景流量分发的问题，但是在这里我们利用调度器每次处理一条任务：</p><p><img src="https://pic.imgdb.cn/item/61d90e192ab3f51d91c0f1ce.jpg" alt="委托任务执行远离"></p><p>未领取奖励的任务依然保存着完成的状态，当其中一个任务被消费之后，玩家再次与 NPC 对话，就从剩下的任务中消费一条，反复这个过程，直到所有任务的奖励都领完为止。</p><p>任务队列还有一个“优先级”的处理机制，可以给不同的任务分配优先级。<br>当一次性完成多个任务之后，如果我们希望优先执行“剧情”任务而不是“支线”任务，那只要让剧情任务的优先级更高即可。</p><p>由于我们是单机游戏，因此队列任务的状态需要保存在“存档”里面。</p><h2 id="剧情的统一管理"><a href="#剧情的统一管理" class="headerlink" title="剧情的统一管理"></a>剧情的统一管理</h2><p>剧情系统极其复杂，如果直接在一个代码脚本实现，那可能超过上万行。<br>为了方便后期维护，我们需要对剧情单独进行管理，然后用上面调度器的思想来执行调度。</p><p>这里可以参考我之前写的：<a href="https://huotuyouxi.com/2021/12/24/unity-tips-016/">Prefab 的妙用</a></p><p>为避免脚本文件出现太多的无关逻辑，需要把无关部分的代码拆分出去。<br>例如玩家进入场景就会自动触发剧情，虽然剧情是在场景触发的，但不能把剧情代码写在场景的脚本。<br>（如果这么做，场景脚本就多出来许多无关场景的代码，显得极其臃肿）</p><p>在 WEB 开发中，Controller（控制器）里面一般也不会写业务代码。<br>而是追加一个 Service（服务）层来处理业务逻辑。<br>这样做的目的就是把无关的代码拆出来，避免项目长期更新导致代码混乱不堪。</p><p>选用 Prefab 再挂载对应的逻辑代码组件就是一个非常不错的方法。</p><p>具体的思路如下。</p><h3 id="剧情的逻辑处理"><a href="#剧情的逻辑处理" class="headerlink" title="剧情的逻辑处理"></a>剧情的逻辑处理</h3><p>首先需要把剧情先用脚本实现，比如控制角色在场景移动、播放动画、播放对话等等。<br>然后让这个脚本继承 MonoBehaviour，写完就可以了，不需要挂在物体上面，因为我们要动态添加脚本。<br>脚本取名为 <code>Story_001</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Story_001 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public void Start() </span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; .. 这里执行剧情事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空预制体"><a href="#空预制体" class="headerlink" title="空预制体"></a>空预制体</h3><p>直接在场景创建一个空的 GameObject，命名为 <code>EmptyPrefab</code>。<br>不需要其他操作，直接拖到 <code>Resources/Prefab</code> 文件夹即可。<br>或者使用 AssetBundle 加载的方式，可以参考：<a href="https://huotuyouxi.com/2021/12/22/unity-tips-013/">资源的加载：Resources 和 AssetBundles</a></p><p>如果没有学过 AssetBundle，可以看上面的文章或者直接用 Resources 就可以了。</p><h3 id="动态添加组件"><a href="#动态添加组件" class="headerlink" title="动态添加组件"></a>动态添加组件</h3><p>我们需要让 <code>Story_001</code> 这个脚本动态挂在 <code>EmptyPrefab</code> 物体上面。<br>可以用下面的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 读取预制体</span><br><span class="line">var prefab &#x3D; Resources.Load(&quot;Prefab&#x2F;EmptyPrefab&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 实例化游戏对象</span><br><span class="line">var obj &#x3D; Instantiate(prefab);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 动态添加脚本</span><br><span class="line">var componentName &#x3D; &quot;Story_001&quot;; &#x2F;&#x2F; 将脚本名字以字符串形式即可</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接着让上面的字符串“转为”组件</span><br><span class="line">var type &#x3D; Type.GetType(componentName);</span><br><span class="line">var component &#x3D; obj.AddComponent(type) as Story_001;</span><br></pre></td></tr></table></figure><p>上面就实现了动态添加组件的功能。<br>我们只要实例化预制体，一旦实例化完成就会执行 <code>Start</code> 里面的剧情事件了。</p><p>我们现在成功的把剧情的逻辑转移到了 <code>Story_001</code> 这个脚本上。<br>这个脚本不论你写多少行代码都没关系，因为是完全独立的，它只处理一段独立的剧情。<br>如果你要进一步的拆分也是可以的，取决于你个人了。</p><p>用 Prefab 制作剧情的好处就是可以非常方便的测试某一段剧情。<br>后期如果对剧情进行改动，也只需要改这个 <code>Story_001</code> 就够了。<br>剧情片段实现<strong>完全的独立</strong>，改动它不会影响到其他任何程序，而其他任何程序的改动也不会影响到它。<br>这是开发的最优解。</p><h2 id="剧情调度器"><a href="#剧情调度器" class="headerlink" title="剧情调度器"></a>剧情调度器</h2><p>上面已经实现了一个脚本控制一段剧情。<br>接下来就要实现任务的调度器了。</p><p>调度器是基于「队列」的数据结构。<br>队列是一种先进先出的模式。</p><p>在 C# 中就已经实现了队列数据结构：<a href="https://www.runoob.com/csharp/csharp-queue.html">https://www.runoob.com/csharp/csharp-queue.html</a><br>任务调度器的作用就是从队列中取出一条任务，然后分发给对应的处理器处理。</p><p>因为我们限制了每次只处理一条任务，因此调度器的作用就被弱化了。<br>（不需要考虑到负载均衡，因为每次就固定处理一条任务）</p><p>这里既可以单独把调度器封装成一个脚本，也可以直接在处理器上面写调度代码。<br>当玩家找到 NPC，并且点击“提交任务”的时候，就执行调度器处理任务。</p><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>任务队列是一个数据结构，上面我们用 Prefab 来实现剧情。<br>我们只需要保存对应剧情的组件名称即可，即：<code>Story_001</code>。<br>知道这个组件的名称就可以实例化对应的 Prefab 处理剧情。</p><p>可以使用 <code>List&lt;string&gt; tasks</code> 来存储组件名称，并且它是保存在存档的数据上面的。</p><h3 id="推送任务"><a href="#推送任务" class="headerlink" title="推送任务"></a>推送任务</h3><p>当玩家完成了一个任务，就推送一个任务到队列里面。<br>比如玩家接受 NPC 委托，要求打死 5 只史莱姆。<br>玩家打完史莱姆，就把完成任务的剧情脚本 <code>Story_001_Completed</code> 存储在 <code>tasks</code> 变量里。</p><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>假如这个 NPC 还有第二个委托，打死 5 只哥布林。<br>玩家同时接受了史莱姆和哥布林任务。<br>为了少跑一趟，玩家打死了史莱姆和哥布林之后才回到 NPC 这边提交任务。</p><p>此时 <code>tasks</code> 里面就有两个脚本 <code>Story_001_Completed</code>（完成史莱姆任务） 和 <code>Story_002_Completed</code>（完成哥布林任务）。<br>这两个要优先执行哪个呢？</p><p>直接存储 <code>List&lt;string&gt;</code> 形式无法判断优先级，因此我们可以再定义一个任务基类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Task </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 对应的脚本名字</span><br><span class="line">    public string component;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 权重值</span><br><span class="line">    public int weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推送任务的时候可以设置 <code>weight</code>（权重值），然后根据权重值进行排序，优先处理数值较高的任务。<br>任务处理完成后再把它从 <code>List&lt;Task&gt;</code> 移除即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比起原来用事件页判断条件然后一页页执行的方式，本次更新的方法则是将已经判断成功的事件，存储在队列中，然后以实例化预制体、动态添加脚本组件的方式来处理，每次从已完成的事件中取出一个，执行完成后就把它从队列中移除，如此一来，无论有多少个事件，总是能一个个进行处理，并且在任务数量较多时，可以用权重值的方式对任务进行优先级的排序。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】精灵 SpriteRender 点击事件</title>
      <link href="/2022/01/07/unity-tips-027/"/>
      <url>/2022/01/07/unity-tips-027/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Unity 的 UI 可以直接添加 Button 来触发点击事件。<br>而精灵并不是 UI，无法用 Button 的方式添加事件。</p><p>让精灵也可以被点击，可以参考本文的方法。</p><h2 id="射线检测"><a href="#射线检测" class="headerlink" title="射线检测"></a>射线检测</h2><p>UI 之所以能够被检测到点击事件，是因为在 Canvas 上面有一个 Graphic Raycaster 组件在进行射线检测，然后发送给 EventSystem 处理。</p><p>但是 SpriteRender 无法用 Canvas 的射线进行检测，我们可以在 Camera（摄像机）上面添加射线检测组件 Physics 2D Raycaster</p><p><img src="https://pic.imgdb.cn/item/61d7f47f2ab3f51d91ff2d8c.jpg" alt="Physics 2D Raycaster"></p><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><p>接着给需要点击的精灵添加 Collider（碰撞体）：</p><p><img src="https://pic.imgdb.cn/item/61d7f4d52ab3f51d91ff74d9.jpg" alt="添加碰撞体组件"></p><p>接着再添加 EventTrigger（事件触发器）组件：</p><p><img src="https://pic.imgdb.cn/item/61d7f5092ab3f51d91ffa741.jpg" alt="EventTrigger"></p><p>EventTrigger 里可以设置不同的鼠标事件：</p><ul><li>Pointer Enter：鼠标滑入</li><li>Pointer Exit：鼠标离开</li><li>Pointer Down：鼠标按下</li><li>Pointer Up：鼠标弹起</li></ul><p>编写脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MapBase : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public string mapName;</span><br><span class="line"></span><br><span class="line">    public void OnPointEnter()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;进入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnPointExit()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;离开&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OnPointDown()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;按下&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别绑定对应的事件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】素材版权声明</title>
      <link href="/2022/01/06/legend-of-the-devil-02/"/>
      <url>/2022/01/06/legend-of-the-devil-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>版权一直都是容易引起争议的地方，尤其是独立游戏制作者本身能力不足的情况下，不得不依靠网络公开的素材，这就很容易引发“版权”的争议，为了避免以后发布游戏时，部分用户比起讨论游戏，反而更喜欢讨论版权，特此写下这篇记录游戏使用素材及相关版权的声明。</p><p><strong>希望大家讨论的重点是游戏的玩法，而不是版权问题。</strong><br><strong>我的游戏也不值得大家浪费时间去求证素材的正版。</strong><br><strong>虽然目标是上架Steam，但我同时也会放在官网给大家免费下载。</strong><br><strong>若是版权有问题，请私下联系我，QQ：874811226。</strong></p><p>《魔王传说》系列第 4 部作品正在开发中，游戏的基本系统已经完成了。<br>目前在制作游戏的 UI、场景等等，而我最担心的就是素材的问题会引起一些玩家的误会。</p><p>每一个独立游戏开发者的梦想就是上 Steam、Epic、WeGame 等等平台，让自己的作品能够见到更多的玩家。<br>但是上平台就等同于「商业作品」，商业作品意味着游戏中使用的素材必须有版权。</p><p>作为一个程序猿，美术和音乐是最大的难题，像 Zun、Toby 那样程序、音乐、美术全能的终究是少数。<br>因而《魔王4》将会使用网络上公开且允许商用的素材，具体见下方说明。</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>《魔王传说》系列第 4 部作品（下文简称“本游戏”）。<br>使用的素材可以参考之前发布的文章：<a href="https://huotuyouxi.com/2021/10/02/shared-01">各大公开版权可免费使用的素材网站</a></p><p>具体以游戏发布为准，如果使用新的素材，本文也会同步更新。</p><h3 id="游戏剧本"><a href="#游戏剧本" class="headerlink" title="游戏剧本"></a>游戏剧本</h3><p>本游戏延续了《魔王2》的背景故事，简单地说就是”抄了我自己“。<br>游戏中出现的人物也会是魔王传说系列中出现过的，当然背景设定可能会有一些变化。</p><p>从最初的作品《黑暗刻印》到《魔王2》，其实都是在不断完善同一个游戏。<br>红毛 63 号男主，开局即送白毛奶妈、黑长直女主角强无敌……</p><p>虽然剧情有不同，但其实是因为没有能力直接做出心中最完美的效果所以不断尝试。<br>这次的《魔王4》经过深思熟虑的计划，应该是最完美的一个版本了。</p><p>如果有《魔王5》，那么一定是完全不同的类型，不会再延续这个未完成的梦了。</p><h3 id="精灵图片"><a href="#精灵图片" class="headerlink" title="精灵图片"></a>精灵图片</h3><p>精灵即游戏中的基本图像。游戏中的基本精灵使用的是 RPG Maker RTP 自带的素材（人物头像、战斗动作图等），除了 RTP 的素材之外，还可能会有一些静态怪物的战斗图、头像等，如果无法从 RTP 中找到满足需求的我会再从其他地方获取到免费可商用的怪物素材。</p><h3 id="UI-素材"><a href="#UI-素材" class="headerlink" title="UI 素材"></a>UI 素材</h3><p>kenney 有商用素材和免费素材，本游戏将使用该站提供的免费素材。<br>来源地址：<a href="https://kenney.nl/assets">https://kenney.nl/assets</a><br>利用约定：<a href="https://kenney.nl/terms-of-service">https://kenney.nl/terms-of-service</a></p><p>商用许可证明：</p><p><img src="https://pic.imgdb.cn/item/61d6f06f2ab3f51d915ce00a.jpg" alt="kenney.nl 商用许可证明"></p><p>原文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Free game assets, no strings attached.</span><br><span class="line">We&#39;ve created thousands of sprites, 3D models and sound effects which you can use in your projects. </span><br><span class="line">The generous public domain license allows any kind of use, even commercial!</span><br></pre></td></tr></table></figure><p>本游戏使用的 UI 素材将使用该站提供的免费可商用素材。</p><h3 id="音乐素材"><a href="#音乐素材" class="headerlink" title="音乐素材"></a>音乐素材</h3><p>音效素材将直接使用 RPG Maker 内置的音效（BGM、BGS、SE）。<br>其他音乐素材请参照：<a href="https://huotuyouxi.com/2021/10/02/shared-01/#%E9%9F%B3%E4%B9%90%E7%B4%A0%E6%9D%90">可商用的音乐素材</a></p><p>以及魔王の魂、Wingless 这两个已经足够了。<br>游戏中所有的 BGM 都会使用上述两个网站公开且可商用的素材。</p><p>你在别的游戏听到似曾相识的 BGM？老铁，没毛病！<br>因为，这两个网站提供的 BGM，乃是在日本及欧美等地极其出名的网站。</p><p>音乐也许在游戏开发中属于壁垒最高的一项，因而有如此优秀且愿意公开允许商用的网站，自然成为众星捧月的焦点。</p><p>魔王の魂：<a href="https://maou.audio/rule/">使用约定</a><br><img src="https://pic.imgdb.cn/item/61d6f2692ab3f51d915e7e15.jpg" alt="魔王の魂商业化许可说明"></p><p>原文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">個人利用も商用も無料で利用可能！報告一切不要！</span><br><span class="line">改造OK！タイトルや歌詞変更もOK！</span><br><span class="line">可能な限り『音楽：魔王魂』みたいに著作表記して下さい。YouTubeは動画内でも概要欄でもOK！</span><br><span class="line">禁止事項は『この曲はワシが作った』といった著作を偽る行為やフレーズを真似する盗作行為。ダメ絶対！</span><br><span class="line">iTunesストア等で購入したデータは素材じゃないよ！聴く専門！</span><br><span class="line">TuneCoreやAmazonMusic・Spotify・LineMusicなどストリーミングサービスへの配信や各種ストアで魔王魂音楽の販売や配信は一切禁止しています。</span><br><span class="line">Boothなどの同人向けストアや個人ストアでカバー音源販売はOK！</span><br><span class="line">過去に公開していた曲も素材利用はOK！ただし曲単品を配布するのはNG!</span><br></pre></td></tr></table></figure><p>Wingless 的作者毫无疑问是一个车万厨，其中东方 Project 相关的 BGM 仅限于同人游戏使用。<br>而我的魔王传说不属于东方同人，因此东方相关的 BGM 就无法使用了。<br>Wingless：<a href="https://wingless-seraph.net/material-riyoukiyaku.html">素材利用约定</a></p><p>原文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">素材は必ずダウンロードしてご利用下さい。（直リンク禁止）</span><br><span class="line"></span><br><span class="line">・全ての素材はフリー(無料)ですが、著作権は全てユーフルカに帰属します。</span><br><span class="line">素材そのものをオリジナル作品としてCDやデータを再配布したり販売するのは禁止です。</span><br><span class="line">（もちろん、個人的に鑑賞するために素材データをCDやipodなどに入れることは全く問題ありません）</span><br><span class="line"></span><br><span class="line">・加工は自由に、使いやすいように施していただいて構いません。</span><br><span class="line">「BGMの一部をカットしてループ」や「声素材にエフェクトをかけて別人のような声にする」などもＯＫです。</span><br><span class="line"></span><br><span class="line">・このサイトの全ての素材はいかなるゲーム開発ツールでも使用可能です（ただしRPGツクール専用の素材を除く。下記参照）。</span><br><span class="line"></span><br><span class="line">・「東方アレンジ」「ツクール専用素材」を除くすべての音楽、効果音、音声素材は、いかなる作品でも使用可能です。</span><br><span class="line">同人作品はもちろん、有償無償問わず、18禁作品や商業用作品、TV番組、YouTube、映画、アニメ、舞台などでもご利用いただけます。</span><br><span class="line"></span><br><span class="line">◆東方アレンジBGMを素材として利用できるのは、原則として東方Projectの二次創作作品だけです◆</span><br><span class="line">東方Projectの公式二次創作ガイドラインの条件を満たしている作品であればどのように使って頂いても構いません。</span><br><span class="line">東方自体が同人文化に寛容なので殆んどの場合で問題ないと思われますが、万一の場合は自己責任でお願いします。</span><br><span class="line">東方楽曲はファイルネームに「Touhou」が含まれています。</span><br><span class="line"></span><br><span class="line">◆ツクールシリーズの改変素材が利用できるのは、ツクールによって作られた作品だけです◆</span><br><span class="line">楽曲一覧に「ツクール専用」と記載されているものは素材はツクール専用です。ウディタなどで作られたゲームでは使用できません。</span><br><span class="line">万が一ご利用にあたって何か問題が発生した場合は自己責任でお願いいたします。</span><br><span class="line">ツクール公式による素材利用規約も合わせて確認してください。これらのファイルネームには「RPGmaker」の文字があります。</span><br><span class="line"></span><br><span class="line">・当サイトの曲をアレンジ、カバーなどで演奏しYouTube等の動画サイトに投稿することは可能です。</span><br><span class="line">その場合は当サイトの著作権表記を必須とします。</span><br><span class="line"></span><br><span class="line">・ただし、当サイトの曲のアレンジやカバーバージョンをTune Coreなどディストリビュートサービスに登録したり</span><br><span class="line">Apple Music、Spotifyなどのストリーミングサービスで 配信することは一切禁止させていただきます。</span><br></pre></td></tr></table></figure><h3 id="人物立绘"><a href="#人物立绘" class="headerlink" title="人物立绘"></a>人物立绘</h3><p>目前还不确定要不要加入立绘。<br>如果要使用立绘的话，会使用下列网站的素材。</p><p>Wataokiba：<a href="https://wataokiba.net/">https://wataokiba.net/</a><br>王国興亡記：<a href="http://makapri.web.fc2.com/top.html">http://makapri.web.fc2.com/top.html</a></p><h3 id="其他来源"><a href="#其他来源" class="headerlink" title="其他来源"></a>其他来源</h3><p>爱给网：<a href="https://www.aigei.com/view/73177.html#resContainer">https://www.aigei.com/view/73177.html#resContainer</a></p><h3 id="争议素材"><a href="#争议素材" class="headerlink" title="争议素材"></a>争议素材</h3><p>除了上述声明的素材之外，最有可能造成侵权的素材是：背景图片。<br>游戏中总得有让玩家看的图片吧？虽然不是 Galgame，但总归是需要 CG 的。<br>不仅是 CG，游戏的战斗场景也要有背景，这些图片我也无法自己绘制。<br>目前还未找到比较合适的可商用素材，而是选用从「爱给网」购买的素材。</p><p>爱给网里面也有不少侵权的素材，所以本游戏使用的背景图片可能会产生版权问题。<br>目前这些素材也只是临时使用，在找到可以商用的素材之后就会进行替换。</p><p>如果发现背景图存在侵权问题，请联系我说明情况。</p><h2 id="Unity-商店"><a href="#Unity-商店" class="headerlink" title="Unity 商店"></a>Unity 商店</h2><p>Unity 资源商店也有许多免费可商用素材。<br>如技能图标：<a href="https://assetstore.unity.com/packages/2d/gui/icons/free-rpg-fantasy-spell-icons-200511">https://assetstore.unity.com/packages/2d/gui/icons/free-rpg-fantasy-spell-icons-200511</a></p><p>UI 素材：<a href="https://assetstore.unity.com/packages/tools/gui/clean-settings-ui-65588">Clean Settings UI</a>、<a href="https://assetstore.unity.com/packages/2d/gui/dark-theme-ui-199010">Dark Theme UI</a>。</p><p>此类素材就不在此处逐一声明了（因为 Unity 官方商店能够直接导入到游戏项目，不会存在版权问题）。</p><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>之所以写下这篇文章，是因为我发现一些奇怪的现象。<br>尤其是独立游戏作品的评论区，版权相关的讨论成了重灾区。</p><p><strong>游戏的素材版权问题固然重要，但一个独立游戏制作者之所以制作游戏，并不是想让一个玩家来讨论游戏的版权到底合不合法，而是希望玩家能够讨论游戏好不好玩，有哪些需要改进的地方。如果你发现我的游戏中有存在盗用素材的情况，建议你私下联系我反馈情况，如果确实盗用了其他人的原创素材，那么我会在第一时间移除侵权素材并发表道歉声明。</strong></p><p>建议大家讨论游戏内容，版权问题并不是重点。<br>尤其是不分场合，发布不合适言论的。<br>大家都在讨论游戏，你却直接在群里发了一句：“这 BGM 我咋在别的游戏听过？”<br>这样做，只会让人觉得<strong>反感</strong>，而不是觉得你<strong>机灵</strong>。</p><p><strong>正确的做法是：添加游戏开发者的联系方式，然后私下将存在疑点的内容告诉开发者。将你听过相同 BGM 的游戏以及具体的 BGM 提交给开发者确认，而不是张嘴就来“我觉得 xxx”、“我以为 xxx”，任何以个人主观的猜测、无任何证据、仅凭个人臆断、乱扣帽子的行为都是缺乏素质的表现，尤其是在抓到别人的把柄就一副小人得志的样子，谁还没一两个小把柄呢？</strong></p><p>最后，还需要遵循”谁提出，谁举证“的规矩。<br>如果你提出了作者使用了侵权素材，那么你应该能拿出相关侵权的材料证明你说的话。<br>而不是张嘴就来：”我曾经玩了一个游戏，也用了这个 BGM。“<br>然后作者一问哪个游戏，你又来了一句：”删了，忘记了“……要我们自己去找自己盗版的证据？</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 魔王传说：战国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课外读物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】安装 Tilemap 必备插件 TileEditor</title>
      <link href="/2022/01/04/unity-tips-026/"/>
      <url>/2022/01/04/unity-tips-026/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天在开发新游戏的场景系统。<br>因为没有能力原创素材，所以我选用的是 RPG Maker 系列的 Tilemap 图块制作场景。</p><p>关于 Tilemap 的教程可以参考：<a href="https://www.bilibili.com/video/BV1J4411b7Mg">https://www.bilibili.com/video/BV1J4411b7Mg</a><br>需要注意的是视频最后部分介绍的功能图块，如 Rule Tile，Animated Tile 等。</p><p>默认情况下，图块就只是一张图片。<br>如果直接绘制的话，就会像下面这样：<br><img src="https://pic.imgdb.cn/item/61d3b5eb2ab3f51d91fd5cb1.jpg" alt="不连续的图块"></p><p>但我们希望的结果是连续的图块：<br><img src="https://pic.imgdb.cn/item/61d3b75c2ab3f51d91ffdb06.gif" alt="连续的图块"></p><p>Unity 默认是不提供功能图块的功能，需要安装扩展插件 2d-extras。</p><h2 id="2d-extras"><a href="#2d-extras" class="headerlink" title="2d-extras"></a>2d-extras</h2><p>先来说下安装这个插件的坑……<br>昨天晚上弄到一两点都没搞定。</p><p>网上的教程一般会给你这两个地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Unity-Technologies&#x2F;2d-extras</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Unity-Technologies&#x2F;2d-techdemos</span><br></pre></td></tr></table></figure><p>第一个是 2d-extras 包文件。<br>如果你把它下载并且拷贝到项目目录会直接报错（可能是 Unity 版本的问题）。</p><p>然后参照文档的第二个方法：</p><blockquote><p>The following line needs to be added to your Packages/manifest.json file in your Unity Project under the dependencies section:</p></blockquote><p>在项目的 <code>Packages/manifest.json</code> 添加一行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;com.unity.2d.tilemap.extras&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;Unity-Technologies&#x2F;2d-extras.git#master&quot;</span><br></pre></td></tr></table></figure><p>你需要从文件管理找到这个配置文件：</p><p><img src="https://pic.imgdb.cn/item/61d3b9b22ab3f51d910360c5.png" alt="manifest.json"></p><p>然后打开配置，把上面的配置信息加到里面。<br>然后打开 Unity 就会自动识别安装包文件。</p><p>这里也有一个坑就是 GitHub 是国外的网站，所以受到「墙」的监管。<br>如果报 443 错误，多试几次或者尝试开 VPN 就可以，直到安装成功。</p><p>安装了 2d-extras 之后在 Tilemap 画板会多出几个笔刷。<br>但是我尝试右键看了下，没发现有 Tiles 的选项。</p><blockquote><p>后来我才发现创建功能 Tile 是需要在文件夹里面右键的，不知道当时有没有这个选项。</p></blockquote><h2 id="TileEditor"><a href="#TileEditor" class="headerlink" title="TileEditor"></a>TileEditor</h2><p>上面的方法应该是适用于旧版的 Unity，但我用的是最新的 2021.2.7 版本。<br>网上搜得到的教程几乎都是过时的，已经不能用在最新版本上面了。<br>直到我看无意中到官方文档上面的一段话：</p><p><img src="https://pic.imgdb.cn/item/61d3bac22ab3f51d91040e19.png" alt="Tilemap官方文档"></p><p>原来从  2020.1 版本开始就已经不再随 Unity 安装了。<br>所以一些旧的教程按照我上面的步骤可以创建功能 Tile。<br>新版本的 TileEditor 需要手动添加包。</p><p>打开 Unity 打开包管理工具：<code>Window - Package Manager</code>，选择 <code>Unity Registry</code>：</p><p><img src="https://pic.imgdb.cn/item/61d3bb692ab3f51d91048494.png" alt="Window - Package Manager"></p><p>然后选择 2D，将旁边的 7 Packages 展开，选择下方的 2D Tilemap Editor，右下角有一个 install：</p><p><img src="https://pic.imgdb.cn/item/61d3bb9f2ab3f51d9104aa28.png" alt="TileEditor"></p><p>安装好之后，install 按钮会变成 remove（移除），如果不想用这个包可以点击进行卸载。<br>这样我们就安装好 TilemapEditor 了。<br>再次返回 Unity 场景编辑器，在文件夹中右键就可以看到功能 Tile 了：</p><p><img src="https://pic.imgdb.cn/item/61d3bcce2ab3f51d910577e9.png" alt="Tiles"></p><p>注意：是要在「文件夹中」右键，而不是场景中！<br>很可能我第一次安装 2d-extras 就是弄错了。</p><p>创建一个功能图块，配置完成之后是这样的。<br><img src="https://pic.imgdb.cn/item/61d3bea02ab3f51d910746e7.png" alt="功能图块"></p><p>这个图块实际上是一个预制体文件。<br><img src="https://pic.imgdb.cn/item/61d3bec72ab3f51d91075e80.png" alt="预制体文件"></p><p>将创建好的功能图块预制体拖到画板中即可：</p><p><img src="https://pic.imgdb.cn/item/61d3bf752ab3f51d9108a67a.gif" alt="拖到画板"></p><h2 id="动态图块"><a href="#动态图块" class="headerlink" title="动态图块"></a>动态图块</h2><p>RPG Maker 的默认图块有一些地形是动态的。<br>例如池水和岩浆：<br><img src="https://pic.imgdb.cn/item/61d3c1392ab3f51d910b8c34.png" alt="RPGMaker 动态图块"></p><p>右键创建一个 Animated Tile 图块，设置三张岩浆的图块为动画图块：<br><img src="https://pic.imgdb.cn/item/61d3c1ae2ab3f51d910c4040.png" alt="岩浆图块"></p><p>测试效果：<br><img src="https://pic.imgdb.cn/item/61d3c1f42ab3f51d910cf7df.gif" alt="动态岩浆"></p><h2 id="连续图块"><a href="#连续图块" class="headerlink" title="连续图块"></a>连续图块</h2><p>在 RPG Maker 里还有一些连续的图块，例如地毯：</p><p><img src="https://pic.imgdb.cn/item/61d3e7772ab3f51d91324dcc.jpg" alt="地毯"></p><p>以红色地毯为例，如果使用这种图块，在 RPG Maker 里面会整块都连在一起。<br>这种效果就是 Rule Tile 实现的。</p><p><img src="https://pic.imgdb.cn/item/61d3b75c2ab3f51d91ffdb06.gif" alt="连续的图块"></p><p>这种图块需要先设定好「规则」，当满足规则的时候，图块就会切换成另外一种形态。<br>在 Unity 需要根据九宫格来设定图块的规则：</p><p><img src="https://pic.imgdb.cn/item/61d3e8612ab3f51d913306b9.jpg" alt="九宫格"></p><p>Tilemap 本身即是格子的结构。<br>中间的空位代表自身，箭头代表上下左右，以及左上、右上、左下、右下，一共 8 个方向。</p><p>一张地毯的 Rule Tile 设置如下：</p><p><img src="https://pic.imgdb.cn/item/61d3e8ce2ab3f51d91335f74.jpg" alt="地毯的 Rule Tile"></p><p>default 是显示在画板中的图像，也是默认的图块。<br>如果有空缺的图块，就会用 default 来填充。</p><p>以中间部分的图块和左上角的图块示例：</p><p><img src="https://pic.imgdb.cn/item/61d3e9442ab3f51d9133b34e.jpg" alt="图块示例"></p><p>中间的图块，上下左右必然有相邻的图块。<br>也就是说，满足上下左右都有图块的话，当前图块就是这张。</p><p><img src="https://pic.imgdb.cn/item/61d3e9962ab3f51d9133f52f.jpg" alt="地毯中间的图块"></p><p>然后是左上角的图块，既然都是左上角了，那肯定是「最上面」、「最左边」。<br>那么，它上面就不会再有其他图块了，左边也不会有图块，所以我们把这两个方向 x 掉。</p><p><img src="https://pic.imgdb.cn/item/61d3e9f02ab3f51d91344196.jpg" alt="地毯左上角的图块"></p><p>同理设置好剩下的几个图块。<br>最后的效果如下：</p><p><img src="https://pic.imgdb.cn/item/61d3ea382ab3f51d913474c8.jpg" alt="完整的地毯"></p><p>为什么这里不能连在一起呢？<br>因为是「九宫格」，而 RPG Maker 提供的素材只有「五宫格」：</p><p><img src="https://pic.imgdb.cn/item/61d3eb512ab3f51d913545b3.jpg" alt="五宫格"></p><p>将它们拼接起来：</p><p><img src="https://pic.imgdb.cn/item/61d3eb622ab3f51d91354edb.jpg" alt="拼接效果"></p><p>可以发现，它还缺少「上下」、「左右」两个部分的图块。<br>缺失的图块被设置为 default 的图块填充了：</p><p><img src="https://pic.imgdb.cn/item/61d3ebad2ab3f51d9135879d.jpg" alt="缺失的图块"></p><p>所以，很遗憾 RPG Maker 的素材不能生成连续的图块。<br>（但是 RPG Maker 内部是如何实现的？？？）</p><p>一张完整的连续图片必须是九宫格的形式。<br>下面这张水管的图片可以用来练手：</p><p><img src="https://pic.imgdb.cn/item/61d3c22e2ab3f51d910d834d.png" alt="水管"></p><p>最终效果：<br><img src="https://pic.imgdb.cn/item/61d3c2812ab3f51d910e14d2.gif" alt="水管最终效果"></p><p>可以发现水管居然十分神奇的连接在一起了！</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>文章的疑问一直困扰着我，如果不解决 RPG Maker 图块的问题，游戏的场景就没法绘制。<br>经过一番搜寻，终于知道 RPG Maker 为什么只有 5 个 图块还能拼接起来了。<br>参考链接：<a href="https://blog.csdn.net/u013412391/article/details/105021909">https://blog.csdn.net/u013412391/article/details/105021909</a></p><p>实际上是需要代码来计算的。<br>图块的一部分切掉，然后用另一个图块的部分替换，以此实现拼接效果。</p><p>比起这样，还不如直接把原图切分成九宫格……</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】Tooltip（提示窗口）和解决鼠标滑入闪烁问题</title>
      <link href="/2022/01/01/unity-tips-025/"/>
      <url>/2022/01/01/unity-tips-025/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Tooltip（提示 UI）是当游戏的某个功能需要详细介绍时使用的。<br>当鼠标滑入指定区域后，就会显示出一个窗口，用来介绍此功能。</p><p>以 B 站为例，把鼠标滑入人名上面，过一会就会弹出人物资料卡：</p><p><img src="https://pic.imgdb.cn/item/61cfccd02ab3f51d915a5f54.jpg" alt="b 站人物资料卡"></p><h2 id="Image-和-Panel-的区别"><a href="#Image-和-Panel-的区别" class="headerlink" title="Image 和 Panel 的区别"></a>Image 和 Panel 的区别</h2><p>制作 UI 不可避免的会发现存在 Image 和 Panel 两个组件。<br>其实这两个组件是一样的，只是锚点不同。</p><p><img src="https://pic.imgdb.cn/item/61cfce542ab3f51d915b5456.jpg" alt="Image 和 Panel 的区别"></p><p>另外，默认的 Panel 透明度是 100，把它调成 255，并且修改锚点，那它就变成 Image 了。<br>两者其实是一模一样的东西，只不过 Unity 把上面的操作封装起来，方便直接使用罢了。</p><p>例如一些固定位置的 UI，不会变化位置，就可以直接使用 Panel 快捷创建出来。<br>而一些动态的 UI，则推荐使用 Image 来实现。</p><p>Tooltip 包含一个背景窗口，并且它会跟随鼠标指针而改变位置，因此选用 Image。</p><h2 id="实现-Tooltip-自适应宽高"><a href="#实现-Tooltip-自适应宽高" class="headerlink" title="实现 Tooltip(自适应宽高)"></a>实现 Tooltip(自适应宽高)</h2><p>创建一个 Image 作为窗口背景。<br>然后在添加 Text 用来显示文本。</p><p>为了让窗口可以自适应内容而改变宽高需要设置一些特殊的组件：<br><img src="https://pic.imgdb.cn/item/61cfcf302ab3f51d915be68c.jpg" alt="装备详情窗口"></p><p><code>Vertical Layout Group</code>：以竖直排列的方式显示元素。<br>如下图所示，设置好边距，并且将宽度和高度设置为 <code>Control Child Size</code>（以子类大小为准）。<br><img src="https://pic.imgdb.cn/item/61cfcfd32ab3f51d915c6096.jpg" alt="Vertical Layout Group"></p><p>接着还需要设置 <code>Content Size Fitter</code> 约束窗口内容大小。<br><img src="https://pic.imgdb.cn/item/61cfd1142ab3f51d915d5227.jpg" alt="Content Size Fitter"><br>将宽度和高度都设置为：<code>Preferred Size</code>（首选项）。</p><p>最后再设置 <code>Layout Element</code> 用来约束窗口内元素的最大宽度和最小宽度：<br><img src="https://pic.imgdb.cn/item/61cfd1712ab3f51d915d97df.jpg" alt="Layout Element"></p><p>演示效果：<br><img src="https://pic.imgdb.cn/item/61cfd24d2ab3f51d915e6309.gif" alt="自适应的窗口"></p><h2 id="滑入事件"><a href="#滑入事件" class="headerlink" title="滑入事件"></a>滑入事件</h2><p>鼠标滑入事件只需要继承 <code>IPointerEnterHandler, IPointerExitHandler</code> 即可实现。<br>然后将继承的类挂在需要显示的物体上，鼠标滑入的时候生成详情窗口即可。</p><p>接着修改窗口类的 Update 方法，使其跟随鼠标位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private RectTransform rectTransform;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    rectTransform &#x3D; GetComponent&lt;RectTransform&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前面一篇文章《限制UI范围》有介绍此方法</span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    rectTransform.anchoredPosition &#x3D; ObjectBuilder.MousePositionToUIPosition(Input.mousePosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 工具类转换鼠标位置为 UI 位置</span><br><span class="line">public static Vector2 MousePositionToUIPosition(Vector2 position)</span><br><span class="line">&#123;</span><br><span class="line">    float xDistance &#x3D; Screen.width &#x2F; 2;</span><br><span class="line">    float yDistance &#x3D; Screen.height &#x2F; 2;</span><br><span class="line"></span><br><span class="line">    return position - new Vector2(xDistance, yDistance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会出现一个问题，显示的窗口会闪烁。<br>这是因为鼠标滑入物体生成了详情窗口，详情窗口遮挡了鼠标，导致触发 <code>IPointerExitHandler</code> 将窗口隐藏，接着窗口消失了，鼠标又变得没有被遮挡，因此又触发了 <code>IPointerEnterHandler</code>，如此反复就会变成闪烁的样子了。</p><h2 id="解决闪烁问题"><a href="#解决闪烁问题" class="headerlink" title="解决闪烁问题"></a>解决闪烁问题</h2><p>之所以会这样是因为 Canvas 组件有射线检测，只要把射线检测的组件移除就可以。<br>但是我们不能直接在 UI 的 Canvas 上面移除，否则别的 UI 就没办法触发点击事件。<br>我们可以重新创建一个 Tooltip 专属的 Canvas，并且它的层级比普通的 UI 要高，让它永远显示在 UI 上层不会被遮挡。</p><p><img src="https://pic.imgdb.cn/item/61cfe0b72ab3f51d91685bb5.jpg" alt="Tooltip Canvas"></p><p>把 Tooltip Canvas 上面的 Graphic Raycaster 组件删掉就可以。<br>然后让装备详情窗口挂在 Tooltip Canvas 底下，这样闪烁问题就解决了。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>现在窗口的中心是在鼠标指针的位置，这样不美观。<br>我们可以通过修改锚点的方式让窗口显示在鼠标的左侧。<br>将 Pivot 的 x 改成 1 即可。</p><p><img src="https://pic.imgdb.cn/item/61cfe5b02ab3f51d916c0209.jpg" alt="让窗口显示在鼠标左侧"></p><h2 id="推荐视频"><a href="#推荐视频" class="headerlink" title="推荐视频"></a>推荐视频</h2><p>视频教程：<a href="https://www.bilibili.com/video/BV1Kb4y1m7ed?spm_id_from=333.1007.top_right_bar_window_history.content.click">Tooltip</a></p><p>很多 Unity 的教程在 YouTube 上面找得到，不过都是英文的。<br>所以，学好英语还是很有必要的，否则没有字幕就无法学习了。</p><h2 id="追加补充"><a href="#追加补充" class="headerlink" title="追加补充"></a>追加补充</h2><blockquote><p>本内容为 2022-01-27 补充。</p></blockquote><p>其实后面我发现了可以不需要转换 UI 的坐标。<br>我们知道 UI 是需要摄像机来渲染的，因此摄像机的喧嚷方式决定了 UI 的坐标类型。</p><p><img src="https://pic.imgdb.cn/item/61f2755c2ab3f51d91c3a00b.jpg" alt="摄像机渲染方式"></p><p>将摄像机的渲染方式修改为：<code>Screen Space - Overlay</code>（屏幕空间覆盖）。<br>这样上面修改 UI 坐标的代码就可以修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 前面一篇文章《限制UI范围》有介绍此方法</span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 这是原来的，摄像机模式为：Screen Space - Camera（以当前摄像机为准）</span><br><span class="line">    &#x2F;&#x2F; rectTransform.anchoredPosition &#x3D; ObjectBuilder.MousePositionToUIPosition(Input.mousePosition);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 现在修改了渲染方式为 Screen Space - Overlay 就可以直接这样：</span><br><span class="line">    var position &#x3D; Input.mousePosition;</span><br><span class="line">    transform.position &#x3D; position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 UI 的对象在不同的摄像机渲染模式下，坐标的计算方法也不一样。<br>同时节点的缩放也会不一样，很容易踩坑。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】LitJSON 与浮点数精度问题</title>
      <link href="/2021/12/31/unity-tips-024/"/>
      <url>/2021/12/31/unity-tips-024/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏中许多数据都要保存下来，一般都是保存成 json 格式的文件。<br>而 Unity 自身并没有提供什么强大的 JSON 插件，需要我们自己去下载。</p><p>C# 的 JSON 插件一般都是选择：Newtonsoft.Json 和 LitJSON。<br>我选择的是 LitJSON。</p><h2 id="float-问题"><a href="#float-问题" class="headerlink" title="float 问题"></a>float 问题</h2><p>LitJSON 无法保存 float 类型的浮点数。<br>因此需要改成 double 或者 decimal。</p><p>最开始的时候我以为用 double 就行了。<br>但是今天在设计装备随机属性系统上，发现有精度的坑。</p><h2 id="精度问题"><a href="#精度问题" class="headerlink" title="精度问题"></a>精度问题</h2><p>假如有个 float 的数据：1.3 要保存成 JSON 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class FormatterKeyValue</span><br><span class="line">&#123;</span><br><span class="line">    public string key;</span><br><span class="line">    public double value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个用来格式化数据的类，然后用 LitJSON 把类转化成 json 字符串。<br>结果却发现输出的是诸如：1.2999……的结果。</p><p>也就是说因为类型转换导致精度出现了问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这是因为 double 的精度还不够，可以改用精度更高的 decimal 类型来保存数据。<br>虽然 decimal 也有精度问题，但保存两位小数的浮点数已经不会再出现精度问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】解决 Dropdown 下拉菜单展开后子菜单被遮挡问题</title>
      <link href="/2021/12/30/unity-tips-023/"/>
      <url>/2021/12/30/unity-tips-023/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Dropdown 制作下拉菜单 UI 时，展开的子菜单会被其他 UI 遮挡。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>再创建一个 Canvas，并且点选 override sorting。<br>将 Sort Order 设置为比当前画布更大的值。<br>最后将下拉菜单组件挂在这个新的 Canvas 下面。</p><p><img src="https://pic.imgdb.cn/item/61cd61012ab3f51d91a50ce5.jpg" alt="Canvas"></p><p><img src="https://pic.imgdb.cn/item/61cd61852ab3f51d91a5754d.jpg" alt="不再遮挡子菜单了"></p><p>新的问题又来了，如何让子菜单向下展示而不是向上？<br>好像不能人为控制，只能让系统自己判断。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】UI 上面奇怪的线是什么？</title>
      <link href="/2021/12/30/unity-tips-022/"/>
      <url>/2021/12/30/unity-tips-022/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 Unity 的 Button 组件、Dropdown 组件等等，场景上会出现奇怪的“线”。<br>这些线到底是什么呢？</p><p><img src="https://pic.imgdb.cn/item/61cd5eef2ab3f51d91a2699b.jpg" alt="奇怪"></p><h2 id="线是什么？"><a href="#线是什么？" class="headerlink" title="线是什么？"></a>线是什么？</h2><p>今天无意中看到 UI 组件里面有一个特殊的字段：<code>navigation</code>（导航）。</p><p><img src="https://pic.imgdb.cn/item/61cd5f332ab3f51d91a2cc9f.jpg" alt="navigation"></p><p>这些可操作的 UI 组件上都具有这种导航字段。<br>正如字面意思，这其实是一个导航系统。</p><p>例如在点击选中一个 Button，当前的 Button 就会被激活，此时如果你按下键盘的上下左右键，就会移动到下一个 Button 上面。</p><p><img src="https://pic.imgdb.cn/item/61cd5fc92ab3f51d91a3994f.gif" alt="导航UI"></p><p>该导航有 5 种：</p><ul><li>None（关闭）：关闭导航。</li><li>Automatic（自动导航）：自动识别最近的一个控件并导航到下一个控件。</li><li>Horizontal（水平导航）：水平方向导航到下一个控件。</li><li>Vertical（垂直导航）：垂直方向导航到下一个控件。</li><li>Explicit（指定导航）：特别指定在按下特定方向键时从此按钮导航到哪一个控件。</li></ul><h2 id="隐藏线"><a href="#隐藏线" class="headerlink" title="隐藏线"></a>隐藏线</h2><p>如果不希望看到这些线，可以点击下方的 <code>visualize</code> 按钮，线就会消失了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【魔王传说】妖狐列传</title>
      <link href="/2021/12/29/legend-of-the-devil-01/"/>
      <url>/2021/12/29/legend-of-the-devil-01/</url>
      
        <content type="html"><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>狐族是大陆上非常神秘的一族。<br>虽然狐狸很常见，但并不是所有的狐狸都是狐族的人。<br>只有居住在「涂山」的狐狸们，才是真正的狐族。</p><p>从人们发现的最古老的卷宗《山河见闻录》就有记录涂山的存在。</p><blockquote><p>《山河见闻录》是古人记载山川草木、珍禽异兽的古籍，作者不详。尽管该书上记载的山河湖海有一些能够在当今找到对应的地点，但经过数百年的演变，许多山河地貌早已不再是以前的样子了。此书也记载了许多民间传说，有人认定记载的内容荒诞不经，不可轻信；但也有人认为此书可以用来考证奇珍异兽、山川形势，具有一定的价值。原籍似乎还有图画，其文字可能就是依图画内容而叙述出来，可惜古图早已遗失。</p></blockquote><h2 id="涂山异闻"><a href="#涂山异闻" class="headerlink" title="涂山异闻"></a>涂山异闻</h2><p>据《山河见闻录·涂山异闻》记载。</p><p>最早发现涂山的，据说是一名叫做猗的柴夫。<br>近处的树木已被伐光，猗便前往大山深处寻找树木。<br>走着走着，已经忘记走了多久的路了。</p><p>忽然来到一座巍峨的山前，此山高耸入云，山顶云雾环绕。<br>猗甚是好奇，便寻找一条小道向山顶走去。<br>小道两旁，都是从未见过的野花、野草。</p><p>继续往前走，山路越来越窄，只能侧身沿着岩壁缓缓前行。<br>山很高，路很窄，一不小心便会摔的粉身碎骨。<br>不知在岩壁上走了多久，已经来到了半山腰上。<br>前面突然开阔起来，眼前竟是一个岩洞。</p><p>岩洞内潮湿且黑暗，洞内有一股极强的寒气。<br>猗打着火把进入洞穴，洞内仅能够容纳两人并肩行走。<br>地上和头上都有凸起的岩石，猗只得将砍好的柴火放在地上，然后小心翼翼的前进。<br>步行数百步，忽然见到前方有光。<br>又走了数十步，豁然开朗，已然来到山洞出口。<br>眼前竟是一片新天地。</p><p>梯田依山而建，田中的水映照着天空的云，宛如层层银带。<br>田中的小道四通八达，沿着小道前行，前方便有一处村庄。<br>一条小河蜿蜒绕过村庄，河上有一座月芽形的小木桥，走过小木桥便来到了村庄。<br>村里的人见到猗，纷纷吓得躲回了屋里。</p><p>猗欲找人一问究竟，只见前方有一人背对自己坐在地上。<br>猗便轻拍此人后背，此人回头，猗吓得大惊，瘫坐在地。<br>而那人见到猗，也惊慌逃去。<br>此人竟长了一副狐狸的嘴脸，身上亦是野兽的毛发。</p><p>猗瘫在路上许久，惊魂未定。<br>那些躲在屋里的村民们，也因为好奇纷纷探出头来。<br>这个村里，村民竟全是狐狸变的！</p><p>猗心中一颤，心想着那些乃是吃人的狐妖，便急忙逃窜。<br>不知逃了多久，来到一座城里。<br>城门上挂着一块大匾，上面写着「涂山城」。<br>猗提心吊胆的走入城中，生怕再遇上狐妖。<br>看到城中的人们没有长着狐狸的脸，方才安下心来。</p><p>猗欲寻人问归去的路，见到前方一位小娘子便上前问路。<br>小娘子见到外人，虽然感到惊讶，但也友善的告知了猗回去的方向。<br>猗赶忙道谢，待小娘子离去，猗大惊……那女子竟长着狐狸尾巴！<br>定下神来，仔细一看，城里的人虽然都长着人脸，可每一个都拖着狐狸尾巴。</p><p>猗惊魂未定之际，一个狐人男子朝着自己走来。<br>狐人男子见到人类好奇，便上来一探究竟。<br>猗见对方并非吃人的恶相，便询问此乃何处。<br>狐人男子告诉猗，这里乃是涂山，狐族之地。<br>涂山与世隔绝，常年云雾缭绕，一般人无法进入。<br>狐人男子名为狐潇，潇对误入涂山的猗十分感兴趣。<br>猗见狐潇并无恶意便畅所欲言，两人甚是投机。</p><p>眼见天就快黑了，狐人男子告诉猗，外人进入涂山可接受涂山的款待，于是便带着猗拜见狐族族长。<br>来到城里最大的宅邸，宅邸里有数十位仆从，都是女狐所变，皆为闭月羞花之容。<br>猗来到府中，潇便离去。<br>族长是一个年迈的老人，看起来与普通的老人无异，差别就在于多长了狐狸的尾巴。<br>见到猗，族长十分热情的邀请猗住在府内，并准备好了丰盛的大餐。<br>狐族所食与人类并无二异，山珍海味，飞禽走兽，甚是佳肴。<br>饱食之后，族长在府内安排了一间房间，邀请猗住下。<br>猗见对方如此好客，便没有推辞。</p><p>在仆从的带领下，猗在府中住下。<br>房间的布置十分清雅，一张床，一张桌子，墙壁上有一副古人的字画。<br>窗外可以看到天上的月亮，庭中有一处小池，池水映照着天上的月。<br>池边有一颗老树，枝垂池水中，树下有一名少女，衣着华丽，并非府中仆人模样。<br>少女似乎有着心事，对着池水叹息。</p><p>猗上前询问缘由。<br>少女告知猗自己虽然出生在族长家，但十分向往人类的世界。<br>可无奈族规森严，族人不得离开涂山，方才对着池水叹息。<br>猗便把自己平时生活的所见所闻告知少女，虽是日常琐事，少女却听得十分入迷。<br>云朵被风吹开，月光洒在少女脸庞。<br>少女的双眼晶莹剔透剔透，似乎在渴望着猗为她讲更多的故事。</p><p>适才因为夜黑，猗没看清少女容貌。<br>如今才发觉此女只有十三四岁少女样貌，清秀可爱。<br>待其成年之后，必非人间凡物。</p><p>猗又为她讲述了许多外界的奇闻异事，少女听得津津有味。<br>夜深了，猗欲回房睡觉，可少女不肯他离去。<br>猗只得答应她明日在此处继续，少女才肯罢休。</p><p>当夜，猗做了一个奇怪的梦。<br>梦中他的四周美女如云，将他团团围住。<br>他想要抱起一个，突然女人的脸全部变成狐狸在嬉笑，猗吓得惊醒。</p><p>天亮了，族长派人邀请猗到府上吃宴。<br>族长盛情款待，宴会结束后还让人送来了金银财宝，珠帛玉石。<br>猗大喜，没有拒绝全部收下了。<br>除了钱财之外，更有十数位年轻貌美的狐族仆从侍候起居。</p><p>猗本是村中一位再普通不过的砍柴伙夫，如今误入涂山却享受了天人之乐。<br>生活起居全部由仆人服侍，衣食住行全部由狐族提供。<br>涂山的每一只狐狸都将自己视为上宾，毕恭毕敬。<br>人生如此，夫复何求！</p><p>每到夜晚，那名少女都会准时在柳树下等着猗来为她讲故事。<br>如同少女那般，误入涂山的人类也不能再离开涂山。<br>除了不能离开涂山之外，这里的一切都让猗沉浸其中。<br>这是在外面当砍柴伙夫永远享受不到的乐趣。</p><p>数月之后，尽情纵欲的生活也开始变得乏味。<br>他习惯了上山砍柴的生活，风吹雨打，一年四季都是如此。<br>如今一整天无所事事，使得他有些不适。</p><p>世上先有了丑，才有了美。<br>可这女狐一个个都长得倾国倾城，如今却也看厌了。</p><p>狐族虽对自己百般伺候，但能谈心的只有夜晚与少女。<br>生活无忧，钱财用不尽，虽是如此，猗却开始怀念以前砍柴的日子。<br>他开始想念自己家中的妻儿，他也不知道为什么现在会想起。<br>可能是到了冬天，看着飘落的白雪吧。</p><p>家中茅屋一到冬天，风能吹过破洞，丝毫挡不住寒气，而自己却抱着老婆和小孩互相取暖，相互依偎着度过寒冬。<br>如今锦衣披在身上，仆从在旁边温着酒，早已不再需要受冻挨饿。<br>此时此刻，猗的心中却挂念着破屋中的妻儿——没有了自己，他们如何度过寒冬？</p><p>他开始想要逃离，渴望见到家中妻儿。<br>于是当夜，他便与少女商量着如何逃出涂山。</p><p>经过数日的计划后，猗邀请来府中所有狐族大摆宴席。<br>狐族乃是好酒一族，猗准备了数十缸烈酒，狐族族长大喜，便让族人痛饮起来。<br>酒宴持续了三天三夜，族长等人方才醉倒。</p><p>猗带着珠宝玉石与少女连夜逃出涂山。<br>离开涂山后，猗回头忘了一眼，身后竟是一片森林，再也找不到进入涂山的路了。</p><h2 id="狐族本源"><a href="#狐族本源" class="headerlink" title="狐族本源"></a>狐族本源</h2><p>《山河见闻录·狐族本源》中还记载了狐族的一些特殊习性。<br>狐族自打出生起就具有了灵性，通过修炼可以开启灵智。</p><p>虽然高阶的魔兽可以幻化成人形，但对于狐族而言并没有此限制。<br>这是因为狐族特殊的能力可以变换成人形，即使是低阶的狐狸也可以用此能力。<br>但也仅仅只能变成“人形”而已，无法掩盖身上的毛皮和尾巴，除非进化成高阶狐狸。</p><p>狐族在修行的时候，每过 100 年，其中一条尾巴就会分裂成两半，变成两条尾巴。<br>尾巴数量越多的代表修为越高，并且寿命随之大幅增加。</p><p>狐族有公狐和母狐之分。<br>公狐化身人形则为美男子，母狐化身人形则为沉鱼落雁之颜。<br>母狐的好奇心比公狐更重，因而很多母狐想要逃出涂山去看看外面的新鲜事物。</p><p>狐族本身没有任何过错，但人类往往会因为争夺一名狐族女子而大动干戈，甚至不惜发动战争。<br>因此涂山有森严的规矩：涂山人不得离开涂山，误入涂山的人类也不能离开。<br>但是狐族常年生活在涂山，不知人心险恶，所以很容易被坑骗，已经有数位人类从涂山逃出了。</p><h3 id="一尾赤狐"><a href="#一尾赤狐" class="headerlink" title="一尾赤狐"></a>一尾赤狐</h3><p>狐族诞生的形态，全身毛皮为赤红色，与普通狐狸基本无异。<br>此时并未开启灵智，因而无法幻化成人形。<br>由于保持着野性，所以偷偷离开涂山的赤狐也不在少数。<br>赤狐在离开涂山后，会被猎户当做普通狐狸猎杀。<br>在未进化成白狐之前，除了寿命比普通狐狸长一点，它就是一只普通的狐狸。</p><p>普通狐狸没有狐族血脉，而赤狐可以通过进化开启灵智。<br>就好比人类是猩猩变成的，但不是所有猩猩都能进化成人类，只有拥有人族血脉的猩猩才能进化成人类。</p><p>逃离涂山的赤狐几乎没有生还的可能，不仅要面对天敌，还要面对山上的猎户——这样的生活要持续整整 100 年。<br>所以在野外很难看到能进化成白狐的赤狐。</p><p>但凡事存在例外，如果能够在野外过着 100 年逃生的生活，那么就可以进化成白狐。<br>能够在野外进化成白狐的，绝对是狐族的强者。<br>狐族史上仅存在唯一一只在野外成长为白狐的赤狐——「狐媚」。</p><h3 id="二尾白狐"><a href="#二尾白狐" class="headerlink" title="二尾白狐"></a>二尾白狐</h3><p>经过了一百年的修炼，此时身上赤红的毛皮逐渐变为白色。<br>同时开启了初级的灵智，能够化身人形直立行走，智力与三岁小孩差不多。<br>但身上的毛皮和尾巴却无法隐藏，并有一股浓烈的狐味。</p><h3 id="三尾银狐"><a href="#三尾银狐" class="headerlink" title="三尾银狐"></a>三尾银狐</h3><p>又经过一百年的修炼，白色的毛发开始变为银色。<br>智力也进一步的得到增长，智力已经发育成十三四岁的孩子。<br>能够将毛皮隐藏起来，皮肤与人类十分接近。</p><h3 id="四尾金狐"><a href="#四尾金狐" class="headerlink" title="四尾金狐"></a>四尾金狐</h3><p>又经过一百年的修炼，银色的毛发逐渐变为金色。<br>此时智力已经与成年人无异了，并且身上的皮肤毛发完全褪去，与人类无异。<br>尾巴也可以自由的收起放出，身上只会剩下极淡的狐味。<br>进化到金狐之后，即使是混入人类世界也很难被发现。<br>除了偶尔受到刺激和惊吓会解除变身状态露出狐狸的样貌。</p><h3 id="五尾黑狐"><a href="#五尾黑狐" class="headerlink" title="五尾黑狐"></a>五尾黑狐</h3><p>又经过一百年的修炼，金色的毛发逐渐变为黑色。<br>有一部分的狐族进化到黑狐会再次提升灵智，黑狐当中有许多「智者」的存在。<br>这些黑狐一般都能成为族中的长老。<br>进化到黑狐之后，变化之术达到顶峰，再也不会因为受到惊吓露出原形了。</p><p>在这个阶段，可以选择停止继续进化，但一旦选择停止进化，就永远无法再进化了。<br>因为……要进化成六尾野狐伴随着巨大的风险。</p><h3 id="六尾野狐"><a href="#六尾野狐" class="headerlink" title="六尾野狐"></a>六尾野狐</h3><p>又经过一百年的修炼，毛皮逐渐变为深红色，这个阶段的进化将会极大的刺激狐族的野性。<br>战斗能力大大的提高，绝大多数进化成野狐后，会因为野性过于狂暴而失去自我。<br>失去自我的野狐会再次变为狐狸形态，并且灵智也丧失，不分敌我进行攻击。<br>失去自我的野狐就无法再进化了，只不过是一头野兽罢了。<br>进化成野狐的风险极高，因此大多数狐族只会进化到黑狐。</p><h3 id="七尾天狐"><a href="#七尾天狐" class="headerlink" title="七尾天狐"></a>七尾天狐</h3><p>又经过一百年的修炼，深红色的毛皮逐渐变淡，身上主要呈现为白色，尾巴会保留一抹淡淡的红色。<br>此时已经能够预知天命，寿命大大的延长。<br>心中的野性也能随意收放，对精神的掌控能力大大提高。<br>开始能够使用狐族特有的法术，如：狐火、狐息术、媚惑之术。</p><p>有一些修炼到七尾的母狐狸会偷偷逃出涂山与人类男子相爱。<br>因为人类的寿命相对于天狐来说太过短暂，并且随着时间的流逝，容貌的变化并不明显。<br>为了避免被人类察觉，她们往往只会与男子相守数年，便不得不离去。<br>无法白头到老，只能看着自己心爱的人变老死去，这也成了天狐永远逃不过的情殇。</p><p>但如能有幸娶得一名狐族女子，从此以后非富即贵。</p><h3 id="八尾灵狐"><a href="#八尾灵狐" class="headerlink" title="八尾灵狐"></a>八尾灵狐</h3><p>七尾已知天命，修炼到八尾的狐狸，已经如同精灵一般的存在了。<br>七尾进化到八尾，并非一百年就能成功，而是每次尝试突破都要花费一百年修为。<br>如果不能在寿命到达尽头前进化成八尾，那么天狐便会陨落。</p><p>若是能突破进化到灵狐，寿元可加千年，五官得到强化，能够感应天地。</p><h3 id="九尾青狐"><a href="#九尾青狐" class="headerlink" title="九尾青狐"></a>九尾青狐</h3><p>同样地，想要从八尾突破到九尾，并非一定成功，并且需要两百年修为才能突破一次。<br>能够进化到八尾的已是极少数，而能够成功突破到九尾的，更是罕见。</p><p>除了突破成功率极低之外，每一个想要突破成青狐的都需要服食一颗「血浆果」。</p><p>血浆果是生在在火山附近的珍稀药材，种子期埋藏在地下千年，再过千年方可生出花来，又过千年方能结出果来，三千年才能生出一颗血浆果，因为吸收了岩浆的能量，果实通体透红，散发着灼热的气息。若是普通人吃下血浆果，瞬间便会爆体而亡。对于修行了数百年甚至千年的狐族来说，却是突破成青狐的必备品。</p><p>服食血浆果后，灵狐会受到体内灼热的气息炙烤，随后身体不断散发出火焰气息，若是不能忍受这股焦炎之息，灵狐就会被活生生烧死。经历了炙烤之后，全身的毛发变得焦灼，此乃青狐之色。</p><p>血浆果极其稀有，这也是导致众多灵狐无法突破成青狐的缘由。<br>而即使吃下血浆果，因为无法忍受高温炙烤丧命的灵狐也不在少数。<br>狐族上千年的历史中，也就只有数个突破到九尾的。</p><p>突破到九尾的妖狐，能够呼风唤雨，拥有强大的妖力。<br>每次青狐出现都伴随着异象，被人们认为是「祥瑞」的征兆。</p><p>青狐的寿命可达数千年，因为能力过于强大，他们往往隐居在无人的地方。</p><h3 id="十尾冥狐"><a href="#十尾冥狐" class="headerlink" title="十尾冥狐"></a>十尾冥狐</h3><p>九尾突破到十尾，需要消耗一千年的修为。<br>除此之外，还需长期食用生长在地狱边境的一种剧毒植物「冥花」。<br>若是突破不成功便会毒发身亡。<br>突破成功之后，由于沾染了剧毒，身体的皮毛会化为深邃的黑暗，散发出一股幽冥气息。</p><p>据说，冥狐已超越了生死，不在轮回之中。<br>狐族的历史上仅有一位冥狐，没有任何其他相关记载。</p><h2 id="现存族人"><a href="#现存族人" class="headerlink" title="现存族人"></a>现存族人</h2><h3 id="涂山一族"><a href="#涂山一族" class="headerlink" title="涂山一族"></a>涂山一族</h3><p>世代居住在涂山的一族，不会离开涂山。</p><h3 id="狐媚"><a href="#狐媚" class="headerlink" title="狐媚"></a>狐媚</h3><p>狐族现任族长，唯一在野外突破成白狐的狐族。<br>狐族史上最强的一位，已经是九尾青狐。</p><h3 id="狐钰（北冥有鱼）"><a href="#狐钰（北冥有鱼）" class="headerlink" title="狐钰（北冥有鱼）"></a>狐钰（北冥有鱼）</h3><p>原本是族长的继承人，但不愿留在涂山。<br>年幼时就带着妹妹偷偷离开涂山外出历练。<br>为了融入人类世界，在外自称「北冥有鱼」。<br>是成功突破到八尾的狐族强者，在人类世界开宗立派，意图将狐族发扬光大。</p><p>但遗憾的是……人类的血脉无法学习狐族秘术。<br>所以狐钰将狐族秘术进行了一番改良，变得使人类也能学习。<br>而狐钰也受到人类的影响学会了御风之术。<br>是狐族中与人类关系最为亲密的一个。</p><p>后来狐族危难之际，带着妹妹回到涂山帮助狐族解除危机。</p><h3 id="狐雪（北冥雪）"><a href="#狐雪（北冥雪）" class="headerlink" title="狐雪（北冥雪）"></a>狐雪（北冥雪）</h3><p>狐钰的妹妹，极度的姐控，在外自称「北冥雪」。<br>乃是七尾灵狐强者，帮助姐姐打理宗派内的日常事务。</p><h3 id="狐潇"><a href="#狐潇" class="headerlink" title="狐潇"></a>狐潇</h3><p>五尾黑狐（公），具有超凡的智力，是涂山狐族的长老。<br>极度的妹控，因为一己私心不让狐蝶进化成野狐。<br>原因是害怕狐蝶进化失败，失去本心变成野兽。<br>但狐蝶似乎有自己的想法。</p><h3 id="狐蝶"><a href="#狐蝶" class="headerlink" title="狐蝶"></a>狐蝶</h3><p>五尾黑狐，狐潇的妹妹，也是狐族的长老。</p><h2 id="涂山秘境"><a href="#涂山秘境" class="headerlink" title="涂山秘境"></a>涂山秘境</h2><h3 id="涂山城"><a href="#涂山城" class="headerlink" title="涂山城"></a>涂山城</h3><p>在涂山中心地区，有一个涂山城。<br>涂山城是所有高阶狐狸生活的地方。</p><h3 id="无尽酒泉"><a href="#无尽酒泉" class="headerlink" title="无尽酒泉"></a>无尽酒泉</h3><p>涂山有一处无尽酒泉，不知酒水从何处而来，滔滔不绝的向外喷涌而出。<br>泉水汇集成了一片池子，族人便在这里取酒。</p><p>酒泉里的酒，享之不尽用之不完。<br>随着季节变化，酒的口味也会产生变化。<br>每逢佳节，狐族便会派族内年轻的女子前来打酒，打满一年份的酒，藏在地窖里。</p><p>这些酒极为烈性，常人喝了会醉上七天七夜。<br>但狐族生性好酒，常常一饮便是数日，直到醉倒不省人事。</p><h3 id="四季梯田"><a href="#四季梯田" class="headerlink" title="四季梯田"></a>四季梯田</h3><p>涂山外围的梯田一年四季都能够生长作物。<br>也许是因为涂山得天独厚的条件，不仅种植了许多粮食，梯田还生长着无数奇珍异植。<br>若是人类摘几株来炼作丹药，可有美容养颜、延年益寿之功效。</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 魔王传说：战国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课外读物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】解决 Unity 的 Dropdown 组件无法获取问题</title>
      <link href="/2021/12/29/unity-tips-021/"/>
      <url>/2021/12/29/unity-tips-021/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚写完上篇文章，没一会又踩了新坑 o(╥﹏╥)o</p><h2 id="事件说明"><a href="#事件说明" class="headerlink" title="事件说明"></a>事件说明</h2><p>正在制作菜单界面，需要有一个下拉菜单来筛选道具分类。<br>如下：<br><img src="https://pic.imgdb.cn/item/61cc5faf2ab3f51d9104ba60.jpg" alt="Dropdown"></p><h2 id="无法获取"><a href="#无法获取" class="headerlink" title="无法获取"></a>无法获取</h2><p>结果发现在脚本中设置了变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Dropdown classifyDropdown;</span><br></pre></td></tr></table></figure><p>场景中的下拉菜单居然拖不进去？<br>试着又写了 <code>GetComponent&lt;Dropdown&gt;</code> 来获取该组件，却返回 <code>null</code>。</p><p>喵喵喵？</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>其实……是我弄错组件了。<br>虽然名字差不多，但我用的是 TextMesh Pro 那个组件……</p><p><img src="https://pic.imgdb.cn/item/61cc606f2ab3f51d91056567.jpg" alt="问题原因"></p><p>实际上要用到的是 <code>UI - Legacy - Dropdown</code> 才对！</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】解决 AssetsBundle Fatal Error！闪退问题</title>
      <link href="/2021/12/29/unity-tips-020/"/>
      <url>/2021/12/29/unity-tips-020/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用了 AssetsBundle 之后，从前天开始莫名其妙会报错然后闪退退出 Unity，而且还是偶发性的。<br>只要 Build 重建资源就有可能会出现这种情况。</p><p>报错如下：<br><img src="https://pic.imgdb.cn/item/61cc51ef2ab3f51d91fa7941.png" alt="AssetsBundle Fatal Error！"><br>关键报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The file &#39;archive:&#x2F;CAB-8bc5a956f7efa6356fcd1d00c8005f99&#x2F;CAB-8bc5a956f7efa6356fcd1d00c8005f99&#39; is corrupted! Remove it and launch unity again!</span><br><span class="line">[Position out of bounds!]</span><br></pre></td></tr></table></figure><p>里面其实已经提到了问题的原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The file &#39;archive:&#x2F;xxxxx&#39; is corrupted!Remove it and launch unity again!</span><br></pre></td></tr></table></figure><p>意思是说这个文件已经损坏了，只要将它删掉再重启即可。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>想起来我正在制作菜单的 UI，中间有一次把旧的 prefab 删掉了，后面又创建了一个新的菜单，名字相同的，并且放在同一个目录，然后重新打包了一次。所以很可能是因为名称修改之后，本地的 meta 文件没有更新，导致 AssetsBundle 读取到的还是被删除的那个菜单 UI 的 meta 信息。</p><p>还有一种可能是将不同类型的文件（如 .png，.jpg）却取了相同的名字，打包时又放在同一个包里面，导致文件名称冲突无法正常识别，不过我遇到的不是这种情况，如果是这种情况只要把同名的文件改成别的，再打包一次就能解决。</p><h2 id="方案一：修改-manifest"><a href="#方案一：修改-manifest" class="headerlink" title="方案一：修改 manifest"></a>方案一：修改 manifest</h2><p>AssetsBundle 打包保存的是预制体的 guid 信息。</p><p><img src="https://pic.imgdb.cn/item/61cc59a32ab3f51d910031cb.jpg" alt="meta 的 guid"></p><p>找到 AssetsBundle 的 <code>prefab.manifest</code> 文件（prefab 是我打的包名），因为已经定位到问题是菜单预制体了，所以找到这个包即可，然后搜索到报错的那个 guid 修改一下就可以。</p><h2 id="方案二：恢复-Meta-文件"><a href="#方案二：恢复-Meta-文件" class="headerlink" title="方案二：恢复 Meta 文件"></a>方案二：恢复 Meta 文件</h2><p>只要把 meta 的 id 修改为被删除的那个预制体的 id 即可。<br>第一步，找到预制体的 meta 文件：</p><p><img src="https://pic.imgdb.cn/item/61cc53312ab3f51d91fb69d4.jpg" alt="预制体的 meta 文件"></p><p>第二步，用文本编辑器打开这个文件，修改其中的 guid 字段：</p><p><img src="https://pic.imgdb.cn/item/61cc53312ab3f51d91fb69da.jpg" alt="guid"></p><p>这个 guid 字段可以在你的版本管理工具查找，我用的是 Git，直接在提交记录就可以看到修改记录，找到变化的 ID 进行对应的修改即可（所以说，代码托管十分重要，遇到这种情况就可以找到之前修改的记录了）。</p><h2 id="方案三：删除-Library"><a href="#方案三：删除-Library" class="headerlink" title="方案三：删除 Library"></a>方案三：删除 Library</h2><p>直接删除项目下的 <code>Library</code> 目录。<br><img src="https://pic.imgdb.cn/item/61cc51622ab3f51d91fa15ce.jpg" alt="Library"></p><p>然后重新启动 Unity，就会自动识别资源的 meta 信息了。</p><h2 id="方案四：删掉-meta-文件"><a href="#方案四：删掉-meta-文件" class="headerlink" title="方案四：删掉 meta 文件"></a>方案四：删掉 meta 文件</h2><p>当你知道哪个文件出问题的时候也可以这么做。<br>找到 <code>Menu.prefab.meta</code> 删掉，然后重启 unity 就会生成新的 meta 文件。<br>删除 meta 之后，需要重新配置 Menu 为 prefab 包，再用 AssetsBundle Browser 重新构建。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】TextMesh - Pro 出现 T 字图标问题</title>
      <link href="/2021/12/28/unity-tips-019/"/>
      <url>/2021/12/28/unity-tips-019/</url>
      
        <content type="html"><![CDATA[<h2 id="TextMesh-Pro"><a href="#TextMesh-Pro" class="headerlink" title="TextMesh - Pro"></a>TextMesh - Pro</h2><p><code>TextMesh - Pro</code> 是 Unity 收购的一款字体扩展插件，已内置到 Unity 引擎里可以直接使用。<br>昨天晚上在制作 UI 的时候，发现「下拉菜单」组件会显示一个 T 字的图标。</p><p><img src="https://pic.imgdb.cn/item/61ca77472ab3f51d918b6b0e.jpg" alt="DropDown组件出现神秘T文字图标"></p><p>咋看之下好像是缺少了字体，并且运行游戏的时候这个 T 图标还在。<br>虽然 TextMesh 并不支持中文显示，但我创建的 DropDown 只有英文，所以肯定不是字体的问题。</p><h2 id="模拟器环境"><a href="#模拟器环境" class="headerlink" title="模拟器环境"></a>模拟器环境</h2><p>将游戏的测试环境改成模拟器，却发现 T 字图标没了。</p><p><img src="https://pic.imgdb.cn/item/61ca77d42ab3f51d918bcac2.jpg" alt="模拟器环境运行"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在模拟器下没问题，那就能排除是组件本身的问题了。<br>我突然想到有一天自己打开了 Gizmos 没有关掉。</p><p><img src="https://pic.imgdb.cn/item/61ca78442ab3f51d918c21ca.jpg" alt="Gizmos"></p><p>将其关闭后，T 字图标果然消失了。<br>Gizmos 旁白有个下拉菜单，点开可以查看详情：</p><p><img src="https://pic.imgdb.cn/item/61ca78832ab3f51d918c49ea.jpg" alt="Gizmos详情"></p><p>可以发现上面确实有 T 字图标。</p><h2 id="Gizmos-是什么？"><a href="#Gizmos-是什么？" class="headerlink" title="Gizmos 是什么？"></a>Gizmos 是什么？</h2><p>借着这个机会，我趁机查了一下 Gizmos 的相关资料，看看它到底是个什么东西。<br>（竟然害我昨天晚上折腾许久……）</p><p>参考文章：<a href="https://developer.unity.cn/ask/question/5f7961ecedbc2a0020ab01a4">https://developer.unity.cn/ask/question/5f7961ecedbc2a0020ab01a4</a></p><p>简单的概括 Gizmos 就是一个画线辅助系统。<br>在游戏中可能存在许多「看不见」的东西，比如敌人的『攻击范围』。<br>为了方便调试，可以绘制一条虚拟的辅助线。</p><p>直接上代码看效果便一目了然：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using LitJson;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class Test : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void OnDrawGizmosSelected()</span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.DrawWireSphere(transform.position, 5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写上述代码，然后将脚本挂在场景中的物体上面，即可看到效果。</p><p><img src="https://pic.imgdb.cn/item/61ca7a6c2ab3f51d918db153.jpg" alt="虚拟线"><br>只要是继承了 <code>MonoBehaviour</code> 的脚本，都可以用这个方法绘制虚拟线。</p><p>上面的代码调用了 <code>Gizmos.DrawWireSphere</code> 方法，即画一个半径为 5 的圆圈。<br>可是发现只有在编辑器场景中出现了圆圈，在游戏场景并没有看到圆圈，即使运行游戏也看不见。<br>这是由于我上面已经把 Gizmos 关掉了，只要重新打开即可：</p><p><img src="https://pic.imgdb.cn/item/61ca7ad52ab3f51d918e028f.jpg" alt="打开 Gizmos"></p><p>如上所示，游戏场景中可以看到虚拟线了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>Gizmos 是 Unity 中的画线辅助系统，可以在调试的时候绘制虚拟线帮助开发者直观的看见「不可视之物」，例如敌人的攻击范围、子弹的运行轨迹等等。</p><p>Gizmos 官方文档：<a href="https://docs.unity3d.com/ScriptReference/Gizmos.html">https://docs.unity3d.com/ScriptReference/Gizmos.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】随机系统</title>
      <link href="/2021/12/27/unity-tips-018/"/>
      <url>/2021/12/27/unity-tips-018/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随机数在游戏中无处不在。<br>例如扭蛋抽奖、怪物掉落物、怪物 AI 等等。</p><p>那么，如何实现如何按照设定好的几率，在几件奖励中选择其中一件呢？</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>假定我们现在要实现手游的「扭蛋池」。<br>扭蛋池中有 5 个不同的角色，玩家每次扭蛋可以从里面抽出其中一个。<br>每个角色的抽取几率，都可以通过配置参数的方式进行控制。</p><p>示例如下：</p><ul><li>皮卡丘：10%</li><li>火球鼠：10%</li><li>小锯鳄：10%</li><li>杰尼龟：20%</li><li>妙蛙种子：50%</li></ul><p>总计几率为 100%，即一定可以从中抽取到一个角色。<br>当然，也可以设计成抽到空的情景，不过这里就不演示了。</p><p>这种范围性的概率判断，不能用通常的方法。<br>而是要使用「线段法」来实现：</p><p><img src="https://pic.imgdb.cn/item/61c945cb2ab3f51d911a15e5.jpg" alt="线段法"></p><p>假设存在一条长度为 100 的线段，根据概率，每个角色占据这条线段的比例分别为：10、10、10、20、50。只要我们随机从线段上面取出一个点，这个点落在哪个范围，那就抽到哪个角色。</p><h2 id="处理随机数"><a href="#处理随机数" class="headerlink" title="处理随机数"></a>处理随机数</h2><p>使用 Unity 自带的方法 <code>UnityEngine.Random.Range(min,max)</code> 来实现随机数即可。<br>需要注意的是这个方法本身只能取到 <code>[min, max)</code> 的值，即不包括 max，我们需要手动加上 1。<br>这是一个通用的方法，将处理几率的方法封装为 <code>Calculator</code> 工具类以便后续使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 取范围[min,max]</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int GetRandomInt(int min, int max)</span><br><span class="line">&#123;</span><br><span class="line">    return UnityEngine.Random.Range(min, max + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="奖品基类"><a href="#奖品基类" class="headerlink" title="奖品基类"></a>奖品基类</h2><p>在实现抽奖之前，我们需要先实现奖品。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class PrizeBase </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 抽取几率</span><br><span class="line">    public float rate;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实际获得的奖品</span><br><span class="line">    public string prize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奖品暂时用一个字符串演示，可以改成任何你需要的东西。<br>之所以要命名为 <code>Base</code> 类，是因为它不仅能用来抽奖，还可以实现很多东西，需要用到抽奖机的时候，只要让子类继承它就可以了。</p><h2 id="抽奖机"><a href="#抽奖机" class="headerlink" title="抽奖机"></a>抽奖机</h2><p>计算出每个奖品在这条线段上所在的点的范围（其实只要一个点就够）。<br><img src="https://pic.imgdb.cn/item/61c94a342ab3f51d911b8e1e.jpg" alt="奖品分布图"></p><p>根据上面设定的角色几率，我们可以获得每个角色所在的区间范围：</p><ul><li>皮卡丘：<code>[1, 10]</code></li><li>火球鼠：<code>[11, 20]</code></li><li>小锯鳄：<code>[21, 30]</code></li><li>杰尼龟：<code>[31, 50]</code></li><li>妙蛙种子：<code>[51, 100]</code></li></ul><p>生成一个 <code>[1, 100]</code> 的随机数 x，我们只需要依次判断：</p><ul><li><code>x &lt;= 10</code> 皮卡丘</li><li><code>x &lt;= 20</code> 火球鼠</li><li><code>x &lt;= 30</code> 小锯鳄</li><li><code>x &lt;= 50</code> 杰尼龟</li><li><code>x &lt;= 100</code> 妙蛙种子 </li></ul><p>原理已经很清楚了，那么开始实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PrizeMachine</span><br><span class="line">&#123;</span><br><span class="line">    public static PrizeBase GetRandomPrize(List&lt;PrizeBase&gt; prizes)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断几率是否超过100%</span><br><span class="line">        float total &#x3D; 0;</span><br><span class="line">        foreach (var item in prizes)</span><br><span class="line">        &#123;</span><br><span class="line">            total +&#x3D; item.rate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (total &gt; 100)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(&quot;奖品几率设置不正确（超过100%）&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int random &#x3D; Calculator.GetRandomInt(1, 10000);</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        foreach (var item in prizes)</span><br><span class="line">        &#123;</span><br><span class="line">            index +&#x3D; (int)(item.rate * 100);</span><br><span class="line">            if (index &gt;&#x3D; random)</span><br><span class="line">            &#123;</span><br><span class="line">                return item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 当设定的奖品总计几率不为100%时，即没抽到任何东西，返回空</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里之所以要使用 <code>[1, 10000]</code> 是因为可以支持两位小数点，例如：0.25% 这样的几率。</p><h2 id="测验结果"><a href="#测验结果" class="headerlink" title="测验结果"></a>测验结果</h2><p>编写测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;string, int&gt; res &#x3D; new Dictionary&lt;string, int&gt;();</span><br><span class="line"></span><br><span class="line">var prizes &#x3D; new List&lt;PrizeBase&gt;</span><br><span class="line">&#123;</span><br><span class="line">    new PrizeBase&#123; prize &#x3D;&quot;pikaqiu&quot;, rate &#x3D; 10 &#125;,</span><br><span class="line">    new PrizeBase&#123; prize &#x3D;&quot;huoqiushu&quot;, rate &#x3D; 10 &#125;,</span><br><span class="line">    new PrizeBase&#123; prize &#x3D;&quot;xiaojue&quot;, rate &#x3D; 10 &#125;,</span><br><span class="line">    new PrizeBase&#123; prize &#x3D;&quot;jienigui&quot;, rate &#x3D; 20 &#125;,</span><br><span class="line">    new PrizeBase&#123; prize &#x3D;&quot;miaowazhognzi&quot;, rate &#x3D; 50 &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">    var prize &#x3D; PrizeMachine.GetRandomPrize(prizes);</span><br><span class="line"></span><br><span class="line">    if (prize &#x3D;&#x3D; null) continue;</span><br><span class="line"></span><br><span class="line">    if (res.ContainsKey(prize.prize))</span><br><span class="line">    &#123;</span><br><span class="line">        res[prize.prize]++;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        res[prize.prize] &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int total &#x3D; 0;</span><br><span class="line">foreach (var item in res.Keys)</span><br><span class="line">&#123;</span><br><span class="line">    total +&#x3D; res[item];</span><br><span class="line">    Debug.Log(item + &quot;&#x3D;&quot; + res[item]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Debug.Log(&quot;total&#x3D;&quot; + total);</span><br></pre></td></tr></table></figure><p>得到的结果与设定的几率差不多，虽然存在一些误差，不过这样就足够了。</p><p><img src="https://pic.imgdb.cn/item/61c94fc42ab3f51d911d6ebe.jpg" alt="10万次模拟测试"></p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>对于任何需要从给定奖池中抽取其中一件的随机性事件，均可使用此脚本实现。<br>示例：随机宝箱、怪物掉落物、怪物 AI 随机选择技能释放等等。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】UI基础及如何将UI限制在屏幕范围内</title>
      <link href="/2021/12/26/unity-tips-017/"/>
      <url>/2021/12/26/unity-tips-017/</url>
      
        <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>在 Unity 中，UI 跟场景中的普通物体是不一样的。<br>而我第一次从 cocos creator 转到 Unity 时不知道这一点，踩了许多坑。<br>需要在了解 UI 的一些基础知识，然后才能编写与 UI 相关的代码。</p><h2 id="UI-系统"><a href="#UI-系统" class="headerlink" title="UI 系统"></a>UI 系统</h2><p>Unity 的 UI 系统有两大类，第一个是直接在场景创建 Canvas（画布），在画布上可以添加 Image、Text 之类的，这种叫做 UGUI；第二个是 NGUI（Next-Gen-UI）译为中文即“下一代的 UI”，不过这个好像是收费的插件。</p><p>NGUI 商店页面：<a href="https://assetstore.unity.com/packages/tools/gui/ngui-next-gen-ui-2413">https://assetstore.unity.com/packages/tools/gui/ngui-next-gen-ui-2413</a></p><p>一般而言，我们都是用 Unity 自带的 UGUI，即直接在场景右键创建 UI 组件。<br>UGUI 一定需要一个 Canvas（画布），所有的 UI 组件都必须挂在画布上面。<br>场景可以创建很多个画布，画布有一个统一的 Order In Layer。</p><p><img src="https://pic.imgdb.cn/item/61c7ea182ab3f51d91a19221.jpg" alt="Order In Layer"></p><p>当设定了 Order In Layer 之后，挂在该 Canvas 下面的组件就统一使用此 Order In Layer。<br>Order In Layer 是 Unity 中层级显示的依据。</p><p>UI 组件本身并没有 Order In Layer 字段，必须借助 Canvas 来设置。<br>如果你需要复杂的层级关系，可以创建多个 Canvas 分别设置 Order In Layer，然后将不同层级的组件挂在不同的 Canvas 上面。</p><h2 id="普通物体和-UI-组件"><a href="#普通物体和-UI-组件" class="headerlink" title="普通物体和 UI 组件"></a>普通物体和 UI 组件</h2><p>需要注意普通物体和 UI 组件不能混用。<br>最开始就是因为我不知道 UI 是不一样的，结果存在各种缩放的问题。<br>务必将 UI 组件和普通物体分开挂在不同的根节点，普通物体就别挂在 Canvas 里面了。</p><p>下面来说一下它们的区别：</p><p><img src="https://pic.imgdb.cn/item/61c7eb912ab3f51d91a240e4.jpg" alt="普通2D游戏对象"></p><p>在场景创建一个 2D 的精灵（图片），观察它的属性：</p><p><img src="https://pic.imgdb.cn/item/61c7eb912ab3f51d91a240e7.jpg" alt="2D 精灵的属性"></p><p>在 Unity 中，所有的 GameObject 都有 Transform 属性，用来记录它在场景中的位置、翻转以及变换。<br>但是，UI 组件并非直接继承 Transform，而是有 UI 特殊的 RectangleTransform：</p><p><img src="https://pic.imgdb.cn/item/61c7ec5e2ab3f51d91a284e0.jpg" alt="UI 组件"></p><p>可以发现，UI 组件的 Transform 为 RectTransform，并且它没有 Order In Layer 属性可以设置。<br>因为 UI 的层级关系只能依赖 Canvas，而不能单独设置。</p><p>因为 Unity 所有物体都要继承 Transform，UI 组件同样属于 GameObject，它自然也是需要继承 Transform 的，RectTransform 就是 Transform 的子类，它也有 position 属性，但是 UI 并非使用此属性，而是要使用 anchoredPosition 这个属性。</p><p>这两个属性虽然都是记录坐标，但完全不一样，请参考下文说明。</p><p>除此之外，物体的渲染层级也存在差别：</p><p><img src="https://pic.imgdb.cn/item/61c7f1002ab3f51d91a43b11.jpg" alt="普通2D精灵Layer默认为Default"><br><img src="https://pic.imgdb.cn/item/61c7f1472ab3f51d91a457a3.jpg" alt="Image的Layer默认是UI"></p><p>还有，UI 组件还有普通组件没有的锚点属性，锚点。<br>锚点改变之后，属性也会发生变化，通常我们不用去修改锚点，默认为中心位置即可：</p><p><img src="https://pic.imgdb.cn/item/61c7f1742ab3f51d91a46699.jpg" alt="UI锚点"></p><p>只有在制作一些血条或者其他需要拉伸变化的才会修改锚点，这边就不展开了。<br>不过，分享一篇写的很不错的文章：<a href="https://www.jianshu.com/p/dbefa746e50d">Unity进阶技巧 - RectTransform详解</a><br>此文对锚点的介绍十分详细，有兴趣可以阅读。</p><h2 id="UI-的渲染"><a href="#UI-的渲染" class="headerlink" title="UI 的渲染"></a>UI 的渲染</h2><p>无论玩家走到哪，UI 肯定不能跟随玩家移动的，除非开发者手动使用代码操控位置，否则 UI 一定是显示在整个屏幕中。<br>UI 的渲染与开发者的设置有关，有三种渲染方式：</p><p><img src="https://pic.imgdb.cn/item/61c7ed6c2ab3f51d91a2eae9.jpg" alt="Canvas 的渲染方式"></p><p>点击场景的 Canvas，在右侧属性栏即可找到 Render Mode。</p><ul><li>Screen Space - Overlay：覆盖模式，Canvas 始终覆盖在屏幕上方，也就是说 UI 会遮挡其他元素。</li><li>Screen Space - Camera：Canvas 始终显示在设定的摄像机（Camera）前方，一般 2D 游戏选择这个即可。</li><li>World Space：世界坐标模式，此模式下 UI 与其他元素没有区别，也就是说场景的物体可以遮挡 UI。</li></ul><p>我做的是 2D 游戏，摄像机拍摄的也就只有一个平面而已。<br>这里选择 <code>Screen Space - Camera：Canvas</code> 模式即可。<br>设置该模式后，要把场景中的摄像机拖到 Canvas 的 Render Camera 属性里面。</p><p>接着我把 Canvas 的 Sort In Layer 设置为最大值：32767，让 UI 显示在场景最顶层，防止被场景的元素遮挡。</p><h2 id="坐标问题"><a href="#坐标问题" class="headerlink" title="坐标问题"></a>坐标问题</h2><p>将一个普通的 2D 精灵，向右移动，观察坐标变化：</p><p><img src="https://pic.imgdb.cn/item/61c7f29d2ab3f51d91a4deb1.jpg" alt="2D精灵坐标"></p><p>可以发现，坐标的变动十分小，再拖动一个 Image：</p><p><img src="https://pic.imgdb.cn/item/61c7f2e72ab3f51d91a4fab7.jpg" alt="Image坐标"></p><p>可以看到，UI 坐标的量级比普通物体大多了。<br>UI 在场景的坐标范围如下：</p><p><img src="https://pic.imgdb.cn/item/61c7f3922ab3f51d91a538d6.jpg" alt="UI坐标系"><br>以屏幕中心点为（0，0），向右 x 轴增加，向上 y 轴增加。</p><h2 id="限制-UI-范围"><a href="#限制-UI-范围" class="headerlink" title="限制 UI 范围"></a>限制 UI 范围</h2><p>现在终于可以进入正题了——限制 UI 不离开屏幕外面。<br>详情窗口是 UI 中最常见的一个，如下是我正在开发中的游戏 UI：</p><p><img src="https://pic.imgdb.cn/item/61c7fec62ab3f51d91a9345d.jpg" alt="详情窗口"></p><p>当鼠标移动到人物的出生天赋上面，就会在旁边显示一个 UI 窗口，用来描述天赋的说明。<br>而这个窗口的坐标是跟随鼠标指针变化的，也就是说可能存在下面的情况：</p><p><img src="https://pic.imgdb.cn/item/61c7ff822ab3f51d91a9719b.jpg" alt="UI出界"></p><p>UI 应该被限制在屏幕内，而不能让它出界，因而需要对 UI 的坐标进行限制。<br><code>Mathf.Clamp(value, min, max)</code> 方法可以将 value 限制在 min 与 max 之间。</p><p>我们只要让 UI 的 x 坐标在 <code>[-640, 640]</code>，y 坐标在 <code>[-360, 360]</code> 之间即可。<br>计算坐标的时候，还需要计算 UI 的宽度和高度，然后计算出距离边缘位置的距离。</p><p><img src="https://pic.imgdb.cn/item/61c8000b2ab3f51d91a9a8c6.jpg" alt="1280*720的屏幕"></p><p>计算实际的 UI 坐标：</p><p><img src="https://pic.imgdb.cn/item/61c800c42ab3f51d91a9e27d.jpg" alt="计算实际的 UI 坐标"></p><p>其实就是一道初中的数学题而已。<br>假设屏幕是 1280 * 720 的，那屏幕中心就是（0,0），屏幕左侧边缘的坐标就是（-640,y）。<br>一个宽为 100 的 UI 物体，x 坐标的最小值就是：-640 + 100 / 2 = 590。<br>同理可以计算出 xMin，xMax，yMin，yMax 四个极限坐标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取场景的 Image 对象</span><br><span class="line">public Image img;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在 Update 方法里改变它的坐标</span><br><span class="line">float xDistance &#x3D; Screen.width &#x2F; 2;</span><br><span class="line">float yDistance &#x3D; Screen.height &#x2F; 2;</span><br><span class="line"></span><br><span class="line">float x &#x3D; Mathf.Clamp(pos.x, -xDistance + size.x, xDistance - size.x);</span><br><span class="line">float y &#x3D; Mathf.Clamp(pos.y, -yDistance + size.y, yDistance - size.y);</span><br><span class="line"></span><br><span class="line">img.transform.position &#x3D; new Vector2(x,y);</span><br></pre></td></tr></table></figure><p>但其实上面的方法并不能修改 image 的位置，因为——<br><strong>UI 的坐标是继承了 Transform 的 RectTransform，获取 UI 坐标不能直接使用 <code>transform.position</code>，应该使用 <code>rectTransform.anchoredPosition</code>。</strong></p><p>所以，真正的代码应该如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public Image img;</span><br><span class="line">private RectTransform rectTransform;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    rectTransform &#x3D; img.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; UI 的真实坐标</span><br><span class="line">    var pos &#x3D; rectTransform.anchoredPosition;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; UI 的大小尺寸</span><br><span class="line">    var size &#x3D; rectTransform.sizeDelta &#x2F; 2;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 计算屏幕的尺寸</span><br><span class="line">    float xDistance &#x3D; Screen.width &#x2F; 2;</span><br><span class="line">    float yDistance &#x3D; Screen.height &#x2F; 2;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 限制 UI 坐标最大最小值</span><br><span class="line">    float x &#x3D; Mathf.Clamp(pos.x, -xDistance + size.x, xDistance - size.x);</span><br><span class="line">    float y &#x3D; Mathf.Clamp(pos.y, -yDistance + size.y, yDistance - size.y);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 调整 UI 坐标</span><br><span class="line">    rectTransform.anchoredPosition &#x3D; new Vector2(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://pic.imgdb.cn/item/61c803102ab3f51d91aaa32a.gif" alt="限制 UI 范围"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】预制体（Prefab）的妙用！</title>
      <link href="/2021/12/24/unity-tips-016/"/>
      <url>/2021/12/24/unity-tips-016/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天在实现游戏的技能系统。<br>游戏类型依然是我最喜欢的策略类回合制。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>游戏里有许许多多的技能，一个个实现显然是不实际的。<br>因此通常都是用配置表的方法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;skill_type&quot;: &quot;atk&quot;,</span><br><span class="line">        &quot;attribute&quot;: &quot;sword&quot;,</span><br><span class="line">        &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">        &quot;base_value&quot;: 1,</span><br><span class="line">        &quot;atk_power&quot;: 100,</span><br><span class="line">        &quot;mat_power&quot;: 0,</span><br><span class="line">        &quot;animate&quot;: &quot;Hit1&quot;,</span><br><span class="line">        &quot;spent_point&quot;: 30,</span><br><span class="line">        &quot;hit_count&quot;: 1,</span><br><span class="line">        &quot;effects&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">                &quot;state&quot;: &quot;pofang&quot;,</span><br><span class="line">                &quot;time&quot;: 1,</span><br><span class="line">                &quot;rate&quot;: 40</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">                &quot;state&quot;: &quot;du&quot;,</span><br><span class="line">                &quot;time&quot;: 1,</span><br><span class="line">                &quot;rate&quot;: 50</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;skill_type&quot;: &quot;atk&quot;,</span><br><span class="line">        &quot;attribute&quot;: &quot;sword&quot;,</span><br><span class="line">        &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">        &quot;base_value&quot;: 1,</span><br><span class="line">        &quot;atk_power&quot;: 50,</span><br><span class="line">        &quot;mat_power&quot;: 0,</span><br><span class="line">        &quot;animate&quot;: &quot;Hit1&quot;,</span><br><span class="line">        &quot;spent_point&quot;: 50,</span><br><span class="line">        &quot;hit_count&quot;: 3,</span><br><span class="line">        &quot;effects&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">                &quot;state&quot;: &quot;pofang&quot;,</span><br><span class="line">                &quot;time&quot;: 1,</span><br><span class="line">                &quot;rate&quot;: 40</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">                &quot;state&quot;: &quot;du&quot;,</span><br><span class="line">                &quot;time&quot;: 1,</span><br><span class="line">                &quot;rate&quot;: 50</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;skill_type&quot;: &quot;recover_hp&quot;,</span><br><span class="line">        &quot;attribute&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;target&quot;: &quot;self&quot;,</span><br><span class="line">        &quot;base_value&quot;: 10,</span><br><span class="line">        &quot;atk_power&quot;: 0,</span><br><span class="line">        &quot;mat_power&quot;: 0,</span><br><span class="line">        &quot;animate&quot;: &quot;test_play_animate&quot;,</span><br><span class="line">        &quot;animate_type&quot;: &quot;self&quot;,</span><br><span class="line">        &quot;spent_point&quot;: 20,</span><br><span class="line">        &quot;hit_count&quot;: 1,</span><br><span class="line">        &quot;effects&quot;: []</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>像上面这样配置一些参数，然后用脚本解析参数实例化对应的技能效果。<br>这样对于一些简单的回合制来说已经足够了。<br>但我现在制作的是策略性的回合制，技能的效果不仅仅只是有几率上个 debuff 之类的。</p><p>策略类回合制的特点是技能具有多样性。<br>下面是几个简单的例子：</p><ul><li>【必杀斩】当敌人HP低于 10% 时，直接击杀目标。</li><li>【连续斩】攻击敌人，并附加 1 层【流血】状态，当敌人身上存在 3 层流血状态时，移除所有流血，每 1 层流血状态额外造成 20% 伤害。</li><li>【治疗术】回复自身 20% HP，并解除所有负面效果。</li></ul><p>这样的技能系统，直接用配置的方法是很难实现的。<br>你无法把所有可能的效果全部做成配置，那样会使得整个配置表凌乱不堪。</p><h2 id="拆分功能"><a href="#拆分功能" class="headerlink" title="拆分功能"></a>拆分功能</h2><p>其实主动技能的效果虽然很多，但其实可以分成几个大类：</p><ul><li>攻击类</li><li>回血类</li><li>增益、负面效果类</li></ul><p>基本就是以上三大类型。<br>然后子类可以再互相结合，比如攻击命中敌人给敌人上个 debuff 什么的。<br>技能的种类虽然多，但始终是围绕上面三类变化的。</p><p>既然大部分都具有共通性，那么这些都可以抽取出来。<br>我们要处理的是那些比较【刁钻】的技能效果。</p><blockquote><p>【连续斩】攻击敌人，并附加 1 层【流血】状态，当敌人身上存在 3 层流血状态时，移除所有流血，每 1 层流血状态额外造成 20% 伤害。</p></blockquote><p>上面的连续斩就是一个最好的例子。<br>这样的技能效果很难用配置的方法实现，因而需要特殊处理。</p><h2 id="预制体制作技能"><a href="#预制体制作技能" class="headerlink" title="预制体制作技能"></a>预制体制作技能</h2><p>配置表依然是需要的，但为了兼容丰富多样的技能效果。<br>新的配置只抽取出技能最基本的几个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;技能名称&quot;,</span><br><span class="line">    &quot;animate&quot;: &quot;技能动画&quot;,</span><br><span class="line">    &quot;power&quot;: &quot;技能威力&quot;,</span><br><span class="line">    &quot;skill_type&quot;: &quot;技能类型（如物理攻击）&quot;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; .. 其他自定义参数</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 特殊字段</span><br><span class="line">    &quot;instance&quot;: &quot;实例脚本&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置添加了一个特殊的字段 <code>instance</code>，这个字段<strong>存储预制体的名字</strong>。<br>然后我们在 Unity 的编辑器中，新建一个空白的 GameObject 对象，假设命名为：“lianxuzhan”。</p><p>接着创建一个技能脚本的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Skill &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 技能的实际处理方法，参数包括技能配置参数SkillData，施法者attacker和目标target</span><br><span class="line">    public abstact void Handle(SkillData skillData, Character attacker, Character target);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的单体目标技能基类。<br>然后创建一个脚本 <code>Skill_LianXuZhan</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Skill_LianXu_zhan : Skill &#123;</span><br><span class="line"></span><br><span class="line">    public override void Handle(SkillData skillData, Character attacker, Character target) &#123;</span><br><span class="line">        &#x2F;&#x2F; .. 实现具体的技能逻辑</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后玩家释放技能的时候，实际上是在游戏场景中创建了这个预制体。<br>技能的逻辑其实是在预制体上处理的。<br>技能基类还可以再添加一些回调，当技能动画结束的时候，轮到下一个角色行动之类的。</p><p>对于一些很常见的技能效果，比如：攻击敌人，造成100%物理伤害。<br>这种简单技能只有技能威力的区别，直接封装成一个预制体即可实现通用。</p><p>还有一些比如：攻击敌人，造成100%物理伤害，30%几率附加流血状态。<br>这种也属于简单类的技能，就是攻击和附加状态的组合，也可以封装成一个通用的预制体。</p><p>参数可以参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;skill_type&quot;: &quot;atk&quot;,</span><br><span class="line">    &quot;attribute&quot;: &quot;sword&quot;,</span><br><span class="line">    &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">    &quot;base_value&quot;: 1,</span><br><span class="line">    &quot;atk_power&quot;: 50,</span><br><span class="line">    &quot;mat_power&quot;: 0,</span><br><span class="line">    &quot;animate&quot;: &quot;Hit1&quot;,</span><br><span class="line">    &quot;spent_point&quot;: 50,</span><br><span class="line">    &quot;hit_count&quot;: 3,</span><br><span class="line">    &quot;effects&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">            &quot;state&quot;: &quot;pofang&quot;,</span><br><span class="line">            &quot;time&quot;: 1,</span><br><span class="line">            &quot;rate&quot;: 40</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">            &quot;state&quot;: &quot;du&quot;,</span><br><span class="line">            &quot;time&quot;: 1,</span><br><span class="line">            &quot;rate&quot;: 50</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里的 effects 字段就是追加几率状态效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;effects&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">        &quot;state&quot;: &quot;pofang&quot;,</span><br><span class="line">        &quot;time&quot;: 1,</span><br><span class="line">        &quot;rate&quot;: 40</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;target&quot;: &quot;enemy&quot;,</span><br><span class="line">        &quot;state&quot;: &quot;du&quot;,</span><br><span class="line">        &quot;time&quot;: 1,</span><br><span class="line">        &quot;rate&quot;: 50</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如此一来，虽然技能的种类很多，但只要我们把一些基本的都封装成通用预制体，通过参数进行配置即可；而对于一些难以用配置实现的技能，也可以单独书写一个类，来实现这些特殊技能。</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>预制体其实只需要一个，并且是空的 GameObject 对象即可。<br>它们的差别在于 Component（组件），即我们只需要给它们动态添加脚本即可。</p><p>在 Unity 中，可以使用如下方法添加脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 角色使用技能</span><br><span class="line">    *&#x2F;</span><br><span class="line">public void UseSkill(FormatterSkill skill)</span><br><span class="line">&#123;</span><br><span class="line">    var obj &#x3D; ObjectBuilder.CreateObject(&quot;BattleSkill&quot;);</span><br><span class="line">    var type &#x3D; Type.GetType(skill.component);</span><br><span class="line"></span><br><span class="line">    var component &#x3D; obj.AddComponent(type) as Battle_SkillAbstract;</span><br><span class="line">    component.Handle(skill, this);</span><br><span class="line"></span><br><span class="line">    isUsingSkill &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是我游戏中使用技能的方法，<code>skill.component</code> 是一个字符串，该字符串将会转化为对应的脚本组件，例如传入一个普通攻击技能的组件名字：<code>Skill_NormalAttack</code>，那么该方法就会自动为 GameObject 添加此脚本组件，只需要新建一个脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Skill_NormalAttack : Battle_SkillAbstract</span><br><span class="line">&#123;</span><br><span class="line">    public override void Handle(FormatterSkill skill, Battle_Character user)</span><br><span class="line">    &#123;</span><br><span class="line">        this.skill &#x3D; skill;</span><br><span class="line">        this.user &#x3D; user;</span><br><span class="line"></span><br><span class="line">        target &#x3D; user.GetEnemy();</span><br><span class="line"></span><br><span class="line">        ShowSkillName();</span><br><span class="line"></span><br><span class="line">        user.animator.PlayAttackAnimate();</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; ... 省略其他逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，即使技能的种类繁多，我们亦可实现，并且代码会十分简洁。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>不仅技能的实现可以用预制体，剧情也可以用这种方法。<br>当满足剧情的触发条件，就创建一个预制体，把剧情动画、对话等等全部在预制体的类里面实现，而不是直接在场景的脚本里面写，如果直接把所有的代码写在场景的脚本，估计能上千行，这对于后期维护是不利的。</p><p>这样后期十分容易维护，比如我们想改动某段剧情的演出效果，只要修改对应那个 prefab 的脚本即可。</p><p><strong>把复杂的逻辑处理，用预制体实现吧！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】AssetBundles 加载图集</title>
      <link href="/2021/12/23/unity-tips-014/"/>
      <url>/2021/12/23/unity-tips-014/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面已经实现了 AssetBundles 加载资源的方法。<br>但是今天又遇到了一个难题……那就是如何读取图集资源？</p><h2 id="图集"><a href="#图集" class="headerlink" title="图集"></a>图集</h2><p>图集一共有两种，一种是通过第三方软件打包的图集，另一种是 Unity 内部切分的图集。</p><p>Unity 切割的图集如下所示：</p><p><img src="https://pic.imgdb.cn/item/61c4669c2ab3f51d91a61cba.jpg" alt="Unity 切割的图集"></p><p>上面的角色战斗图是由许多张序列帧动画图片合成的。<br>而前文介绍的读取 Assets Bundle 方法，只能读取到一张 Sprite 图片，无法读取切割后的小图。</p><h2 id="读取图集"><a href="#读取图集" class="headerlink" title="读取图集"></a>读取图集</h2><p>参考网站：<a href="https://tsubakit1.hateblo.jp/entry/2015/11/14/000000">https://tsubakit1.hateblo.jp/entry/2015/11/14/000000</a><br>读取 Assets Bundle 图集的方法可以参考上述网站的方法。</p><p>Unity 的方法 <code>AssetBundle.LoadAsset&lt;Sprite&gt;</code> 只能读取单张的图片，并非我们的需求。<br>在 Resources 加载资源中，有一个 <code>LoadAll</code> 的方法，那么是不是在 AssetsBundle 里面也可以用这个方法来加载图集？<br>查看文档 API，发现恰巧也有一个方法： <code>AssetBundle.LoadAllAssets</code>，用这个方法就可以读取图集了吗？</p><p>其实可以猜到结局，因为 AssetBundle 是分包加载，用这个方法只不过是加载某个包底下的所有资源而已，并不是加载图集的方法。</p><p><img src="https://pic.imgdb.cn/item/61c46c9e2ab3f51d91a811fe.jpg" alt="AssetBundle.LoadAllAssets"></p><p>不过还是眼见为实，实际测试一下吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此方法在前文有介绍，这边不再赘述，主要是加载主包和依赖包</span><br><span class="line">InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">var res &#x3D; AssetBundle.LoadFromFile(resPath + packageName);</span><br><span class="line">var items &#x3D; res.LoadAllAssets(typeof(Sprite));</span><br><span class="line"></span><br><span class="line">foreach(var item in items)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在战斗图的包里面放两个角色的战斗图：</p><p><img src="https://pic.imgdb.cn/item/61c46ee02ab3f51d91a8d716.jpg" alt="战斗图文件夹"></p><p>最后启动游戏测试：</p><p><img src="https://pic.imgdb.cn/item/61c46e6d2ab3f51d91a8aa82.jpg" alt="输出结果"></p><p>咦？原本以为它应该像 <code>LoadAsset</code> 一样不能加载切割的图片，结果竟然能把小图也加载出来？<br>但是……两张图片全部被加载了。<br>虽然结果有些意外，但依然不是我们想要的。<br>如果只为拿一张图片，就得加载整个包，那得多浪费内存啊。</p><p><strong>我们的需求是：加载 AssetsBundle 包中一张图集的所有小图。</strong></p><p>接着继续测试，发现 API 里面还有一个 <code>LoadAssetWithSubAssets</code> 方法。</p><p><img src="https://pic.imgdb.cn/item/61c470312ab3f51d91a94027.jpg" alt="LoadAssetWithSubAssets"></p><p>那这个方法会不会是我们想要的呢？<br>查看一下文档的说明：</p><blockquote><p>Loads asset and sub assets with name from the bundle.</p></blockquote><p>意思是说：从包中加载带有名称的资产和子资产。<br>此方法的返回值还是 <code>Object[]</code>，应该八九不离十了。<br>测试一下就清楚了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">var res &#x3D; AssetBundle.LoadFromFile(resPath + packageName);</span><br><span class="line">var items &#x3D; res.LoadAssetWithSubAssets(resName);</span><br><span class="line"></span><br><span class="line">foreach(var item in items)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://pic.imgdb.cn/item/61c471312ab3f51d91a992b8.jpg" alt="LoadAssetWithSubAssets 测试结果"></p><p>好耶！确实是我们想要的结果。</p><h2 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h2><p>接着，我们要封装一个读取图集的方法。<br>在之前对泛型的学习中，我涨了一些姿势……</p><p>先来看一个错误的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public T[] LoadAll&lt;T&gt;(string packageName, string resName)</span><br><span class="line">&#123;</span><br><span class="line">    InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">    var res &#x3D; AssetBundle.LoadFromFile(resPath + packageName);</span><br><span class="line">    var items &#x3D; res.LoadAssetWithSubAssets&lt;T&gt;(resName);</span><br><span class="line"></span><br><span class="line">    return items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><p><img src="https://pic.imgdb.cn/item/61c472592ab3f51d91a9f3df.jpg" alt="泛型返回值的问题"></p><p>这是由于<strong>没有加上约束条件导致的。</strong><br>当泛型作为返回值时，需要与方法中有相同的约束条件。<br><code>LoadAssetWithSubAssets</code> 方法里有一个返回泛型的，注意右边的 <code>where</code> 即是约束条件。</p><p><img src="https://pic.imgdb.cn/item/61c471cf2ab3f51d91a9c40f.jpg" alt="约束条件"></p><p>如果我们也想封装一个返回泛型的方法，那么约束条件必须与它保持一致。<br>如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加上约束条件  where T : Object</span><br><span class="line">public T[] LoadAll&lt;T&gt;(string packageName, string resName) where T : Object</span><br><span class="line">&#123;</span><br><span class="line">    InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">    var res &#x3D; AssetBundle.LoadFromFile(resPath + packageName);</span><br><span class="line">    var items &#x3D; res.LoadAssetWithSubAssets&lt;T&gt;(resName);</span><br><span class="line"></span><br><span class="line">    return items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，程序就不再报错了。<br>这样，AssetsBundle 加载图集的方法也完成了(～￣▽￣)～</p><h2 id="战斗图对应表"><a href="#战斗图对应表" class="headerlink" title="战斗图对应表"></a>战斗图对应表</h2><p>最后再附上战斗图对应动作表，RPG Maker 系列生成的纸娃娃模型可用：</p><p><img src="https://pic.imgdb.cn/item/61c475972ab3f51d91ab1cf5.png" alt="战斗图对应动作表"></p><p>如果每一个战斗都要制作一个 Unity 动画，那就太麻烦了。<br>配置动画状态机也很容易出错，所以这里我采用读取图集，然后自己原创了一个动画系统的方法。</p><p>毕竟这些战斗图的格式都是统一的，只要根据这个战斗动作对应表加载固定位置的动画即可。<br>（可惜的是……这套动作图没有行走动画）</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】资源的加载：Resources 和 AssetBundles</title>
      <link href="/2021/12/22/unity-tips-013/"/>
      <url>/2021/12/22/unity-tips-013/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏中有许多资源，例如：音频、图片，这些资源的加载还是有一些门道的。<br>Unity 自带了一个 Resources 用来加载资源，可以说是十分好用了。<br>但是最近几天刷知乎看到不少人都在说不推荐用这种方式，然后我就去仔细搜了些相关资料。<br>下午也花了一两个小时看了一些视频教程，有了一些小收获，就记下来吧。</p><h2 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h2><p>在 Unity 中有一些特殊的【文件目录】，这些目录有特别的用处。</p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>官方文档：<a href="https://docs.unity3d.com/ScriptReference/Resources.html">https://docs.unity3d.com/ScriptReference/Resources.html</a></p><p>摘录官方文档原话：</p><blockquote><p>All assets that are in a folder named “Resources” anywhere in the Assets folder can be accessed via the Resources.Load functions. Multiple “Resources” folders may exist and when loading objects each will be examined. </p></blockquote><p>意思是说，在我们开发环境的根目录 Assets 下，你可以在任意的位置，建立任意个名字为“Resources”的文件夹，这些文件夹下的资源都可以通过 <code>Resources.Load</code> 函数加载。</p><p>Resources 文件夹下的资源，会在游戏构建的时候被打包。</p><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>在 Assets 下新建一个 Plugins 目录，可以用来保存第三方的插件，比如 JSON 相关的 DLL 扩展。</p><p>所有的扩展都不需要手动加载，只要导入到 Assets 目录就会自动加载。</p><h3 id="Scenes"><a href="#Scenes" class="headerlink" title="Scenes"></a>Scenes</h3><p>新建工程 Unity 默认创建的一个目录。<br>其实这个文件夹没有特别的意义，可以随意删除和修改。<br>你也可以按照 Unity 的意思，把游戏的场景全部放在这个目录下面。</p><h3 id="StreamingAssets"><a href="#StreamingAssets" class="headerlink" title="StreamingAssets"></a>StreamingAssets</h3><p>官方文档：<a href="https://docs.unity3d.com/Manual/StreamingAssets.html">https://docs.unity3d.com/Manual/StreamingAssets.html</a></p><p>在 Assets 下创建一个新的文件夹，命名为：StreamingAssets。<br>这个目录在不同的平台是不一样的，而且在安卓系统还有读取权限问题。<br>推荐使用 <code>Application.streamingAssetsPath</code> 来获取该目录。</p><p>它的作用与 Resources 类似，用来保存一些游戏的资源，需要注意的是，这个文件夹下的所有文件在构建发布的时候会原封不动的复制到构建后的游戏中。</p><p>读取 StreamingAsset 目录下的文件，示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 读取StreamingAsset目录下的文件</span><br><span class="line">*&#x2F;</span><br><span class="line">public static string LoadStreamingAsset(string filename, string suffix &#x3D; &quot;json&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    string path &#x3D; Application.streamingAssetsPath + &quot;&#x2F;&quot; + filename + &quot;.&quot; + suffix;</span><br><span class="line">    StreamReader streamReader &#x3D; new StreamReader(path);</span><br><span class="line"></span><br><span class="line">    return streamReader.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在该目录下保存一些配置文件。<br>（这个目录十分重要，下文还会提到）</p><h2 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h2><p>Unity 的资源通常是放在 Resources 或者 StreamingAssets 这两个目录。<br>放在 Resources 下的资源文件，可以直接用 Unity 内置的 API 加载，非常方便。</p><p>对于一般小型的游戏可以直接用这种方法快速构建出游戏 demo。<br>而对于一些大型游戏和对性能要求比较高的，就不推荐用这种方法了。</p><h3 id="粗暴的拖动"><a href="#粗暴的拖动" class="headerlink" title="粗暴的拖动"></a>粗暴的拖动</h3><p>拖动是加载资源的最快方法，毕竟你只要声明一个 <code>public</code> 变量，然后把脚本挂在物体上面，就可以把资源拖到这个 public 的变量上面了。</p><p>这种方法虽然是最简单的，但也是最粗暴的。<br>当一个脚本需要几十个资源的时候……手可能都要软了。</p><p>而且也不美观，一个脚本点开一个……好家伙，一个脚本挂了几十个 public 变量？？？<br>跟你一起开发的小伙伴可能当场就散伙了……</p><p>这种做法不仅粗暴，而且也不规范。<br>万一哪天替换了新的资源，你又得重新挂一遍。</p><p>这里的拖动指的是【动态加载的资源】，而对于一些依赖脚本，使用拖动完全是没问题的，在某种情况甚至可以节约性能的开销。</p><p>假设有一个刚体组件，我们要获取它可以用 <code>gameObject.GetComponent&lt;刚体组件&gt;</code> 来实现。物体不多的时候还好，省去了拖动的烦恼，但如果这样的物体在游戏场景存在很多个，并且还在被源源不断的创造出来，那么性能的开销就会很大。与其这样还不如声明一个 public 的刚体变量，直接把物体的刚体组件拖进去。</p><p>还有一种情况是子物体也挂着某个脚本，而父物体需要用到子物体的脚本，也可以用拖动的方式，不然寻找子物体也是一件费力的事情。</p><p>总之，资源的动态加载不推荐用拖进去的，但如果是脚本依赖某些组件或其他脚本，拖进去也可以，一个简单的操作能节省大量性能开销还是很划算的，根据应用场景选择最佳方案吧。</p><h3 id="Resources-的缺点"><a href="#Resources-的缺点" class="headerlink" title="Resources 的缺点"></a>Resources 的缺点</h3><p><code>Resources.Load</code> 可以直接加载 Resources 目录下的资源，十分方便，小白上手也简单。</p><p>但是查了很多网上的资料，大都不推荐用这种方法。</p><p>因为 Resources 文件夹是可以多个的，因此在构建的时候，Unity 会将它们合并在一起，然后打包到游戏中。</p><p>对于单机游戏，其实差别不大，即使你放到别的地方，文件依然也要打包到游戏里面，这里的打包缺陷其实主要指的是一些手游或者网游。</p><p>单机游戏并不需要【热更新】，资源固定写死对单机游戏来说没有差别。手游和网游就不一样了，通常更新频率非常高，比如王者农药时不时就得更新一下，但是我们并不需要直接到应用商店重新下载，而是直接在启动游戏后就能动态下载更新补丁，这其实就是【热更新】了；单机游戏一般都是直接替换本地文件，比如我们直接下载补丁，然后手动把文件复制粘贴到旧版本的目录，把旧版的文件用新的补丁覆盖掉，实现手动更新。</p><p>Resources 目录下的资源，无法实现动态更新，意味着你在打包时把哪些资源放到这个目录，打包出来的游戏就只能加载这些资源，如果你后期想动态的添加或者修改资源，就得重新构建一次。</p><p>好像有人说 Resources 最大只能保存 2GB 的资源，目前来说我还没完整的发布过游戏，不清楚是否真的。</p><p>因为我做的是 2D 游戏，整体应该不会很大，如果是大型 3D 游戏的话，可能就要考虑一下性能问题了，Resources 目录需要合并成一个，也就是说这样存在读取的时间，如果 Resources 目录下的文件非常多的话，那不用想都知道加载的速度会变得很慢了，但具体慢多少就不清楚了，毕竟……本兔连一个游戏作品都没发布过。</p><h3 id="StreamingAssets-1"><a href="#StreamingAssets-1" class="headerlink" title="StreamingAssets"></a>StreamingAssets</h3><p>除了上面介绍的用 <code>StreamReader</code> 读取文件之外，还有一种特殊的动态加载资源的方法。<br>叫做【分包加载】，见名知意。<br>意思是把资源分成几个不同的包，分别加载。<br>听起来就知道可以解决大文件的读取问题。</p><p>下文介绍。</p><h2 id="AssetBundles-Browser"><a href="#AssetBundles-Browser" class="headerlink" title="AssetBundles-Browser"></a>AssetBundles-Browser</h2><p>AssetBundles 既然叫做【分包】，那自然就涉及到打包的概念了。<br>Unity 没有内置的方法来实现 AssetBundles 包的管理，需要依赖第三方工具包。</p><p>我们需要到 Github 去下载包管理工具【Asset Bundle Browser】。<br>下载地址：<a href="https://github.com/Unity-Technologies/AssetBundles-Browser">https://github.com/Unity-Technologies/AssetBundles-Browser</a></p><p>点击 Tag，找到自己想要的版本下载即可，最新版为 v1.7.0，一般下载这个就行了。</p><p>这里再介绍一下包的安装方法，比如我们要安装的是 1.7.0 最新版的。<br>直接从 Github 下载包文件：<a href="https://github.com/Unity-Technologies/AssetBundles-Browser/archive/refs/tags/1.7.0.zip">https://github.com/Unity-Technologies/AssetBundles-Browser/archive/refs/tags/1.7.0.zip</a></p><p>将下载后的压缩包解压，得到如下文件：</p><p><img src="https://pic.imgdb.cn/item/61c400022ab3f51d91776a01.jpg" alt="AssetBundles-Browser"></p><p>这里我们只需要 Editor 这个文件夹，直接把这个文件夹复制到工程目录下面。</p><p><img src="https://pic.imgdb.cn/item/61c400422ab3f51d91777ca3.jpg" alt="Editor"></p><p>OK，这样就手动导入了这个包。<br>然后点开顶部的菜单，即可发现增加了一个 AssetBundles Browser 选项：</p><p><img src="https://pic.imgdb.cn/item/61c4006d2ab3f51d91778925.jpg" alt="AssetBundles Browser"></p><p>看到这个就代表导入成功了。Editor 文件夹也是 Unity 中比较特殊的一个文件夹，这个文件夹是与编辑器有关的，不过这是属于大神的领域了，本兔连一个游戏都没做出来，就不再仔细研究了。</p><h2 id="AssetBundles"><a href="#AssetBundles" class="headerlink" title="AssetBundles"></a>AssetBundles</h2><p>具体教程可以参考：<a href="https://www.bilibili.com/video/BV1LD4y1m7kF?p=1">https://www.bilibili.com/video/BV1LD4y1m7kF?p=1</a></p><p>这个视频讲的很好，虽然我也是刚学……大概花一个小时就能现学现卖了。<br>也没什么特别的难点，按部就班就行了，这边就不详细介绍了。</p><h2 id="关于-Resources-的补充"><a href="#关于-Resources-的补充" class="headerlink" title="关于 Resources 的补充"></a>关于 Resources 的补充</h2><p>后面又查了一下关于 Resources 加载的资料，发现一个比较详细的，可以参考：<a href="https://answer.uwa4d.com/question/598b1a22fb389f61434c5d4c">https://answer.uwa4d.com/question/598b1a22fb389f61434c5d4c</a></p><p>其中比较关键的一个是：Resources 合并后会生成一个序列化的文件，而在游戏加载的时候会读取这个序列化的文件，如果 Resources 目录下的文件太多，就会导致游戏在首次启动的时候变得很慢。</p><p>序列化的文件我这边大概猜下：应该是把文件路径生成一个随机的 ID，一般是哈希值之类的，根据这个 ID 就可以找到对应的资源文件。这么猜测的理由其实很简单，因为 Resources 既然可以存在多个，并且在游戏构建后会合并成一个，那肯定有存在【重名】并且【同类型】文件的可能性，比如有两张 <code>huotu.jpg</code> 的图片，为了保证加载的资源唯一性，就会用一个随机的 ID 进行区分；人可以存在同名，但身份证号码是唯一的。</p><p>所以还是尽可能不要用 <code>Resources.Load</code> 来加载资源了，即使是单机游戏，除非……你想让玩家打开游戏，黑屏几分钟（真的有这样的游戏）。</p><h2 id="AssetBundles-示例"><a href="#AssetBundles-示例" class="headerlink" title="AssetBundles 示例"></a>AssetBundles 示例</h2><p>学有所用，现学现卖！</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>一直都看到别人用单例模式，其实在 Unity 中好像没什么必要。<br>业界达成了某种共识？好吧，那我也看看。<br>当做熟悉 C# 代码了，然后还顺便学了下泛型相关的知识：</p><p>第一种单例，纯粹的工具类，不挂在 Unity 的 GameObject 上面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&lt;T&gt; where T : new()</span><br><span class="line">&#123;</span><br><span class="line">    static T instance;</span><br><span class="line"></span><br><span class="line">    public static T GetInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            instance &#x3D; new T();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没想到泛型居然可以这么用！？<br>这里有一个小问题，如果要实例化泛型，那么必须要加上：<code>new()</code>，原理是什么我也不懂，总之它能实现就好了。</p><p>C# 是强类型语言，如果不使用泛型，而是直接返回 Singleton，那这样只是得到 Singleton 类，里面除了一个 GetInstance 之外没有任何方法，这样即使能得到单例，但没什么用。</p><p>没什么卵用的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton</span><br><span class="line">&#123;</span><br><span class="line">    static Singleton instance;</span><br><span class="line"></span><br><span class="line">    public static Singleton GetInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            instance &#x3D; new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用单例模式，肯定是要拿到子类，然后用子类的方法，拿到这个 Singleton 类根本没用。<br>因此这里必须要用泛型来延迟设定变量的类型，这样我们才能延迟设定子类。<br>类的名字：<code>Singleton&lt;T&gt;</code> 也就是说这里的 T 是可以在继承的时候才进行设定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class AssetBundleLoader : Singleton&lt;AssetBundleLoader&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 这里写业务逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，GetInstance 方法得到的就是 AssetBundleLoader 这个类了。<br>这种单例模式适用于不需要继承 MonoBehaviour 的工具类。</p><p>MonoBehaviour 是所有需要挂在 GameObject 组件的基类。<br>并且如果一个类继承了 MonoBehaviour，那么它就不能再用 <code>new</code> 来实例化了。</p><p>假如我们要让一个继承 MonoBehaviour 的类，也是一个单例——就是自相矛盾了。<br>但是看了上面视频，居然真的可以实现？！</p><p>下面是第二种单例模式，该模式可以继承 MonoBehaviour：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MonoSingleton&lt;T&gt; : MonoBehaviour where T : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private static T instance;</span><br><span class="line"></span><br><span class="line">    public static T GetInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        if(instance &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            var obj &#x3D; new GameObject();</span><br><span class="line">            obj.name &#x3D; typeof(T).ToString();</span><br><span class="line">            DontDestroyOnLoad(obj);</span><br><span class="line"></span><br><span class="line">            instance &#x3D; obj.AddComponent&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是直接照抄视频里面的，并非我原创。<br>看它具体的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; new GameObject();</span><br><span class="line">obj.name &#x3D; typeof(T).ToString();</span><br><span class="line">DontDestroyOnLoad(obj);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最终得到的是泛型指定的脚本组件</span><br><span class="line">instance &#x3D; obj.AddComponent&lt;T&gt;();</span><br></pre></td></tr></table></figure><p>这里可以发现它是实例化了一个 GameObject（游戏物体）而不是它自身（毕竟继承了 MonoBehaviour 就不能用 new 实例化了）。</p><p><code>DontDestroyOnLoad();</code> 为了不会因场景的销毁而被销毁，也就是常驻内存中，要不然切换个场景，单例就被销毁什么的……那也太奇怪了。</p><p>最后是 <code>obj.AddComponent&lt;T&gt;();</code>，这里才用到泛型，也就是加上泛型指定的类型作为组件。</p><p>那么原理也就清楚了，继承了 MonoBehaviour 的单例模式，并不是真正的实例化得到本身的对象，而是先实例化创建一个 GameObject，然后再给 GameObject 添加上泛型指定的脚本组件（也就是自身这个类），其实是用特殊的方法实现“单例”的效果。</p><p>具体的使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Events;</span><br><span class="line"></span><br><span class="line">public class AssetBundleLoader : MonoSingleton&lt;AssetBundleLoader&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 这里写业务代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就得到一个可以挂在 GameObject 上面的单例组件了。<br>但是为什么要继承 <code>MonoBehaviour</code> 呢？<br>在通常情况下，能不继承这个父类就不要继承，因为这个父类可是存在 Update 这个方法的……<br>让一个工具类继承了 MonoBehaviour，那就会白白损耗一些性能。</p><p>工具类指的是跟游戏对象没有直接关系，而是作为辅助工具使用的。<br>例如：XML 读取类，本地文件读取类。<br>这些工具没必要挂在 GameObject 上面，因此不需要继承 MonoBehaviour。</p><p>之所以要继承 MonoBehaviour，是因为 MonoBehaviour 提供了【协程】的处理。<br>如果不通过继承 MonoBehaviour，实现协程是比较困难的。</p><p>下面来看看我自己写的一个 AssetBundle 加载类。</p><h3 id="AssetBundle-加载"><a href="#AssetBundle-加载" class="headerlink" title="AssetBundle 加载"></a>AssetBundle 加载</h3><p>现学现卖的 AssetBundle 加载方法。<br>同步加载简单测试了下好像没问题，异步加载还没测试过，仅供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Events;</span><br><span class="line"></span><br><span class="line">public class AssetBundleLoader : MonoSingleton&lt;AssetBundleLoader&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 主包</span><br><span class="line">    private AssetBundle mainPackage &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 依赖包配置文件</span><br><span class="line">    private AssetBundleManifest manifest &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 所有包</span><br><span class="line">    private Dictionary&lt;string, AssetBundle&gt; assetBundles &#x3D; new Dictionary&lt;string, AssetBundle&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 资源路径</span><br><span class="line">    private string resPath</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return Application.streamingAssetsPath + &quot;&#x2F;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 主包名，即asset bundle browser 打包出来的名字</span><br><span class="line">    private string mainPackageName</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">#if UNITY_UNITY_EDITOR_WIN</span><br><span class="line">            return &quot;WIN&quot;;</span><br><span class="line">#elif UNITY_EDITOR_OSX</span><br><span class="line">            return &quot;MAC&quot;;</span><br><span class="line">#else</span><br><span class="line">            return &quot;OTHER&quot;;</span><br><span class="line">#endif</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 加载包资源(异步)</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public void LoadResAsync(string packageName, string resName, UnityAction&lt;Object&gt; onCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(LoadResAsyncAction(packageName, resName, onCompleted));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private IEnumerator LoadResAsyncAction(string packageName, string resName, UnityAction&lt;Object&gt; onCompleted)</span><br><span class="line">    &#123;</span><br><span class="line">        InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载目标包</span><br><span class="line">        if (assetBundles.ContainsKey(packageName) &#x3D;&#x3D; false)</span><br><span class="line">        &#123;</span><br><span class="line">            var target &#x3D; AssetBundle.LoadFromFileAsync(resPath + packageName);</span><br><span class="line">            yield return target;</span><br><span class="line"></span><br><span class="line">            assetBundles.Add(packageName, target.assetBundle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var asset &#x3D; assetBundles[packageName].LoadAssetAsync&lt;Object&gt;(resName);</span><br><span class="line">        yield return asset;</span><br><span class="line"></span><br><span class="line">        onCompleted(asset.asset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 泛型返回值加载资源（同步）</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public T LoadRes&lt;T&gt;(string packageName, string resName) where T : Object</span><br><span class="line">    &#123;</span><br><span class="line">        LoadTargetPackage(packageName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载资源</span><br><span class="line">        return assetBundles[packageName].LoadAsset&lt;T&gt;(resName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载包资源(同步)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object LoadRes(string packageName, string resName)</span><br><span class="line">    &#123;</span><br><span class="line">        LoadTargetPackage(packageName);</span><br><span class="line"></span><br><span class="line">        return assetBundles[packageName].LoadAsset(resName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载目标包</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void LoadTargetPackage(string packageName)</span><br><span class="line">    &#123;</span><br><span class="line">        InitLoadAssets(packageName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载目标包</span><br><span class="line">        if (assetBundles.ContainsKey(packageName) &#x3D;&#x3D; false)</span><br><span class="line">        &#123;</span><br><span class="line">            var target &#x3D; AssetBundle.LoadFromFile(resPath + packageName);</span><br><span class="line">            assetBundles.Add(packageName, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载主包和配置，以及目标包的依赖包</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void InitLoadAssets(string packageName)</span><br><span class="line">    &#123;</span><br><span class="line">        string mainPath &#x3D; resPath + mainPackageName;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载主包及配置</span><br><span class="line">        if (mainPackage &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(&quot;主包路径：&quot; + mainPath);</span><br><span class="line"></span><br><span class="line">            mainPackage &#x3D; AssetBundle.LoadFromFile(mainPath);</span><br><span class="line">            manifest &#x3D; mainPackage.LoadAsset&lt;AssetBundleManifest&gt;(&quot;AssetBundleManifest&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 加载依赖包</span><br><span class="line">        string[] dependencies &#x3D; manifest.GetAllDependencies(packageName);</span><br><span class="line">        foreach (var item in dependencies)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!assetBundles.ContainsKey(item))</span><br><span class="line">            &#123;</span><br><span class="line">                var bundle &#x3D; AssetBundle.LoadFromFile(resPath + item);</span><br><span class="line">                assetBundles.Add(item, bundle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Unload(string packageName, bool unloadAllObjects &#x3D; false)</span><br><span class="line">    &#123;</span><br><span class="line">        if (assetBundles.ContainsKey(packageName))</span><br><span class="line">        &#123;</span><br><span class="line">            assetBundles[packageName].Unload(unloadAllObjects);</span><br><span class="line">            assetBundles.Remove(packageName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void ClearAll(bool unloadAllObjects &#x3D; false)</span><br><span class="line">    &#123;</span><br><span class="line">        AssetBundle.UnloadAllAssetBundles(unloadAllObjects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步加载其实不算是完全的异步，这里为了简化直接封装了 <code>InitLoadAssets</code>，在这个方法里面，加载主包和依赖包是同步的，其实也可以用 yield 改写，使它完全变成协程化的处理，不过缺点是会存在冗余的代码。</p><blockquote><p> UnityAction 原来也可以与 delegate 一样使用，原本我一直都是用 System.Action 当做回调方法的类型使用的，又学到了一个小知识。</p></blockquote><p>其实这里还可以结合我前篇写的：<a href="https://huotuyouxi.com/2021/12/22/unity-tips-012/">构建舒适的开发环境</a><br>AssetBundle 需要配置资源所属的包，而且还需要在 Browser 面板上面点 Build（构建）。<br>对于开发环境来说是比较麻烦的，毕竟我们总不能每次导入一个新资源，就来一遍上面的操作吧？</p><p>这里可以根据【构建舒适的开发环境】中写的方法进行一些改动。<br>当游戏的环境处于【编辑器环境】下，就不使用 AssetBundle 的加载方式，而是直接 Resources 或者其他方法直接读取本地资源，而在【非编辑器环境】下，就按照正常的 AssetBundle 来加载，并且可以结合 Git 的 <code>.gitignore</code> 来忽略掉调试用的资源，最后，在游戏制作完成，只需要在 Asset Bundle Browser 构建一次，也就是说资源仅需要打包一次就行了，开发过程即使添加了一些新资源，整个过程也是无感知的，这样就可以实现【无痛】开发了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>游戏的资源管理是一个比较难的地方，因为资源都是加载进内存的，如果没有释放就会一直占据内存，即【内存泄露】，如果泄露的内存越来越多，那么手机游戏就会出现闪退的情况，电脑也同样，只不过手机内存要小很多，比较容易被注意到。</p><p>总之，我决定把资源的加载改成 AssetBundles 了。<br>学到新的东西，手痒想试试(～￣▽￣)～</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】构建舒适的开发环境</title>
      <link href="/2021/12/22/unity-tips-012/"/>
      <url>/2021/12/22/unity-tips-012/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Unity 在不同的平台上面会有一些不同的地方，比如文件夹的位置或者权限；除此之外，对于一些资源文件，在调试过程可能需要反复替换，例如图集，即使修改其中一张图片也得重新打包一次，这样就十分麻烦了，如果能在调试过程直接使用散图，那就不需要重新打包了。</p><p>构建一个舒适的开发环境十分重要，可以大大的减轻开发者的心智负担。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>一般来说，项目可分为：线上环境（product）、预发布（Pre-release）环境和调试环境（develop）。</p><ul><li>线上环境：即正式发布后的环境，用户实际体验的程序</li><li>预发布环境：即在内部测试的环境，用于在上线前进行的测试，如果没有发现 BUG，就可以直接发布到线上版本了</li><li>调试环境：即程序员开发过程中使用的环境</li></ul><p>通常的开发框架会提供一个全局变量以便开发人员判断所处的环境，在 Unity 中，它只是一个工具，并没有线上环境的说法，至于当前的环境是什么，需要我们自行定义。</p><h2 id="预编译指令"><a href="#预编译指令" class="headerlink" title="预编译指令"></a>预编译指令</h2><p>预编译指令是 Unity 内置的一些常量，可以用来判断某些特殊的环境。</p><p>Unity 的预编译指令：<a href="https://docs.unity3d.com/cn/2019.4/Manual/PlatformDependentCompilation.html">https://docs.unity3d.com/cn/2019.4/Manual/PlatformDependentCompilation.html</a><br>（所有的指令都可以在这个手册查询）</p><p>预编译指令的使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Test : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">        Debug.Log(&quot;Unity Editor&quot;);</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预编译指令与通常的脚本代码不一样，写起来十分之丑，没有对齐，语法也与代码不一样。<br>上述代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if UNITY_EDITOR</span><br><span class="line">        Debug.Log(&quot;Unity Editor&quot;);</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><code>UNITY_EDITOR</code> 是 Unity 预定义好的一个常量，它用来判断当前的环境是否是在 Unity 的编辑器中，编辑器环境就是你用 Unity 打开游戏项目时的环境。</p><p>除了判断是否在编辑器环境，还可以判断当前的系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Test : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">#if UNITY_EDITOR_WIN</span><br><span class="line">        Debug.Log(&quot;Window&quot;);</span><br><span class="line">#elif UNITY_EDITOR_OSX</span><br><span class="line">        Debug.Log(&quot;Mac&quot;);</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你的电脑系统是 Window 时，就会输出 Window；如果你用的是苹果电脑（Mac），那么就会输出 Mac。</p><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>通过上述的示例代码，我们可以通过预编译指令区分不同的开发环境和运行环境。<br>为了让我们的开发环境变得更加舒适，可以参考下面的方法。</p><h3 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h3><p>游戏开发中经常要用到【图集】，所谓图集就是将许多张图片合并成一张，这样可以提高处理效率，减少 DrawCall。对游戏的优化来说十分重要，但是对开发来说就十分头疼了。</p><p>假如我们要修改其中一张图片，整个图集就得重新打包，这是十分麻烦的，为了解决这个问题，我们可以区分【编辑器环境】与【游戏运行环境】，然后根据不同的环以不同的方式加载资源，下面是伪代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Sprite[] LoadSprites(string path)</span><br><span class="line">&#123;</span><br><span class="line">#if UNITY_EDITOR</span><br><span class="line">        &#x2F;&#x2F; ...加载散图</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F; ...加载图集</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们调试的时候就可以直接替换掉修改的图片，而不需要重新打包成图集了。</p><h3 id="显示不同的-UI"><a href="#显示不同的-UI" class="headerlink" title="显示不同的 UI"></a>显示不同的 UI</h3><p>假设我们的游戏是跨平台的，支持 PC 端和移动端。<br>在 PC 端可以用键盘控制角色的移动，但是在移动端就不行了，而是要创建一个虚拟摇杆。</p><p>伪代码示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if UNITY_EDITOR_WIN</span><br><span class="line">    &#x2F;&#x2F; ... 键盘控制</span><br><span class="line">#elif UNITY_IOS</span><br><span class="line">    &#x2F;&#x2F; ... 虚拟摇杆</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>通过判断当前的环境来实现对应的控制方法。<br>这样我们就不需要给不同平台打包不同的版本，只需要直接打包一份即可实现自适应。</p><h3 id="环境兼容问题"><a href="#环境兼容问题" class="headerlink" title="环境兼容问题"></a>环境兼容问题</h3><p>Unity 的一些文件夹，在不同的平台权限是不一样的。<br>例如：<code>Application.streamingPath</code> 在安卓下是读取不到的，对于不同平台的一些差异，也可以通过预编译指令来特殊处理。</p><h3 id="方便调试"><a href="#方便调试" class="headerlink" title="方便调试"></a>方便调试</h3><p>作为开发者，我们肯定不会像玩家那样正常打怪升级。<br>而是需要内置一个【作弊器】来直接调试游戏的参数，比如打开什么开关或者直接升到 99 级。<br>作弊器不能让玩家直接打开，仅能放在编辑器环境下面调用。</p><p>对于这些既不想在游戏发布时删掉，又不想让玩家直接看到的功能，也可以用预编译指令来处理。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>除了上面介绍的外，预编译指令可以实现许多有趣的东西，这就要看自己的脑洞有多大了！<br>总之，通过预编译指令搭建一个舒舒服服的开发环境吧~</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】解决正版 Unity 许可证激活后依然打开不了项目</title>
      <link href="/2021/12/22/unity-tips-011/"/>
      <url>/2021/12/22/unity-tips-011/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然 Unity  是付费软件，但是对个人来说基本可以免费使用。<br>所以一般情况下应该没必要去下载破解版，但是 Unity 自身的反破解程序（即许可证）却会出现一些奇奇怪怪的问题。</p><h2 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h2><p>昨天晚上还撸的好好的，今天早上就打不开项目了。<br>报错信息为：<code>License Error</code>，意思是说许可证错误。<br>然后返回 Unity Hub 重新激活许可证，不管是【手动激活】还是【激活新许可证】，都没用。</p><h2 id="找出问题"><a href="#找出问题" class="headerlink" title="找出问题"></a>找出问题</h2><p>因为装的是正版的 Unity，也没有装过破解版的，所以问题并不在于破解版的关系，而是 Unity 自身哪个地方出问题了。第一个想到的就是——卸载重装！</p><blockquote><p>万能的方法：电脑出问题就重启，大屁股电视机没信号就拍拍屁股，软件出问题就卸载重装！</p></blockquote><p>不是直接卸载 Unity Hub，而是卸载 Unity。</p><p>中间我尝试了一下用旧版的 Unity（2021.1.9c1f1）打开以前的老项目，发现能正常打开。因此我推断可能是 Unity 版本的问题，然后把现在用的 Unity（2021.2.5c1f1）卸载了，安装最新的 2021.2.7c1f1 版本，尝试打开项目，结果还是报错了。<br>（这就十分奇怪了……怎么还跟项目有关系呢？既然许可证有问题，那为什么还能用老版本打开旧项目？）</p><p>再进一步的测试，直接用 Unity 打开项目，发现竟然成功了！<br>也就是说问题出在 Unity Hub 上面，绕开 Unity Hub 就不会有许可证问题。</p><p>但咱用的可是正(mian)版(fei) Unity 呀！怎么搞得跟破解版一样？<br>而且 Unity Hub 可以很方便的管理项目，不能放弃 Hub。</p><p>于是我就把 Unity Hub 卸载重装 V3Beta 版本，结果打开居然直接黑屏……<br>然后换回原来的 v2.5 版本的 Hub，也是打不开项目。</p><h2 id="原因竟然是……"><a href="#原因竟然是……" class="headerlink" title="原因竟然是……"></a>原因竟然是……</h2><p>通过上面的尝试，已经发现了是 Hub 的问题，卸载重装也没办法解决。<br>那肯定不是文件损坏或者缓存之类的问题了。</p><p>要怎么办呢？我突然想到……<br>会不会是因为 IP 的变化导致的？<br>因为要翻墙谷歌搜东西，所以我平时都是开着 VPN 的。</p><p>换句话说，可能每次启动 Unity Hub 打开现在正在做的游戏，然后它就会把常用的 IP 记录下来，做成一张表，当你下次访问的时候，Unity Hub 就会看看你现在的 IP 是不是在这张表里，如果不是，那就属于异地登录了（意味着你的许可证在别的地方被人用了）Unity 是付费软件，即使你花钱买了正版，但是它还是有登录机子数量的限制，而不是说你花钱买了正版，就能把许可证发给整个组织的人用，这样它不是亏死了……</p><p>查了下相关的资料，好像是许可证确实有 IP 的限制，更加证实了我的猜想。</p><p>综上所述，原因很可能是因为我平时开着 VPN，结果常用 IP 被记录成代理 IP 的地址了。<br>而恰巧今天没开 VPN，所以才导致了我用的是真实 IP 访问，结果反而被 Unity Hub 当做异地登录限制了。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>直接把 VPN 开启为【全局模式】，再打开 Unity Hub 启动项目，果然成功了。</p><h2 id="案件整理"><a href="#案件整理" class="headerlink" title="案件整理"></a>案件整理</h2><p>Unity Hub 打开项目提示“License Error”（许可证错误）是因为 Unity Hub 作为商业软件，本身有一套防破解机制，需要定期联网激活，而在激活的时候，Unity Hub 也会将你当前的本机 IP 记录下来，保存在常用登录 IP 中，作为商业软件，由于其具有利益性，因此许可证的使用是有限制的，哪怕是个人的免费版，也将被限制在为数不多的几个 IP 地址中使用，而这种限制，很可能还与 Unity 的版本有关。</p><p>当然，以上也仅仅只是推测。<br>如果因为 IP 的变动就不能正常激活，那如果我们带着笔记本去图书馆之类的地方，IP 也会发生变化，如果限制条件过于严格，那用户的体验也会直线下降……中国虽然在互联网不发达的时候盗版平常，但现在的版权意识已经提高很多了，如果能出一个个人学习版买断制，那相信也会有很多人愿意花钱入正。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】对象即是“引用”</title>
      <link href="/2021/12/21/unity-tips-010/"/>
      <url>/2021/12/21/unity-tips-010/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一些开发语言中，<strong>对象即是引用</strong>。<br>例如 C# 和 JavaScript 都是这样的，而从其他语言转过来的，很容易忽视这个小知识点。</p><h2 id="奇怪的“BUG”"><a href="#奇怪的“BUG”" class="headerlink" title="奇怪的“BUG”"></a>奇怪的“BUG”</h2><p>例如有一个 List 类型的变量，先给它初始值。<br>接着我们再创建一个新的变量，让它等于刚才创建的 List。<br>再把新创建的变量移除掉 a 元素，输出剩下的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var items &#x3D; new List&lt;string&gt; &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125;;</span><br><span class="line">var test &#x3D; items;</span><br><span class="line">test.Remove(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">foreach(var item in test)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果将会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>结果应该没有任何异议，我们给 <code>test</code> 赋值为 <code>items</code>，然后再把 <code>test</code> 的 a 移除，结果不就剩下 b 和 c 了吗？<br>但……如果我们输出的是 <code>items</code> 呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var items &#x3D; new List&lt;string&gt; &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125;;</span><br><span class="line">var test &#x3D; items;</span><br><span class="line">test.Remove(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里输出的是 items，而不是 test</span><br><span class="line">foreach (var item in items)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋看之下，你修改 <code>test</code> 变量，关我 <code>items</code> 什么事？<br>如果你以为输出的结果是：a、b 和 c，那就错了。</p><p><strong>因为在 C# 中，对象即引用。</strong><br>当执行了语句 <code>var test = items;</code> 意味着 test 变量得到的是 <code>items</code> 的引用。<br>而修改了 test 等于修改了 items，最终输出的还是：b 和 c。</p><p>大部分的开发语言可能都是这样的，但可怜的 PHP 并不是……（踩坑了）</p><h2 id="基础类型不是引用"><a href="#基础类型不是引用" class="headerlink" title="基础类型不是引用"></a>基础类型不是引用</h2><p>需要注意只有对象类型才是引用，变量的基础类型都不属于引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 1;</span><br><span class="line">int b &#x3D; a;</span><br><span class="line">b++;</span><br><span class="line"></span><br><span class="line">Debug.Log(b);</span><br></pre></td></tr></table></figure><p>int 是基础类型，因此结果输出：2<br>所有基础类型都属于【值类型】，值类型的数据是可以直接使用等号来实现拷贝的。</p><h2 id="不想被引用！"><a href="#不想被引用！" class="headerlink" title="不想被引用！"></a>不想被引用！</h2><p>既然我们都创建一个新变量来保存对象了，为什么还要被当做引用呢？<br>这样我们创建一个新变量有什么意义？<br>其实这种设定超级麻烦……每次赋值对象类型都得特殊处理。</p><h3 id="方案一：重新赋值"><a href="#方案一：重新赋值" class="headerlink" title="方案一：重新赋值"></a>方案一：重新赋值</h3><p>这种方法比较无脑，就是直接创建一个空的对象，然后给空对象添加值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var items &#x3D; new List&lt;string&gt; &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125;;</span><br><span class="line">var test &#x3D; new List&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">foreach (var item in items)</span><br><span class="line">&#123;</span><br><span class="line">    test.Add(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.Remove(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">foreach (var item in items)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二：转圈圈"><a href="#方案二：转圈圈" class="headerlink" title="方案二：转圈圈"></a>方案二：转圈圈</h3><p>以 JavaScript 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; &#123;</span><br><span class="line">        a: &quot;a&quot;,</span><br><span class="line">        b: &quot;b&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">let test &#x3D;data;</span><br><span class="line">test.a &#x3D;&quot;bbb&quot;;</span><br><span class="line"></span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>输出结果：<code>&#123;a: &#39;bbb&#39;, b: &#39;b&#39;&#125;</code>。<br>因为在 JavaScript 里面对象也同样属于引用。</p><p>如果不希望得到的是引用，可以这样……<br>先把 JSON 对象转化成 JSON 字符串，再把 JSON 字符串转回 JSON 对象。</p><p>如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; &#123;</span><br><span class="line">        a: &quot;a&quot;,</span><br><span class="line">        b: &quot;b&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将json对象转化为字符串，再转化为json对象</span><br><span class="line">let test &#x3D; JSON.parse(JSON.stringify(data));</span><br><span class="line"></span><br><span class="line">test.a &#x3D;&quot;bbb&quot;;</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>因为 test 得到的是新实例化出来的 JSON 对象，所以不是 data 的引用，也就不会改变它的值了。</p><h3 id="方案三：拷贝对象"><a href="#方案三：拷贝对象" class="headerlink" title="方案三：拷贝对象"></a>方案三：拷贝对象</h3><p><strong>如果使用方案一和方案二，不出意外你已经被扫地出门了。</strong></p><p>接下来才是真正的解决方法。<br>在 JavaScript 中可以直接使用 <code>Object.assign()</code> 关键词来拷贝一个对象。<br>当然，并不是直接赋值就行了，下面是<strong>错误的</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; &#123;</span><br><span class="line">            a: &quot;a&quot;,</span><br><span class="line">            b: &quot;b&quot;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 错误的示例！</span><br><span class="line">let test &#x3D; Object.assign(data);</span><br><span class="line"></span><br><span class="line">test.a &#x3D;&quot;bbb&quot;;</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>如果直接赋值一个参数，这样得到的 <code>test</code> 变量依然是 <code>data</code> 的引用。<br><strong>正确</strong> 的使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; &#123;</span><br><span class="line">        a: &quot;a&quot;,</span><br><span class="line">        b: &quot;b&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 正确的！需要传一个空对象</span><br><span class="line">let test &#x3D; Object.assign(&#123;&#125;, data);</span><br><span class="line"></span><br><span class="line">test.a &#x3D;&quot;bbb&quot;;</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>如此一来 <code>test</code> 变量就不再是 <code>data</code> 的引用了。<br><code>Object.assign(target, source)</code> 方法用于将所有可枚举属性的值从一个或多个源对象 source 复制到目标对象，如果存在相同的键，则 source 的键会覆盖掉 target 的键，所以当你把第一个参数写成要拷贝对象，其实还是得到了引用，这里写了个 <code>&#123;&#125;</code> 空对象，这是一个新建出来的对象，因此不再是原来的引用了，两个变量的位置不能搞混了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; &#123;</span><br><span class="line">        a: &quot;a&quot;,</span><br><span class="line">        b: &quot;b&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">let test &#x3D; Object.assign(&#123;a:&quot;fff&quot;, c:&quot;ccc&quot;&#125;, data);</span><br><span class="line">console.log(test.a, test.c);</span><br></pre></td></tr></table></figure><p>上面的例子中，data 对象中有 a，因此会覆盖左侧的 <code>a:&quot;fff&quot;</code>，最终得到的 a 为 <code>&quot;a&quot;</code>，而 c 是 data 没有的，则原样保留，最终输出结果为：<code>a ccc</code>。</p><p>详细的用法可参考手册：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></p><h3 id="方案四：我也要拷贝！"><a href="#方案四：我也要拷贝！" class="headerlink" title="方案四：我也要拷贝！"></a>方案四：我也要拷贝！</h3><p>那……C# 能这样直接拷贝吗？<br>答案是……不行！<br>并没有提供一个方法可以直接拷贝对象。</p><p>具体的操作如下，先定义一个 <code>TestData</code> 类用来测试，它需要继承 <code>ICloneable</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">public class TestData : ICloneable</span><br><span class="line">&#123;</span><br><span class="line">    public string a, b, c;</span><br><span class="line"></span><br><span class="line">    public object Clone()</span><br><span class="line">    &#123;</span><br><span class="line">        return MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好了，这样它就是一个可以被拷贝的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> var data &#x3D; new TestData</span><br><span class="line">    &#123;</span><br><span class="line">        a &#x3D; &quot;aaa&quot;,</span><br><span class="line">        b &#x3D; &quot;bbb&quot;,</span><br><span class="line">        c &#x3D; &quot;ccc&quot;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">var test &#x3D; data.Clone() as TestData;</span><br><span class="line">test.a &#x3D; &quot;fff&quot;;</span><br><span class="line"></span><br><span class="line">Debug.Log(data.a);</span><br></pre></td></tr></table></figure><p>通过上述的操作，终于不再是引用了！<br>在调用 <code>Clone</code> 方法后，还需要将变量转化为 <code>TestData</code> 类型，这样才算完成。</p><p>好麻烦啊 （╯‵□′）╯︵┴─┴<br>不过，回到开头 List 类型的变量，则可以使用比较简单的方式直接拷贝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;string&gt; data &#x3D; new List&lt;string&gt; &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125;;</span><br><span class="line">var test &#x3D; new List&lt;string&gt;(data);</span><br><span class="line"></span><br><span class="line">test.Remove(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">foreach (var item in data)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;data&#x3D;&quot; + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (var item in test)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;test&#x3D;&quot; + item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于简单的值类型 List，通过 <code>new</code> 一个新的对象，得到的就不再是引用了。<br>不过，如果 List 是引用类型的，例如上面示例的 <code>TestData</code> 类；<br><code>List&lt;TestData&gt;</code> 用这种方法复制出来的却依然是引用。<br>对于这种【引用类型】的数据就要用到上面继承 <code>ICloneable</code> 的方法来解决了。</p><p>总之，使用对象的时候还是得小心一点，不然很容易出现“离奇的 BUG”。</p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>参考文章：<a href="https://www.cnblogs.com/dotnet261010/p/12329220.html">https://www.cnblogs.com/dotnet261010/p/12329220.html</a><br>有兴趣的自行了解吧……</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>到底是谁想出来的……为什么对象要是引用啊？<br>此时应当高呼：<strong>壮哉我大 PHP 神教！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】上下文？从“人被杀，就会死”说起……</title>
      <link href="/2021/12/20/unity-tips-009/"/>
      <url>/2021/12/20/unity-tips-009/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【上下文】这个词困扰了我很久，最早听说这个词是在两年前我在某公司上班，然后当时会给新入职的员工配置一名导师，某天导师找我谈话跟我说要去了解一下“上下文”，当时我第一次听说，有点懵逼，然后随口应承，后面去查了一下愣是没看懂，最后就不了了之了。</p><p>其实这两年我偶尔看到这个词也会再去翻查一下到底是什么意思，但看了很多文章依旧没弄懂。<br>然后今天在设计游戏的战斗系统时，突然灵机一动——顿悟了！</p><h2 id="什么是上下文？"><a href="#什么是上下文？" class="headerlink" title="什么是上下文？"></a>什么是上下文？</h2><p>拿一个二次元经典台词来表示就是：<strong>人被杀，就会死。</strong><br>这特喵不是废话吗？<br>但其实如果你了解了这句话的出处就不会这么以为了。</p><blockquote><p>这句话来自《圣杯战争》，里面有一个设定是亚瑟王 Saber 的武器 EX 咖喱棒的剑鞘有恢复能力，无论受到什么伤都可以慢慢治愈，而这个剑鞘融入了男主角的身体里，导致男主角被杀了之后复活了，男主不想依靠这种力量，把剑鞘归还给亚瑟王，然后才说出这样的话。</p></blockquote><p>萌娘百科里面有更详细的解释，有兴趣可以去看看：<a href="https://zh.moegirl.org.cn/index.php?title=%E4%BA%BA%E8%A2%AB%E6%9D%80%E5%B0%B1%E4%BC%9A%E6%AD%BB&variant=zh-hans&mobileaction=toggle_view_desktop">人被杀，就会死</a></p><p>如果你没看过这部动画而是听到这样的话会觉得很莫名其妙。<br>上下文如同字面意思一样，如果按照字面意思理解比较简单一点。</p><p>假如有一篇文章是这样的：</p><blockquote><p>花花哭了。</p></blockquote><p>这句话你能看得出什么东西吗？<br>看得出才有鬼！</p><p>花花是什么？一朵花？还是什么狸花猫、三花猫之类的动物？<br>很明显，单看这句话，你得不到任何有用的结论。</p><p>这就是没头没尾的一段话。<br>但如果加入一些补充性的描述呢？</p><blockquote><p>小虎抢了花花的零食，于是花花哭了。</p></blockquote><p>好了，现在加上了一个前置语句“小虎抢了花花的零食”，这样有了前因后果，我们就能推测出小虎和花花两个是人的名字（从零食这个关键词推测出来的），而因为小虎抢了花花的零食才把花花弄哭了，花花并不是无理由就哭了。</p><p>到这里，【上下文】已经有一点概念了，其实就是文章里面的【前后文】。</p><h2 id="前后文的作用"><a href="#前后文的作用" class="headerlink" title="前后文的作用"></a>前后文的作用</h2><p>上面的例子中，单纯的一句话如果不根据前后文语境推敲，你不能知道这句话的真实含义。<br>这就是前后文的作用，大概就是：限制和约束的用途。</p><p>一句话可能会产生很多歧义，但如果结合前后文来阅读，那这句话的含义就会变得清晰。</p><p>例如高考语文最喜欢考“请简单叙述：下雨了，在本文中的用途”。<br>其实下雨了就是因为那天天气不好，纯粹的事实性描述而已，可能只是作者如实记下来而已，并没有其他原因，难不成没下雨，还要编一个下雨天出来？然后高考出卷的老家伙们，怎么还特意出这种题目？</p><p>其实这样出题的目的在于【结合语境】。<br>中华文明几千年传承下来的【文字】，根据不同的语境可以产生无数种含义。</p><blockquote><p>比如：亲妹妹在正常人眼里就是代表有血缘关系比自己晚出生的女性，但在 LSP 眼里会产生不可描述的意思。</p></blockquote><p>假设有一段文字：</p><blockquote><p>花花的父母早逝，是爷爷把她拉扯大的，每当花花在外面受委屈了就扑到爷爷的怀里痛哭一场，爷爷会轻轻的抚摸她的头安慰她。可是有一天，爷爷染上了风寒，虽然找了城里最好的医生，但爷爷年弱体迈的身体终究没有挺过去，在一个夜晚与花花告别后便闭上了眼睛。花花啜泣不止，跑到屋子外面大哭了起来。<strong>外面的风很大，云突然聚拢了起来，黑压压的一片，打雷了，下雨了。</strong>屋子里面，爷爷静静的躺着；屋子外面，雨声、雷声，还有花花的哭声。</p></blockquote><p>我们把其中的天气描写提取出来：</p><blockquote><p>外面的风很大，云突然聚拢了起来，黑压压的一片，打雷了，下雨了。</p></blockquote><p>然后给这段句子续上前后文：</p><blockquote><p>“今天天气预报会下雨，妈妈要出门了，你记得要把阳台的衣服收起来。”花花躺在床上懒洋洋的回了一句“知道啦”，然后继续在床上玩手机，随后听到妈妈出门的声音。妈妈一出门，花花马上就变得精神了！把藏在枕头下面的小霸王游戏机拿了出来，不一会就沉浸在游戏里了，到了中午时候，<strong>外面的风很大，云突然聚拢了起来，黑压压的一片，打雷了，下雨了。</strong>但此时此刻花花还沉浸在游戏里，晾在阳台的衣服被打湿了……</p></blockquote><p>可以发现——这两段文字一模一样，但是放到不同的前后文意思全然不同！<br>这就是【语境】的作用，可以让一段完全相同的话产生不同的意思。</p><blockquote><p>在程序中，相同的代码如果在不同的【语境】就会产生不同的执行结果，而为了保证执行结果的唯一性，就必须要保证前后文一致，这在后面会更详细的说明，先继续往下看吧。</p></blockquote><h2 id="程序中的“语境”"><a href="#程序中的“语境”" class="headerlink" title="程序中的“语境”"></a>程序中的“语境”</h2><p>不仅是文章，在程序里面也是有【语境】的。<br>在程序中的【语境】用【状态】来描述比较准确。<br>我们都知道代码是由上往下执行的，但这种方式是同步执行。<br>现代的开发都支持【异步】，异步意味着可以并行操作，例如多线程。<br>当开启了多线程之后，其中一部分的程序就可以分配到另一条线程里面去执行了。<br>不同线程之间，程序执行的结果肯定不一样，线程之间是隔离状态的。<br>那这样一个异步的程序，就可能因为所处的线程不一样导致执行结果与预期的不一样。</p><p>假如有一个变量 a=10，在同一个线程里，程序拿到这个变量肯定还是 10。<br>但如果你想一下，如果这个变量在别的线程里被修改了呢？<br>为什么我们的代码可以由上往下执行，而且变量还能保持一致性？</p><p>这是因为它们是在同一个线程执行的，当然保持一样了。<br>假设有两个线程 A 和 B，在 A 线程里把变量 a 改成 11，在 B 线程里输出 a 变量，结果等于……？<br>答案肯定是 10，因为线程之间是隔离的，总不可能你改了变量的值，还影响到别的程序吧？</p><p>如果不能理解的话，那可以想一想【静态变量】。<br>静态变量是在程序运行的时候加载到内存的，一个网页或者 APP 有很多人同时访问，为什么你定义了一个静态变量，然后其中一个用户改了静态变量的值，其他用户取到的结果却是正常的？</p><p>这是因为线程之间是隔离的，以 PHP 为例，PHP-FPM 会在用户访问的时候开启一个独立的线程用来处理程序，而不是给大家共用，你在这个线程里修改了静态变量的值，那只会在这个线程里改变，但是其他线程的没影响啊。所以程序才能有唯一的执行结果，如果程序的执行没有隔离开来，每个人都改一下变量，程序还要怎么保证有唯一的输出结果呢？</p><p>好了，现在知道了程序中也存在【语境】的概念，并且【异步】执行的代码会导致执行环境发生改变，如果我们想要让异步执行的代码保持同样的语境呢？这就要用到上下文的概念了，例如协程的操作存在【协程上下文】，只要我们在代码异步执行之前，保存好当前环境的【语境】，然后告诉它就行了。</p><blockquote><p>用到【上下文】的场景不一定是在异步开发中，而是任何需要用到【当前执行状态】的地方。</p></blockquote><h2 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h2><p>好了，知道【上下文】等同于文章的【语境】作用，那么就来看一下游戏中的上下文。</p><p>在游戏中，【进入战斗场景】有多种情况：<br>①在城镇地图碰到敌人进入战斗<br>②在大地图碰到敌人进入战斗<br>③在副本地图碰到敌人进入战斗<br>这三种情况，加载的场景是不一样的。<br>如果是在城镇地图进入战斗，则需要暂停掉当前场景；<br>如果是在大地图碰到敌人，则需要暂停掉大地图场景；<br>如果是在副本碰到敌人，则需要将副本的场景暂停掉。</p><blockquote><p>注意：这里的场景都不是同一个类，不能直接写一个 Map 来继承，比如大地图上面是 RPG Maker 那种玩家控制一个能够四方向移动的小人，然后踩地雷进入战斗；而城镇场景却只是一张贴图加一些 UI，即手游的主城，类似手游中世界 Boss 直接点击 UI 就能战斗；但是副本场景是像大富翁那样投骰子移动的，踩到怪物格子就进入战斗。总之，这三个场景是完全不同的类，无法用通用的 Map 实现。</p></blockquote><p>如果要写一个方法来实现，就要类似如下这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此处省略一些无关参数，如敌人参数等等</span><br><span class="line">SceneLoader.LoadBattleScene(System.Action initCallback, System.Action endCallback);</span><br></pre></td></tr></table></figure><p>initCallback 用来处理暂停当前场景；<br>endCallback 用来处理当战斗结束时，解除当前场景的暂停状态。</p><p>如此一来每个【进入战斗】的处理都要写一个回调，十分麻烦。<br>但如果是【上下文】的话，只需要传入一个当前上下文参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Context是自己定义的类型</span><br><span class="line">SceneLoader.LoadBattleScene(Context context);</span><br></pre></td></tr></table></figure><p>然后直接在 LoadBattleScene 方法里面处理不同上下文的战斗开始、战斗结束回调。<br>Context 用于保存玩家所在的场景信息，这样就可以直接省略掉两个回调参数。</p><h2 id="只是简化参数？"><a href="#只是简化参数？" class="headerlink" title="只是简化参数？"></a>只是简化参数？</h2><p>当然我们不只是为了简化参数才用上下文的。<br>而是上下文可以拿到当前环境中的其他参数。</p><p>上面的例子，一共存在三个【环境】，分别是：①城镇，②大地图，③副本。</p><p>而这些环境里面有很多参数，比如城镇里有武器店老板（NPC），而大地图肯定没有 NPC，而是一些城池之类的可以让玩家进去的地点，而副本中会有宝箱之类的东西，这些东西都是可以从上下文中拿到的。</p><p>上下文保存的是程序的【执行状态】，打个比方就是游戏中的存档和读档，我在家玩游戏的时候，存个 Steam 云档（保存上下文），在上班摸鱼的时候登录 Steam  账号，直接读取云档，然后就可以从昨天在家玩的进度继续游戏了。</p><h2 id="下、下文呢？"><a href="#下、下文呢？" class="headerlink" title="下、下文呢？"></a>下、下文呢？</h2><p>上面一直都在说【上下文】，可文章只提到了“上文”即来源环境，但“下文”呢？<br>答案是：<strong>没有下文</strong>。<br>因为下文本身也可以当做“上文”。<br>其实下文一般都是执行完结果了，别的地方根本用不到，如果要用到就再当做“上文”就行了。<br>上下文连着说只是为了比较顺口。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>【上下文】其实就是【环境】的意思，程序运行到此处的环境是什么，就叫做上下文。<br>也可以叫做【执行状态】，即把程序当前的运行状态保存下来，拿到别的地方（下文）用。</p><p>回到最初，那位导师想告诉的的其实是【协程的上下文】。<br>如果不是因为学习了 Unity，如果不是因为学习了 C#，如果不是因为游戏的许多场景都要用到协程，那么我可能很难理解这个概念，因为我根本就没有用到上下文的使用场景，在各种机缘巧合的相互作用之下，才有了今天的【顿悟】。</p><p>但对于一些人来说，这可能就是稀松平常的事情。<br>三国的刘禅说的一句经典台词：何不食肉糜？<br>百姓没米吃饿死了，那为什么不吃肉呢？<br>这听起来很蠢……</p><p>但是——每个人的经历都不同，自然无法感同身受了。</p><h2 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h2><p>【上下文】即保存当前游戏的【状态】。<br>状态的范围很广，比如保存游戏的配置、玩家的角色位置、所在的地图等等。</p><p>原来保存这些全局的属性我是使用一个 <code>Global</code> 类的静态变量来存储这些数据的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Global</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 玩家当前所在场景</span><br><span class="line">    public static Scene_Map map;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 玩家所在位置</span><br><span class="line">    public Vector3 position;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 游戏语言</span><br><span class="line">    public string language;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 文本显示速度</span><br><span class="line">    public float textSpeed;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ... 其他一些属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在理解了上下文之后，再结合 WEB 开发的思想，又想到一个比较好的点子。</p><p>WEB 开发中，用户访问网页相当于一个请求，而一般的开发框架会将这个请求封装起来。<br>为了保持请求的状态，框架也会封装【上下文】，然后在框架内部可以很方便的进行调用。<br>同理，游戏开发中，也可以有着【单一入口原则】，即只包含一个 <code>MainScene</code>（主场景）。<br>所有的场景都做成预制体，根据玩家的请求实例化对应的预制体（类似于 WEB 开发中的路由将 URI 转化成控制器对应的方法）。</p><p>游戏中有一些属性是常用的，比如游戏的设置（如音量、语言、文本显示速度等），为了方便在其他地方获取这些属性，可以封装为一个实例，而这个实例作为一个静态变量提供给全局进行访问。</p><p>其实就是原来我用的 <code>Global</code> 类再进行比较结构性的封装，这样做跟原本用静态变量一个个存储调用方法一致。</p><p>先定义一个上下文的基础类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BaseContext</span><br><span class="line">&#123;</span><br><span class="line">    public string origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着再定义一个用来保存游戏全局属性的上下文类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class GameContext : BaseContext</span><br><span class="line">&#123;</span><br><span class="line">    public Scene_Map currentMap;</span><br><span class="line">    public Vector2 playerLocale;</span><br><span class="line"></span><br><span class="line">    public GameContext()</span><br><span class="line">    &#123;</span><br><span class="line">        origin &#x3D; Constant.CONTEXT_GAME;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>Global</code> 里面设置一个静态变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Global</span><br><span class="line">&#123;</span><br><span class="line">    public static GameContext context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在游戏启动的时候，把上下文所需要的属性赋值给这个变量就行了。</p><p>优化之后的调用方式其实没有太大的区别，就是调用类的静态属性而已。<br>但原本的方法属于面向过程式的开发，纯粹的变量没有任何特殊含义，如果封装成一个上下文就是一种有逻辑关联的结构了。</p><p>除了更加规范之外，如果将当前的状态全部封装成一个上下文，还可以实现游戏状态保存下来，也就是【存档】，而如果是恢复游戏状态，那就是【读档】了。</p><p>除了 <code>GameContext</code> 用于存储游戏的全局状态，还可以再定义 <code>MapContext</code> 用来保存当前场景的状态……诸如此类。</p><p>嗯……这样看起来比较规范了。<br>（成就感+1）</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以前的作品下载地址合集</title>
      <link href="/2021/12/13/download/"/>
      <url>/2021/12/13/download/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前发布的游戏整合版。</p><h2 id="黑暗刻印"><a href="#黑暗刻印" class="headerlink" title="黑暗刻印"></a>黑暗刻印</h2><p>发布日期：2012-2-9<br>首发地址：<a href="https://rpg.blue/thread-222374-1-1.html">https://rpg.blue/thread-222374-1-1.html</a></p><p>黑暗刻印是个人第一次发表的游戏作品，以策略性回合制的战斗为主要玩法。<br>玩家可以自由学习不同的技能，实现多种多样的打法。</p><p>游戏中也有装备锻造系统，可以搜集材料制造强力的武器。</p><h3 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h3><p>人类为了抵抗魔物，在前线建造了「最终防线」。<br>一旦最终防线被突破，魔物就能直接入侵到人类所在的世界。</p><p>我们的主角，就是防线上面的一位战士。</p><p><img src="https://pic.imgdb.cn/item/61b7354c2ab3f51d9167e6c4.jpg" alt="游戏标题界面"></p><h3 id="主要玩法"><a href="#主要玩法" class="headerlink" title="主要玩法"></a>主要玩法</h3><p>有点类似魔塔，玩家需要一层层往上爬，越往上魔物就越强。<br>场景中有很多隐藏的道具和一些隐藏通道，比如可以穿越的墙壁。</p><p><img src="https://pic.imgdb.cn/item/61b7354c2ab3f51d9167e6ce.jpg" alt="场景地图"></p><p>搜集这些道具可以回到防线制造武器，打造强力的武器可以使战力大幅提升。<br>（其实平衡性做得不好，前期就可以得到很稀有的道具，直接打造最终武器……）</p><p>在不断向高层的地方前进的时候，会遇到新的伙伴加入队伍。<br><img src="https://pic.imgdb.cn/item/61b7354c2ab3f51d9167e6c8.jpg" alt="菜单界面"></p><p>到一定层数后，可以购买技能卷轴来丰富战斗的策略性。<br>游戏有白天和黑夜，在战斗界面左上角的图标可以区分。</p><p><img src="https://pic.imgdb.cn/item/61b7354c2ab3f51d9167e6d6.jpg" alt="战斗场景"></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/1QD9qydkTW8raBaVLRZl26Q">https://pan.baidu.com/s/1QD9qydkTW8raBaVLRZl26Q</a><br>提取码: 9m6m</p><h2 id="冒险物语"><a href="#冒险物语" class="headerlink" title="冒险物语"></a>冒险物语</h2><p>发布日期：2012-8-9<br>首发地址：<a href="https://rpg.blue/thread-244999-1-1.html">https://rpg.blue/thread-244999-1-1.html</a></p><p>这部作品实际上只完成了一半，后面就没有再更新了。<br>不过第一章的剧情算是完整的，原计划有两章，第二章「地狱篇」没做完。</p><h3 id="背景故事-1"><a href="#背景故事-1" class="headerlink" title="背景故事"></a>背景故事</h3><p>主角的家被魔物们入侵了，于是就和伙伴们一起出发寻找突然出现魔物的原因，冒险由此开始。<br>游戏中可以设置参战的角色有多个，随着剧情的发展，有越来越多的NPC加入主角队伍，还有隐藏角色2名。</p><h3 id="主要玩法-1"><a href="#主要玩法-1" class="headerlink" title="主要玩法"></a>主要玩法</h3><p>同样是策略类回合制，游戏加入「阵型」系统可以丰富策略。<br>阵型每个位置都对应不同的属性加成，玩家可以根据角色的特性来修改站位。<br><img src="https://pic.imgdb.cn/item/61b742532ab3f51d916d6366.jpg" alt="阵型系统"></p><p>这次角色不再可以自由学习技能，取而代之的是技能可以进行升级强化。<br>强化技能需要消耗“星屑”——一种稀有道具。<br><img src="https://pic.imgdb.cn/item/61b741662ab3f51d916d0189.jpg" alt="菜单UI"></p><p>场景中的怪物全部都是明雷的，如果不想战斗直接避开即可。<br><img src="https://pic.imgdb.cn/item/61b741662ab3f51d916d018d.jpg" alt="游戏场景"></p><p>城镇里有独特的 NPC 可以兑换特殊装备或者升级技能等级的道具。<br>兑换需要消耗「魔界金币」——在游戏场景可以搜集。<br><img src="https://pic.imgdb.cn/item/61b741662ab3f51d916d0199.jpg" alt="兑换物品的NPC"></p><p>玩家在旅途过程中可以招收同伴，包括在路边的 NPC（士兵 C）也能成为伙伴。<br>每个角色都有特定的能力，例如大姐头火莲是不使用武器，而腿法了得的战士。<br>而我们的红发主角，依旧是以剑为武器。<br><img src="https://pic.imgdb.cn/item/61b742532ab3f51d916d6360.jpg" alt="战斗系统"></p><p>虽然技能系统简化了不少，但是装备系统却大大丰富了。<br>玩家在铁匠铺可以学习打造技能，搜集怪物掉落的材料制造特殊属性的饰品。<br><img src="https://pic.imgdb.cn/item/61b742532ab3f51d916d636c.jpg" alt="饰品效果1"><br><img src="https://pic.imgdb.cn/item/61b742532ab3f51d916d6375.jpg" alt="饰品效果2"><br><img src="https://pic.imgdb.cn/item/61b742532ab3f51d916d637e.jpg" alt="饰品效果3"></p><h3 id="特殊玩法"><a href="#特殊玩法" class="headerlink" title="特殊玩法"></a>特殊玩法</h3><p>在小镇里还有特别的“狩猎玩法”，第一种是在一定时间消灭狼，根据消灭的数量得到奖励。<br>第二种是参与狩猎大型魔物——传送到特殊的副本，需要消灭副本的 BOSS 才能完成任务。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于系统设置了携带物品上限，最终 BOSS 战有一定的难度。<br>需要考虑到策略而不是一味的堆属性，你无法通过等级碾压轻松取胜。<br>由于游戏的流程比较短，所以升级技能的“星屑”投放数量有限，请谨慎使用。</p><p>游戏中第一只 BOSS 可能就会直接让玩家翻车，这里写一下简单的攻略。<br>魔法攻击跟魔力有关，同时魔力越高，受到的魔法伤害也会越少。</p><p>第一只 BOSS 使用的就是魔法攻击，很可能会直接把其他角色全部秒掉。<br>但是你可以用剩下的法师打败 BOSS，如果不注重策略的话，可能第一只 BOSS 都过不去。</p><p>最后，记得随手存档，而且要保存到不同的位置，比如最终 BOSS，如果你打不过，可以读到之前的档然后继续刷装备，再重新挑战。</p><h3 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/17y_o0gsIeGvG65dJg8XQPw">https://pan.baidu.com/s/17y_o0gsIeGvG65dJg8XQPw</a><br>提取码: kcp6</p><h2 id="宠物战记"><a href="#宠物战记" class="headerlink" title="宠物战记"></a>宠物战记</h2><p>发布日期：2013-2-16<br>首发地址：<a href="https://rpg.blue/thread-285883-1-1.html">https://rpg.blue/thread-285883-1-1.html</a></p><p>这是首次以宠物为题材的 RPG 游戏，遗憾的是也没有做完。<br>因为换了电脑，导致工程没了，就 gg 了。</p><p>这部作品实际上有两个版本，另一个版本剧情比较黑暗，后面觉得不好，就废弃重做了。<br>最后，还有测试礼包一份，在游戏中主角的房间旁边的柜子处可以输入密码，内赠可爱宠物一只！<br>密码全部输入 8 即可领取。</p><p><strong>游戏剧情虽然不长，但是隐藏玩法极其丰富。</strong></p><h3 id="背景故事-2"><a href="#背景故事-2" class="headerlink" title="背景故事"></a>背景故事</h3><p>（带有剧透，可直接跳过）</p><p>游戏中的主角是个非常没用的废物——族长的儿子，而负责保护他的是从小一起长大的玩伴茵。<br>因为父亲族长的关系，主角也成了一朵长在温室的花朵，过惯了受人拥护的生活，因此心灵变得扭曲，以为所有人都是虚伪的。</p><p>但懦弱的他又不想改变现状的生活，每一次出行都是由茵保护着，然而有一次，他和茵在森林中走散了。<br>主角迷路来到荒野上，遇到了凶暴的野猪的攻击，受伤的主角昏倒在地。</p><p>赶来救援的不是茵而是扶瑶——看守神殿的侍女，而救了主角的扶瑶也悄悄的走了。<br>而后茵赶到时，主角早已昏迷不醒……<br>主角醒来时，发现在星之魔法使——擅长治疗魔法，攻击力却是 0 的白露的魔法店内。<br>而茵也在一旁，茵为此事感到自责，而主角却对此十分愤怒。</p><p>主角离开魔法店来到神殿前，确认了自己被扶瑶所救，而扶瑶的一番话也稍微触动了主角的心。<br>几天后，白露告知茵正处于危险，来向主角求救，主角拒绝了，随后扶瑶再次出现，劝导了主角前往营救，当主角赶到时，发现茵躺在地上，而魔物也随之出现，在魔物的强大与自己的弱小对比下，主角憎恨自己的无能，并且认识到茵对自己的重要性，绝望的主角心中悔恨无比，想一死了之，结果被后来赶到的“茵”（？）所救，原来之前那个茵是由扶瑶的宠物变化而成。</p><p>只有真正面对死亡的时候，才能发现那个被遗忘在心中的自己，主角经过此事之后，决心摆脱茵的保护，要变得足够强大，不需要依靠别人的保护，甚至成为可以保护别人的人……故事由此开始。 </p><h3 id="主要玩法-2"><a href="#主要玩法-2" class="headerlink" title="主要玩法"></a>主要玩法</h3><p>以培养宠物为主题的游戏，需要在野外收服宠物，并且和宠物一起战斗。<br>宠物有随机技能，每一只获得的宠物都不一样。<br>宠物有随机的成长值，初始属性有一定的差别。<br>带有主动技能的宠物属于比较稀有的，可以一直捕捉然后刷到为止。<br>在城镇可以购买被动技能书让宠物学习，技能树类似梦幻西游的炼妖打书。</p><p><img src="https://pic.imgdb.cn/item/61b74aab2ab3f51d9170a50f.png" alt="战斗系统1"><br><img src="https://pic.imgdb.cn/item/61b74aab2ab3f51d9170a513.png" alt="战斗系统2"><br><img src="https://pic.imgdb.cn/item/61b74aab2ab3f51d9170a518.png" alt="打败魔物后进行封印捕捉"><br><img src="https://pic.imgdb.cn/item/61b74aab2ab3f51d9170a520.png" alt="培养自己的宠物军团"></p><h3 id="特殊玩法-1"><a href="#特殊玩法-1" class="headerlink" title="特殊玩法"></a>特殊玩法</h3><p>完成主线剧情后，也不是变得无所事事，而是可以去做一些特殊的活动。</p><h4 id="公会任务"><a href="#公会任务" class="headerlink" title="公会任务"></a>公会任务</h4><p>玩家可以登记一个公会，然后完成公会的任务获取报酬。</p><h4 id="宠物竞赛"><a href="#宠物竞赛" class="headerlink" title="宠物竞赛"></a>宠物竞赛</h4><p>村子里 NPC 稻荷处进入活动。<br>宠物竞赛即玩家带着自己培养的宠物与其他 NPC 进行比赛。<br>如果能够取得冠军，还可以获得三只稀有宠物中的一只作为奖励。</p><h3 id="隐藏支线"><a href="#隐藏支线" class="headerlink" title="隐藏支线"></a>隐藏支线</h3><p>游戏里有很多隐藏的支线任务，完成后可以捕捉到稀有宠物。</p><h4 id="漂流瓶"><a href="#漂流瓶" class="headerlink" title="漂流瓶"></a>漂流瓶</h4><p>完成漂流瓶任务可以前往雪原捕捉稀有宠物「冰原鹿」。<br>在牧场左上 NPC 阿天处接受任务，完成时获得，漂流瓶I、II。</p><p>而第三个在井底（村庄前面有水晶的地方）。<br><img src="https://pic.imgdb.cn/item/61b748982ab3f51d916fcb6d.png" alt="井底最后一个瓶子"></p><p>凑齐3个之后找流浪的寻宝人，便会把瓶中分散的地图拼接成完整的地图，而地图所指之处即隐藏地图——冰封之地。<br>冰封之地有一个简单的推雪球小游戏，如果不知道怎么推可以直接看截图。</p><p><img src="https://pic.imgdb.cn/item/61b748982ab3f51d916fcb55.png" alt="推雪球小游戏"><br><img src="https://pic.imgdb.cn/item/61b748982ab3f51d916fcb5a.png" alt="正确的方法"></p><p>救出放漂流瓶的NPC，再次回到该地，在此处稍微停留一段时间，即会看到在奔跑的冰原鹿，打倒它便可捕获，再往上，便是野猪出没地。<br><img src="https://pic.imgdb.cn/item/61b748982ab3f51d916fcb62.png" alt="放漂流瓶的 NPC"></p><p>冰原鹿会在上面的草丛中跑动，玩家需要碰到它才会进入战斗。</p><h4 id="野兽号角"><a href="#野兽号角" class="headerlink" title="野兽号角"></a>野兽号角</h4><p>这个任务有一定的难度，完成之后可以捕捉到最强的魔兽级别的宠物。<br>在村子内上面的房间发现的野兽号角，可以随时随地吹响它，如果在特殊的位置吹响就可以引来魔兽。</p><p>这个特殊的位置在隐藏地图里面，可以按照下面的截图前往。<br><img src="https://pic.imgdb.cn/item/61b749f12ab3f51d91705107.png" alt="绿叶森林1"><br><img src="https://pic.imgdb.cn/item/61b74a1d2ab3f51d917065c4.png" alt="绿叶森林2"><br><img src="https://pic.imgdb.cn/item/61b74a292ab3f51d91706a4d.png" alt="绿叶森林3"><br><img src="https://pic.imgdb.cn/item/61b74a332ab3f51d91706eee.png" alt="绿叶森林4"><br><img src="https://pic.imgdb.cn/item/61b74a412ab3f51d9170740c.png" alt="绿叶森林5"><br><img src="https://pic.imgdb.cn/item/61b74a4d2ab3f51d91707948.png" alt="绿叶森林6"><br><img src="https://pic.imgdb.cn/item/61b74a582ab3f51d91707f07.png" alt="绿叶森林7"><br><img src="https://pic.imgdb.cn/item/61b74a622ab3f51d917082e1.png" alt="绿叶森林8"><br><img src="https://pic.imgdb.cn/item/61b74a6c2ab3f51d91708730.png" alt="绿叶森林9"></p><h3 id="下载地址-2"><a href="#下载地址-2" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/14hYDuo4pq_W8tHZnIfst9w">https://pan.baidu.com/s/14hYDuo4pq_W8tHZnIfst9w</a><br>提取码: d32h</p><p>搭配游戏使用的图鉴。<br>下载链接: <a href="https://pan.baidu.com/s/1ki2YE9caUftdWLtgG6gd9Q">https://pan.baidu.com/s/1ki2YE9caUftdWLtgG6gd9Q</a><br>提取码: 5e00</p><h2 id="魔王传说"><a href="#魔王传说" class="headerlink" title="魔王传说"></a>魔王传说</h2><p>发布日期：2013-8-3<br>首发地址：<a href="https://rpg.blue/thread-324358-1-1.html">https://rpg.blue/thread-324358-1-1.html</a></p><p>魔物传说系列第一弹——勇者的穷途末路。<br>经过多年的更新，最终完结的作品！</p><p>其实能够一直坚持更新是因为时不时就会有玩家加我的 QQ，然后提出各种建议。<br>这部作品是个人目前最完整的一部，不仅剧情完结了，而且还有「二周目」。<br>通关之后，可以解锁新的海域地图，通过坐船可以到一片新的天地。</p><p><img src="https://pic.imgdb.cn/item/61b751342ab3f51d91736b02.png" alt="LOG（由某个网友提供）"><br><img src="https://pic.imgdb.cn/item/61b7516b2ab3f51d9173821b.png" alt="标题界面"></p><h3 id="背景故事-3"><a href="#背景故事-3" class="headerlink" title="背景故事"></a>背景故事</h3><p>这一部主要注重剧情，讲述了一个非常规“勇者战魔王”的剧情。<br>由于是剧情向的，这里就不剧透了，只作简单介绍。</p><p>魔王是这个世界上最强大的魔物，但古代的人类没有消灭魔王的能力，只能将它们封印起来。<br>而这样的魔王，一共有七个，它们被封印在不同的地方。</p><p>第一个魔王就被封印在王城附近。<br>经过时间的流逝，古代的封印逐渐减弱，放着不管那些魔王就会突破封印危害世界。</p><p>女神经过残酷的选拔，召集了新的勇者——心火。<br>心火肩负着国王的使命，前往封印之嗣消灭「灾难恶魔」。</p><p>最终，心火不负使命将灾难恶魔彻底消灭，但意外却发生了……<br>勇者心火受到灾难恶魔的诅咒，失去了「神圣之火」的力量，那可是……勇者才拥有的能力。</p><p>失去神圣之火就如同凡人一般，但剩下的魔王却还有六个，意味着心火必须从最初的状态去挑战魔王。<br>为了消灭剩下的六个魔王，即使失去了所有能力，心火毅然决然的选择完成自身的使命。</p><p>最强与最弱的落差，丝毫没有影响勇者想要灭除恶魔的决心。<br>一个凡人之躯，没有任何胜算可言，只因他相信奇迹。<br>失去能力的勇者，为了完成消灭魔王的使命，与一路上遇到的伙伴，展开一段异常曲折的冒险。<br>勇者既能消灭魔王，亦能化身魔王，善恶之间，一切的真实又是如何？</p><h3 id="游戏预览"><a href="#游戏预览" class="headerlink" title="游戏预览"></a>游戏预览</h3><p><img src="https://pic.imgdb.cn/item/61b751842ab3f51d91738aad.jpg" alt="场景地图——王城"><br><img src="https://pic.imgdb.cn/item/61b751d52ab3f51d9173a872.png" alt="菜单界面"><br><img src="https://pic.imgdb.cn/item/61b751d52ab3f51d9173a875.png" alt="道具界面"><br><img src="https://pic.imgdb.cn/item/61b751d52ab3f51d9173a87d.png" alt="装备界面"><br><img src="https://pic.imgdb.cn/item/61b751d52ab3f51d9173a886.png" alt="角色状态界面"><br><img src="https://pic.imgdb.cn/item/61b751d52ab3f51d9173a895.png" alt="战斗场景"><br><img src="https://pic.imgdb.cn/item/61b752192ab3f51d9173c0cf.png" alt="释放技能攻击"><br><img src="https://pic.imgdb.cn/item/61b752342ab3f51d9173c9f1.jpg" alt="学习强化技能增强效果"><br><img src="https://pic.imgdb.cn/item/61b752342ab3f51d9173c9f4.jpg" alt="奇妙的邂逅，喜得“史莱姆宝宝”"><br><img src="https://pic.imgdb.cn/item/61b752342ab3f51d9173ca01.jpg" alt="会说话的兔子也能成为伙伴？"><br><img src="https://pic.imgdb.cn/item/61b752342ab3f51d9173ca0b.jpg" alt="悬赏任务，击杀BOSS获得高额奖励"><br><img src="https://pic.imgdb.cn/item/61b752992ab3f51d9173f10d.jpg" alt="带有特技的武器"><br><img src="https://pic.imgdb.cn/item/61b752992ab3f51d9173f112.jpg" alt="特殊效果的饰品"><br><img src="https://pic.imgdb.cn/item/61b752f12ab3f51d917411d1.png" alt="挑战之塔"><br><img src="https://pic.imgdb.cn/item/61b752f12ab3f51d917411d6.png" alt="特殊套装装备"><br><img src="https://pic.imgdb.cn/item/61b7538f2ab3f51d9174588a.png" alt="强者云集！天道少女——谢莉丝"></p><h3 id="主要玩法-3"><a href="#主要玩法-3" class="headerlink" title="主要玩法"></a>主要玩法</h3><p>玩家在旅途过程中会有许多不同能力，但却希望帮助心火一起消灭魔王的伙伴加入队伍。<br>这些伙伴拥有不同的能力，玩家最多可以配置 4 名出战角色，实现多种战斗策略。</p><p>角色有「特性」，这些特性决定了角色的特殊能力。<br>除了天赋技能之外，在各地的城镇还可以后天学习技能。</p><p>战士也可以使用魔法——没有任何职业的束缚，玩家可以 DIY 每个角色的能力。<br>除了自由搭配技能之外，玩家也可以收集材料打造装备。<br>装备有强化系统，最高可以强化至 +10。</p><p>装备还有套装效果，如果能装备 2 件以上就能获得套装附加的能力。</p><h3 id="下载地址-3"><a href="#下载地址-3" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/1PH5BLegYcVquqdGfBfYkjA">https://pan.baidu.com/s/1PH5BLegYcVquqdGfBfYkjA</a><br>提取码: 8d7i</p><p>最新版为：ver1.30，直接下载这个就可以。<br>如果启动游戏报错缺少 RGSS202E.dll，下载此文件夹内的 RGSS202E.rar，解压后将 dll 放在游戏根目录即可。</p><h2 id="月之幻想"><a href="#月之幻想" class="headerlink" title="月之幻想"></a>月之幻想</h2><p>发布日期：2013-8-23<br>首发地址：<a href="https://rpg.blue/thread-329032-1-1.html">https://rpg.blue/thread-329032-1-1.html</a></p><p>这是第一次和 Cee 合作制作的游戏，不过也是没完结。</p><h3 id="背景故事-4"><a href="#背景故事-4" class="headerlink" title="背景故事"></a>背景故事</h3><p>一个被追杀的少年，被迫跳下悬崖，却被一位老人所救。<br>这个陌生的镇子上，有一个神秘的教会，偶然步入教堂，却听到了可怕的消息…<br>小镇将要发生灾难的预言、带来希望的种子、还有那位神秘的少女，这一切充满了太多的谜团。<br>诡异的宅邸、忽隐忽现的幽灵少女，各种离奇的事件，快来解开谜底吧！</p><h3 id="预览截图"><a href="#预览截图" class="headerlink" title="预览截图"></a>预览截图</h3><p><img src="https://pic.imgdb.cn/item/61b76ffc2ab3f51d91812e19.png" alt="LOGO"><br><img src="https://pic.imgdb.cn/item/61b76ffc2ab3f51d91812e1d.png" alt="标题界面"><br><img src="https://pic.imgdb.cn/item/61b76ffc2ab3f51d91812e23.jpg" alt="游戏场景"></p><h3 id="下载地址-4"><a href="#下载地址-4" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/1oBc6c-J-un5jscdF1APl-g">https://pan.baidu.com/s/1oBc6c-J-un5jscdF1APl-g</a><br>提取码: 69jb</p><h2 id="魔王传说2"><a href="#魔王传说2" class="headerlink" title="魔王传说2"></a>魔王传说2</h2><p>发布日期：2016-9-1<br>首发地址：<a href="https://rpg.blue/thread-395928-1-1.html">https://rpg.blue/thread-395928-1-1.html</a></p><p>魔王传说系列的第二部作品。</p><h3 id="背景故事-5"><a href="#背景故事-5" class="headerlink" title="背景故事"></a>背景故事</h3><p>天下无双的费奥那使用绝对的武力使人称臣，不断的收纳强者，建立了剑之城。<br>剑城无弱者，是这个世界的常识。<br>费奥纳带领剑城的强者经过数年的征战，终于将最后一大势力——魔法之城铲除；<br>魔法之城随着魔女希亚的死而崩塌……<br>费奥纳凯旋归来，以剑术测验之名召来他的弟弟——索尔。<br>谁能想到无敌于天下的费奥纳，却拥有一个资质平庸且毫无斗志的弟弟？<br>“弱小是罪。”——费奥纳的至理名言。<br>剑城容不下他，索尔被驱逐离开剑城，<br>他不知道自己该往什么地方去，他不知道等待自己的未来是怎么样的……</p><p>索尔的命运由你来掌握！</p><h3 id="技能组合"><a href="#技能组合" class="headerlink" title="技能组合"></a>技能组合</h3><p>经过前面几部作品不断完善，最终想出了一套可以 DIY 技能的系统——技能组合。<br>游戏内有丰富的技能，分为两大部分：①天赋技能 ②通用技能</p><p><strong>天赋技能</strong><br>是每个角色的特色技能，通过战斗有几率可以领悟。<br>每次领悟一个新的技能，下次领悟的几率就会减半，理论上可以领悟4~5个技能。<br>天赋技能可以使用”遗忘之水“遗忘，同时增加领悟的几率。<br>（如果天赋技能不喜欢，可以 SL 大法刷出满意的为止）</p><p><strong>通用技能</strong><br>任何角色都能够学习的技能，使用技能卷即可习得。<br>分为四个级别:S、A、B、C<br>根据级别所消耗的CP点数也越高，最高为S消费5点，最低为C消费1点</p><p><strong>技能CP</strong><br>技能是类似于装备的东西，学习技能但不设置就不会生效。<br>技能会消耗一定的 CP，角色 CP 点数只与等级有关。<br>CP 点数限制了技能的使用，这也是本游戏的核心系统。<br>越高级的技能消耗的 CP 就越多，所以玩家需要合理搭配技能，而不是无脑用最强的技能。</p><p>通过技能组合系统，玩家就可以“定制”角色的养成方向。<br>这也是我一直在追求的目标——角色的养成由玩家决定，而不是由系统决定。</p><h3 id="游戏预览-1"><a href="#游戏预览-1" class="headerlink" title="游戏预览"></a>游戏预览</h3><p><img src="https://pic.imgdb.cn/item/61b758372ab3f51d91763953.png" alt="菜单界面"><br><img src="https://pic.imgdb.cn/item/61b758372ab3f51d91763958.png" alt="任务系统"><br><img src="https://pic.imgdb.cn/item/61b758372ab3f51d91763960.jpg" alt="技能配置"><br><img src="https://pic.imgdb.cn/item/61b758372ab3f51d9176396b.jpg" alt="战斗系统"><br><img src="https://pic.imgdb.cn/item/61b758372ab3f51d9176397e.jpg" alt="游戏场景"><br><img src="https://pic.imgdb.cn/item/61b758712ab3f51d9176543b.jpg" alt="游戏场景2"></p><h3 id="下载地址-5"><a href="#下载地址-5" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/1auASOouvD-ioXhyZd-nArg">https://pan.baidu.com/s/1auASOouvD-ioXhyZd-nArg</a><br>提取码: gho2</p><p>最新版为：ver3.0.8，直接下载最新版即可。<br>(从 2015 年制作，最终 2018 年才更新完成……)</p><p>其实也并没有真正完结，只是剑之城篇完结了，原计划还有魔法之城篇。<br>虽然后面也有继续更新，但是没有发布出来就是了，总之应该不会继续更新了。</p><p>不过，虽然魔王传说 2 不会再更新，但是这部分我打算继续做完，会推迟到目前最新的计划（2022）。</p><h2 id="魔王传说3"><a href="#魔王传说3" class="headerlink" title="魔王传说3"></a>魔王传说3</h2><p>魔王传说3——魔王大陆。<br>这是一个网页版小游戏，以抽角色+刷刷刷为主要玩法，还有玩家对战天梯排行。<br>制作这部游戏其实是因为长期没有更新新的游戏，所以打算弄一个小游戏来活跃群里的气氛。<br>不过目前已经下线了，只能发一张截图以供纪念。<br>（虽然是网页小游戏，但——没有氪金系统~就是以前官网上面的娱乐小游戏而已）</p><h3 id="背景故事-6"><a href="#背景故事-6" class="headerlink" title="背景故事"></a>背景故事</h3><p>故事发生在异界（平行于人类生存世界之外的一个世界），魔王统治了整片大陆，经过了数百年，讨伐魔王的勇者也基本被消灭完了；再也没有傻瓜想要当勇者去讨伐魔王，于是生活就这么平静了下来……因为没有勇者前来挑战，魔王觉得非常无聊，于是，魔王使出了强大的魔法从其他的世界召唤出各种各样不同的人/怪物，为了打发无聊的时间……魔王定下了一个规则，只要在这片大陆成为最强的人，就能够获得挑战魔王的机会，如果能在战斗中让魔王大人感受到♂愉悦，那么魔王大人将会分享这片大陆一半的统治权给那位挑战者。</p><p>于是，故事开始了……<br>从命运石之门召唤出属于你的英雄，打败这片大陆上的魔物逐渐变强，搜集强大的装备，成为竞技场的勇者！</p><h3 id="预览截图-1"><a href="#预览截图-1" class="headerlink" title="预览截图"></a>预览截图</h3><p><img src="https://pic.imgdb.cn/item/61b75ab12ab3f51d91777118.jpg" alt="登录界面"><br><img src="https://pic.imgdb.cn/item/61b75ab12ab3f51d9177711b.jpg" alt="开启命运石之门召唤角色"><br><img src="https://pic.imgdb.cn/item/61b75ab12ab3f51d91777124.jpg" alt="角色有随机的成长属性"><br><img src="https://pic.imgdb.cn/item/61b75ab12ab3f51d9177712c.jpg" alt="SSS 级的角色成长爆炸"><br><img src="https://pic.imgdb.cn/item/61b75b202ab3f51d9177a36d.jpg" alt="角色具有随机的特性"><br><img src="https://pic.imgdb.cn/item/61b75ab12ab3f51d91777136.jpg" alt="选择副本进行挑战"><br><img src="https://pic.imgdb.cn/item/61b75b202ab3f51d9177a35c.jpg" alt="每个怪物都有掉落的装备"><br><img src="https://pic.imgdb.cn/item/61b75b202ab3f51d9177a360.jpg" alt="传说品质的装备有3条随机附加属性"><br><img src="https://pic.imgdb.cn/item/61b75b202ab3f51d9177a367.jpg" alt="战斗是最简单的文字战斗"></p><h2 id="路人甲的故事"><a href="#路人甲的故事" class="headerlink" title="路人甲的故事"></a>路人甲的故事</h2><p>这是我高四那年（没错，就是复读了一年）写的一篇小作文。<br>当然，小作文是无聊时写给自己看的，并不是考卷上面的作文。</p><p>以 NPC 为视角，讲述一个悲剧小故事。<br>因为剧情很短，这边就不介绍了。<br>（介绍了就不用玩了……）</p><h3 id="下载地址-6"><a href="#下载地址-6" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载链接: <a href="https://pan.baidu.com/s/1erJjwjf6x5YoU_sMlQftow">https://pan.baidu.com/s/1erJjwjf6x5YoU_sMlQftow</a><br>提取码: 0ohp</p><h2 id="星之魔女"><a href="#星之魔女" class="headerlink" title="星之魔女"></a>星之魔女</h2><p>其实是《名为怪物的游戏》开篇的小游戏。<br>因为游戏本体暂时做不出来，所以先把做完的小游戏发布出来了。</p><p>这是由 RM 转向 Unity 制作的第一个公开发布的游戏。<br>（咦？为什么叫“第一个公开发布的游戏”——其实已经有好几个作品还没见到玩家就夭折了）</p><p>按照目前的情况来看，《名为怪物的游戏》也面临着做不出来的窘境。<br>所以……就把这个发出来当做纪念吧。</p><p>下载地址：<a href="https://pan.baidu.com/s/1lYDppNY_xTawMjX2H5rCkQ">https://pan.baidu.com/s/1lYDppNY_xTawMjX2H5rCkQ</a><br>提取码：gq8c</p><p>如果不想下载的也可以直接到 B 站看录制的视频，因为只有一关而已……</p><p>第一版（COCOS开发）：<a href="https://www.bilibili.com/video/BV167411L7vJ/">https://www.bilibili.com/video/BV167411L7vJ/</a><br>第二版（Unity开发）：<a href="https://www.bilibili.com/video/BV1Bf4y1h7RE/">https://www.bilibili.com/video/BV1Bf4y1h7RE/</a></p><p>在本博客也记录了小游戏的开发过程，如果你感兴趣的话，可以看看哟：<a href="https://huotuyouxi.com/categories/%E5%90%8D%E4%B8%BA%E6%80%AA%E7%89%A9%E7%9A%84%E6%B8%B8%E6%88%8F/%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B/">星之魔女开发过程实录</a></p><h2 id="名为怪物的游戏"><a href="#名为怪物的游戏" class="headerlink" title="名为怪物的游戏"></a>名为怪物的游戏</h2><p>其实只是做了序章而已，而且在内部进行测试，所以没有公开版本。<br>不过既然要做一个游戏作品的整合，就把这个也一起放出来吧。</p><p>下载链接: <a href="https://pan.baidu.com/s/1aN6ur83X3km_ZVfoCcdSjA">https://pan.baidu.com/s/1aN6ur83X3km_ZVfoCcdSjA</a><br>提取码: 84dk</p><p>这部游戏的制作真的很心酸，截图就不放出来了，可以直接看上面的制作过程。</p><h2 id="2022-年计划"><a href="#2022-年计划" class="headerlink" title="2022 年计划"></a>2022 年计划</h2><p>新作品一直迟迟没有发布，素材是主要的原因。<br>这次我决定用 RM 的素材制作一部作品。</p><p>游戏将以魔王传说 2 为故事背景，制作一部与之前完全不同类型的游戏。<br>新的制作计划如果有更新也会在本博客发布，敬请关注 ♪(^∇^*)</p>]]></content>
      
      
      <categories>
          
          <category> 关于我们 </category>
          
          <category> 游戏下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏作品 </tag>
            
            <tag> 游戏下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 的研究（二）统一标准参数接口——函数参数优化</title>
      <link href="/2021/11/06/c-sharp-002/"/>
      <url>/2021/11/06/c-sharp-002/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天尝试把前面发布过的 <a href="https://huotuyouxi.com/2021/09/24/unity-tips-006/">【Unity小技巧】全局事件监听——观察者/订阅发布模式</a> 实装到游戏项目中，结果发现了其中一个不够完善的地方。</p><p>就是在接收通知的参数上面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void SendNotify(string eventType, string data &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是空的就没必要通知</span><br><span class="line">    if (!subscribers.ContainsKey(eventType))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(eventType + &quot;是空的&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach (Subscriber subscriber in subscribers[eventType])</span><br><span class="line">    &#123;</span><br><span class="line">        subscriber.TakeNotify(eventType, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是事件类型，第二个参数是一个字符串（json）。<br>原来的想法是接收一个 json 字符串，然后再在实际调用的时候转为对象，但是这样的局限性太大了。</p><p>比如：我想要一个自定义的类当做参数呢？<br>很明显接收一个字符串类型无法满足复杂的需求。</p><p><strong>函数既要统一参数，同时又要求参数有各种不同类型，这看上去是很矛盾的。</strong><br>「类的重载」可以解决这个问题，例如下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public function Method(string a) &#123;</span><br><span class="line">    &#x2F;&#x2F; 操作内容</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function Method(int a) &#123;</span><br><span class="line">    &#x2F;&#x2F; 操作内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就实现了同名的 Method 方法，可以接收 <code>int</code> 类型和 <code>string</code> 类型两种参数，满足了上面的需求。<br>但这样却要写好多的重载方法，尤其是参数还很多的情况。</p><p><strong>我们如何保证同一个方法，使它能够接收不同类型的参数而且只需要写一次呢？</strong><br>只要利用类的「多态性」就能实现！</p><h2 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h2><p>多态就是字面意思：“多种形态”。<br>意思是说类在某种情况下可以转变成不同的形态。</p><p>例如：猫和狗都是动物，一只猫也可以说是一只动物，猫就转化成了「动物」。<br>用代码来实现就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Animal &#123;</span><br><span class="line">    public virtual void Sound()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat : Animal &#123;</span><br><span class="line">    public override void Sound() &#123;</span><br><span class="line">        &#x2F;&#x2F; 猫的叫声</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void OtherMethod() &#123;</span><br><span class="line">        &#x2F;&#x2F; 猫特有的方法        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Dog : Animal &#123;</span><br><span class="line">    public override void Sound() &#123;</span><br><span class="line">        &#x2F;&#x2F; 狗的叫声</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果有这样两个方法，接收的是 Animal 类型</span><br><span class="line">public void Test(Animal animal) &#123;</span><br><span class="line">    animal.Sound();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 把 Animal 转换成 Cat 试试？</span><br><span class="line">public void TestCat(Animal animal) &#123;</span><br><span class="line">    var cat &#x3D; animal as Cat;</span><br><span class="line">    cat.OtherMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果我们这样做</span><br><span class="line">var cat &#x3D; new Cat();</span><br><span class="line">var dog &#x3D; new Dog();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这肯定是没有问题的</span><br><span class="line">Test(cat);</span><br><span class="line">Test(dog);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 但如果要把 Animal 转换成 Cat 并调用 Cat 特有方法呢？</span><br><span class="line">TestCat(cat);</span><br></pre></td></tr></table></figure><p>答案是：也没有问题！<br>这就是类的多态特性，当类之间是继承关系的时候，就可以实现转换。</p><p>但如果要把猫转换成狗就不行了，多态只能是父类和子类之间进行转换。<br>多态其实就是把父类转化成特定子类的能力。</p><p>我们利用这个特性，就可以实现只要传一个参数，却能多样化的定义参数。</p><h2 id="统一参数接口"><a href="#统一参数接口" class="headerlink" title="统一参数接口"></a>统一参数接口</h2><p>我们希望能够限定参数的类型，同时还要求参数可以多样化的进行自定义。<br>限定参数类型的目的是统一接口的标准，避免在调用的时候传进来各种奇奇怪怪的参数。</p><p>首先定义一个父类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class BattleNotifyData &#123; &#125;</span><br></pre></td></tr></table></figure><p>父类什么都不需要写，只是空的类。</p><p>接着修改函数的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将 string 类型替换为 BattleNotifyData</span><br><span class="line">public static void SendNotify(string eventType, BattleNotifyData data &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是空的就没必要通知</span><br><span class="line">    if (!subscribers.ContainsKey(eventType))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(eventType + &quot;是空的&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach (Subscriber subscriber in subscribers[eventType])</span><br><span class="line">    &#123;</span><br><span class="line">        subscriber.TakeNotify(eventType, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，这样就完成了！<br>接着来写几个类，让它们继承 <code>BattleNotifyData</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一个类：用于战斗结束的通知参数</span><br><span class="line">public class BattleNotifyData_BattleEnd : BattleNotifyData</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 获胜的阵营</span><br><span class="line">    public string camp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二个类：用于角色死亡的通知</span><br><span class="line">public class BattleNotifyData_OnDead : BattleNotifyData</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 死者(是一个 BattleCharacter 类型)</span><br><span class="line">    public BattleCharacter victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们只需要这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeNotify(string eventType, BattleNotifyData data)</span><br><span class="line">   &#123;</span><br><span class="line">       switch (eventType)</span><br><span class="line">       &#123;</span><br><span class="line">           case Constant.BATTLE_EVENT_BATTLE_END:</span><br><span class="line">               var newData &#x3D; data as BattleNotifyData_BattleEnd;</span><br><span class="line">               &#x2F;&#x2F; 现在可以拿到camp变量了</span><br><span class="line">               Debug.Log(newData.camp);</span><br><span class="line">               break;</span><br><span class="line">           case Constant.BATTLE_EVENT_ON_DEAD:</span><br><span class="line">               var newData &#x3D; data as BattleNotifyData_On_Dead;</span><br><span class="line">               &#x2F;&#x2F; 可以拿到死者对象</span><br><span class="line">               Debug.Log(newData.victim);</span><br><span class="line">               break;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过 <code>as</code> 参数将父类转化为对应的子类即可！<br>发送通知的时候，可以实例化真实的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 当角色死亡的时候，实例化 BattleNotifyData_OnDead 作为参数传递</span><br><span class="line">BattleNotifyPublisher.SendNotify(Constant.BATTLE_EVENT_ON_DEAD, new BattleNotifyData_OnDead</span><br><span class="line">&#123;</span><br><span class="line">    victim &#x3D; this</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当我们要让一个函数只接受一个参数，还要求这个参数是「可变」的，那就利用类的多态来实现。</p><h2 id="特别篇"><a href="#特别篇" class="headerlink" title="特别篇"></a>特别篇</h2><p>有时候一个方法有超多的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void Test(string a, string b, int c, floa d) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我以前在上班的时候还真的遇到过这么写的人，而且最多的时候一个函数居然有 16 个参数！<br>这是人干的事情吗？就不能把参数封装成一个类吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Data &#123;</span><br><span class="line">    public string a;</span><br><span class="line">    public string b;</span><br><span class="line">    public int c;</span><br><span class="line">    public float d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际调用方法的时候，实例化类作为参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Test(new Data &#123;</span><br><span class="line">    a&#x3D;&quot;aaa&quot;,</span><br><span class="line">    b&#x3D;&quot;bbb&quot;,</span><br><span class="line">    c&#x3D;100,</span><br><span class="line">    d&#x3D;1f,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样不比写十多个参数强？<br>结构体（Struct）作为参数也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> C Sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 的研究（一）利用内置函数简化数值判断与 ref、out、in 的用法</title>
      <link href="/2021/10/21/c-sharp-001/"/>
      <url>/2021/10/21/c-sharp-001/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录学习 C# 过程的小知识点。</p><h2 id="简化数值判断的方法"><a href="#简化数值判断的方法" class="headerlink" title="简化数值判断的方法"></a>简化数值判断的方法</h2><p>在进行数值计算的时候，经常会要判断一个数值“越界”的问题。例如商城购物，用户可以用优惠券下单抵免部分金额，但是商品肯定存在一个最低价，而不是叠加了优惠券之后，出现负数倒贴的情况。</p><p>比如点餐有“无门槛红包 10 元”这样的优惠券，假设用户只点了一份 8 元的餐，然后用了 10 元的红包，实际支付金额应该是 0，而不是 -2。</p><p>这是一个很简单的逻辑，不用想都能写出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public float TotalMoney(float originalPrice, float discount) &#123;</span><br><span class="line">    float totalMoney &#x3D; originalPrice - discount;</span><br><span class="line">    if(totalMoney &lt; 0) &#123;</span><br><span class="line">        totalMoney &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return totalMoney;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个 <code>if-else</code> 结构即可防止数值越界，但是这样写其实很麻烦而且不雅观。<br>实际上可以用 C# 内置的 <code>Mathf</code> 函数来简化这种结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public float TotalMoney(float originalPrice, float discount) &#123;</span><br><span class="line">    return Mathf.Max(originalPrice - discount, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Mathf.Max</code> 方法从两个值中选择一个较大的数返回，无需再手动写 <code>if-else</code> 结构判断，心智负担大大降低。<br>同理，还有 <code>Mathf.Min</code> 方法可以从两个值中选择一个较小的数返回。</p><h2 id="ref、out-和-in"><a href="#ref、out-和-in" class="headerlink" title="ref、out 和 in"></a>ref、out 和 in</h2><p>microsoft 官方文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref">ref</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out-parameter-modifier">out</a>。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref 可以用来修饰变量、函数返回值。</p><h4 id="引用传参"><a href="#引用传参" class="headerlink" title="引用传参"></a>引用传参</h4><p>我们知道将变量传递给函数作为参数是不会影响原来的值，这种方式的参数叫做「形参」，意思是形式上的参数。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 0, b &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    TestMethod(a, b);</span><br><span class="line"></span><br><span class="line">    Debug.Log(a);</span><br><span class="line">    Debug.Log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void TestMethod(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    a -&#x3D; 1;</span><br><span class="line">    b -&#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然函数体对 a 和 b 进行了减法运算，但实际上只是改变了形参的值，原参数并不会改变，即最终仍输出两个 0，而不是 -1。<br>如果想要改变传进来参数的值就要用到 <code>ref</code> 关键字了，当 <code>ref</code> 关键字修饰了一个函数的参数时，这个参数就叫「引用参数」，引用参数的值在函数内发生改变时，原参数的值也将被改变。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 0, b &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在传入变量时也需要加上 ref 关键词</span><br><span class="line">    TestMethod(a,ref b);</span><br><span class="line"></span><br><span class="line">    Debug.Log(a);</span><br><span class="line">    Debug.Log(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将变量 b 用 ref 修饰为引用参数</span><br><span class="line">public void TestMethod(int a, ref int b)</span><br><span class="line">&#123;</span><br><span class="line">    a -&#x3D; 1;</span><br><span class="line">    b -&#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终输出结果为：0 和 1。</p><h4 id="修饰返回值"><a href="#修饰返回值" class="headerlink" title="修饰返回值"></a>修饰返回值</h4><p>如果 <code>ref</code> 修饰一个函数的返回值，那么代表返回的结果是一个引用。</p><p>先看一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这是定义在类的一个 int 型数组</span><br><span class="line">int[] numbers &#x3D; new int[] &#123; 1, 2, 3 &#125;;</span><br><span class="line"></span><br><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 通过 TestMethod 方法取出下标为 0 的元素的值，保存在 temp 变量</span><br><span class="line">    int temp &#x3D; TestMethod(0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 打印出来，毫无疑问是：1</span><br><span class="line">    Debug.Log(temp);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 把 temp 变量乘以 10</span><br><span class="line">    temp *&#x3D; 10;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 毫无疑问现在是：10</span><br><span class="line">    Debug.Log(temp);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 那这个呢？原来的数组第一个元素也翻了 10 倍吗？并没有！</span><br><span class="line">    Debug.Log(numbers[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int TestMethod(int index)</span><br><span class="line">&#123;</span><br><span class="line">    return numbers[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>numbers</code> 是一个 int 型的数组，<code>TestMethod</code> 方法返回其中一个索引的数据，然后用一个 <code>temp</code> 变量保存下表为 0 的值，再把这个值乘以 10，最终 <code>temp</code> 变量肯定是翻了 10 倍，但是数组下标为 0 的值不会改变。</p><p>如果要想改变数组下标为 0  的值，必须直接引用数组变量进行操作，用一个临时变量保存是不行的，像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这是定义在类的一个 int 型数组</span><br><span class="line">int[] numbers &#x3D; new int[] &#123; 1, 2, 3 &#125;;</span><br><span class="line"></span><br><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 正确答案：要直接对数组下标进行操作才可以改变值</span><br><span class="line">    numbers[0] *&#x3D; 10;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 错误答案：用一个临时变量来保存是不行的！</span><br><span class="line">    int temp &#x3D; numbers[0];</span><br><span class="line">    temp *&#x3D; 10;</span><br><span class="line"></span><br><span class="line">    Debug.Log(numbers[0]);</span><br><span class="line">    Debug.Log(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们已经知道了有「形式参数」和「引用参数」两种，那么同理，也存在「引用值」的概念。</p><p>当 <code>ref</code> 修饰的是函数的返回值，它就是一个引用返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int[] numbers &#x3D; new int[] &#123; 1, 2, 3 &#125;;</span><br><span class="line"></span><br><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 用 temp 保存返回值的引用</span><br><span class="line">    ref int temp &#x3D; ref TestMethod(0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个时候它还是：1</span><br><span class="line">    Debug.Log(temp);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 乘以10，因为保存的是引用值，等同于numbers[0]</span><br><span class="line">    temp *&#x3D; 10;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 两个都输出：10</span><br><span class="line">    Debug.Log(temp);</span><br><span class="line">    Debug.Log(numbers[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ref int TestMethod(int index)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 返回的是该数组某个下标的引用，意味着可以被改变</span><br><span class="line">    return ref numbers[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果分别是：1、10、10。<br>其实就是与「引用参数」相同概念的「引用返回值」而已。</p><h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3><p>“函数只能有一个返回值！”（Go 语言除外）这恐怕是程序员入门一定会学到的知识点。</p><p>那么能不能在一个函数里，返回两个值？<br>严格意义来说 C# 并不能返回两个值，但是可以用 <code>out</code> 方法来实现从一个函数获取多个值。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    TestMethod(out int a);</span><br><span class="line">    Debug.Log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void TestMethod(out int a)</span><br><span class="line">&#123;</span><br><span class="line">    a &#x3D; 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>TestMethod</code> 方法并没有返回值，通过 <code>out</code> 关键字修饰了形式参数后，再对其进行赋值，在 <code>Start</code> 里却意外的获取到 <code>a=100</code> 的结果，这就是 <code>out</code> 关键词的作用，它可以不需要通过函数的返回值而直接拿到变量计算的结果。</p><p>假如一个函数内的变量有多个是需要返回的，就可以用 <code>out</code> 关键词来进行修饰。</p><p>这里存在一个“歧义”，如果对参数多次操作，那么返回的是初始化的值还是计算结果的值呢？<br>答案是：得到的值是函数体运行结束后最后一次的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void TestMethod(out int a)</span><br><span class="line">&#123;</span><br><span class="line">    a &#x3D; 100;</span><br><span class="line">    a -&#x3D; 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如上面先赋值 100，然后减去 10，最终 a 获取到的结果是 90，即函数整个都运行完成后最终的值。</p><p>值得一提的是，在外部调用包含 <code>out</code> 关键词参数的方法时，不需要声明变量。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 多此一举的方法，不需要特意声明</span><br><span class="line">    int a;</span><br><span class="line">    TestMethod(out a);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 简化方法：TestMethod(out int a)</span><br><span class="line"></span><br><span class="line">    Debug.Log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void TestMethod(out int a)</span><br><span class="line">&#123;</span><br><span class="line">    a &#x3D; 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>关键字 <code>in</code> 比较简单，它修饰的函数参数将视为只读状态，无法在函数内修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    TestMethod(100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void TestMethod(in int a)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 报错，in声明的变量无法在函数内修改</span><br><span class="line">    a +&#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>in</code> 关键字修饰的 a 变量是只读的，因此无法在函数内部进行修改。<br>除了修饰函数参数之外，在 <code>foreach</code> 结构也可以使用。</p><p>这个修饰词主要是为了安全，避免改动了不应该改变的值。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> C Sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】AI 是如何实现的？</title>
      <link href="/2021/10/02/unity-tips-008/"/>
      <url>/2021/10/02/unity-tips-008/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚刚在逛论坛的时候发现一个讨论有关 NPC 的 AI 是如何实现的帖子，于是思考了一下，想到其实利用订阅发布者模式就可以很方便的实现 AI 系统了。</p><p>订阅发布者模式：<a href="https://huotuyouxi.com/2021/09/24/unity-tips-006/">https://huotuyouxi.com/2021/09/24/unity-tips-006/</a></p><h2 id="游戏场景"><a href="#游戏场景" class="headerlink" title="游戏场景"></a>游戏场景</h2><p>AI 就是让 NPC 具有“独立思考”的能力，虽然说是独立思考，但其实也不过是写好的一套程序，但是可以通过某些「数值化」来让 NPC 有不同的行动，NPC 会根据一些数值的变化来制订自身的行动方案，更进一步来说，如果要完全实现由 AI 控制的 NPC，可以用程序制定好一套“性格系统”，比如“暴躁”的性格，NPC 对于“容忍度”（某个数值条件）就会越低，比如玩家偷了他家里的东西，他是无法容忍的，就会直接攻击玩家；而性格“温和”的人，“容忍度”就很高，如果玩家到家里偷东西，他会视而不见。“性格”是各项数值的评判标准，对于泛型的 NPC 来说，只需要指定这个 NPC 的性格，他就会按照自己的“意识”进行行动了。</p><p>例如玩家如果杀了一只鸡，全村的人就会来追杀你。</p><p>这个应该如何实现呢？直接使用 <code>if-else</code>，那整个村子里的 NPC 都得来一个 <code>if-else</code> 结构，很明显累死都写不完。那么我们完全可以这样做，首先是给所有的 NPC 加上一个「友好度」的概念，友好度是一个数值，假设最低是 0，最高是 100，玩家杀了一只鸡，全村 NPC 的友好度会直接变成 0，当友好度为 0 时，NPC 对玩家就是敌对状态，如果 NPC 处于敌对状态，在遇到玩家的时候就会追杀。</p><p>这样就很简单了，只需要指定一套『友好度』的标准，NPC 就会根据数值来进行不同的行动，实现这套系统的最好方法就是订阅发布模式。</p><h2 id="消息的广播"><a href="#消息的广播" class="headerlink" title="消息的广播"></a>消息的广播</h2><p>玩家杀了一只鸡——这是一条消息，只要把玩家杀鸡的消息广播给所有村民，村民在得知这个消息之后就可以做出不同的反应。普通的村民在听到你杀了鸡，就会变得怒不可遏，对你的友好度直接下降到 0，然后开始追杀你。而你的队友，在看到你杀了鸡，并且获得了“鸡肉”，不仅不会生气，反而会增加友好度变得更亲密了。</p><p>玩家在游戏世界里做的每一件事都是一条「消息」，比如玩家完成了公会的委托，那么消息机制就要把<strong>玩家完成委托</strong>的消息广播给全世界，至于 NPC 对这条消息是否在意，就需要根据 NPC 的性格来制定了，不同的 NPC 会对这件事做出不同的反应，例如你的小迷妹在听到你击杀了恶龙，对你的友好度就会上升。</p><h2 id="数值系统"><a href="#数值系统" class="headerlink" title="数值系统"></a>数值系统</h2><p>AI 的行动可以依靠数值进行判定，数值有很多种，所有的数值经过某种『规则』计算之后，NPC 就会执行某种命令。</p><p>由于数值众多，就需要有一个计算「权重」的公式，假设一个 NPC 有下面这几种数值：</p><ul><li>心情(feel)</li><li>武力值(attack)</li><li>饥饿度(hunger)</li></ul><p>NPC 每天都会决定自己今天要干什么，比如他会做三件事：①打猎，②睡觉，③杀死其他 NPC。</p><p>那我们可以简单的实现 NPC 的 AI：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(feel &lt; 10 &amp;&amp; attack &gt; 50 &amp;&amp; hunger &gt;&#x3D; 100 ) &#123;</span><br><span class="line">    killOtherNPC();</span><br><span class="line">&#125; else if (feel &lt; 10 &amp;&amp; attack &lt;&#x3D; 50 &amp;&amp; hunger &gt;&#x3D; 100) &#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; ... 其他行动模式</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 如果心情低于 10，且武力值大于 50，且饥饿度大于等于 100，该NPC就会去杀其他 NPC，通过这种方法在饥饿状态下击杀其他 NPC 抢夺食物饱腹；如果武力值低于 50，NPC 即使在饥饿状态下，也会认为自己太弱小而不敢去攻击别人，因此选择睡觉。</p><p>上述场景就实现了一种简单的 AI 行动模式，但是这样 <code>if-else</code> 来判断，不可能模拟所有的场景，工作量实在太大了。因此我们可以通过计算「权重」的方式来决定 NPC 一天的行动。</p><p>同样是上面的场景，我们可以假定 NPC 是否会去攻击其他玩家，三个数值的重要顺序依次是：①武力值，②饥饿度，③心情。如此一来我们便可以根据重要顺序来给 NPC 进行“打分”，比如武力值的系数是：1.0，饥饿度的系数是：0.8，心情的系数是：0.5，然后将三个数值与系数相乘，最终得到一个『分数』，NPC 会根据这个分数的值来决定行动模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">float score &#x3D; attack * 1.0 + hunger * 0.8 + feel * 0.5;</span><br><span class="line"></span><br><span class="line">if(score &gt; 50) &#123;</span><br><span class="line">    killOtherNPC();</span><br><span class="line">&#125; else if (score &gt; 20) &#123;</span><br><span class="line">    hunter();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当分数大于 50 的时候，他就会去攻击其他 NPC 抢夺食物；当分数大于 20 且小于 50 的时候，他就会选择去狩猎获得食物；其他情况就会选择呆在家里睡觉。（因为自己的武力值很低，而且又十分饥饿，打不过其他 NPC，也打不死动物，就只能待在家里等死了。）</p><p>上面就是一个根据「权重」来计算 NPC 行动 AI 的方式，对应的系数取决于我们给 NPC 设定的“性格”，根据性格因素的不同，对应的系数也不一样，比如好斗的 NPC 他的物理系数就比其他 NPC 要高，当他的武力值达到某个水平就会“仗势欺人”。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要实现 AI 系统，让 NPC 有独立思考能力，可以通过下面的方法来实现。</p><h3 id="消息广播机制"><a href="#消息广播机制" class="headerlink" title="消息广播机制"></a>消息广播机制</h3><p>通过订阅发布者模式，来让 NPC 产生动态变化的数值，比如玩家做了一件事，某个 NPC 的好感度就会变化；而某个 NPC 做了一件事，其他 NPC 也会产生某些变化，这样动态改变的因素很多，NPC 的行为也会影响到其他 NPC，游戏的随机性就会变得很强。</p><p>如果要让强盗知道什么时候才应该去拦路抢劫，就在玩家获得某件宝物的时候“通知”强盗就好了！</p><p>这是「事件驱动」模式，玩家或者 NPC 所做的每一件事都会进行广播，玩家击杀了恶龙，国王听到消息就会发来赏赐，强盗听到国王发给你赏赐的消息，就会拦路抢劫，某个热心路过的 NPC 看到你被强盗抢劫，就会过来帮你一起战斗……诸如此类，一件事只要被广播出去，然后其他的 NPC 就会做出不同的决策，而做出什么决策取决于 NPC 的数值。</p><h3 id="性格机制"><a href="#性格机制" class="headerlink" title="性格机制"></a>性格机制</h3><p>除了某些剧情的 NPC 是固定行为模式，比如魔王会在某时某刻出现在玩家面前，这种固定的模式都是程序写死的，是必然发生的事件，因此不涉及 AI 概念。对于村民之类的普通 NPC，我们要让他们会根据自己的“思考”行动产生很多变数，我们就可以设定好一套「性格系统」，NPC 在出生时赋予一个性格，不同性格下，某个属性的成长速度就会不一样，因而产生出更多的数值变化。</p><p>数值的变化就是游戏随机性的根本条件。</p><h3 id="数值行为机制"><a href="#数值行为机制" class="headerlink" title="数值行为机制"></a>数值行为机制</h3><p>NPC 的行动依据是根据自身的数值综合计算之后的结果，也就是有一套『权重计算』机制，根据最终得到的“分数”来决定 NPC 的行为模式，这个计算方式就是 AI 最核心的部分了，沙盒游戏好不好玩，主要就是取决于如何计算的，当然我也不是专业的，无法再详细的解释下去。</p><h2 id="做一个沙盒游戏？"><a href="#做一个沙盒游戏？" class="headerlink" title="做一个沙盒游戏？"></a>做一个沙盒游戏？</h2><p>NPC 具有独立思考的游戏现在十分常见，而且百玩不厌。<br>要不要制作一个沙盒游戏呢？有些心动！</p><p>一个战争模拟类型的游戏，NPC 会占山为王，而那些村民们则会根据自己的性格选择加入或者逃亡去投靠别的国家，那些成为王的 NPC 们，则会与其他国家结盟或者发起战争，一旦战争发动，就会有村民逃离，他们会去哪呢？如果你是一个新的王，会选择接收这些难民吗？而你又该如何发展壮大自己的国家，去招募那些拥有「独立思考」能力的武将呢？当你弱小的时候，没有一个武将看得上你，但是也有可能发生奇遇，像从公孙瓒手中得到猛将“赵云”呢？也许一次随机事件，让你救下一位重伤的猛将，因此成为你的左臂右膀！充满变数的这个世界，每个 NPC 都是“活”的，他们也会痛苦，他们也会悲伤，他们不再是那个站在路边只会为你鼓掌的路人甲，他们每一个都可能成为这个游戏的主角，而作为玩家的你，已经不再享有主角光环，立场与那些 NPC 一模一样的时候，你又该如何掌控自己的人生？</p><p>现在一个游戏都没做出来，要怎么才能开这个新坑呢o(╯□╰)o</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各大公开版权可免费使用的素材网站</title>
      <link href="/2021/10/02/shared-01/"/>
      <url>/2021/10/02/shared-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本站为「火兔游戏工作室」的官方博客网站，在更新我们的游戏进度的同时，也会分享一些好用的网站，如果你手里也有一些好用的网站希望分享给我们，可以联系 QQ：874811226，我们会把网站添加到这篇文章里。</p><p>QQ 交流群：84334403</p><p><strong>记得把网站加入收藏夹哦！如果顺便能关注一下我们的游戏就更好啦 (づ￣ 3￣)づ</strong></p><p>本文将长期更新，不断收录各大免费使用的素材网站，包括但不限于：音乐、音效、立绘、行走图等等，任何与游戏开发相关的资源网站。</p><p>对于独立开发者来说，素材是最大的难题，尤其是音乐和美术，技术壁垒极高，想要从零开始学习绝非易事，当然如果你想要成为《东方 Project》的 ZUN 或者《传说之下》的 Toby，以及国内独立游戏《原石计划》的 AliveGameStudio 那样全能型的选手，不仅懂技术，会美术，甚至还能编曲！有这样的目标固然是好事，但是我们的人生毕竟是有限的，与其全知全能，不如专攻一项特长，自己不擅长的部分只要找到另一个擅长的小伙伴来弥补就可以了。</p><p>如果没有找到合适的小伙伴，那么本文就非常适合你了。本文收录的素材网站一般都是允许个人免费使用的，但是否允许商用或者某些题材（如 R18）需要根据作者的约定来使用，请以对方网站上面的使用约定为准。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>由于大多是国外的网站，因此有些网站国内的网络可能无法访问，需要开启 VPN。<br>尊重作者版权，人人有责，如果使用了别人免费分享的素材，请自觉遵守以下内容：</p><ul><li>在游戏内标注作者的名字或者网站地址</li><li>给作者发一封邮件或者在留言板告知</li><li>禁止二次修改发布（原作者允许的情况下除外）</li><li>部分素材有限定条件，请根据作者的要求合法使用</li></ul><p>上述为常规的要求，实际的利用约定请前往原作者的网站查看。</p><h2 id="综合类型"><a href="#综合类型" class="headerlink" title="综合类型"></a>综合类型</h2><h3 id="OpenGameArt"><a href="#OpenGameArt" class="headerlink" title="OpenGameArt"></a>OpenGameArt</h3><p>网站地址：<a href="https://opengameart.org/">https://opengameart.org/</a></p><p>该网站主要是像素类型的素材，还有一些音效以及音乐，素材很多，但也很杂乱。<br>推荐你注册一个账号，可以在老外分享素材的帖子下面与老外聊天。</p><h3 id="Vita-chi-Sozaikan-素材馆"><a href="#Vita-chi-Sozaikan-素材馆" class="headerlink" title="Vita-chi Sozaikan 素材馆"></a>Vita-chi Sozaikan 素材馆</h3><p>网站地址：<a href="http://www.vita-chi.net/sozai1.htm">http://www.vita-chi.net/sozai1.htm</a></p><p>有一些影子人物图还有对话框 UI 等等，恐怖解谜类型或者文字游戏常用的素材。<br>除了图片素材还有一些效果音，恐怖解谜风格的。</p><p>逃跑后的喘气声：<a href="http://www.vita-chi.net/sec/voi/hora/haa1.wav">http://www.vita-chi.net/sec/voi/hora/haa1.wav</a></p><p>少女的悲鸣声：<a href="http://www.vita-chi.net/sec/voi/hora/9_kyaaa.wav">http://www.vita-chi.net/sec/voi/hora/9_kyaaa.wav</a><br>（注意调小音量且带上耳机，否则别人可能会以为你是个 Hentai）</p><p>当然也有背景音乐：<a href="http://www.vita-chi.net/sec/voi/hora/bgm_sadsong.mp3">http://www.vita-chi.net/sec/voi/hora/bgm_sadsong.mp3</a><br>如果你做的是一款恐怖解谜游戏，那么这里的素材非常适合你，尤其是人声特别难找，但是这个网站超级全。</p><h2 id="图像素材"><a href="#图像素材" class="headerlink" title="图像素材"></a>图像素材</h2><h3 id="Wataokiba"><a href="#Wataokiba" class="headerlink" title="Wataokiba"></a>Wataokiba</h3><p>网站地址：<a href="https://wataokiba.net/">https://wataokiba.net/</a></p><p>该网站主要是 RPG Maker 风格的头像以及人物的立绘，作者的上色风格看起来很舒服，可惜的是素材不多。</p><p>素材风格预览：</p><p><img src="https://wataokiba.net/wp-content/uploads/2019/03/%E7%B4%B9%E4%BB%8B%E7%94%BB%E5%83%8F23%E5%85%A5%E9%99%A2%E6%82%A3%E8%80%85%E3%81%AE%E5%A5%B3%E3%81%AE%E5%AD%90.png" alt="立ち絵素材　女性11（入院患者）"></p><p><img src="https://wataokiba.net/wp-content/uploads/2018/06/%E7%B4%B9%E4%BB%8B%E7%94%BB%E5%83%8F17%E6%B5%B4%E8%A1%A3%E3%81%AE%E5%B0%91%E5%A5%B3%E9%BB%92%E9%AB%AA.png" alt="立ち絵素材　女性09（浴衣　黒髪／白髪）"></p><p><img src="https://wataokiba.net/wp-content/uploads/2019/03/%E7%B4%B9%E4%BB%8B%E7%94%BB%E5%83%8F25%E3%83%81%E3%83%A3%E3%82%A4%E3%83%8A%E6%9C%8D%E3%81%AE%E5%A5%B3%E3%81%AE%E5%AD%90.png" alt="立ち絵素材　女性12（チャイナ服）"></p><h3 id="Un-Almacen"><a href="#Un-Almacen" class="headerlink" title="Un Almacen"></a>Un Almacen</h3><p>网站地址：<a href="http://zioru.x0.to/">http://zioru.x0.to/</a></p><p>该网站主要是 RPG Maker 风格的图标素材，还有一些头像以及像素风的人物。</p><h3 id="チョコミントの木"><a href="#チョコミントの木" class="headerlink" title="チョコミントの木"></a>チョコミントの木</h3><p>网站地址：<a href="http://mintk.blog79.fc2.com/">http://mintk.blog79.fc2.com/</a></p><p>RPG Maker 风格的行走图以及对应的头像素材。</p><h3 id="のんびりまったり"><a href="#のんびりまったり" class="headerlink" title="のんびりまったり"></a>のんびりまったり</h3><p>网站地址：<a href="http://momope8.blog67.fc2.com/">http://momope8.blog67.fc2.com/</a></p><p>RPG Maker 风格的行走图以及对应的头像素材。</p><h3 id="Spriters-Resource"><a href="#Spriters-Resource" class="headerlink" title="Spriters Resource"></a>Spriters Resource</h3><p>网站地址：<a href="https://www.spriters-resource.com/">https://www.spriters-resource.com/</a></p><p>这个网站不属于「开源素材」的分类，但是个人觉得挺有用的，因为里面都是一些 NDS、GBA 等等游戏提取的素材，可以当做参考。</p><p><strong>注意：这个网站的素材是不能使用的！</strong></p><h3 id="阿里巴巴矢量图库"><a href="#阿里巴巴矢量图库" class="headerlink" title="阿里巴巴矢量图库"></a>阿里巴巴矢量图库</h3><p>网站地址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p>这个是 WEB 常用的素材网站，里面包含了各种网页、APP 需要用到的图标。<br>如果游戏中有一些手机 APP 或者菜单图标之类的素材需求，可以在这里面找。</p><h3 id="Kenny"><a href="#Kenny" class="headerlink" title="Kenny"></a>Kenny</h3><p>网站地址：<a href="https://kenney.nl/">https://kenney.nl/</a></p><p>各种小游戏的素材，主要是 Tilemap 风格的。</p><h3 id="Lunarea’s-Blog"><a href="#Lunarea’s-Blog" class="headerlink" title="Lunarea’s Blog"></a>Lunarea’s Blog</h3><p>（2021.10.27 更新）<br>这是一个名叫 Lunarea 的歪果仁，此人即是一个游戏制作者，也是一个美工，素材是 RPG Maker 风格的。<br>素材包括行走图、地图场景还有角色头像、半身立绘等。</p><p>网站地址：<a href="http://lunareas.blogspot.com/">http://lunareas.blogspot.com/</a></p><p>预览：</p><p><img src="http://2.bp.blogspot.com/-lky1VUQtr54/UWYMdMOa-6I/AAAAAAAAAYs/7lkLDC9Xao0/s1600/Claudia-Final.gif" alt="小女孩行走图"></p><p><img src="http://1.bp.blogspot.com/-HR_mp1HwAAo/UV8NH3VvMRI/AAAAAAAAAYU/8XWRFZ7LgkM/s400/TUAH-Girls.png" alt="半身立绘"></p><h3 id="星宝転生ジュエルセイバー"><a href="#星宝転生ジュエルセイバー" class="headerlink" title="星宝転生ジュエルセイバー"></a>星宝転生ジュエルセイバー</h3><p>（2021.10.27 更新）</p><p>这是一个可商业化的卡牌游戏素材，大量的人物立绘资源，制作非常精美。<br>台湾有些商业化游戏甚至直接拿他们的素材制作，台湾的巴哈姆特论坛有汉化的使用声明，<a href="https://home.gamer.com.tw/creationDetail.php?sn=2656917">点击这里查看</a>。</p><blockquote><p>早在今年(2014)年初，日本APP遊戲商ブリリアントサービス做了一件驚人之舉，它把旗下卡牌遊戲《星寶轉生》的部份圖像與劇本釋出，提供幾乎完全自由使用的免費素材。只要在公開的作品標註素材標題ジュエルセイバーFREE與星寶的官網連結<a href="http://www.jewel-s.jp/%EF%BC%8C%E5%B0%B1%E7%AE%97%E4%BD%BF%E7%94%A8%E8%80%85%E5%8E%9F%E5%B0%81%E4%B8%8D%E5%8B%95%E5%9C%B0%E6%8B%BF%E5%8D%A1%E7%89%8C%E5%9C%96%E7%89%87%E5%8E%BB%E9%80%B2%E8%A1%8C%E5%95%86%E6%A5%AD%E6%B4%BB%E5%8B%95%EF%BC%8C%E9%83%BD%E6%98%AF%E5%8E%9F%E5%BB%A0%E6%89%80%E5%85%81%E8%A8%B1%E7%9A%84%E7%AF%84%E5%9C%8D%E3%80%82">http://www.jewel-s.jp/，就算使用者原封不動地拿卡牌圖片去進行商業活動，都是原廠所允許的範圍。</a></p></blockquote><p>网站地址：<a href="https://jewel-s.jp/character/">https://jewel-s.jp/character/</a><br>下载页面：<a href="https://jewel-s.jp/download/">https://jewel-s.jp/download/</a></p><p>预览：</p><p><img src="https://files.catbox.moe/mvx0v4.jpg" alt="封面预览"><br><img src="https://files.catbox.moe/8c586b.PNG" alt="人物素材"></p><p>由于是商业化游戏开源分享的，质量完全就是商业化的水准。<br>可以完全免费的使用哦！即使用于你的商业游戏也被允许。</p><h3 id="星乃だーつのモンスター図鑑"><a href="#星乃だーつのモンスター図鑑" class="headerlink" title="星乃だーつのモンスター図鑑"></a>星乃だーつのモンスター図鑑</h3><p>（2021.10.27 更新）</p><p>可爱风的立绘，有怪物和人物，包括日本神话故事的人物，制作非常精美而且数量超多！<br>网站地址：<a href="http://darts-x.sakura.ne.jp/m/">http://darts-x.sakura.ne.jp/m/</a></p><p><img src="https://files.catbox.moe/vwtvqa.jpg" alt="可爱风立绘"><br><img src="https://files.catbox.moe/wljxh4.jpg" alt="卑弥呼"><br><img src="https://files.catbox.moe/z11utk.jpg" alt="教祖"></p><h3 id="王国興亡記"><a href="#王国興亡記" class="headerlink" title="王国興亡記"></a>王国興亡記</h3><p>（2021.10.27 更新）</p><p>这是一个非常不错的素材站，它包含了 RPG Maker 系列所需要的：立绘、头像和行走图全套素材，并且画风非常不错！<br>目前臼井绘网站关闭之后，完全可以在此处获取你需要的角色素材。<br>不过比起臼井绘的素材，王国兴亡记的素材没有战斗动作图。</p><p>网站地址：<a href="http://makapri.web.fc2.com/top.html">http://makapri.web.fc2.com/top.html</a></p><p><img src="https://pic.imgdb.cn/item/61796c7b2ab3f51d913238e4.jpg" alt="角色全套素材"></p><h3 id="unity-chan"><a href="#unity-chan" class="headerlink" title="unity-chan"></a>unity-chan</h3><p>（2021.10.27 更新）</p><p>包括2D、3D 素材，还有像素风的，制作非常精美，而且数量非常多。<br>并且作者还设定了人物关系，网站也做的十分漂亮。</p><p>网站地址：<a href="https://unity-chan.com/">https://unity-chan.com/</a><br>利用约定：<a href="https://unity-chan.com/contents/guideline/">https://unity-chan.com/contents/guideline/</a><br>下载地址：<a href="https://unity-chan.com/download/index.php">https://unity-chan.com/download/index.php</a></p><p><img src="https://pic.imgdb.cn/item/61796d542ab3f51d913376a1.jpg" alt="网站封面"><br><img src="https://pic.imgdb.cn/item/61796d7d2ab3f51d9133c919.jpg" alt="角色形象"><br><img src="https://pic.imgdb.cn/item/61796e532ab3f51d91352ba6.jpg" alt="黄毛小姐姐"></p><h3 id="CLOSET"><a href="#CLOSET" class="headerlink" title="CLOSET"></a>CLOSET</h3><p>（2021.10.27 更新）</p><p>主要是一些中世纪风格的素材，有背景、头像和一些比较少见的诸如古代遗迹、羊皮纸等等 CG 素材。<br>适合制作一些与古代文明、挖掘遗迹之类有关的游戏。</p><p>网站地址：<a href="https://sites.google.com/site/closetvx/">https://sites.google.com/site/closetvx/</a></p><p>预览：</p><p><img src="https://pic.imgdb.cn/item/61796f792ab3f51d9137008f.jpg" alt="人物风格"></p><h3 id="CLOSET2"><a href="#CLOSET2" class="headerlink" title="CLOSET2"></a>CLOSET2</h3><p>（2021.10.27 更新）</p><p>跟上面的不同，这个网站有超多的 RPG Maker 系列头像和对应的行走图、立绘素材，而且很多都是很稀有的！<br>还有一些稀奇古怪的异常生物，例如：龙、恶魔、幻兽等等。</p><p>网站地址：<a href="http://eurs.blog65.fc2.com/">http://eurs.blog65.fc2.com/</a></p><p>预览：</p><p><img src="https://pic.imgdb.cn/item/6179700b2ab3f51d9137c138.jpg" alt="网站首页"></p><h3 id="ぴぽや"><a href="#ぴぽや" class="headerlink" title="ぴぽや"></a>ぴぽや</h3><p>（2021.10.27 更新）</p><p>有大量的人物、背景图等等素材。</p><p>网站地址：<a href="http://blog.pipoya.net/">http://blog.pipoya.net/</a></p><p>预览：<br><img src="https://pic.imgdb.cn/item/617971612ab3f51d91395ad9.jpg" alt="网站首页"></p><h3 id="ドット絵世界"><a href="#ドット絵世界" class="headerlink" title="ドット絵世界"></a>ドット絵世界</h3><p>（2021.10.27 更新）</p><p>RPG Maker 系列素材，包括地图图块、行走图和一些动物的行走图，比如独角兽。</p><p>网站地址：<a href="http://yms.main.jp/">http://yms.main.jp/</a></p><h3 id="異教徒たちの踊り"><a href="#異教徒たちの踊り" class="headerlink" title="異教徒たちの踊り"></a>異教徒たちの踊り</h3><p>（2021.10.27 更新）</p><p>大量的背景图素材，适合做一些文字类或者解谜类游戏。</p><p>网站地址：<a href="https://blog.goo.ne.jp/ari1192jp_001">https://blog.goo.ne.jp/ari1192jp_001</a></p><h3 id="空想曲線"><a href="#空想曲線" class="headerlink" title="空想曲線"></a>空想曲線</h3><p>（2022.03.25 更新）<br>地址：<a href="https://kopacurve.blog.fc2.com/">https://kopacurve.blog.fc2.com/</a></p><p>主要为文字游戏的 UI 素材，允许被商业化免费使用，使用约定：<a href="https://kopacurve.blog.fc2.com/blog-entry-394.html">https://kopacurve.blog.fc2.com/blog-entry-394.html</a></p><h3 id="夢観士あさき"><a href="#夢観士あさき" class="headerlink" title="夢観士あさき"></a>夢観士あさき</h3><p>（2022.03.25 更新）</p><p>地址：<a href="http://muyuu.sakura.ne.jp/">http://muyuu.sakura.ne.jp/</a></p><p>有一些背景素材和 SRPG 游戏的相关素材，几乎是全套的，包括 UI、头像、战斗图等等，背景图超多。</p><h3 id="waifulabs"><a href="#waifulabs" class="headerlink" title="waifulabs"></a>waifulabs</h3><p>（2022.03.25 更新）</p><p>地址：<a href="https://waifulabs.com/">https://waifulabs.com/</a></p><p>这个网站非常有意思，应该是用人工智能通过大数据来生成人物，首先你要在一堆的动漫人物里面挑选一个你中意的。</p><p><img src="https://pic.imgdb.cn/item/623d45a527f86abb2ac57303.jpg" alt="选取一个动漫人物"></p><p>接着再进进一步的选择你中意的：</p><p><img src="https://pic.imgdb.cn/item/623d45a527f86abb2ac57329.jpg" alt="进一步的选取"></p><p>再次选择之后，AI 会继续通过你当前选择的头像再次生成不同的图像：</p><p><img src="https://pic.imgdb.cn/item/623d45db27f86abb2ac6d58c.jpg" alt="AI 再次演变"></p><p>当我选择黑长直的角色之后，AI 再一次给我们生成了众多“黑长直”的角色：</p><p><img src="https://pic.imgdb.cn/item/623d464327f86abb2ac9c502.jpg" alt="黑长直角色"></p><p>通过如此反复演变，每次得到的角色都是不一样的，直到最后一步选择“Download”下载即可。<br>waifu 就是老婆的意思，也就是说这个平台叫做……二次元老婆生成器！</p><h2 id="音乐素材"><a href="#音乐素材" class="headerlink" title="音乐素材"></a>音乐素材</h2><h3 id="魔王の魂"><a href="#魔王の魂" class="headerlink" title="魔王の魂"></a>魔王の魂</h3><p>网站地址：<a href="https://maou.audio/">https://maou.audio/</a></p><p>非常出名的一个免费音乐网站，BGM 的数量异常之多，基本上包含了 RPG 游戏需要用到的所有类型的音乐，如村庄、战斗 BGM，以及乘坐交通工具的 BGM 等等。如果你是使用 RPG Maker 的开发者，那么十分推荐从这个网站获取到免费使用的音乐。</p><p>魔王の魂上面可以获取的音乐种类实在是太多了！！！即使是 8-bit 的音乐也有，音乐的风格迥异，基本上适合所有类型的游戏。</p><h3 id="Wingless"><a href="#Wingless" class="headerlink" title="Wingless"></a>Wingless</h3><p>网站地址：<a href="https://wingless-seraph.net/">https://wingless-seraph.net/</a></p><p>这个网站也包含了 RPG 游戏基本音乐，作者估计是个车万厨，有许多东方风格的 BGM，并且此类 BGM 似乎还限制了东方同人游戏使用。作者的风格比较偏向于日本的和风，曲风听起来蛮舒服的，如果你要制作的是东方同人，那么该网站非常适合你。</p><p>鬼屋 BGM，可以试听一下：<a href="https://wingless-seraph.net/material/Crazy-Halloween-Night.mp3">https://wingless-seraph.net/material/Crazy-Halloween-Night.mp3</a></p><p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://wingless-seraph.net/material/Crazy-Halloween-Night.mp3"><br></audio></p><p>东方 Project 红魔馆大小姐主题曲：<a href="https://wingless-seraph.net/material/Touhou_septet-YouFulca.mp3">https://wingless-seraph.net/material/Touhou_septet-YouFulca.mp3</a></p><p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://wingless-seraph.net/material/Touhou_septet-YouFulca.mp3"><br></audio></p><p>一首和风 BGM：<a href="https://wingless-seraph.net/material/Battle-Ayakashi.mp3">https://wingless-seraph.net/material/Battle-Ayakashi.mp3</a></p><p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://wingless-seraph.net/material/Battle-Ayakashi.mp3"><br></audio></p><p>8-bit FC 游戏开头 BGM：<a href="https://wingless-seraph.net/material/8bit-act01_title.mp3">https://wingless-seraph.net/material/8bit-act01_title.mp3</a></p><p>​<audio id="audio" controls="" preload="none"><br>      <source id="mp3" src="https://wingless-seraph.net/material/8bit-act01_title.mp3"><br></audio></p><p>这个网站的音乐分类也满齐全的，比如事件用 BGM，战斗 BGM，同时也有 8-bit 的BGM。</p><h3 id="甘茶の音楽工房"><a href="#甘茶の音楽工房" class="headerlink" title="甘茶の音楽工房"></a>甘茶の音楽工房</h3><p>（2022.03.25 更新）<br>地址：<a href="https://amachamusic.chagasi.com/">https://amachamusic.chagasi.com/</a></p><p>RPG 幻想风格、现代风、和风等系列音乐都有，该网站的音乐允许个人使用以及商业使用，并且版权声明不是强制性的，使用的时候也不需要报告给该网站。使用约定：<a href="https://amachamusic.chagasi.com/terms.html">https://amachamusic.chagasi.com/terms.html</a></p><h3 id="煉獄庭園"><a href="#煉獄庭園" class="headerlink" title="煉獄庭園"></a>煉獄庭園</h3><p>（2022.03.25 更新）<br>地址：<a href="https://note.com/rengokuteien/">https://note.com/rengokuteien/</a><br>该站的音乐几乎被允许用在任何地方，包括商业游戏也可以免费使用，比较敏感的宗教、18 禁的场合也被允许，唯一限制的是 VOCALOID 被禁止用于违反公共秩序和道德，在使用该站的音乐时必须要声明版权来源，但并不需要报告给网站，只需要声明为“煉獄庭園”的文字即可，不需要添加网站链接，使用约定：<a href="https://note.com/rengokuteien/n/n0f6dc2ab7bab">https://note.com/rengokuteien/n/n0f6dc2ab7bab</a></p><h3 id="音楽の卵"><a href="#音楽の卵" class="headerlink" title="音楽の卵"></a>音楽の卵</h3><p>（2022.03.25 更新）<br>地址：<a href="https://ontama-m.com/">https://ontama-m.com/</a></p><p>收录了 500 首以上的 BGM，个人、商业游戏都可以免费使用，并且在使用时不需要报告给网站，也不用注明版权来源，只要不是违反社会道德和秩序的都可以使用，包括 BL、18 禁等等，使用约定：<a href="https://ontama-m.com/ongaku.html">https://ontama-m.com/ongaku.html</a></p><h3 id="耳聆网"><a href="#耳聆网" class="headerlink" title="耳聆网"></a>耳聆网</h3><p>（2022.03.25 更新）<br>地址：<a href="https://www.ear0.com/">https://www.ear0.com/</a></p><p>该站的音效比较齐全，不过要注意不是全部的音效都是可以免费商用的，存在侵权的可能性，如果使用该站的音效资源，请留意版权问题，版权声明：<a href="https://www.ear0.com/home/info/keyword-copyright">https://www.ear0.com/home/info/keyword-copyright</a></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体的版权问题可能不那么起眼，但如果不小心使用了商业字体，业界也有被起诉的情况。</p><h2 id="100font"><a href="#100font" class="headerlink" title="100font"></a>100font</h2><p>地址：<a href="https://www.100font.com/">https://www.100font.com/</a><br>该网站专门收集可以商用的免费字体。</p><h2 id="其他网站"><a href="#其他网站" class="headerlink" title="其他网站"></a>其他网站</h2><p>这里收录一些其他对独立游戏开发者有帮助的网站。</p><h3 id="Taptap"><a href="#Taptap" class="headerlink" title="Taptap"></a>Taptap</h3><p>网站地址：<a href="https://www.taptap.com/">https://www.taptap.com/</a><br>主要是游戏的推广，很多手游和独立游戏的作者会来这边投稿，偏向于安利游戏的网站。</p><h3 id="奶牛关"><a href="#奶牛关" class="headerlink" title="奶牛关"></a>奶牛关</h3><p>网站地址：<a href="https://cowlevel.net/">https://cowlevel.net/</a><br>游戏推荐类型的网站，也有一些大佬会分享一些有趣的文章。<br>发现页地址：<a href="https://cowlevel.net/discover">https://cowlevel.net/discover</a></p><h3 id="独立精神"><a href="#独立精神" class="headerlink" title="独立精神"></a>独立精神</h3><p>网站地址：<a href="https://indienova.com/">https://indienova.com/</a><br>里面有很多技术类型的文章，还有一些大佬的游戏预告，文章有很多干货，认真看的话会学到不少东西。</p><h3 id="Project1"><a href="#Project1" class="headerlink" title="Project1"></a>Project1</h3><p>网站地址：<a href="https://rpg.blue/">https://rpg.blue/</a><br>RPG Maker 系列制作工具国内主要讨论论坛，耕耘了超过十年，原来是 66RPG，后面柳柳为了商业利益决定抛弃这个免费的 RM 论坛，某版主私底下联系到柳柳，把论坛的数据给保留了下来，也就是现在的 Project1（RPG Maker 系列新建工程默认的名字）。</p><p>这个网站也是我和 Cee 制作游戏梦想的起点，如果没有 66RPG 的话，也许我们就不会走向制作游戏这条路了。<br>还记得那句话：“梦想世界，在你手中”。</p><p>现在这句话也变成了我们的口号：『我的世界，在你手中 —— 火兔游戏工作室』。</p>]]></content>
      
      
      <categories>
          
          <category> 随心分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏素材 </tag>
            
            <tag> 游戏制作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 获取 data 自定义数据时的注意事项</title>
      <link href="/2021/10/02/javascript-01/"/>
      <url>/2021/10/02/javascript-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 HTML 开发中，给标签加上 <code>data-xxx</code> 属性是很常见的一种做法，例如 <code>data-id=&quot;1&quot;</code>，这样就可以很方便的取得 id 的值了。今天在给之前做的剧情编辑器添加“插入”功能时，突然踩了一个坑，虽然是一个很低级的错误……</p><p><img src="https://pic.imgdb.cn/item/6157c1342ab3f51d9179f5c3.jpg" alt="剧情编辑器新增插入数据功能"></p><h2 id="数组任意插入元素"><a href="#数组任意插入元素" class="headerlink" title="数组任意插入元素"></a>数组任意插入元素</h2><p>数据是一个数组，在 JavaScript 想要往数组中间插入数据可以使用 <code>splice</code> 这个系统内置的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&quot;aa&quot;, &quot;bb&quot;, &quot;dd&quot;];</span><br><span class="line">arr.splice(2, 0, &quot;cc&quot;);</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4) [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;dd&#39;]</span><br></pre></td></tr></table></figure><p>这个方法只要获取到需要插入的位置，即数组的下标索引就可以在该位置插入一个新元素。</p><h2 id="踩坑过程"><a href="#踩坑过程" class="headerlink" title="踩坑过程"></a>踩坑过程</h2><p>动态生成一个列表，有这样一个 a 标签用来执行插入事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;insert-event&quot; data-id&#x3D;&quot;0&quot; href&#x3D;&quot;javascript:void(0);&quot;&gt;插入&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><code>data-id</code> 用来存储数组的下标。</p><p>由于是动态生成的元素，因此不能用常规的 <code>on</code> 来绑定监听，否则会监听不到点击事件。<br>需要绑定父级标签，然后再监听子标签的点击事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#preview&quot;).on(&#39;click&#39;, &#39;.insert-event&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">    let insertIndex &#x3D; e.target.dataset.id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>绑定了监听事件之后就可以获取当前点击事件上面的属性了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let insertIndex &#x3D; e.target.dataset.id;</span><br></pre></td></tr></table></figure><p>上面的方法即获取到标签上面的自定义属性 <code>data-id</code>。</p><p>接下来只要计算新的位置插入元素即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let newIndex &#x3D; insertIndex + 1;</span><br><span class="line">console.log(&quot;插入位置：&quot; + newIndex);</span><br><span class="line"></span><br><span class="line">commands.splice(newIndex, 0, data);</span><br></pre></td></tr></table></figure><p>看上去没什么问题？<br>实际上却错了，这里的 <code>insertIndex + 1</code> 会被当做字符串相加，即变成了字符串连接操作……</p><p>正确的做法应该是在计算时强制转换为整型变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let newIndex &#x3D; parseInt(insertIndex) + 1;</span><br><span class="line">console.log(&quot;插入位置：&quot; + newIndex);</span><br><span class="line"></span><br><span class="line">commands.splice(newIndex, 0, data);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 HTML 标签中自定义属性都会被当做字符串，如果是整型数据则需要手动转换才能参与计算。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】实现存档/读档系统以及存储文件本地化</title>
      <link href="/2021/09/26/unity-tips-007/"/>
      <url>/2021/09/26/unity-tips-007/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>存档系统基本上是所有游戏必备的，存档的本质就是将内存中的变量以文件的形式保存下来；而读档则是将本地文件转化为内存中的变量。</p><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>unity 自带的存储功能适合存储简单的数据，如果需要保存复杂的数据，可以借助第三方插件实现。</p><h3 id="PlayerPrefs"><a href="#PlayerPrefs" class="headerlink" title="PlayerPrefs"></a>PlayerPrefs</h3><p>unity 自带了一个 <code>PlayerPrefs</code> 来保存本地文件，<code>PlayerPrefs</code> 是一个简单的键值对形式数据存储系统，通过 unity 提供的内置方法可以简单的实现数据存储和读取，一般用来保存简单的数据，比如游戏的系统配置，以及一些小游戏的存档数据。</p><p>数据的存储示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;存储整型数据</span><br><span class="line">PlayerPrefs.SetInt(&quot;yourKeyName&quot;,999); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存储浮点型数据</span><br><span class="line">PlayerPrefs.SetFloat(&quot;yourKeyName&quot;,1.11f); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存储字符串数据</span><br><span class="line">PlayerPrefs.SetString(&quot;yourKeyName&quot;,&quot;my name is kangkang&quot;);</span><br></pre></td></tr></table></figure><p>数据的读取示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;取出key为&quot;yourKeyName&quot;的整型数据</span><br><span class="line">int intVal &#x3D; PlayerPrefs.GetInt(&quot;yourKeyName&quot;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取出key为&quot;yourKeyName&quot;的浮点型数据</span><br><span class="line">float floatVal &#x3D; PlayerPrefs.GetFloat(&quot;yourKeyName&quot;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取key为&quot;yourKeyName&quot;的字符串数据</span><br><span class="line">string strVal &#x3D; PlayerPrefs.GetString(&quot;yourKeyName&quot;);</span><br></pre></td></tr></table></figure><p>删除数据示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除所有存储数据</span><br><span class="line">PlayerPrefs.DeleteAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除key为&quot;yourKeyName&quot;的数据</span><br><span class="line">PlayerPrefs.DeleteKey(&quot;yourKeyName&quot;);</span><br></pre></td></tr></table></figure><p>判断数据是否存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查找是否存在key为&quot;yourKeyName&quot;的数据</span><br><span class="line">bool exist &#x3D; PlayerPrefs.HasKey(&quot;yourKeyName&quot;)</span><br></pre></td></tr></table></figure><p>注意，由于是 unity 内置的方法，所以存储位置就由 unity 来决定，根据操作系统的不同，存储的位置也不同。</p><ul><li>在 Mac OS X 平台下，存储在 ~/Library/Preferences 文件夹，名为 unity.[company name].[product name].plist。</li><li>在 Windows 平台下，存储在注册表的 HKEY_CURRENT_USER\Software[company name][product name] 键下。</li></ul><p>其他需要注意的地方：当取一个不存在的键的值时，返回的是 <code>c#</code> 的默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int intVal &#x3D; PlayerPrefs.GetInt(&quot;yourKeyName&quot;);</span><br><span class="line">Debug.Log(intVal);</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>yourKeyName</code> 并没有被设置过，因此返回 <code>int</code> 的默认值即 0。</p><p><code>PlayerPrefs</code> 能存储多大的数据暂时在网上找不到答案，不过一般都是存储一些安全性不高的简单数据，所以不推荐将 json 转化成字符串存储到 <code>PlayerPrefs</code>，而且如果有玩家知道 unity 的特性就可以找到对应的文件然后随意修改，安全性不高。</p><p><code>PlayerPrefs</code> 没办法存储复杂的数据类型，比如字典、列表，只能将其转换成 json 字符串，然后再保存为字符串形式，在读取的时候再将 json 字符串转化为 json 对象，这样的步骤十分繁琐。</p><p>对于一般的游戏存档数据，推荐用下面的方法。</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><code>c#</code> 和 unity 没有提供直接存储和读取 JSON 的方法，于是我们需要借助第三方插件来实现，JSON 插件有很多种，这里我使用的是 <code>LitJSON</code>。</p><p>LitJSON 官网：<a href="https://litjson.net/">https://litjson.net/</a></p><p>下载插件的 DLL 文件，然后拖进游戏目录就可以自动加载插件了。这样我们就可以在脚本通过 <code>using LitJson</code> 引入这个插件，就可以直接使用插件内置的方法。 </p><p>游戏存档数据是一个类文件，用来保存数据的字段，<code>Savefile</code>（存档数据）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using Core.Information;</span><br><span class="line"></span><br><span class="line">namespace Core.Save</span><br><span class="line">&#123;</span><br><span class="line">    public class Savefile</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 当前场景</span><br><span class="line">        public string currentScene;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 保存对话进度相关</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public string currentDialogCommand;</span><br><span class="line">        public int currentDialogIndex;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 触发器开关</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public Dictionary&lt;string, bool&gt; switchKeys &#x3D; new Dictionary&lt;string, bool&gt;();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 已收集的信息</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public List&lt;string&gt; informationDatas &#x3D; new List&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 变量</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public Dictionary&lt;string, int&gt; values &#x3D; new Dictionary&lt;string, int&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存档数据就是一个内存中的变量，要把变量存储到本地文件，或者把本地存档加载到内存变量，就需要一个用来读写文件的系统 <code>FileSystem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using LitJson;</span><br><span class="line">using System.IO;</span><br><span class="line">using Core.Save;</span><br><span class="line"></span><br><span class="line">namespace Util</span><br><span class="line">&#123;</span><br><span class="line">    public class FileSystem</span><br><span class="line">    &#123;</span><br><span class="line">        public static string savefilePath &#x3D; Application.dataPath + &quot;&#x2F;Savefile&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">        public static Savefile LoadSavefile(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            string realPath &#x3D; GetRealPath(index);</span><br><span class="line"></span><br><span class="line">            Savefile data &#x3D; null;</span><br><span class="line"></span><br><span class="line">            if (File.Exists(realPath))</span><br><span class="line">            &#123;</span><br><span class="line">                string json &#x3D; File.ReadAllText(realPath);</span><br><span class="line">                data &#x3D; JsonMapper.ToObject&lt;Savefile&gt;(json);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string GetRealPath(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            return savefilePath + &quot;&#x2F;save&quot; + index + &quot;.json&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Save(Savefile data, int index)</span><br><span class="line">        &#123;</span><br><span class="line">            string realPath &#x3D; GetRealPath(index);</span><br><span class="line">            string jsonData &#x3D; JsonMapper.ToJson(data);</span><br><span class="line"></span><br><span class="line">            File.WriteAllText(realPath, jsonData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的文件读取系统中：</p><p><code>savefilePath = Application.dataPath + &quot;/Savefile/&quot;</code> 用于指定保存存档文件的目录。</p><p>我们要保存成文件形式，需要使用 <code>System.IO</code> 来对本地文件进行处理，我给每一个存档文件一个 <code>index</code>（编号）用来区分不同的档案位置。</p><p><code>JsonMapper</code> 是 LitJSON 提供的方法，它可以将对象转换成 json 字符串或者将 json 字符串转化为对象，如上面的示例中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string json &#x3D; File.ReadAllText(realPath);</span><br><span class="line">data &#x3D; JsonMapper.ToObject&lt;Savefile&gt;(json);</span><br></pre></td></tr></table></figure><p>首先通过 <code>File.ReadAllText</code> 读取本地的文件，然后再调用 <code>JsonMapper.ToObject&lt;T&gt;(string)</code> 将字符串转化成 <code>T</code> 类型的类。</p><p>保存在本地的存档文件如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;currentScene&quot;:&quot;ArcadeHall&quot;,&quot;currentDialogCommand&quot;:&quot;00001&quot;,&quot;currentDialogIndex&quot;:0,&quot;switchKeys&quot;:&#123;&#125;,&quot;informationDatas&quot;:[&quot;People.huzi&quot;],&quot;values&quot;:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>调用加载存档的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static Savefile LoadSavefile(int index)</span><br><span class="line">&#123;</span><br><span class="line">    string realPath &#x3D; GetRealPath(index);</span><br><span class="line"></span><br><span class="line">    Savefile data &#x3D; null;</span><br><span class="line"></span><br><span class="line">    if (File.Exists(realPath))</span><br><span class="line">    &#123;</span><br><span class="line">        string json &#x3D; File.ReadAllText(realPath);</span><br><span class="line">        data &#x3D; JsonMapper.ToObject&lt;Savefile&gt;(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法直接将本地文件转化成 <code>Savefile</code> 类型的变量，这样我们就实现了读取存档数据的功能。</p><h2 id="执行新存档"><a href="#执行新存档" class="headerlink" title="执行新存档"></a>执行新存档</h2><p>现在只是读取到了存档的数据，只是把存档数据加载到内存变量里，可还没有真正的实现“读档”的功能。<br>角色还傻傻的停留在当前地图，真正的读档应该销毁现在的场景，让角色出现在新存档记录下的位置。</p><p>下面是我开发中的文字游戏的读档操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void LoadSavefile(Savefile savefile)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 将当前存档设置为读取的存档数据</span><br><span class="line">    GlobalManager.SetSavefile(savefile);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 移除canvas下的所有对象</span><br><span class="line">    foreach (Transform child in GlobalManager.gameManager.canvas.transform)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(child.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当前场景设置为空</span><br><span class="line">    GlobalManager.currentScene &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F; 加载新的场景</span><br><span class="line">    GlobalManager.LoadScene(savefile.currentScene);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在读取存档数据之后，把当前的场景清空，重新加载存档的场景数据，这样才真正完成了读档功能。</p><p>在加载场景之后，场景的自动执行事件会被再执行一次。<br>因此需要注意事件的开关状态，或者在执行读档操作时，屏蔽自动执行事件。</p><h2 id="存档的加密"><a href="#存档的加密" class="headerlink" title="存档的加密"></a>存档的加密</h2><p>现在存档数据是“明文”的，也就是说玩家找到存档文件就可以自由进行编辑，比如某个道具的数量改成 999，或者把金钱调成最大等等。我们并不希望玩家可以这样“作弊”，接下来就必须得给存档加密。</p><p>你可以自己编写加密方法，也可以引入第三方插件，或者直接使用 base64 进行简单加密。<br>总之，这一步就是把 json 字符串加密之后再保存到本地，如果使用了加密，在读取存档的时候要记得解密。</p><h2 id="存档的升级"><a href="#存档的升级" class="headerlink" title="存档的升级"></a>存档的升级</h2><p>对于未完成的游戏，在给玩家发布了体验版之后，后续的更新如果修改了存档数据，那么旧版的存档就可能会出现不兼容报错的情况，为了解决这个问题，我们可以给存档数据加上一个字段：<code>string version = &quot;0.0.1&quot;</code>，这个字段用来保存当前游戏的版本号，这样玩家如果在更新了游戏版本之后，游戏内部添加一个检测机制，用来对不同版本的存档文件进行升级。</p><p>假如游戏版本升级到 <code>0.0.2</code>，并且存档数据多了一个字段 <code>string extraVal = &quot;hahaha&quot;</code>，但是玩家旧版的存档并没有这个字段，我们就需要给本地旧版的文件进行升级，加上这个字段：</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(savefile.version &#x3D;&#x3D; &quot;0.0.1&quot;) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...存档版本号更新</span><br><span class="line">    savefile.version &#x3D; &quot;0.0.2&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...给新添加的变量赋值</span><br><span class="line">    savefile.extraVal &#x3D; &quot;hahaha&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...重新保存本地文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用伪代码简单示意，总之就是将旧版存档的字段进行更新再重新保存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】全局事件监听——观察者/订阅发布模式</title>
      <link href="/2021/09/24/unity-tips-006/"/>
      <url>/2021/09/24/unity-tips-006/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里的「事件」指的是宏观的事件，而不是具体的事件，例如：按钮点击事件、碰撞事件等等，这些都属于事件；这一篇文章要解决的问题就是怎么处理这些事件的关系，比如你得到 100 个胡萝卜可以获得「萝卜收集者」的称号，如果你得到 1000 个胡萝卜，就可以得到「胡萝卜大师」的称号，那么应该怎么实现呢？可能你第一个想法就是在获得萝卜的时候，用 <code>if-else</code> 结构来判断，这样确实很简单，但并不是最优解。</p><p>本篇文章会基于一个比较合理的通知机制来实现这种功能，而不是用大量的代码堆砌面向过程的开发，我们要实现的是面向对象的开发，而非把业务逻辑全部写在核心代码中，并且要求“低耦合”，以便后期维护和移植（可以适用于所有游戏项目，而非只能用在这个游戏上面）。</p><h2 id="观察者模式与订阅发布模式"><a href="#观察者模式与订阅发布模式" class="headerlink" title="观察者模式与订阅发布模式"></a>观察者模式与订阅发布模式</h2><p>观察者模式与订阅发布模式虽然类似，它们都是在监听某个对象的变化，但也存在一些区别，主要是对象主体的不同。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式通常有一个或者多个观察者在同时“观察”着某个对象的变化。</p><p><img src="https://pic.imgdb.cn/item/614d1c4a2ab3f51d9155bbbc.jpg" alt="观察者模式"></p><p>如果上面的例子比较抽象，那么换个例子。<br>一个女神通常有多条“舔狗”，舔狗无时无刻不在刷新微信朋友圈，观察女神有没有发动态，然后第一时间给她点赞。</p><p>在这个例子中，女神就是被观察对象，而舔狗们就是观察者。</p><h3 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h3><p>观察者模式中，观察者是直接对被观察者进行观察的，也就是存在着耦合性。<br>订阅发布模式则是把这种耦合性拆分出来，用一个中间件来给观察者发布通知。</p><p><img src="https://pic.imgdb.cn/item/614d1ef82ab3f51d9158518a.jpg" alt="订阅发布模式"></p><p>在这个模式中，观察者不再直接监听被观察者，而是通过一个中间件来获得消息。</p><p>后来，舔狗们学聪明了，只盯着一个女神获得青睐的几率很低，那不如“广撒网”，如果能同时盯着多个女神，那么被青睐的几率不是大大提高了吗？但是自己的精力有限，不可能同时盯着很多个女神，所以舔狗们陷入了烦恼。其中有一个脑袋比较灵光的舔狗突然发现了商机！于是他建立了一个「女神朋友圈动态共享群」，入群者收费 ￥10 元/月，并且打出了诱人的广告标语：“只要加了这个群，女神动态第一时间知道！”，于是舔狗们纷纷入群，而发现商机的舔狗则悄悄的联系到女神，说如果你要发朋友圈的时候，就提前告诉我一下，我给你￥10 块钱，女神心想发个朋友圈告诉你一下就行，白赚￥10 块，那好，于是答应了。与商人舔狗合作的女神越来越多，而且商人舔狗也不需要盯着朋友圈，而是女神主动告诉他要发朋友圈了，所以商人舔狗根本不需要花什么精力，只要当一个消息传递筒就够了，女神通知他要发朋友圈了，商人舔狗只要在群里发一句：“xxx 女神发了朋友圈，速去点赞！”。最后商人舔狗成了富一代，再加上他手里多达数百个女神的联系方式，自然而然的获得了女神的青睐，钱财与美色兼得，而那些入群的舔狗们，仍然保持着给女神点赞的好习惯。</p><h3 id="差异点"><a href="#差异点" class="headerlink" title="差异点"></a>差异点</h3><p>观察者模式与订阅发布模式的区别就在于是否直接监听被观察对象，观察者模式是直接监听被观察者的变化，而订阅发布模式则是通过一个中间件来将消息通知给订阅者，只要想一下上面的舔狗例子就可以明白区别在于哪了。</p><p>订阅发布模式可以解除观察者与被观察者之间的耦合，因此本文将采用这种方法。</p><h2 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h2><p>假如学校要召开家长会，而你的班主任在班会课上要求你回家的时候通知父母这周五来学校开家长会，放学后你回到家，父母正在客厅看电视，于是你就跟他们说周五要开家长会，记得去学校。</p><p>上面这个就是订阅发布模式，订阅就如字面意思那样，比如订阅一个周刊，那么你每周都能收的到一份读物；你在 B 站关注了一个 UP 主，那么 UP 主如果有动态，你就会收到一条通知。</p><p>在上面的场景，你的父母扮演的就是订阅者，父母订阅了学校的动态，而你是充当学校和父母之间传递消息的桥梁，学校作为发布者宣布要开家长会，因此你需要负责将学校的通知转达给父母。至于父母周五去不去学校，那就是他们的事情了，他们可能因为工作忙去不了，也可能按时参加，总之，你把周五要去学校开家长会的消息传达给你父母了，他们要怎么做与你无关，你尽到通知的义务就足够了。</p><h2 id="抽象示例"><a href="#抽象示例" class="headerlink" title="抽象示例"></a>抽象示例</h2><p>订阅发布模式可以是一对多也可以是多对多的关系，一个订阅者可以订阅多个消息，一个发布者可以被多个订阅者订阅。</p><p>发布者是用来下发通知的，上面的例子根据胡萝卜的数量获得称号，这就是一个需要下发的通知，发布者告诉所有的订阅者：玩家得到胡萝卜啦！订阅者可能是称号系统，也可能是任务系统；称号系统会根据萝卜的总数判断玩家是否能获得某个称号，而任务系统则监听玩家是否领取了上交胡萝卜的任务，如果达到任务要求数量就显示任务完成标志。</p><p><img src="https://pic.imgdb.cn/item/614c98ed2ab3f51d91c7e2a5.jpg" alt="消息的通知"></p><p>中间部分是一个消息筛选器，发布者可以发布很多种事件，不局限于发布“获得胡萝卜”的通知，需要筛选这个消息应该告诉哪些人，不告诉哪些人，并不是把所有的消息都告诉订阅者，如果订阅者没有订阅这个类型的消息就不给它们发送。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>这个设计模式里包含了三个角色：被观察者、发布者与订阅者。</p><p>被观察者在进行某个动作的时候，就告诉发布者，发布者再根据订阅了此类消息的订阅者进行通知。</p><h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><p>为了比较规范的开发以及方便以后的移植，我给所有的类都加上命名空间。<br>新建一个 Observer 文件夹来存放相关类，创建一个订阅者 <code>Subscriber</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">namespace Core.Observer</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class Subscriber : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 接收发布者消息的方法</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract void TakeNotify(string eventType, string data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让它继承 <code>MonoBehaviour</code>，这样就可以挂在场景中的物体上面。这里有一个 <code>TakeNotify</code> 方法用来接收消息通知，并且还附加了一个 <code>string</code> 类型的 <code>data</code> 字段，可以接收一个 json 字符串用来传递某些数据，这样这套系统就可以胜任大部分的使用场景了。</p><p>如果需要一个场景来监听某个事件，就让那个场景的脚本继承这个类。</p><h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><p>再创建一个发布者 <code>Publisher</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">namespace Core.Observer</span><br><span class="line">&#123;</span><br><span class="line">    public class Publisher</span><br><span class="line">    &#123;</span><br><span class="line">        static Dictionary&lt;string, List&lt;Subscriber&gt;&gt; subscribers &#x3D; new Dictionary&lt;string, List&lt;Subscriber&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        public static void Register(string eventType, Subscriber subscriber)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果不包含这个键就初始化</span><br><span class="line">            if (!subscribers.ContainsKey(eventType))</span><br><span class="line">            &#123;</span><br><span class="line">                subscribers.Add(eventType, new List&lt;Subscriber&gt;());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 判断该订阅者是否已经订阅过了</span><br><span class="line">            if (subscribers[eventType].Exists(x &#x3D;&gt; x &#x3D;&#x3D; subscriber))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(subscriber.name + &quot;已经订阅过&quot; + eventType);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Debug.Log(&quot;成功注册事件监听，类型：&quot; + eventType + &quot;，监听者：&quot; + subscriber.name);</span><br><span class="line"></span><br><span class="line">            subscribers[eventType].Add(subscriber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void SendNotify(string eventType, string data &#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果是空的就没必要通知</span><br><span class="line">            if (!subscribers.ContainsKey(eventType))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(eventType + &quot;是空的&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            foreach (Subscriber subscriber in subscribers[eventType])</span><br><span class="line">            &#123;</span><br><span class="line">                subscriber.TakeNotify(eventType, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布者的作用是向订阅者发布消息通知，只提供两个方法：</p><ul><li><code>Register</code>：注册一个监听者（订阅者）</li><li><code>SendNotify</code>：向所有订阅该事件类型的人发送通知</li></ul><p>好了，就是这么简单，「发布-订阅模式」完成了！</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>光是写好代码，却没有实际使用，还是难以搞懂这东西到底怎么用？<br>那么接下来我用正在开发中的推理文字游戏来进行解释。</p><p>由于是推理向的文字游戏，自然就少不了调查场景。<br>在调查场景中，玩家可以用鼠标点击屏幕中的物体进行调查（类似逆转裁判）。</p><p><img src="https://pic.imgdb.cn/item/614d3f552ab3f51d91828152.jpg" alt="游戏场景"></p><p>上面的场景有三个调查物体：①烟头，②面包屑，③脚印。<br>当玩家调查了三个物体之后就会自动进入下一段剧情。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>整理一下思绪，这里需要一个主场景脚本，以及 3 个调查物体的脚本。<br>我们先来看一下如果不使用设计模式来开发，而是面向过程的开发会是怎样的。</p><p><strong>第一步</strong><br>给你所有调查物体添加 <code>Button</code> 组件，然后添加一个 <code>ClickEvent</code>（点击事件）。</p><p><strong>第二步</strong><br>玩家点击物体之后，触发一段对话，然后把某个开关打开，一共需要三个开关：①调查过烟头的开关，②调查过面包屑的卡关，③调查过脚印的开关。</p><p><strong>第三步</strong><br>在对话执行结束后，判断三个开关是否已经全部打开，如果是的话就执行下一段剧情。</p><h3 id="不用设计模式"><a href="#不用设计模式" class="headerlink" title="不用设计模式"></a>不用设计模式</h3><p>编写场景中调查事件的脚本父类 <code>SurveyEvent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class SurveyEvent : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            Button btn &#x3D; gameObject.AddComponent&lt;Button&gt;();</span><br><span class="line">            btn.onClick.AddListener(ClickEvent);</span><br><span class="line"></span><br><span class="line">            InitAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void ClickEvent()</span><br><span class="line">        &#123;</span><br><span class="line">            ClickHandle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void InitAction() &#123; &#125;</span><br><span class="line">        protected abstract void ClickHandle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保管所有的开关，编写一个专门存放常量的脚本 <code>Constant</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">namespace Core</span><br><span class="line">&#123;</span><br><span class="line">    public class Constant</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 调查事件相关的开关</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public const string SURVEY_EVENT_0001_BREADCRUMBS &#x3D; &quot;SURVEY_EVENT_0001_BREADCRUMBS&quot;;</span><br><span class="line">        public const string SURVEY_EVENT_0001_BUTTS &#x3D; &quot;SURVEY_EVENT_0001_BUTTS&quot;;</span><br><span class="line">        public const string SURVEY_EVENT_0001_FOOTPRINT &#x3D; &quot;SURVEY_EVENT_0001_FOOTPRINT&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 监听事件类型</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public const string SUBSCRIBER_SURVEY &#x3D; &quot;SUBSCRIBER_SURVEY&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个脚本保存了所有事件开关的名字，方便维护。</p><p>接着，以烟头脚本为例，编写脚本 <code>Event_0001_Butts</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public class Event_0001_Butts : SurveyEvent</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void ClickHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            GlobalManager.CreateDialog(&quot;00015&quot;, delegate</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 打开某个开关</span><br><span class="line">                GlobalManager.SetSwitch(Constant.SURVEY_EVENT_0001_BUTTS, true);</span><br><span class="line">                </span><br><span class="line">                &#x2F;&#x2F; 判断3个开关是否全部开启</span><br><span class="line">                if(GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_FOOTPRINT)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 全部调查完毕执行下一步的逻辑</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是面包屑的脚本 <code>Event_0001_BreadCrumbs</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public class Event_0001_BreadCrumbs : SurveyEvent</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void ClickHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            GlobalManager.CreateDialog(&quot;00014&quot;, delegate</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 打开某个开关</span><br><span class="line">                GlobalManager.SetSwitch(Constant.SURVEY_EVENT_0001_BREADCRUMBS, true);</span><br><span class="line">                </span><br><span class="line">                &#x2F;&#x2F; 判断3个开关是否全部开启</span><br><span class="line">                if(GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_FOOTPRINT)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 全部调查完毕执行下一步的逻辑</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这里应该可以发现不妥之处了，就是判断全部调查完成之后的逻辑被写了两次，如果再加上脚印的脚本，就得写三次。</p><p>以下这部分代码存在重复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断3个开关是否全部开启</span><br><span class="line">if(GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_BUTTS) &amp;&amp; GlobalManager.GetSwitch(Constant.SURVEY_EVENT_0001_FOOTPRINT)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 全部调查完毕执行下一步的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步的优化，把判断多个开关的脚本封装一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 检查键是否全部满足</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static bool CheckSavefleSwitch(Dictionary&lt;string, bool&gt; keyValuePairs)</span><br><span class="line">&#123;</span><br><span class="line">    foreach (string key in keyValuePairs.Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        if (GetSwitch(key) !&#x3D; keyValuePairs[key])</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在不需要用一长串的 <code>if</code> 来判断开关的开启状态，而只需要传入一个 <code>Dictionary</code> 即可判断多个开关的状态是否满足要求。不过这样还是治标不治本，处理下一步剧情的逻辑不可避免的要重复写好几次。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>控制调查场景整个流程的应该是场景，而不是调查物体，所以判断下一步剧情的逻辑代码不应该写在点击事件上，如果玩家点击了物体，只需要告诉发布者，让发布者将消息通知给场景，由场景来判断是否应该执行下一步的剧情。</p><p>编写场景的父类 <code>SurveyScene</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using Core.Observer;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class SurveyScene : Subscriber</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            Publisher.Register(Constant.SUBSCRIBER_SURVEY, this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 场景调查完毕，执行下一步的剧情</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected abstract void OnCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景的父类在唤醒时就向发布者注册了监听 <code>SURVEY_EVENT</code> 类型的事件的通知，这样一旦有调查的事件，发布者就知道要告诉场景这件事，场景再自行进行处理。</p><p>然后编写实际的场景类 <code>Event_0001</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using Core.Observer;</span><br><span class="line">using Core;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public class Event_0001 : SurveyScene</span><br><span class="line">    &#123;</span><br><span class="line">        public override void TakeNotify(string eventType, string data)</span><br><span class="line">        &#123;</span><br><span class="line">            bool res &#x3D; GlobalManager.CheckSavefleSwitch(new Dictionary&lt;string, bool&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; Constant.SURVEY_EVENT_0001_BREADCRUMBS,true &#125;,</span><br><span class="line">                &#123; Constant.SURVEY_EVENT_0001_BUTTS,true &#125;,</span><br><span class="line">                &#123; Constant.SURVEY_EVENT_0001_FOOTPRINT,true &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            if (res)</span><br><span class="line">            &#123;</span><br><span class="line">                OnCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnCompleted()</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(&quot;全部调查完了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接收订阅消息的方法 <code>TakeNotify</code> 里编写剧情处理逻辑，当三个开关全部打开时就执行 <code>OnCompleted</code> 方法，这里只简单的打印出来。</p><p>接下来改写场景中调查物体的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using Core.Observer;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class SurveyEvent : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            Button btn &#x3D; gameObject.AddComponent&lt;Button&gt;();</span><br><span class="line">            btn.onClick.AddListener(ClickEvent);</span><br><span class="line"></span><br><span class="line">            InitAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void ClickEvent()</span><br><span class="line">        &#123;</span><br><span class="line">            ClickHandle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void InitAction() &#123; &#125;</span><br><span class="line">        protected virtual void HandleNotfy(string eventType, string data) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void SendNotify()</span><br><span class="line">        &#123;</span><br><span class="line">            Publisher.SendNotify(Constant.SUBSCRIBER_SURVEY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void ClickHandle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SendNotify</code> 方法向发布者发布一个 <code>SURVEY_EVENT</code> 类型的事件通知，告诉发布者“我被点击了”。</p><p>然后改写烟头脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public class Event_0001_Butts : SurveyEvent</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void ClickHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            GlobalManager.CreateDialog(&quot;00015&quot;, delegate</span><br><span class="line">            &#123;</span><br><span class="line">                GlobalManager.SetSwitch(Constant.SURVEY_EVENT_0001_BUTTS, true);</span><br><span class="line">                SendNotify();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再改写面包屑脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public class Event_0001_BreadCrumbs : SurveyEvent</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void ClickHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            GlobalManager.CreateDialog(&quot;00014&quot;, delegate</span><br><span class="line">            &#123;</span><br><span class="line">                GlobalManager.SetSwitch(Constant.SURVEY_EVENT_0001_BREADCRUMBS, true);</span><br><span class="line">                SendNotify();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚印脚本同理，可以看到与剧情处理有关的逻辑已经被拆出去了！<br>当玩家点击了物体就触发了点击事件，然后 <code>ClickHandle</code> 方法执行一段对话，在对话结束后打开开关，同时通知发布者“我被点了”。</p><p>发布者将消息逐一通知给订阅者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void SendNotify(string eventType, string data &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是空的就没必要通知</span><br><span class="line">    if (!subscribers.ContainsKey(eventType))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(eventType + &quot;是空的&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach (Subscriber subscriber in subscribers[eventType])</span><br><span class="line">    &#123;</span><br><span class="line">        subscriber.TakeNotify(eventType, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的订阅者就是 <code>Event_0001</code> 场景脚本，因为它在 <code>Awake</code> 方法里注册了监听 <code>SURVEY_EVENT</code> 事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    Publisher.Register(Constant.SUBSCRIBER_SURVEY, this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收消息并且进行处理的方法是 <code>TakeNotify</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeNotify(string eventType, string data)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 这里为什么不需要判断eventType的类型呢？因为它只注册了SURVEY_EVENT的通知，不会有别的通知进来</span><br><span class="line">    bool res &#x3D; GlobalManager.CheckSavefleSwitch(new Dictionary&lt;string, bool&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; Constant.SURVEY_EVENT_0001_BREADCRUMBS,true &#125;,</span><br><span class="line">        &#123; Constant.SURVEY_EVENT_0001_BUTTS,true &#125;,</span><br><span class="line">        &#123; Constant.SURVEY_EVENT_0001_FOOTPRINT,true &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    if (res)</span><br><span class="line">    &#123;</span><br><span class="line">        OnCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次点击烟头，打开了烟头的开关，然后通知场景，场景对比发现还有两个开关没打开，就不进行处理；接着玩家点击了面包屑，场景又收到通知，但一比对，发现还少了一个脚印的开关，最后玩家点击脚印，最后缺失的脚印开关也被打开了，因此条件全部满足，执行 <code>OnCompleted</code> 开始下一步的处理。</p><p>整个过程逻辑非常清晰，而且不存在耦合，作为开发者书写这样的代码没有心智负担，非常轻松。</p><h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p>上面例子还缺少了一个取消订阅的功能，当调查事件完成之后，就要把场景销毁，但是订阅者还留在发布者存储的变量里，当场景被销毁的时候，还需要把订阅者移除才行。</p><p>给发布者 <code>Publisher</code> 添加方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 将一个订阅者移除</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void Remove(string eventType, Subscriber subscriber)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 如果不包含这个键就不处理</span><br><span class="line">    if (!subscribers.ContainsKey(eventType))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;不存在订阅者，类型：&quot; + eventType + &quot;，脚本名：&quot; + subscriber.name);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Debug.Log(&quot;订阅者被移除，类型：&quot; + eventType + &quot;，脚本名：&quot; + subscriber.name);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取订阅者的索引</span><br><span class="line">    subscribers[eventType].Remove(subscriber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移除订阅者只需要在 unity 提供的生命周期函数执行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using Core.Observer;</span><br><span class="line"></span><br><span class="line">namespace Core.Survey</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class SurveyScene : Subscriber</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            Publisher.Register(Constant.SUBSCRIBER_SURVEY, this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 场景调查完毕，执行下一步的剧情</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected abstract void OnCompleted();</span><br><span class="line"></span><br><span class="line">        private void OnDestroy()</span><br><span class="line">        &#123;</span><br><span class="line">            Publisher.Remove(Constant.SUBSCRIBER_SURVEY, this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在 <code>OnDestroy</code> 将订阅移除即可。</p><h2 id="小测验"><a href="#小测验" class="headerlink" title="小测验"></a>小测验</h2><p>这里做了一个测试 List 下标变化的实验，这个实验的目的是尝试删除 List 元素之后，观察下标是否会被重置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;string&gt; data &#x3D; new List&lt;string&gt; &#123; &quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot; &#125;;</span><br><span class="line"></span><br><span class="line">foreach (string item in data)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item + &quot;&#x3D;&quot; + data.IndexOf(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.RemoveAt(1);</span><br><span class="line"></span><br><span class="line">foreach (string item in data)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(item + &quot;&#x3D;&quot; + data.IndexOf(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://pic.imgdb.cn/item/614d28d82ab3f51d9162f85c.jpg" alt="输出结果"></p><p>结论是在删掉 List 其中一个元素之后，下标就会被重置。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发布订阅模式与观察者模式相比在于解耦，发布订阅模式是完全没有任何耦合的。</p><p>你在朋友圈发布一条动态，微信就充当发布者的角色，它会向你的好友广播这条动态消息。你可能并不关注谁看了这条消息，你只负责把动态发出去，那些订阅者（你的好友）就会收到消息，至于他们看完点不点赞，就是他们的事。如果其中一个好友把你的朋友圈屏蔽了，那么 Ta 就取消订阅你的消息，即使你发了朋友圈，Ta 也收不到。</p><p>在游戏中，你吃到一个金币就对全世界广播：“啊，我吃到一个金币了！”<br>场景中的 UI 听到这个消息后：你吃到了金币啊！那我得把界面中的金币数量更新一下。<br>场景中的史莱姆（敌人）听到这个消息：你吃到金币关我屁事。（史莱姆鸟都不鸟你）<br>场景中的山贼（敌人）听到这个消息：啊？你有钱？那我得去抢劫了。（山贼准备抢你的钱）</p><p>总之，发布者订阅模式就是这样，执行了一个事件就进行广播通知，那些想要知道这些消息的人就会对消息进行处理，那些不需要这个消息的人就不会管你发了什么。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较完美的对话系统（二）剧本生成器</title>
      <link href="/2021/09/14/prefect-dialog-system-02/"/>
      <url>/2021/09/14/prefect-dialog-system-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇已经实现了比较理想化的对话系统，但是还有一个问题没有解决。使用数据驱动就会导致可读性很差，没办法让策划用 excel 表去配置游戏中的剧本，为了解决这个问题就需要制作一个「剧本生成器」。</p><p>所幸的是本人的本职工作就是 WEB 开发，制作一个可视化的网页版剧本生成器并不难。</p><p>上一篇文章：<a href="https://huotuyouxi.com/2021/09/14/prefect-dialog-system-01/">比较完美的对话系统</a></p><h2 id="剧本生成器"><a href="#剧本生成器" class="headerlink" title="剧本生成器"></a>剧本生成器</h2><p>这个剧本生成器是基于 HTML 开发的，制作难度不高因此这里就不介绍了，第一版的界面如下：</p><p><img src="https://pic.imgdb.cn/item/61408cb044eaada7395a9363.jpg" alt="剧本生成器"></p><p>通关选择一个要创建的事件，就会弹出一个表单，只需要在表单上点点点，就可以自动生成脚本指令，左侧还可以简单的预览对话效果。</p><p><img src="https://pic.imgdb.cn/item/61408d4c44eaada7395b8891.gif" alt="添加对话事件"></p><p>当添加完剧本之后，点击右下角的复制结果按钮，就可以复制生成的剧本代码。</p><p><img src="https://pic.imgdb.cn/item/61408dd444eaada7395c4f49.gif" alt="复制剧本代码"></p><p>最后将剧本代码粘贴保存在游戏项目中，就可以直接用昨天写好的对话系统进行调用了。</p><p><img src="https://pic.imgdb.cn/item/61408e7244eaada7395d3328.gif" alt="粘贴并保存到游戏项目内"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较的完美对话系统</title>
      <link href="/2021/09/14/prefect-dialog-system-01/"/>
      <url>/2021/09/14/prefect-dialog-system-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 cocos creator 开始到现在用 unity 制作了很多个失败的作品，并非一无所获。<br>虽然玩家们不知道我们到底做了什么，但实际上我们没有发布出来的失败作品差不多有五六个。<br>如果我推翻重构的也算上去，大概失败了有十次以上吧。</p><p>基本每一个项目都离不开对话系统，因此对话系统反反复复重置也有好几个版本。这是用新的方法实现的第五版对话系统。如何实现 GalGame 那样的对话系统一直都是一个难题，如今终于有一个比较完美的解决方案了。</p><p>那么就来看看是如何实现的吧！</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>最开始要考虑的问题在于如何存储动则几万字的文本。</p><p>游戏中剧本很多的情况下就不能用简单的直接在代码上面输出文本。<br>而且还需要考虑到以后有多语言化的需求，比如要出一个官方英文版。<br>总不能直接在代码里把中文改成英文的，也就是说不能“硬编码”把文本与代码耦合在一起。</p><p>如下面这种就属于硬编码，代码与文本数据耦合在一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设这是一个对话处理类</span><br><span class="line">Dialog.ShowText(&quot;你好，世界！&quot;);</span><br></pre></td></tr></table></figure><p>游戏发售后，发现海外用户有需求，steam 上面 “we need english.” 呼声很大。<br>因此制作者决定出一个英文版，修改原来的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dialog.ShowText(&quot;hello,world！&quot;);</span><br></pre></td></tr></table></figure><p>如果以后又要出一个日文版，又得再改成日文的。<br>上面这种硬编码只适合一些文本量很小的游戏。</p><h3 id="存储容器"><a href="#存储容器" class="headerlink" title="存储容器"></a>存储容器</h3><p>WEB 开发用来存储数据的是数据库之类的东西，而单机游戏就是本地文件了。<br>下面几种方法都可以当做对话文本的存储器：</p><ul><li>excel 表格</li><li>txt 文本文档</li><li>json 文件</li></ul><p>上面三个任意一个都可以用来作为保存文本的存储器，txt 和 excel 比较直观，适合多人开发且策划为不懂技术的，策划不懂技术但是可以直接在 excel 或者 txt 上面配置，这也是一般的做法；因为我就是游戏程序并且负责录入文本，所以我这里选择方便读取的 json 文件作为保存对话的容器。</p><h3 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h3><p>在 <code>c#</code> 中可以用 <code>LitJson</code> 插件来实现读取 json 格式的文件。</p><p>LitJson 下载：<a href="https://github.com/LitJSON/litjson">https://github.com/LitJSON/litjson</a><br>将 dll 文件放到项目里，unity 就会自动读取这个插件了。</p><p>使用这个插件还有一个好处是可以直接把 json 字符串转换成对应的类的实例，下文会详细解释。</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>对话系统是一个很庞大的系统，它不仅仅只是展示剧本，更是一个剧情演出的处理器。剧情演出就是画面闪烁、屏幕震动、视野改变或者让玩家等待 1 秒钟这种和游戏流程有一定关系的处理。</p><p>例如下面这是一个游戏的剧本，剧本里包含了演出效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[播放BGM：教室内]</span><br><span class="line">小明：这次又考砸了。</span><br><span class="line">小明：我的好基友不会背叛我的，一定是这样！</span><br><span class="line"></span><br><span class="line">[播放音效：脚步声]</span><br><span class="line">小明：小黑，这次考了多少啊。</span><br><span class="line">小黑：唔……刚好及格。</span><br><span class="line"></span><br><span class="line">[屏幕震动]</span><br><span class="line">[播放音效：震惊]</span><br><span class="line">小明：什么？！</span><br><span class="line">小明：那这次我岂不是垫底了！</span><br></pre></td></tr></table></figure><p>剧本通常都包含上面这样的演出效果，所以对话系统并不只是显示文字而已，也应当包含这些演出效果的处理。</p><h3 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h3><p>如果是基于代码驱动，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 播放背景音乐</span><br><span class="line">Sound.BGM(&quot;教室内&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示第一段对话</span><br><span class="line">Dialog.ShowTextCommand(&quot;0001&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 播放音效</span><br><span class="line">Sound.Play(&quot;脚步声音效&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示第二段对话</span><br><span class="line">Dialog.ShowTextCommand(&quot;0002&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 屏幕震动效果</span><br><span class="line">Screen.Shock();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 播放音效</span><br><span class="line">Sound.Play(&quot;震惊&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示第三段对话</span><br><span class="line">Dialog.ShowTextCommand(&quot;0003&quot;);</span><br></pre></td></tr></table></figure><p>我们不可能每一段演出都要手写，如果想要节约人力，最好的方法就是用数据驱动的方式来实现。数据驱动就是通过定义一些关键词，通过解释器读取这些关键词，然后根据配置的参数自动处理。</p><p>例如定义下面的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;&quot;type&quot;:&quot;bgm&quot;, &quot;id&quot;:&quot;教室内&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;text&quot;, &quot;id&quot;:&quot;0001&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;sound&quot;, &quot;id&quot;:&quot;脚步声音效&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;text&quot;, &quot;id&quot;:&quot;0002&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;shock&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;sound&quot;, &quot;id&quot;:&quot;震惊音效&quot;&#125;,</span><br><span class="line">    &#123;&quot;type&quot;:&quot;text&quot;, &quot;id&quot;:&quot;0003&quot;&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在一个 json 文件配置好上面的参数，再写一个解释器用来将数据解析成对应的脚本逻辑。比如只要用一个 <code>switch</code> 结构就可以实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JsonData json &#x3D; &#123;&quot;type&quot;:&quot;bgm&quot;, &quot;id&quot;:&quot;教室内&quot;&#125;;</span><br><span class="line"></span><br><span class="line">switch(json[&quot;type&quot;]) &#123;</span><br><span class="line">    case &quot;bgm&quot;:</span><br><span class="line">        Sound.BGM(json[&quot;id&quot;]);</span><br><span class="line">        break;</span><br><span class="line">    case &quot;text&quot;:</span><br><span class="line">        Dialog.ShowTextCommand(json[&quot;id&quot;]);</span><br><span class="line">        break;</span><br><span class="line">    &#x2F;&#x2F; …… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子就是利用数据驱动来处理演出效果。</p><h3 id="可视化配置"><a href="#可视化配置" class="headerlink" title="可视化配置"></a>可视化配置</h3><p>使用数据驱动最大的问题就在于配置数据表，上面的 json 字符串完全是我手写的，如果是完整的剧本，要让我手写的话估计会疯掉。因此如何实现可视化配置就是一个问题了，今天来不及实现，明天我将会用老本行 WEB 开发的方式来制作一个「剧本生成器」。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>其实上面已经不知不觉接触到了「设计模式」，在设计模式中有一个叫做「命令模式」的，就是用数据驱动来实现的。关于命令模式可以自行网上查阅，这里只用一个简单的比方进行介绍：</p><p>比如夏天到了我们要开空调，然后用遥控器打开空调开关，然后按加减键来调节温度。这就是命令模式了，空调插上电处于待机状态，等待接收遥控器发来的「指令」，根据发来的指令进行下一步的操作。</p><p>命令模式一共有三个角色：</p><ul><li>发布命令的人</li><li>接受命令的人</li><li>命令的传递介质</li></ul><p>比如上面的遥控器就是发布命令的人，空调就是接受命令并执行的人，而遥控器发出的信号就是传递的介质，遥控器通过信号把命令传达给空调，如果是与安全相关的还需要加密处理。</p><p>在对话系统中，三个角色就是：</p><ul><li>命令本身</li><li>命令发布者</li><li>命令的执行者</li></ul><p>命令本身就是类似：“我要你显示 xxx 文本。”，命令发布者要把这条消息发给命令的执行者，它才知道要做什么。命令发布者就是供外界调用的公开方法，别人点一下场景中的 NPC 它就会说一段话，就是调用命令发布者来执行对话的。而命令的执行者就是对话系统本身了，它具备了所有的功能，但是自己不会主动执行，而是等着别人告诉他要怎么做。</p><h3 id="Command（命令数据）"><a href="#Command（命令数据）" class="headerlink" title="Command（命令数据）"></a>Command（命令数据）</h3><p>“我要你显示 xxx 文本。”，要想让执行者知道这是什么意思，就要定义一个数据结构。</p><p>所有命令的父类 <code>Command</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace Dialog</span><br><span class="line">&#123;</span><br><span class="line">    public class Command</span><br><span class="line">    &#123;</span><br><span class="line">        public string type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再定义各种不同的命令，比如显示对话的命令 <code>DialogCommand</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace Dialog</span><br><span class="line">&#123;</span><br><span class="line">    public class DialogCommand : Command</span><br><span class="line">    &#123;</span><br><span class="line">        public string name;</span><br><span class="line">        public string content;</span><br><span class="line">        public string tachie;</span><br><span class="line">        public string tachie_position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>播放音效的命令 <code>PlaySeCommand</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace Dialog</span><br><span class="line">&#123;</span><br><span class="line">    public class PlaySeCommand : Command</span><br><span class="line">    &#123;</span><br><span class="line">        public string path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>诸如此类。<br>之所以要定义单独的类，主要还是考虑到规范的问题，避免后期数据不统一。<br>如果时间太久了，很可能会忘掉，但是如果有类的结构约束就不会犯错了。</p><p>还有，就是上面说到的 <code>LitJson</code> 本身内置一个很好用的功能：将 json 字符串转化成对应的类。</p><h3 id="Invoker（祈求者）"><a href="#Invoker（祈求者）" class="headerlink" title="Invoker（祈求者）"></a>Invoker（祈求者）</h3><p>这是一个祈求命令的类，就是命令发布者。外界只要调用这个类的 <code>Execute</code> 方法就会开始执行对话；这里声明了一个 List 结构用来存储命令数据，这样做的好处是可以方便的回溯到任意一个命令开始的地方，比如玩家想看之前的一段剧情，就只要修改 <code>currentIndex</code>（当前命令的索引）即可从任意的位置重新开始，比如我就定义了一个 <code>Prev</code>（上一条对话），避免玩家因为手速太快没看清楚，还可以重新再看一遍。</p><p>因为把所有的命令都保存下来了，所以要实现『历史对话记录』也很简单。</p><p><img src="https://pic.imgdb.cn/item/613f872044eaada739e95d22.jpg" alt="历史对话记录(可以看到所有已经播放过的对话文字)"></p><p><code>Invoker</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using LitJson;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace Dialog</span><br><span class="line">&#123;</span><br><span class="line">    public class Invoker : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public Receiver receiver;</span><br><span class="line"></span><br><span class="line">        bool isDisabled, isPressed;</span><br><span class="line">        int currentIndex;</span><br><span class="line">        List&lt;Command&gt; commands &#x3D; new List&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line">        public void Execute(string command)</span><br><span class="line">        &#123;</span><br><span class="line">            receiver.SetPrevBtnEnabled(false);</span><br><span class="line"></span><br><span class="line">            TextAsset textAsset &#x3D; Resources.Load&lt;TextAsset&gt;(&quot;Dialog&#x2F;&quot; + command);</span><br><span class="line">            JsonData data &#x3D; JsonMapper.ToObject(textAsset.text);</span><br><span class="line"></span><br><span class="line">            foreach (JsonData item in data)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(item[&quot;type&quot;]);</span><br><span class="line">                AddCommond(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentIndex &#x3D; 0;</span><br><span class="line">            receiver.Execute(commands[currentIndex]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void AddCommond(JsonData item)</span><br><span class="line">        &#123;</span><br><span class="line">            string json &#x3D; item.ToJson();</span><br><span class="line"></span><br><span class="line">            switch (item[&quot;type&quot;].ToString())</span><br><span class="line">            &#123;</span><br><span class="line">                case &quot;DialogCommand&quot;:</span><br><span class="line">                    commands.Add(JsonMapper.ToObject&lt;DialogCommand&gt;(json));</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;PlaySeCommand&quot;:</span><br><span class="line">                    commands.Add(JsonMapper.ToObject&lt;PlaySeCommand&gt;(json));</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;WaitCommand&quot;:</span><br><span class="line">                    commands.Add(JsonMapper.ToObject&lt;WaitCommand&gt;(json));</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void OnExecutedCallback(bool autoNext &#x3D; false)</span><br><span class="line">        &#123;</span><br><span class="line">            if (autoNext)</span><br><span class="line">            &#123;</span><br><span class="line">                NextCommand();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                isDisabled &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void NextCommand()</span><br><span class="line">        &#123;</span><br><span class="line">            isDisabled &#x3D; true;</span><br><span class="line"></span><br><span class="line">            currentIndex++;</span><br><span class="line"></span><br><span class="line">            if (currentIndex &gt;&#x3D; commands.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                receiver.OnCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                receiver.SetPrevBtnEnabled(true);</span><br><span class="line">                receiver.Execute(commands[currentIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void PrevCommand()</span><br><span class="line">        &#123;</span><br><span class="line">            isDisabled &#x3D; true;</span><br><span class="line"></span><br><span class="line">            currentIndex--;</span><br><span class="line"></span><br><span class="line">            if (currentIndex &lt;&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                currentIndex &#x3D; 0;</span><br><span class="line">                receiver.SetPrevBtnEnabled(false);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            receiver.Execute(commands[currentIndex]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isDisabled || isPressed) return;</span><br><span class="line"></span><br><span class="line">            if (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">            &#123;</span><br><span class="line">                isPressed &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void FixedUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isPressed &amp;&amp; Input.GetKeyUp(KeyCode.Space))</span><br><span class="line">            &#123;</span><br><span class="line">                isPressed &#x3D; false;</span><br><span class="line">                NextCommand();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Receiver（命令接收和执行者）"><a href="#Receiver（命令接收和执行者）" class="headerlink" title="Receiver（命令接收和执行者）"></a>Receiver（命令接收和执行者）</h3><p>首先在场景中拼好对话 UI：</p><p><img src="https://pic.imgdb.cn/item/613f854d44eaada739e630e7.jpg" alt="对话 UI"></p><p><code>Receiver</code> 类就是对话系统本身，它包括解析命令数据，并且将命令转化为真正的逻辑。它每次只执行一条命令，执行完毕之后立刻通知 <code>Invoker</code>，告诉它命令已经执行完了，然后再由 <code>Invoker</code> 来决定接下来要执行的新命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using Core;</span><br><span class="line"></span><br><span class="line">namespace Dialog</span><br><span class="line">&#123;</span><br><span class="line">    public class Receiver : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public Invoker invoker;</span><br><span class="line">        public Image tachie;</span><br><span class="line">        public GameObject panel, nameBG, contentBG;</span><br><span class="line">        public GameObject skipBtn, prevBtn, autoBtn, logBtn, saveBtn, loadBtn;</span><br><span class="line">        public Text nameText, contentText;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 立绘缓存</span><br><span class="line">        Dictionary&lt;string, Sprite&gt; tachieCaches;</span><br><span class="line"></span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            tachieCaches &#x3D; new Dictionary&lt;string, Sprite&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Sprite GetTachieFromCache(string key)</span><br><span class="line">        &#123;</span><br><span class="line">            if (tachieCaches.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                return tachieCaches[key];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string fullPath &#x3D; &quot;Tachie&#x2F;&quot; + key;</span><br><span class="line">            Sprite sprite &#x3D; Resources.Load&lt;Sprite&gt;(fullPath);</span><br><span class="line"></span><br><span class="line">            if (sprite &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(fullPath + &quot;不存在&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tachieCaches.Add(key, sprite);</span><br><span class="line"></span><br><span class="line">            return sprite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Execute(Command command)</span><br><span class="line">        &#123;</span><br><span class="line">            switch (command.type)</span><br><span class="line">            &#123;</span><br><span class="line">                case &quot;DialogCommand&quot;:</span><br><span class="line">                    DialogAction(command as DialogCommand);</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;PlaySeCommand&quot;:</span><br><span class="line">                    PlaySeAction(command as PlaySeCommand);</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;WaitCommand&quot;:</span><br><span class="line">                    StartCoroutine(WaitAction(command as WaitCommand));</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 非对话命令结束后，需要调用以隐藏对话框</span><br><span class="line">         * 同时重置对话框状态，如隐藏立绘</span><br><span class="line">         *&#x2F;</span><br><span class="line">        void SetDefaultState()</span><br><span class="line">        &#123;</span><br><span class="line">            panel.SetActive(false);</span><br><span class="line">            tachie.gameObject.SetActive(false);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IEnumerator WaitAction(WaitCommand command)</span><br><span class="line">        &#123;</span><br><span class="line">            SetDefaultState();</span><br><span class="line"></span><br><span class="line">            yield return new WaitForSeconds((float)command.time);</span><br><span class="line"></span><br><span class="line">            invoker.OnExecutedCallback(true);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void PlaySeAction(PlaySeCommand command)</span><br><span class="line">        &#123;</span><br><span class="line">            SetDefaultState();</span><br><span class="line">            invoker.OnExecutedCallback(true);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void DialogAction(DialogCommand command)</span><br><span class="line">        &#123;</span><br><span class="line">            panel.SetActive(true);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 是否展示立绘</span><br><span class="line">            if (command.tachie !&#x3D; &quot;&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                string path &#x3D; command.name + &quot;&#x2F;&quot; + command.tachie;</span><br><span class="line">                tachie.sprite &#x3D; GetTachieFromCache(path);</span><br><span class="line">                tachie.gameObject.SetActive(true);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 防止图片变形恢复原本大小</span><br><span class="line">                tachie.rectTransform.sizeDelta &#x3D; tachie.sprite.rect.size;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                tachie.gameObject.SetActive(false);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 是否展示名称</span><br><span class="line">            if (command.name !&#x3D; &quot;&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                nameBG.SetActive(true);</span><br><span class="line">                nameText.text &#x3D; LocaleManager.GetLocaleText(&quot;name&quot;, command.name);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                nameBG.SetActive(false);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            contentText.text &#x3D; LocaleManager.GetLocaleText(command.name, command.content);</span><br><span class="line">            invoker.OnExecutedCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SetPrevBtnEnabled(bool res)</span><br><span class="line">        &#123;</span><br><span class="line">            prevBtn.SetActive(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void OnCompleted()</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LocaleManager（本地化处理）"><a href="#LocaleManager（本地化处理）" class="headerlink" title="LocaleManager（本地化处理）"></a>LocaleManager（本地化处理）</h3><p>为了方便以后扩展出其他语言版本，所以提前做好本地化的准备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using LitJson;</span><br><span class="line"></span><br><span class="line">namespace Core</span><br><span class="line">&#123;</span><br><span class="line">    public class LocaleManager : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public static Dictionary&lt;string, JsonData&gt; locales &#x3D; new Dictionary&lt;string, JsonData&gt;();</span><br><span class="line"></span><br><span class="line">        public static void LoadLocaleSetting()</span><br><span class="line">        &#123;</span><br><span class="line">            string locale &#x3D; GetLocaleLanguage();</span><br><span class="line"></span><br><span class="line">            string path &#x3D; &quot;Locale&#x2F;&quot; + locale;</span><br><span class="line">            TextAsset[] textAssets &#x3D; Resources.LoadAll&lt;TextAsset&gt;(path);</span><br><span class="line"></span><br><span class="line">            foreach (var text in textAssets)</span><br><span class="line">            &#123;</span><br><span class="line">                locales[text.name] &#x3D; JsonMapper.ToObject(text.text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static string GetLocaleText(string field, string key)</span><br><span class="line">        &#123;</span><br><span class="line">            if (locales.ContainsKey(field))</span><br><span class="line">            &#123;</span><br><span class="line">                return locales[field][key].ToString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return &quot;null&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static string GetLocaleLanguage()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;zh-cn&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了读取本地语言的文件功能，目前只有 <code>zh-cn</code>（简体中文）。</p><h3 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h3><p>由于本地化语言都是动态读取的，因此放到 <code>Resources</code> 文件夹下面。</p><p><img src="https://pic.imgdb.cn/item/613f882d44eaada739eb0789.jpg" alt="本地化语言文件目录"></p><p>如 <code>name.json</code> 文件用来保存人物名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;huzi&quot;: &quot;虎子&quot;,</span><br><span class="line">    &quot;huahua&quot;: &quot;花花&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有对应角色的台词，如 <code>huzi.json</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;00001&quot;: &quot;虎子第一句对话。&quot;,</span><br><span class="line">    &quot;00002&quot;: &quot;虎子第二句对话。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是命令也需要一个 json，编号为 <code>00001</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DialogCommand&quot;,</span><br><span class="line">        &quot;tachie&quot;: &quot;normal&quot;,</span><br><span class="line">        &quot;tachie_position&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;huzi&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;00001&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;PlaySeCommand&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;movement&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;WaitCommand&quot;,</span><br><span class="line">        &quot;time&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DialogCommand&quot;,</span><br><span class="line">        &quot;tachie&quot;: &quot;normal&quot;,</span><br><span class="line">        &quot;tachie_position&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;huahua&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;00001&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DialogCommand&quot;,</span><br><span class="line">        &quot;tachie&quot;: &quot;smile&quot;,</span><br><span class="line">        &quot;tachie_position&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;huzi&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;00002&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DialogCommand&quot;,</span><br><span class="line">        &quot;tachie&quot;: &quot;smile&quot;,</span><br><span class="line">        &quot;tachie_position&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;huahua&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;00002&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>命令里加入一个 type 字段来识别不同的类（用来规范化）。</p><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p>调用起来也非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameObject obj &#x3D; Util.ObjectBuilder.CreateObject(&quot;Prefab&#x2F;UI&#x2F;Dialog&quot;, canvas);</span><br><span class="line">Dialog.Invoker invoker &#x3D; obj.GetComponent&lt;Dialog.Invoker&gt;();</span><br><span class="line">invoker.Execute(&quot;00001&quot;);</span><br></pre></td></tr></table></figure><p>上面的 <code>00001</code> 即是命令文件的名字，即 <code>00001.json</code>。</p><p>最后进入游戏演示：</p><p><img src="https://pic.imgdb.cn/item/613f8a9644eaada739eeaf3c.gif" alt="演示效果"></p><h2 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h2><p>这是历经了很多次失败最终总结的成果，虽然游戏没做出来一个，系统倒是完善了不少。</p><p>这套对话系统的可扩展性很强，以后应该都可以基于这套系统进行深度化的定制了。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的像素画学习（三）临摹玛丽露</title>
      <link href="/2021/09/09/piexl-03/"/>
      <url>/2021/09/09/piexl-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离第一次画皮卡丘已经过去了 4 个月，由于游戏的进度停滞不前所以打算做点别的什么事情转换心情。<br>这次要画的是玛丽露，使用临摹的方式。</p><h2 id="参考图像"><a href="#参考图像" class="headerlink" title="参考图像"></a>参考图像</h2><p>参考图为宝可梦官方图鉴：</p><p><img src="https://pic.imgdb.cn/item/6138e72044eaada739b9bca5.jpg" alt="玛丽露"></p><h2 id="PS-设置参考图"><a href="#PS-设置参考图" class="headerlink" title="PS 设置参考图"></a>PS 设置参考图</h2><p>首先新建一张透明底的空白图，用来作为画布；<br>其次再打开上面的参考图，要让参考图一直显示在旁边，需要点击顶部导航栏的「窗口」然后选择「排列」，最后选择双联垂直排列即可。</p><p><img src="https://pic.imgdb.cn/item/6138e7bf44eaada739badbdc.jpg" alt="双联垂直排列"></p><p>右侧即为参考图：</p><p><img src="https://pic.imgdb.cn/item/6138e80244eaada739bb512b.jpg" alt="参考图"></p><h2 id="临摹"><a href="#临摹" class="headerlink" title="临摹"></a>临摹</h2><p>直接将原图导入空白画布，就会自动变成模糊版的像素图：</p><p><img src="https://pic.imgdb.cn/item/6138e83044eaada739bba0c0.jpg" alt="导入后的样子"></p><p>然后在空白的图层上面照着描线即可。</p><h2 id="描线"><a href="#描线" class="headerlink" title="描线"></a>描线</h2><p>描线的成果如下：</p><p><img src="https://pic.imgdb.cn/item/6138e87f44eaada739bc30bb.jpg" alt="描线"></p><h2 id="上色"><a href="#上色" class="headerlink" title="上色"></a>上色</h2><p>在左侧的菜单中找到吸管工具：</p><p><img src="https://pic.imgdb.cn/item/6138e8f044eaada739bcf330.jpg" alt="吸管工具"></p><p>使用习惯工具从参考图上吸取颜色。<br>使用快捷键 <code>Shfit+Ctrl+N</code> 创建一个新的图层用来上色。<br>然后慢慢涂满颜色，不知道怎么才能填充，所以只能用铅笔慢慢涂了。</p><p><img src="https://pic.imgdb.cn/item/6138eaf744eaada739c04766.jpg" alt="涂满颜色"></p><p>完成版效果：</p><p><img src="https://pic.imgdb.cn/item/6138f00b44eaada739c892e5.jpg" alt="完成版"></p><p>缩小之后看起来好多了：</p><p><img src="https://pic.imgdb.cn/item/6138f02844eaada739c8c0e6.jpg" alt="缩小的效果"></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> 游戏素材 </tag>
            
            <tag> 像素画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次濒死体验——死亡烤鸭套餐</title>
      <link href="/2021/08/30/my-story-01/"/>
      <url>/2021/08/30/my-story-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚刚刷微博，看到有关急性胰腺炎的报道，回想起一件事，我觉得有必要记录下来。<br>可能大家觉得死亡离自己是很远的一件事，我也这么觉得。<br>但是去年的一件事改变了我的想法——我第一次经历到了濒死的体验。</p><h2 id="那天晚上"><a href="#那天晚上" class="headerlink" title="那天晚上"></a>那天晚上</h2><p>那天晚上，如同往常一样点外卖。<br>因为附近的一家烤鸭很好吃，所以我连着好几天都点他们家的。</p><p>那是片皮的鸭子加上葱和黄瓜，再卷上面粉皮的吃法，跟东北的大葱卷饼差不多。<br>片皮的鸭子淋上辣椒油，撒满前几天点的炸鸡留下来的辣包，再蘸点他们家的甜面酱，加点葱和黄瓜条卷起来一口送入嘴里，味道好极了！</p><p>从冰箱拿出一瓶啤酒，有吃有喝。<br>因为连着几天都这么吃，这天也没在意。</p><p>实际上这天点的鸭子感觉有点老，看上去是经过反复烤制的，应该是隔夜没卖出去的。</p><h2 id="次日早上"><a href="#次日早上" class="headerlink" title="次日早上"></a>次日早上</h2><p>早上八点半左右醒来，从箱子里拿出一瓶牛奶，跟往常一样简单的早餐。<br>喝完之后也没感觉有什么问题，但是过了一会儿，肚子感觉不舒服，然后就拉肚子了。</p><p>原来喝牛奶有时候也会出现这种反应，好像是因为身体缺少乳糖分解酶所以会出现这种现象，所以就没在意。<br>但是过了一会儿，感觉有点恶心，就开始呕吐。</p><p>这样反反复复三四次，几乎把早上喝的全部吐了出来，身体开始扛不住了。<br>然后躺在床上休息，左边的腰部突然有一种疼痛感，一开始没在意，但是疼痛感逐渐强烈，到最后难以忍受。</p><p>以为疼痛只是暂时的，就躺在床上休息。<br>也不敢跟家里人说明情况，只是简单的说肚子不舒服，休息一下就好了。</p><h2 id="找舍友帮忙"><a href="#找舍友帮忙" class="headerlink" title="找舍友帮忙"></a>找舍友帮忙</h2><p>大概是十点左右，左腹的疼痛不仅没有缓解，反而加剧了。<br>开始感觉不对劲，于是想让舍友带我去医院看看。<br>结果两个舍友睡得跟死猪一样，勉强叫醒其中一个，但是他说自己昨天几乎通宵，然后就没让他帮忙。</p><p>另一个舍友也醒了，本来想让他骑着小电驴带我去医院看看，结果就那么不巧，小电驴借给他弟上班用了。<br>当时我已经痛到连路都走不动了，就让他搀扶着我走到小区外面的一家药店。</p><p>看店的是一名中年妇女，向她简单的描述了一下症状，说我可能是急性肠胃炎，然后就开了下面的药给我：</p><p><img src="https://pic.imgdb.cn/item/612bb59144eaada73951344b.jpg" alt="药店开的药"></p><p><img src="https://pic.imgdb.cn/item/612bb60844eaada73952e98d.jpg" alt="正面的样子"></p><p>现在才知道，可能我得的是急性胰腺炎，所以开肠胃的药一点用都没有。<br>而且我原本以为如果去店里的话，工作人员多少可以看一下我的症状再下药，但实际上只是简单的问了几句就没了。</p><p>为了走到楼下药店，我几乎耗尽了全身的力气……<br>如果只是简单的问两句，那我也没必要费这么大力气走下去了。</p><p>跟店里的工作人员交谈的时候，感觉也不是有专业知识的样子，所以就买了药然后回去了。<br>其实是自己不懂得药店里的人是销售，以为卖药的是医生（天真的想法）。</p><p>回去的时候顺便让舍友在便利店买了两桶矿泉水。</p><h2 id="吃药休息"><a href="#吃药休息" class="headerlink" title="吃药休息"></a>吃药休息</h2><p>在舍友的搀扶下回到房间，吃了药躺在床上休息。<br>当天小区做清理工作，于是停水，坏事总是不止一件。<br>所幸昨天提前准备好了几桶水，因为不断呕吐冲厕所的水几乎都用光了……</p><p>幸好后来没有继续呕吐，是因为已经吐不出来了，要不然厕所就没得冲了。<br>现在那种牛奶的味道回忆起来还是很恶心，可能已经成为我的心理阴影了。</p><h2 id="煎熬的下午"><a href="#煎熬的下午" class="headerlink" title="煎熬的下午"></a>煎熬的下午</h2><p>从早上开始就没吃东西，还把牛奶全吐出来了。<br>所以肚子非常饿，但是又很恶心，没有任何食欲，就这么一直空腹饿着。</p><p>不知道是怎么度过的时间，就这样坚持到了下午一点多。<br>左腹的疼痛已经不是常人能忍受的了，痛到全身冒冷汗，想去洗把脸又没有水，就这样全身黏糊糊的也顾不上了。</p><p>躺在床上，痛得打滚，拳头握得紧紧的，咬着牙，蜷缩着身体，忍着超乎寻常的痛。<br>这种痛，不仅是身体，而且还摧残着精神，我第一次浮现出“要是死了就好了，就不用忍受这种痛苦”的想法……<br>如同受到酷刑，求生不得求死不能一样。<br>但是，只能继续忍着。</p><p>因为现在别提走下楼去医院，连走动一步都做不到。<br>如果第一次让舍友陪我去药店，直接打车去医院就好了……</p><h2 id="最难熬的时间"><a href="#最难熬的时间" class="headerlink" title="最难熬的时间"></a>最难熬的时间</h2><p>从一点到两点是最难熬的时间，剧痛感达到了最强，已经满头大汗，短袖被汗浸湿。<br>这个时候开始不断产生恐怖的想法：“我该不会就这样死了吧？”</p><p>然后，开始觉得一切都不那么重要了。<br>今天的股票涨了还是跌了？现在这些事都觉得不重要了。<br>（当时满仓，一天的涨跌金额还是蛮大的）</p><p>想得最多的一件事就是：<br>如果这样死了，那会很遗憾，因为我连自己想做的事情都没做完，就这样离开，很不甘心。</p><p>因为疼痛，脑海中浮现出奇奇怪怪的东西，出现了一些奇怪的图像，说不清是什么。<br>只不过，有一件事自己是清楚的——那就是自己的身体正在与病毒对抗。</p><p>我的脑海中浮现出了《工作细胞》里大战病毒的场景。<br>心里还给自己的细胞们加油，战胜它们！</p><p>这个时候，身体已经处于半昏迷状态了，唯一剩下的只有意识。<br>意识还在不断给身体的细胞加油。</p><p>因为只剩下意识，所以身体的感官也变得比较清晰。<br>可以感觉到左腹的地方有三处是特别强烈的剧透，因为自己不断给身体的细胞加油，这些疼痛感好像也减轻了一点。</p><h2 id="补充能量"><a href="#补充能量" class="headerlink" title="补充能量"></a>补充能量</h2><p>突然猛地意识到……如果想要让身体战胜病毒，那么必须给身体提供足够的能量。<br>还有因为呕吐和大量出汗，身体已经损失了很多的水分和盐分，如果不及时补充水分和盐分，身体会更加虚弱。</p><p>必须要点一份吃的，否则一整天没进食，身体的细胞肯定没有足够的力量战胜病毒。<br>这个时候第一次无比想要「声控点餐」……但明显没办法。</p><p>艰难的翻过身，拿到放在桌子上的手机。</p><p>经过考虑，如果点正常的饭，那么我很可能会吃不下去；<br>而且米饭的能量其实是十分低的，消化也需要时间，如果点饭肯定是不理智的。</p><p>如果因为恶心呕吐没胃口，唯一还想吃的就是水果。<br>芒果之类的，可能还是没有胃口，但是西瓜的话，富含糖分和水分，而且不需要咀嚼就能吃下去，因此西瓜是最佳选择。</p><p>点了一家水果店的外面，两盒西瓜，还有其他哈密瓜之类的，心想如果能吃下去，有固态物填充肚子就不会那么饿了。<br>（做好了打持久战的准备）</p><p>点完外卖之后，我想到要快点补充能量和盐分，然后之前准备的两桶水就派上用场了。<br>我到厨房抓了一把盐和糖，然后混到矿泉水里，在水果来之前大口饮水补充临时能量。</p><blockquote><p>科普小知识：食糖是冰糖，也就是蔗糖，能够被身体直接吸收的是葡萄糖，蔗糖需要水解成葡萄糖才能被身体吸收；而食盐是氯化钠，是一种电解质，一定比例的氯化钠溶于水就是生理盐水，它具有调节身体渗透压的作用。</p></blockquote><p>因为一整天没进食，导致我身体的血糖过低；<br>而身体大量出汗，导致体内盐分流失造成内环境失调。</p><p>上述两种行为引发了头晕和四肢无力的症状，必须及时解除这种状态。<br>就好比玩 RPG 游戏中毒了，每走一步都会掉血，如果不及时解除这个负面效果很快就会让情况变得更糟。</p><p>给矿泉水加了盐和糖，直接把一整瓶都喝光了……<br>又吃了几片药，然鹅还是没有卵用。</p><p>在外卖送达之前也是非常煎熬的时间，肚子超级饿，左腹仍然伴随着剧烈的疼痛。</p><p>心里一直默念着“快来啊”，“快来啊”……<br>如果补充了能量，那么身体的细胞就能恢复战斗力了。<br>外卖小哥此时此刻如同我的救世主。<br>一直祈祷着外卖小哥赶紧送来……<br>我能做的也就只有这样而已了。</p><p>经过了二十分钟左右，外卖小哥打来了电话，而且还是送到门口。<br>希望已经到来，我扶着桌子去开门，中间走路都是拖着鞋在地上滑行的……</p><p>从卧室走到门口估计花了一分钟的时间，外卖小哥也很耐心的等着。<br>打开门从外卖小哥手中接过水果，顿时全世界都明亮了！</p><p>拿到桌子上，慌里慌张的拆开薄膜，疯狂的吃起了西瓜。<br>第一盒瞬间就被我吃光了，第二盒吃了一半，感觉有点饱了，身体充满了能量。</p><blockquote><p>科普小知识：西瓜的糖主要是葡萄糖，能够直接被吸收从而能使血糖迅速升高。</p></blockquote><p>上述小知识在高中的生物学过，在这个时候就派上用场了。<br>当生病没有食欲的时候，西瓜就是最好补充能量的来源。</p><h2 id="决战！"><a href="#决战！" class="headerlink" title="决战！"></a>决战！</h2><p>身体与病毒对抗的时候，一定要保证能量和水分的供应，否则身体的细胞在没有支援的情况下很难与病毒战斗。</p><p>最终决战是下午三点到四点的时间，补充完能量之后身体感觉舒服了很多，但是疼痛感没有减少。<br>继续躺在床上，左腹的疼痛仍然让我冷汗直流，还是咬着牙在床上忍着痛苦。</p><p>脑海中不断想象着白细胞拿着刀子在屠杀病毒的场景……也就只有这样能让我的痛苦稍微减轻一点（心理上的）。</p><p>身体里的 A、B、C 三个据点被病毒占领，这三处据点犹如绞肉般的疼痛，伴随着灼烧感，病毒在此处肆虐。假装自己能控制身体的细胞一样，指挥它们集中兵力去攻下 A 据点，然后还真的如同想象的一样，A 处的疼痛感减轻了；接着远处的 C 据点似乎也传来了喜讯，只剩下中间一处仍然持续散发着剧痛。</p><p>于是，我下令——发动总攻击！这是最后一场战争了！<br>打赢了你们就可以回老家结婚了！</p><p>以上其实都只是自己脑中的 YY，因为只有这样才能忘掉痛苦，让自己好受一些。<br>这个时候我已经是半昏迷状态了，只剩下意识还在脑补那些画面。</p><p>如果能睡着的话就好了，但痛到根本睡不着。</p><p>这场“YY 战争”打到了快六点，最终以我军告捷拉下序幕。<br>我的身体终于战胜了病毒。</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>左腹的疼痛逐渐消失，仿佛刚才的一切都未曾发生过。<br>桌子上还残留的水果也不再新鲜了。</p><p>身体渐渐能动了，我就直起身来，背靠着墙，休息了一会，然后给家里发消息：已经好了。</p><p>接着点了一份白粥，外加简单的榨菜、肉松和一颗卤蛋。<br>胃口已经恢复了，但是自己不敢再吃刺激类的东西了。</p><blockquote><p>可是……现在又敢了，好了伤疤忘了疼！</p></blockquote><p>舍友还不知道从哪买了亲嘴烧，我很想吃，但又不敢吃。<br>大病初愈，心情犹如雨后晴天，舍友的弟弟也下班回来了，于是与他们三人侃侃而谈今天的经历。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到底是隔夜的鸭子不新鲜，还是早餐的牛奶没消毒，或者是炸鸡的料包过期了？<br>具体是什么原因，我不得而知，但最终这些事导致了我受难的一天。</p><p>从九点多，到下午六点，这期间不知道自己是怎么熬过来的。<br>就发生在刚刚，但是却又好像没有发生过。</p><p>不久前还痛到想要一死了之，现在却一点感觉也没有了。<br>所谓的疼痛，只有在痛的时候才感受得到，但是痛过之后，就一点感觉也没有了。</p><p>不是结果，也不是开始，而是过程。<br>以此文纪念与病毒战斗过的身体。</p>]]></content>
      
      
      <categories>
          
          <category> 作者故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】Cinemachine 实现视野跟随</title>
      <link href="/2021/08/24/unity-tips-005/"/>
      <url>/2021/08/24/unity-tips-005/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Cinemachine 是 Unity 的一个和摄像机相关的开箱即用包。<br>完全不需要写代码，只需要在可视化的界面进行简单的配置即可实现视野跟随的功能。</p><h2 id="安装-Cinemachine"><a href="#安装-Cinemachine" class="headerlink" title="安装 Cinemachine"></a>安装 Cinemachine</h2><p>在 Unity 的顶部菜单栏中，选择 <code>Windows</code>（窗口）然后点击 <code>Package Manager</code>（包管理）。</p><p><img src="https://pic.imgdb.cn/item/6124e71f44eaada739bcdab2.jpg" alt="Package Manager"></p><p>接着在弹出的包管理窗口中，点击左上角选择 <code>Unity Registry</code>（如果不选中这个是看不到 Cinemachine 的）。然后等一会，Unity 需要拉取包信息，大约十秒左右就会显示出所有的包列表了，等列表加载出来以后，找到 <code>Cinemachine</code> 点击，右侧的窗口会变成包信息，找到右下角的 <code>install</code> 按钮点击即可安装。</p><p><img src="https://pic.imgdb.cn/item/6124e7ec44eaada739be9681.jpg" alt="Cinemachine"></p><p>等待安装完成以后，关掉包管理工具，可以看到顶部菜单栏的 <code>Component</code> 里多出了 <code>Cinemachine</code> 的选项。</p><h2 id="2D-Camera-去哪了？"><a href="#2D-Camera-去哪了？" class="headerlink" title="2D Camera 去哪了？"></a>2D Camera 去哪了？</h2><p>然鹅，网上的教程都会告诉你要创建一个 <code>2D Camera</code>，可是……这个菜单里并没有这个选项。</p><p><img src="https://pic.imgdb.cn/item/6124e95e44eaada739c1ed52.jpg" alt="2D Camera 去哪了？"></p><p>为了解决这个问题，我翻了网上所有教程，结果没一个是说明这个问题的。<br>难道说……只有我安装的 <code>Cinemachine</code> 有问题？</p><p>最开始以为是因为新版本更新导致功能变化，尝试了菜单中的 <code>Virtual Camera</code>（虚拟相机），结果发现并不能跟随视野。然后又去翻了一遍搜索引擎的结果，仍然没有解决，最后返回包管理工具，意外的注意到一个不起眼的地方……</p><p>目前 Cinemachine 最新版是 2.7.5 版本，网上的一些教程基本上都是 N 年前的 2.2.x 版本，升级到 2.7.x 之后，界面已经发生了一些改变，在包的描述信息中间有一行不起眼的英文：</p><p><img src="https://pic.imgdb.cn/item/6124e90544eaada739c1235b.jpg" alt="描述信息"></p><p>点击 <code>More</code> 查看完整的信息：</p><p><img src="https://pic.imgdb.cn/item/6124eb7c44eaada739c6684e.jpg" alt="More"></p><p>这里有一段英文：</p><blockquote><p>New starting from 2.7.1: Are you looking for the Cinemachine menu? It has moved to the GameObject menu.</p></blockquote><p>意思是说：从 2.7.1 版本开始，Cinemachine 已经移动到了 <code>GameObject</code> 菜单底下。</p><p>原来新版本改变了菜单的位置，怪不得找不到！<br>返回 unity 场景，选择顶部菜单栏 <code>GameObject</code> 菜单，看到下拉列表里有 <code>Cinemachine</code>，点开就可以发现 <code>2D Camera</code> 了。</p><p><img src="https://pic.imgdb.cn/item/6124ebfb44eaada739c78df8.jpg" alt="GameObject菜单"></p><h2 id="实现视野跟随"><a href="#实现视野跟随" class="headerlink" title="实现视野跟随"></a>实现视野跟随</h2><p>点击创建 <code>2D Camera</code>，可以看到场景多出来这么一个东西：</p><p><img src="https://pic.imgdb.cn/item/6124eca644eaada739c91abc.jpg" alt="CM vcam1"></p><p>并且 <code>Main Camera</code> 也自动添加了一个组件：</p><p><img src="https://pic.imgdb.cn/item/6124ecc044eaada739c95b32.jpg" alt="Main Camera"></p><p>主摄像机不用管，我们只需要关注 <code>CM vcam1</code>，在右侧面板中，找到 <code>follow</code> 变量，把场景中的角色拖到变量里：</p><p><img src="https://pic.imgdb.cn/item/6124ed5444eaada739caadf4.jpg" alt="follow"></p><p>这样就 OK 了，点击测试！</p><p><img src="https://pic.imgdb.cn/item/6124ee0044eaada739cc3a28.gif" alt="实现视野跟随"></p><p>可以看到，视野可以跟随主角移动了。</p><h2 id="配置最大视野范围"><a href="#配置最大视野范围" class="headerlink" title="配置最大视野范围"></a>配置最大视野范围</h2><p>当角色移动到场景边界时，就会看到场景的边缘：</p><p><img src="https://pic.imgdb.cn/item/6124ee6e44eaada739cd28c5.jpg" alt="移动到边缘"></p><p>但是我们希望它能限制在一个范围内，而不是走到角落时可以看到黑边。</p><p>在场景中任意一个物体上创建 <code>Polygon Collision2D</code>（多边形碰撞器），然后把 <code>is trigger</code> 勾选上，此处我选择在关卡的根节点添加一个多边形碰撞器：</p><p><img src="https://pic.imgdb.cn/item/6124efaf44eaada739cfe6e2.jpg" alt="多边形碰撞器"></p><p>接着再返回场景，选择 <code>CM vcam1</code>，在右侧的界面中，点击 <code>Add Extension</code>：</p><p><img src="https://pic.imgdb.cn/item/6124f00844eaada739d0ab4a.jpg" alt="Add Extension"></p><p>在弹出的下拉菜单中，选择 <code>Cinemachine confinder</code>：</p><p><img src="https://pic.imgdb.cn/item/6124f05a44eaada739d16539.jpg" alt="Cinemachine confinder"></p><p>然后把添加了多边形碰撞器的根节点拖进 <code>Bounding Shape 2D</code>：</p><p><img src="https://pic.imgdb.cn/item/6124f0aa44eaada739d217d8.jpg" alt="根节点"></p><p>这样视野就会限制在多边形的范围里：</p><p><img src="https://pic.imgdb.cn/item/6124f0f444eaada739d2b8b2.jpg" alt="视野范围"></p><p>然后进入游戏测试：</p><p><img src="https://pic.imgdb.cn/item/6124f14d44eaada739d38095.gif" alt="测试视野范围"></p><p>当角色走出多边形的范围时，摄像机就不再跟随了。</p><h2 id="抖动问题修复"><a href="#抖动问题修复" class="headerlink" title="抖动问题修复"></a>抖动问题修复</h2><p>在没有配置的时候，摄像机的跟随范围很大，不仅是水平方向，竖直方向也会进行跟随，如下：</p><p><img src="https://pic.imgdb.cn/item/6124f1d244eaada739d4b14f.gif" alt="抖动问题"></p><p>作为一个 2D 平台跳跃游戏，上下抖动会产生眩晕的感觉。</p><p>这是因为设置的多边形与摄像机的边界存在空白导致的。</p><p><img src="https://pic.imgdb.cn/item/6124f26e44eaada739d61a27.jpg" alt="摄像机边界"></p><p>调整多边形的范围让它与白色边重合即可解决此问题。<br>除此之外，还可以调节摄像机的边缘（即上图白边部分）。</p><p>点击 <code>CM vcam1</code>，再点击 <code>Lens</code> 展开选项：</p><p><img src="https://pic.imgdb.cn/item/6124f34544eaada739d80355.jpg" alt="Lens"></p><p>只要修改 <code>Ortho Size</code> 的值即可调整摄像机的大小。</p><h2 id="跟随范围"><a href="#跟随范围" class="headerlink" title="跟随范围"></a>跟随范围</h2><p>可以设置跟随范围让角色一直保持在中间或者超过某个区域才开始跟随。</p><p>选择 <code>Body</code> 然后编辑 <code>screen X</code> 和 <code>screen Y</code> 的值即可：</p><p><img src="https://pic.imgdb.cn/item/6124f3ea44eaada739d9803a.jpg" alt="跟随范围"></p><p>可以看到上图中有一个区域，当角色走出这个区域的时候摄像机才会开始跟随。</p><p><img src="https://pic.imgdb.cn/item/6124f43e44eaada739da37bb.gif" alt="区域"></p><p>在区域中移动时，摄像机不会跟随，当走到区域边缘时摄像机才开始跟随，直到走出多边形的最大区域才停止。<br>（可以看到上图中角色脸上有一个点，当那个点碰到边缘的时候便会开始跟随）</p><p>如果要让角色一直处于视野中心的位置，只要将上面两个值设置为 0 即可。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>本文仅做简单的介绍，因为本人也还没有详细了解过这个插件的所有功能（它实在太大了！）。<br>根据我搜索得到的结果，这个插件可以实现包括特写等等很多效果（主要用在 3D 游戏）。<br>以及在 3D 游戏中，切换不同的画面以实现动画效果。</p><p>因为我现在做的是 2D 游戏，暂时还用不到那么多功能，只要视野跟随就足够了，等需要用到的时候再继续深入学习。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】像搭积木一样简单，组件化的开发思想！</title>
      <link href="/2021/08/23/unity-tips-004/"/>
      <url>/2021/08/23/unity-tips-004/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天和今天都在研究平台小游戏的跳跃、攀墙等等基本功能。<br>然后意外的发现了一个值得研究的项目：<a href="https://github.com/mixandjam/Celeste-Movement">https://github.com/mixandjam/Celeste-Movement</a><br>这个项目是模仿《蔚蓝》实现操作手感的优化。<br>然而最重要的不是里面如何优化操作手感，而是这位老外的开发方式非常值得学习。</p><p>PS.组件化开发不仅可以运用在游戏上面，而且对于 WEB 开发、APP 开发等等，均有运用的场景，编程思想是通用的。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Unity 本身就是组件化的开发，场景中的对象基本上都是由一个 <code>Empty GameObject</code>（空对象）构造而成：</p><p><img src="https://pic.imgdb.cn/item/6123aebd44eaada739a43af8.jpg" alt="空对象"></p><p>创建一个新的空对象，包含最基本的属性 <code>Transform</code>：</p><p><img src="https://pic.imgdb.cn/item/6123aefe44eaada739a4ce73.jpg" alt="Transform"></p><p>然后在面板上点击 <code>Add Component</code> 即可添加组件：</p><p><img src="https://pic.imgdb.cn/item/6123af2644eaada739a52be4.jpg" alt="Add Component"></p><p>给它添加 <code>Sprite Render</code>（精灵渲染器），它就可以显示一张图片；<br>给它添加 <code>RigidBody 2D</code> 就可以让它具有 2D 刚体属性；<br>甚至还可以给它添加 <code>Camera</code> 就可以让它变成场景中的摄像机。</p><p>也就是说，在 unity 场景中的游戏对象都是从一个空物体再「装上」不同的组件构成的。<br>打个比方，宝可梦中的伊布，如果给它雷之石，它就会进化成雷伊布，给它水之石就会进化成水伊布，以此类推。</p><p>这种就是「组件化」的编程思想。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>通常情况下为了提高代码的复用性，我们会使用继承来实现代码的复用。<br>比如定义一个 <code>Animal</code>（动物）作为父类，父类包含一个 <code>Walk</code> 方法，<br><code>Cat</code>、<code>Dog</code> 继承 <code>Animal</code>，因此这两个类也都拥有了 <code>Walk</code> 方法。</p><p>继承是通过抽象出共有的方法来实现代码的复用，但是当层级比较多的时候，就会使得关系十分复杂。<br>比如现在要新增一个鸟类，鸟类也是动物，鸟类可以飞，猫和狗不能飞；<br>因此需要再抽象出一个 <code>Bird</code>（鸟）和 <code>Mammals</code>（哺乳动物）。<br>所有的鸟类继承 <code>Bird</code>，所有的哺乳动物继承 <code>Mammals</code>。</p><p>但是新的问题又来了，有一些鸟是不会飞的，比如已经灭绝的渡渡鸟。<br>那么又要抽象出 <code>FlyBird</code> 和 <code>UnFlyBird</code>。</p><p>当父类比较多的时候，就需要层层继承，使得继承的关系变得复杂。</p><p>除此之外，有的哺乳动物也能飞，比如鼯鼠。<br>这个时候作为程序员简直要崩溃了……又得把哺乳动物分成会飞的跟不会飞的。</p><p>为了解决这个问题，下面的组件化开发就诞生了。</p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>动物的基本行为实际上是类里的一个方法，比如 <code>Walk</code>（行走），<code>Fly</code>（飞行）。<br>这些可以视为它们的“能力”，即猫有行走的能力，鸟可以在天上飞。</p><p>那么我们可以把这些能力提取出来，就叫做“能力”。<br>然后动物是一个本体，一个没有任何能力的基本模型，所有的能力都需要后天添加上去。</p><p>比如创建一个动物模型，然后把「飞」的能力添加到这个模型上，让它具备飞的能力。<br>接着再把「潜水」的能力附加到这个模型上，它就可以潜水了，这样即会飞行又会潜水的动物，就是「海雀」。<br>接着再创建一个新的动物模型，把「胎生」和「飞行」添加到模型上，这样这只动物既是哺乳动物又可以飞，就是「鼯鼠」。</p><p>通过这种方法，我们可以把各种动物的能力组合在一起，从而实现现实中存在的所有动物。<br>不仅如此，连现实中不存在的动物都可以实现，例如「哺乳动物」和「蛋生」的能力附加到一个模型上面，然而现实中所有的哺乳动物都是胎生的。</p><p>组件化开发的原理是基于一个基本的「模型」，为其添加不同的组件使其具备不同的功能。<br>组件化开发是弱关联关系的，比如下面这样给 unity 中的摄像机加上刚体组件：</p><p><img src="https://pic.imgdb.cn/item/6123b4ce44eaada739b2871f.jpg" alt="给摄像机加上刚体组件"></p><p>这样做有什么意义吗？让摄像机符合物理学运动规律？很明显，没有什么特别的意义。<br>但是，它确实是可以这样做的，因为组件化的开发不存在逻辑上必然的关联。<br>你可以给精灵加上刚体，也可以给 <code>Text</code> 加上刚体……你可以给 unity 中的任何对象都加上刚体。</p><p>从一个基础的模型 <code>Empty GameObejct</code> 开始，给它加上不同的组件，使其具备特殊的功能。<br>这样做的优点是可以非常灵活的创建出不同的物体，而不需要受到逻辑上的约束。</p><p>继承关系是无法做到这点的，因为继承的原则就是 <strong>将一系列相同的方法抽象出来</strong>，通过继承得到的物体是从一个模子里刻出来全部一样的东西。而组件化的开发是为了解决「差异化复用」的问题，通过后期添加不同的组件使其成为不同的物体。</p><p>继承关系必须在子类实现差异化的方法，而组件化的开发则是把差异化也变成可以复用的东西，下面通过 unity 的例子来证明这一点。</p><h2 id="开发需求"><a href="#开发需求" class="headerlink" title="开发需求"></a>开发需求</h2><p>游戏中存在角色和敌人，它们都具有共同点：</p><ul><li>有生命值，受伤会死亡</li><li>可以跳跃和行走</li></ul><p>就以上述特征来比较继承式开发和组件化开发的不同。</p><h2 id="传统的继承式开发"><a href="#传统的继承式开发" class="headerlink" title="传统的继承式开发"></a>传统的继承式开发</h2><p>将共同的特征抽取出来，创建一个 <code>Character</code>（角色类），然后让 <code>Player</code>（玩家角色）和 <code>Enemy</code>（敌人角色）继承 <code>Character</code>，再在子类中实现差异化的方法，思路很简单，下面开始实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int maxHP;</span><br><span class="line"></span><br><span class="line">    private int currentHP;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP &#x3D; maxHP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void TakeDamage(int damage)</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP -&#x3D; damage;</span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Dead();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void Dead();</span><br><span class="line">    protected abstract void Move();</span><br><span class="line">    protected abstract void Jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的角色都会受伤，因此 <code>TakeDamage</code> 是一个通用的方法，在父类进行实现；<br>但是角色死亡会 GameOver，而敌人死亡会爆金币，这两个并不通用，因此设为抽象方法，在子类进行实现。<br>同理，玩家的行走和跳跃是要按键控制的，而敌人的行走和跳跃却是通过 AI 来控制的，因此也要在子类进行实现。</p><p>接着创建一个 <code>PlayerCharacter</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class PlayerCharacter : Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Dead()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void Jump()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void Move()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着再创建一个 <code>EnemyCharacter</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class EnemyCharacter : Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void Dead()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void Jump()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void Move()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现这边就不写了，仅做示例。<br>这样就是一个典型的继承关系，从结果来看并没有什么问题。</p><p>但是，这样代码的可复用性太低，子类只能调用父类有的方法，父类没有的方法就得自己写。</p><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>如果是组件化的开发，那么可以把上面的需求拆分成：</p><ul><li>生命体特征组件，有生命值以及受伤死亡相关的方法</li><li>行为特征组件，有行走跳跃等动作相关的方法</li></ul><p>我们先来创建两个特征组件：</p><p>生命体特征组件 <code>LifeComponent</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class LifeComponent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int maxHP;</span><br><span class="line"></span><br><span class="line">    private int currentHP;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP &#x3D; maxHP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void TakeDamage(int damage)</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP -&#x3D; damage;</span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Dead();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着角色类不需要继承任何自定义的类，只需要继承 unity 基础的 <code>MonoBehaviour</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class PlayerCharacter : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private LifeComponent lifeComponent;</span><br><span class="line">    private ActionComponent actionComponent;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        lifeComponent &#x3D; GetComponent&lt;LifeComponent&gt;();</span><br><span class="line">        actionComponent &#x3D; GetComponent&lt;ActionComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.LeftArrow) || Input.GetKeyDown(KeyCode.RightArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            actionComponent.Move();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            actionComponent.Jump();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PlayerCharacter</code> 本身并不需要实现方法，只需要获取身上的组件，然后通过组件来调用对应的方法即可。<br>敌人类同理，这边就不赘述了。</p><p>最终，只需要在 unity 创建一个空的游戏对象，然后把这些脚本逐一挂在上面：</p><p><img src="https://pic.imgdb.cn/item/6123bc7d44eaada739c3c288.jpg" alt="添加组件"></p><p>如此一来，这个空物体就被赋予了“生命体特征”、“动作特征”和“玩家特征”。<br>它现在就是一个可以被玩家控制的角色了！</p><h2 id="实际的运用"><a href="#实际的运用" class="headerlink" title="实际的运用"></a>实际的运用</h2><p>上面的例子因为没有实际在游戏中调试，所以可能难以展示出组件化开发的优点。<br>那么可以参考下面这几个例子。</p><h3 id="跳跃优化组件"><a href="#跳跃优化组件" class="headerlink" title="跳跃优化组件"></a>跳跃优化组件</h3><p>上一篇关于手感优化的：<a href="https://huotuyouxi.com/2021/08/21/unity-tips-003/">https://huotuyouxi.com/2021/08/21/unity-tips-003/</a><br>文章里有一个可以优化跳跃手感的组件，其实是一个普通的 <code>MonoBehaviour</code> 类文件，可以挂在任何物体上面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BetterJumping : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    public float fallMultiplier &#x3D; 2.5f;</span><br><span class="line">    public float lowJumpMultiplier &#x3D; 2f;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(rb.velocity.y &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (fallMultiplier - 1) * Time.deltaTime;</span><br><span class="line">        &#125;else if(rb.velocity.y &gt; 0 &amp;&amp; !Input.GetButton(&quot;Jump&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (lowJumpMultiplier - 1) * Time.deltaTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>神奇的地方在于，它不依赖任何其他类，只要挂在一个拥有刚体属性并且有跳跃功能的角色上就可以自动优化跳跃的手感。</p><h3 id="幻影组件"><a href="#幻影组件" class="headerlink" title="幻影组件"></a>幻影组件</h3><p>接着是再上一篇文章：<a href="https://huotuyouxi.com/2021/08/21/unity-tips-002/">https://huotuyouxi.com/2021/08/21/unity-tips-002/</a></p><p>这是一个幻影组件 <code>ShadowComponent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ShadowComponent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private LinkedList&lt;ShadowSprite&gt; shadowSprites;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        InitShadowSprites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void InitShadowSprites()</span><br><span class="line">    &#123;</span><br><span class="line">        shadowSprites &#x3D; new LinkedList&lt;ShadowSprite&gt;();</span><br><span class="line"></span><br><span class="line">        int count &#x3D; 5;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var shadow &#x3D; CreateShadowSprite();</span><br><span class="line">            shadowSprites.AddFirst(shadow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ShadowSprite CreateShadowSprite()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject prefab &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefab&#x2F;ShadowSprite&quot;);</span><br><span class="line">        GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line">        ShadowSprite shadow &#x3D; obj.GetComponent&lt;ShadowSprite&gt;();</span><br><span class="line">        shadow.SetShadowComponent(this);</span><br><span class="line"></span><br><span class="line">        return shadow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShadowSprite GetShadow()</span><br><span class="line">    &#123;</span><br><span class="line">        ShadowSprite shadow;</span><br><span class="line"></span><br><span class="line">        if (shadowSprites.First !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            shadow &#x3D; shadowSprites.First.Value;</span><br><span class="line">            shadowSprites.RemoveFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            shadow &#x3D; CreateShadowSprite();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return shadow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void PutShadow(ShadowSprite shadow)</span><br><span class="line">    &#123;</span><br><span class="line">        shadow.gameObject.SetActive(false);</span><br><span class="line">        shadowSprites.AddFirst(shadow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要挂上这个幻影组件，角色就可以生成幻影特效，只需要调用 <code>GetShadow</code> 取得幻影即可。</p><h3 id="碰撞监听组件"><a href="#碰撞监听组件" class="headerlink" title="碰撞监听组件"></a>碰撞监听组件</h3><p>这是老外写的一个碰撞监听检测组件，它可以检测角色是否与地板、墙壁接触：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Collision : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [Header(&quot;Layers&quot;)]</span><br><span class="line">    public LayerMask groundLayer;</span><br><span class="line"></span><br><span class="line">    [Space]</span><br><span class="line"></span><br><span class="line">    public bool onGround;</span><br><span class="line">    public bool onWall;</span><br><span class="line">    public bool onRightWall;</span><br><span class="line">    public bool onLeftWall;</span><br><span class="line">    public int wallSide;</span><br><span class="line"></span><br><span class="line">    [Space]</span><br><span class="line"></span><br><span class="line">    [Header(&quot;Collision&quot;)]</span><br><span class="line"></span><br><span class="line">    public float collisionRadius &#x3D; 0.25f;</span><br><span class="line">    public Vector2 bottomOffset, rightOffset, leftOffset;</span><br><span class="line">    private Color debugCollisionColor &#x3D; Color.red;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;  </span><br><span class="line">        onGround &#x3D; Physics2D.OverlapCircle((Vector2)transform.position + bottomOffset, collisionRadius, groundLayer);</span><br><span class="line">        onWall &#x3D; Physics2D.OverlapCircle((Vector2)transform.position + rightOffset, collisionRadius, groundLayer) </span><br><span class="line">            || Physics2D.OverlapCircle((Vector2)transform.position + leftOffset, collisionRadius, groundLayer);</span><br><span class="line"></span><br><span class="line">        onRightWall &#x3D; Physics2D.OverlapCircle((Vector2)transform.position + rightOffset, collisionRadius, groundLayer);</span><br><span class="line">        onLeftWall &#x3D; Physics2D.OverlapCircle((Vector2)transform.position + leftOffset, collisionRadius, groundLayer);</span><br><span class="line"></span><br><span class="line">        wallSide &#x3D; onRightWall ? -1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnDrawGizmos()</span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.color &#x3D; Color.red;</span><br><span class="line"></span><br><span class="line">        var positions &#x3D; new Vector2[] &#123; bottomOffset, rightOffset, leftOffset &#125;;</span><br><span class="line"></span><br><span class="line">        Gizmos.DrawWireSphere((Vector2)transform.position  + bottomOffset, collisionRadius);</span><br><span class="line">        Gizmos.DrawWireSphere((Vector2)transform.position + rightOffset, collisionRadius);</span><br><span class="line">        Gizmos.DrawWireSphere((Vector2)transform.position + leftOffset, collisionRadius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要挂上脚本，简单的填写监听点的位置参数，就可以自动检测是否与墙体、地板发生碰撞，是不是很方便？而且还自带绘图功能，可以直观的看出碰撞监听的范围以便调试。</p><h3 id="动画自动销毁组件"><a href="#动画自动销毁组件" class="headerlink" title="动画自动销毁组件"></a>动画自动销毁组件</h3><p>这是我自己写的一个能让动画播放完毕之后就销毁的组件 <code>OnceAnimate</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class OnceAnimate : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Animator animator;</span><br><span class="line">    private AnimatorStateInfo animatorStateInfo;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        animatorStateInfo &#x3D; animator.GetCurrentAnimatorStateInfo(0);</span><br><span class="line"></span><br><span class="line">        if (animatorStateInfo.normalizedTime &gt;&#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如子弹击中墙壁，生成了一个爆炸动画，爆炸动画是一个预制体，在动画播放完毕之后就要自动消除，只需要挂上这个组件就行了！连代码都不用写！</p><h3 id="更多的组件"><a href="#更多的组件" class="headerlink" title="更多的组件"></a>更多的组件</h3><p>同样请参考老外写的这个模仿《蔚蓝的项目》：<a href="https://github.com/mixandjam/Celeste-Movement/tree/master/Assets/Scripts">https://github.com/mixandjam/Celeste-Movement/tree/master/Assets/Scripts</a></p><p>这里的脚本都是组件，你甚至可以直接复制粘贴到你的项目中使用——这就是组件化开发的最大魅力。<br>它们不依赖任何其他类，不管任何地方都可以使用。</p><blockquote><p>编程的最高境界即是“无码”，不需要写代码就能实现所需的功能。——《兔子语录》</p></blockquote><p>组件化开发的复用性很强，强到可以跨项目使用，因此游戏的开发不一定要依赖框架，可以完全依赖这些组件直接从零快速搭建游戏的雏形。</p><h2 id="继承式开发与组件化开发的比较"><a href="#继承式开发与组件化开发的比较" class="headerlink" title="继承式开发与组件化开发的比较"></a>继承式开发与组件化开发的比较</h2><h3 id="逻辑的不同"><a href="#逻辑的不同" class="headerlink" title="逻辑的不同"></a>逻辑的不同</h3><p>继承式开发适用于关联性比较强的「面向对象」式开发，而组件化开发则偏向于面向过程式开发。<br>继承式因为是面向对象的，因此注重“关联关系”，整体的结构井井有条。</p><p>如同俗语说的“龙生龙凤生凤”，虽然子类会有一些差别，但大体都是相同的。<br>组件化的开发却是“合成兽”，比如奇美拉那样的，把不同的怪物的一部分组合到一起，形成新的怪物。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>如果类的复杂程度不高，就可以用继承式，一般的 WEB 开发不会用到那么复杂的类，所以用继承式的就足够了。<br>主要看拆分出组件是否有必要，如果这种差异化能够反复使用，那么也可以考虑组件化。</p><p>不过一般的 WEB 框架都会使用“依赖注入”的方式，其功能与组件化类似，一般用依赖注入即可满足需求。<br>对于游戏开发来说，大部分的差异化功能是可以反复利用的，所以组件化的开发可以大大节省时间。</p><p>不管是继承还是组件，都是基于“复用代码”的角度来考虑的，根据实际场景，哪一种可以减少开发者写代码的量就选用哪种。</p><h3 id="性能的差别"><a href="#性能的差别" class="headerlink" title="性能的差别"></a>性能的差别</h3><p>上面的例子中，如果不用组件化，而是把所有的代码挤在一个类，就可以实现「变量的复用」从而节省内存。但是拆分成组件之后，需要大量用到 <code>GetComponent</code> 方法来获取组件，这在 unity 是比较耗费性能的一件事。</p><p>如果是采用组件化开发并且场景中有大量的物体，那么应该考虑结合对象池来降低这种无端的性能消耗。</p><h3 id="代码简洁之道"><a href="#代码简洁之道" class="headerlink" title="代码简洁之道"></a>代码简洁之道</h3><p>组件化的开发将每一个功能拆分成最小模块，因此代码极度简洁。<br>而继承式开发，一旦项目变大，后期上千行的代码都有可能，维护难度随项目变大而增加。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组件化开发如同搭积木一样将不同的功能组装在一起，从而创造出新的东西。<br>只需要写好组件，后续不需要编程，只要动动手指把脚本拖到物体上面——这是多么酷的事！</p><p>接下来我也要开始专注于组件式的开发了！</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】横版平台游戏之跳跃手感优化</title>
      <link href="/2021/08/21/unity-tips-003/"/>
      <url>/2021/08/21/unity-tips-003/</url>
      
        <content type="html"><![CDATA[<h2 id="通常的跳跃"><a href="#通常的跳跃" class="headerlink" title="通常的跳跃"></a>通常的跳跃</h2><p>一般的跳跃是通过下面的代码实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpForce);</span><br></pre></td></tr></table></figure><p>上述代码给刚体施加一个竖直方向的速度 <code>jumpForce</code>，从而使物体进行竖直上抛运动。<br>这样的运动轨迹比较单一，即物体的跳跃高度与给定的初始速度相关，初始速度越大跳的越高，玩家无法自由的控制跳跃高度，因此手感不好。</p><p><img src="https://pic.imgdb.cn/item/6120cdd64907e2d39cc0fc84.gif" alt="竖直上抛跳跃"></p><h2 id="优化跳跃手感"><a href="#优化跳跃手感" class="headerlink" title="优化跳跃手感"></a>优化跳跃手感</h2><p>要让玩家自由控制跳跃高度，可以根据玩家按键的时间来控制。例如玩家按住跳跃键，那么角色可以跳到最大高度；如果玩家只是轻轻点一下跳跃键，那么角色也只是进行一下小跳，角色能跳多高取决于玩家按下跳跃键的“力度”，让玩家产生一种错觉就是越用力按下跳跃键角色就能跳得越高。</p><p>为了方便看到跳跃效果，我把跳跃的初始速度增加了。<br>在进行了一番优化之后，可以看到角色每次跳跃的高度已经不再是固定的了：</p><p><img src="https://pic.imgdb.cn/item/6120cbef4907e2d39cbca3f5.gif" alt="长按跳得高，点按挑的低"></p><p>那么这个是如何实现的呢？</p><h2 id="跳跃辅助脚本"><a href="#跳跃辅助脚本" class="headerlink" title="跳跃辅助脚本"></a>跳跃辅助脚本</h2><p>不需要改动原来的操作逻辑，只需要新建一个脚本，取名为 <code>BestJumping</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BetterJumping : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    public float fallMultiplier &#x3D; 2.5f;</span><br><span class="line">    public float lowJumpMultiplier &#x3D; 2f;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (rb.velocity.y &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (fallMultiplier - 1) * Time.deltaTime;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (rb.velocity.y &gt; 0 &amp;&amp; !Input.GetButton(&quot;Jump&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (lowJumpMultiplier - 1) * Time.deltaTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个脚本挂在游戏场景的角色对象上就 OK 了，然后进入游戏测试即可看到效果。<br>只需要修改 <code>fallMultiplier</code> 和 <code>lowJumpMultiplier</code> 的值来控制长按和点按的跳跃高度。</p><p><code>BestJumping</code> 是一个老外分享的：<a href="https://github.com/mixandjam/Celeste-Movement/blob/master/Assets/Scripts/BetterJumping.cs">前往 Github 查看</a><br>B 站有 UP 主搬运了其教程视频：<a href="https://www.bilibili.com/video/BV1zJ411w7TG?from=search&seid=7765245838833455508">Unity 实现2D游戏的爬墙侧跳和空中瞬移效果</a></p><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>该脚本包含两个参数：</p><ul><li>fallMultiplier：降落系数</li><li>lowJumpMultiplier：小跳系数</li></ul><p>这两个系数是如何控制大跳和小跳的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void Update()</span><br><span class="line">&#123;</span><br><span class="line">    if (rb.velocity.y &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (fallMultiplier - 1) * Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (rb.velocity.y &gt; 0 &amp;&amp; !Input.GetButton(&quot;Jump&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (lowJumpMultiplier - 1) * Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个系数 <code>fallMultiplier</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (rb.velocity.y &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (fallMultiplier - 1) * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个补正值：<code>Physics2D.gravity.y * (fallMultiplier - 1)</code>，当角色处于下落状态时，unity 预设的重力值就会乘以这个系数，也就是说这个值 越大，角色在下落的时候受到的重力就越大，掉落的速度也就越快。</p><p>这个效果其实是模仿了平台游戏《蔚蓝》里加速下落的效果。<br>参考视频：<a href="https://www.bilibili.com/video/BV1M441197sr?from=search&seid=4834462703206664027">《蔚蓝》的手感为何迷人？Why Does Celeste Feel So Good to Play? | GMTK</a></p><p><img src="https://pic.imgdb.cn/item/6120d5064907e2d39cd06242.gif" alt="蔚蓝的跳跃"></p><p>蔚蓝的跳跃在下落过程中比较急促，<code>fallMultiplier</code> 系数就是用来增加重力的，让角色掉落到地上的时间更短一点。<br>这段代码是用来优化自由落体运动过程中的手感，通过增加重力系数使其下坠更加快速，使角色跳跃的过程看起不那么“飘”。</p><p>如果你想让角色像蒲公英一样飘落可以试着把该值改成负值，比如：-1。</p><p><img src="https://pic.imgdb.cn/item/6120da8c4907e2d39cdab103.gif" alt="蒲公英一样飘落"></p><p>蔚蓝是一个对控制要求很高的游戏，快速的下坠有利于玩家迅速进入下一个操作指令。<br>同理，<code>lowJumpMultiplier</code> 也是用来增加重力系数的，但不同的是它是控制加速上升阶段的重力，该值越大玩家的最小跳跃高度就越低。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">else if (rb.velocity.y &gt; 0 &amp;&amp; !Input.GetButton(&quot;Jump&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity +&#x3D; Vector2.up * Physics2D.gravity.y * (lowJumpMultiplier - 1) * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当玩家第一次按下跳跃键时，如果此时松手离开跳跃键，<br>那么这段代码就开始发挥作用了：<code>Physics2D.gravity.y * (lowJumpMultiplier - 1)</code>。<br>在角色处于跳跃的上升阶段时，如果玩家没有按住跳跃键就增加重力使其快速下降，这就控制跳跃高度的核心逻辑。</p><p><img src="https://pic.imgdb.cn/item/6120dc094907e2d39cdd1678.gif" alt="测试效果"></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】横版平台游戏之残影效果</title>
      <link href="/2021/08/21/unity-tips-002/"/>
      <url>/2021/08/21/unity-tips-002/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小时候玩的《泡泡堂》里面有非常酷炫的“幻影效果”。<br>商城售价￥9.8，最早去网吧 5 毛钱就能玩一个小时，后来涨到一块钱。<br>十块钱意味着可以去网吧玩 10-20 个小时，所以这个幻影当时是狠下心才买的，效果如下：</p><p><img src="https://pic.imgdb.cn/item/611fd1064907e2d39c36b43a.jpg" alt="泡泡堂幻影"></p><p>这个效果十分酷炫，如果能加入到自制的平台跳跃游戏里，就更酷了！</p><h2 id="如何实现幻影效果？"><a href="#如何实现幻影效果？" class="headerlink" title="如何实现幻影效果？"></a>如何实现幻影效果？</h2><p>幻影效果的原理其实很简单，就是在角色当前位置创建一个与角色相同的图像，然后过一段时间让其自动消失。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="预制体"><a href="#预制体" class="headerlink" title="预制体"></a>预制体</h3><p>幻影对象是一个 Prefab（预制体），最开始是一个空的 Sprite 对象，在创建的时候设置它的 Sprite，让它变成跟角色一模一样的图像。<br>直接在游戏场景创建一个 2DSprite 就行了，然后把它拖到 <code>Resources/Prefab</code> 文件夹里备用。</p><p><img src="https://pic.imgdb.cn/item/611fd34c4907e2d39c3dc044.jpg" alt="预制体"></p><h3 id="幻影脚本"><a href="#幻影脚本" class="headerlink" title="幻影脚本"></a>幻影脚本</h3><p>需要给预制体加上脚本用来控制幻影的显示。<br>幻影脚本很简单，暴露一个 <code>Init</code> 方法用来对幻影的参数进行赋值。</p><p>新建 <code>ShadowSprite</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ShadowSprite : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float time &#x3D; 0.5f;</span><br><span class="line"></span><br><span class="line">    private SpriteRenderer spriteRenderer;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer &#x3D; GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Init(Sprite sprite, Vector3 position, Vector3 scale)</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer.sprite &#x3D; sprite;</span><br><span class="line">        transform.position &#x3D; position;</span><br><span class="line">        transform.localScale &#x3D; scale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本写好之后，把它挂在预制体上面。</p><h3 id="生成幻影"><a href="#生成幻影" class="headerlink" title="生成幻影"></a>生成幻影</h3><p>控制角色移动的方法就省略了，只保留生成幻影相关的代码。<br>在 <code>Awake</code> 获得当前角色的 <code>SpriteRenderer</code>，用来获取角色的图像。<br>然后在 <code>Update</code> 方法里生成幻影对象，每一帧都在角色当前位置生成一个与角色相同图像的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private SpriteRenderer spriteRenderer;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer &#x3D; GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 此处省略无关代码</span><br><span class="line">        GameObject obj &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefab&#x2F;ShadowSprite&quot;);</span><br><span class="line">        GameObject shadow &#x3D; Instantiate(obj);</span><br><span class="line">        ShadowSprite shadowSprite &#x3D; shadow.GetComponent&lt;ShadowSprite&gt;();</span><br><span class="line">        shadowSprite.Init(spriteRenderer.sprite, transform.position, transform.localScale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这样就可以生成残影效果了，进入游戏测试：</p><p><img src="https://pic.imgdb.cn/item/611fd4a04907e2d39c40aaf6.gif" alt="残影效果"></p><h2 id="特效优化"><a href="#特效优化" class="headerlink" title="特效优化"></a>特效优化</h2><p>因为透明度与角色的一样，所以幻影的角色很难分清。<br>为了区分幻影，需要调整幻影的透明度，并且可以让它逐渐淡出消失。</p><p>修改幻影脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ShadowSprite : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float fadeSpeed &#x3D; 1f, initAlpha &#x3D; 0.5f;</span><br><span class="line">    private SpriteRenderer spriteRenderer;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer &#x3D; GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">        spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, initAlpha);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Init(Sprite sprite, Vector3 position, Vector3 scale)</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer.sprite &#x3D; sprite;</span><br><span class="line">        transform.position &#x3D; position;</span><br><span class="line">        transform.localScale &#x3D; scale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float alph &#x3D; spriteRenderer.color.a - Time.deltaTime * fadeSpeed;</span><br><span class="line">        spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, alph);</span><br><span class="line"></span><br><span class="line">        if (spriteRenderer.color.a &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后的幻影脚本移除了 <code>time</code> 变量，而是改用 <code>fadeSpeed</code>（淡出速度）来控制幻影消失的时间，这个值越大，幻影淡出的速度越快。然后新增了一个 <code>initAlpha</code> 变量用来控制幻影生成时的初始透明度。</p><p>在 <code>Awake</code> 方法中，赋值初始透明度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, initAlpha);</span><br></pre></td></tr></table></figure><p>这样幻影在生成的时候就是半透明的了。<br><code>FixedUpdate</code> 方法里对幻影的淡出效果进行处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 计算淡出的透明度</span><br><span class="line">    float alph &#x3D; spriteRenderer.color.a - Time.deltaTime * fadeSpeed;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 改变当前的透明度</span><br><span class="line">    spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, alph);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当完全透明的时候销毁对象</span><br><span class="line">    if (spriteRenderer.color.a &lt;&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入游戏测试：</p><p><img src="https://pic.imgdb.cn/item/611fd7584907e2d39c45f99d.gif" alt="淡出效果的幻影"></p><h2 id="原地不生成幻影"><a href="#原地不生成幻影" class="headerlink" title="原地不生成幻影"></a>原地不生成幻影</h2><p>因为是在 <code>Update</code> 方法里不断生成残影对象，当角色站着不动的时候也会源源不断的产生残影，这样看起来就很奇怪。</p><p><img src="https://pic.imgdb.cn/item/611fdb2a4907e2d39c4d0db7.gif" alt="站着不动也会产生幻影"></p><p>我们希望只在移动的时候产生幻影，只需要改变角色的控制器方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 此处省略无关代码</span><br><span class="line"></span><br><span class="line">    if ((inGround &amp;&amp; rb.velocity.x !&#x3D; 0) || (!inGround &amp;&amp; jumping))</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject obj &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefab&#x2F;ShadowSprite&quot;);</span><br><span class="line">        GameObject shadow &#x3D; Instantiate(obj);</span><br><span class="line">        ShadowSprite shadowSprite &#x3D; shadow.GetComponent&lt;ShadowSprite&gt;();</span><br><span class="line">        shadowSprite.Init(spriteRenderer.sprite, transform.position, transform.localScale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当角色站在地板并且水平方向的速度不为 0，即站在地板上走动的时候，可以产生幻影；<br>当角色不在地板并且处于跳跃状态时，可以产生幻影。</p><p><img src="https://pic.imgdb.cn/item/611fdc724907e2d39c4f6bef.gif" alt="原地不生成幻影"></p><h2 id="幻影的数量"><a href="#幻影的数量" class="headerlink" title="幻影的数量"></a>幻影的数量</h2><p>幻影的数量不宜太多，否则观感也不好。<br>我们可以设定一个值用来控制幻影生成的频率。</p><p>修改角色控制脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 控制生成幻影的频率</span><br><span class="line">    public float shadowCoolTime &#x3D; 0.1f;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 计算下一次生成幻影的时间</span><br><span class="line">    private float shadowTime;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 省略无关代码</span><br><span class="line"></span><br><span class="line">        if(Time.time &gt;&#x3D; shadowTime)</span><br><span class="line">        &#123;</span><br><span class="line">            if ((inGround &amp;&amp; rb.velocity.x !&#x3D; 0) || (!inGround &amp;&amp; jumping))</span><br><span class="line">            &#123;</span><br><span class="line">                shadowTime &#x3D; Time.time + shadowCoolTime;</span><br><span class="line">                GameObject obj &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefab&#x2F;ShadowSprite&quot;);</span><br><span class="line">                GameObject shadow &#x3D; Instantiate(obj);</span><br><span class="line">                ShadowSprite shadowSprite &#x3D; shadow.GetComponent&lt;ShadowSprite&gt;();</span><br><span class="line">                shadowSprite.Init(spriteRenderer.sprite, transform.position, transform.localScale);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入游戏测试，看起来好多了：</p><p><img src="https://pic.imgdb.cn/item/611fde254907e2d39c52b648.gif" alt="幻影的数量"></p><h2 id="性能的问题"><a href="#性能的问题" class="headerlink" title="性能的问题"></a>性能的问题</h2><p>幻影对象需要频繁的创建/销毁，但其实幻影对象都一模一样，频繁创建和销毁它们相当于做了许多“无用功”，创建好的幻影对象能不能不销毁，而是拿来复用呢？比如当幻影消失的时候，不使用 <code>Destroy</code> 脚本将它销毁，而是把它的 <code>Active</code> 设置为 <code>false</code>，在下次生成幻影对象的时候，直接将它激活就可以。</p><p>答案是可以，而且实现起来并不难。思路是创建一个用来保存所有 <code>ShadowSprite</code> 对象的变量，最开始的时候先生成 N 个幻影对象，并且将其全部藏起来，等到实际要用的时候再逐个拿出来。</p><blockquote><p>List、数组、链表、队列其实都可以实现。</p></blockquote><p>比较推荐的变量类型是：List、队列、链表。<br>因为这些数据类型是 <code>c#</code> 的基本类型，提供了方便的获取和删除方法，而如果要用数组实现的话，就要自己写方法了。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>用一个链表结构保存幻影对象。</p><ul><li>初始化创建 N 个对象，将其 <code>Active</code> 设置为 <code>false</code>，保存在链表中</li><li>生成幻影时，从链表取出一个，并对其进行初始化</li><li>幻影消失时，将其重新放回链表，并且 <code>Active</code> 设置为 <code>false</code></li></ul><h3 id="ShadowComponent"><a href="#ShadowComponent" class="headerlink" title="ShadowComponent"></a>ShadowComponent</h3><p>为了保持代码的简洁，将原来写在角色控制器的幻影相关代码抽取出来，新建一个 <code>ShadowComponent</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ShadowComponent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 用于存储幻影对象的链表</span><br><span class="line">    private LinkedList&lt;ShadowSprite&gt; shadowSprites;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        InitShadowSprites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化生成最初的幻影对象</span><br><span class="line">    private void InitShadowSprites()</span><br><span class="line">    &#123;</span><br><span class="line">        shadowSprites &#x3D; new LinkedList&lt;ShadowSprite&gt;();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 因为生成幻影的频率不高，所以设置5个就够了，多了也会浪费内存</span><br><span class="line">        int count &#x3D; 5;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var shadow &#x3D; CreateShadowSprite();</span><br><span class="line">            shadowSprites.AddFirst(shadow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成单个幻影对象的方法</span><br><span class="line">    private ShadowSprite CreateShadowSprite()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject prefab &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefab&#x2F;ShadowSprite&quot;);</span><br><span class="line">        GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line">        ShadowSprite shadow &#x3D; obj.GetComponent&lt;ShadowSprite&gt;();</span><br><span class="line">        shadow.SetShadowComponent(this);</span><br><span class="line"></span><br><span class="line">        return shadow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 从链表取出幻影对象，如果链表没有可取的对象就创建一个新的对象</span><br><span class="line">    public ShadowSprite GetShadow()</span><br><span class="line">    &#123;</span><br><span class="line">        ShadowSprite shadow;</span><br><span class="line"></span><br><span class="line">        if (shadowSprites.First !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            shadow &#x3D; shadowSprites.First.Value;</span><br><span class="line">            shadowSprites.RemoveFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            shadow &#x3D; CreateShadowSprite();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return shadow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 回收幻影对象，并且将其设置为隐藏状态</span><br><span class="line">    public void PutShadow(ShadowSprite shadow)</span><br><span class="line">    &#123;</span><br><span class="line">        shadow.gameObject.SetActive(false);</span><br><span class="line">        shadowSprites.AddFirst(shadow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个脚本挂在角色对象上。</p><h3 id="幻影脚本-1"><a href="#幻影脚本-1" class="headerlink" title="幻影脚本"></a>幻影脚本</h3><p>然后再修改幻影脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ShadowSprite : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float fadeSpeed &#x3D; 1f, initAlpha &#x3D; 0.5f;</span><br><span class="line">    private Player player;</span><br><span class="line">    private SpriteRenderer spriteRenderer;</span><br><span class="line">    private ShadowComponent shadowComponent;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer &#x3D; GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, initAlpha);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetShadowComponent(ShadowComponent shadowComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        this.shadowComponent &#x3D; shadowComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Init(Sprite sprite, Vector3 position, Vector3 scale)</span><br><span class="line">    &#123;</span><br><span class="line">        spriteRenderer.sprite &#x3D; sprite;</span><br><span class="line">        transform.position &#x3D; position;</span><br><span class="line">        transform.localScale &#x3D; scale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float alph &#x3D; spriteRenderer.color.a - Time.deltaTime * fadeSpeed;</span><br><span class="line">        spriteRenderer.color &#x3D; new Color(1f, 1f, 1f, alph);</span><br><span class="line"></span><br><span class="line">        if (spriteRenderer.color.a &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            shadowComponent.PutShadow(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OnEnable</code> 是当对象从 <code>Active</code> 从 <code>false</code> 变为 <code>true</code>，或者对象第一次创建的时候就会自动调用的 untiy 内置的生命周期函数。当幻影对象被重新激活时，需要将透明度重新调整为初始值，因为幻影对象在消失的时候透明度被设置为 0，即使重新激活，透明度也不会自动初始化，需要手动修改才行。</p><h3 id="获取幻影对象"><a href="#获取幻影对象" class="headerlink" title="获取幻影对象"></a>获取幻影对象</h3><p>最后在角色控制器类上面添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private ShadowComponent shadowComponent;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        shadowComponent &#x3D; GetComponent&lt;ShadowComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 此处省略无关代码</span><br><span class="line"></span><br><span class="line">        Shadow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Shadow()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Time.time &gt;&#x3D; shadowTime)</span><br><span class="line">        &#123;</span><br><span class="line">            if ((inGround &amp;&amp; rb.velocity.x !&#x3D; 0) || (!inGround &amp;&amp; jumping))</span><br><span class="line">            &#123;</span><br><span class="line">                shadowTime &#x3D; Time.time + shadowCoolTime;</span><br><span class="line">                var shadow &#x3D; shadowComponent.GetShadow();</span><br><span class="line">                shadow.Init(spriteRenderer.sprite, transform.position, transform.localScale);</span><br><span class="line"></span><br><span class="line">                shadow.gameObject.SetActive(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成幻影对象的时候，从 <code>shadowComponent</code> 组件获取，然后调用幻影脚本的 <code>Init</code> 方法设置图像和位置、缩放。</p><p>最后的演示效果：</p><p><img src="https://pic.imgdb.cn/item/611fefd24907e2d39c6dba21.gif" alt="幻影对象不断被回收利用"></p><p>可以发现，最开始生成了 5 个对象，然后不断的激活/失活（即被循环利用了）。</p><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p>上述方法实现「循环利用」相同的对象，这种模式叫做：对象池模式。<br>对象池模式的特点就是预先创建好需要用到的资源，然后放进“池子”里备用，在需要用到的时候就可以直接从“池子”直接取出来，用完了再放回去，从而大幅减少创建资源需要的开销。</p><p>这种模式在很多框架里都有相关的实现，比如 MySQL、Redis 连接池，以及 PHP-FPM 等等。<br>但是这些对象池比较复杂，因为 MySQL 和 Redis 连接可能会超时断开，因此需要另一种叫做「心跳检测」的机制定期检查连接是否被断开，这里就不再扩展了。</p><h2 id="对象池的应用场景"><a href="#对象池的应用场景" class="headerlink" title="对象池的应用场景"></a>对象池的应用场景</h2><p>对象池在游戏中主要用在需要频繁创建物体，并且对性能的开销很大的地方，例如：弹幕游戏中满屏幕的子弹，魔兽 War3 中不断刷新怪物的“经验房间”、“金币房间”等等。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>对象池在获取对象的时候一定要注意重置对象的初始属性。<br>尤其是如果对象包含动画组件或者产生了变形，一定要在激活时对其初始化。<br>比如上面的幻影对象，幻影在消失的时候，透明度变成了 0，而将其放回池子的时候，透明度依然是 0，如果直接拿出来用，因为是完全透明的会导致看不见，导致产生了“莫名其妙的 BUG”，而且这种 BUG 很容易被遗忘，以为放进池子里再拿出来就会默认变为初始状态，实际上并不会。</p><blockquote><p>特别特别要注意「动画效果」的初始化！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】横版平台游戏之单点判定法接触地板检测</title>
      <link href="/2021/08/20/unity-tips-001/"/>
      <url>/2021/08/20/unity-tips-001/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>地板接触检测实际上是一个比较复杂的事情。<br>因为角色可能会在地板上方，也可能在左侧或者右侧，甚至是在地板的下方（即头撞到平台上）。</p><p><img src="https://pic.imgdb.cn/item/611f66c14907e2d39c6c631f.jpg" alt="地板的碰撞检测"></p><p>因此碰撞检测不能简单地使用 <code>OnCollisionEnter2D</code>，<code>OnCollisionEnter2D</code> 只能简单的判定两个物体发生了碰撞，但是不能判定具体是碰到左边还是碰到右边或者是上面还是下面。</p><h2 id="单点判定法"><a href="#单点判定法" class="headerlink" title="单点判定法"></a>单点判定法</h2><p>所谓的单点判定法就是在角色脚底新建一个「判定点」。<br>由于判定点是一个极小的点，因此当这个点接触到地板时，就可以认为角色是站在地板上的。<br>同理，如果你想判断角色左侧碰到了墙壁，可以在角色身体左侧加一个判定点。</p><p>我们只要检测这个点与平台发生了碰撞即可。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在角色的脚底创建一个空白的 <code>GameObject</code>（空对象）：</p><p><img src="https://pic.imgdb.cn/item/611f68b44907e2d39c70c58a.jpg" alt="创建一个空对象"></p><p>这个空对象不需要添加碰撞体或者刚体组件，把它挂在角色节点里面就可以了。<br>然后调整位置，将这个空对象拖到角色脚底，这个空对象（可以视为一个点）就是脚部的判定点。<br>接着在你的角色控制器脚本中，添加一个 <code>Transform</code> 类型的公开变量用来接收刚才创建的空对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    public Transform groundCheck;</span><br><span class="line">    public LayerMask layerMask;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 省略其他代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把刚才新建的空对象拖进脚本的变量里：</p><p><img src="https://pic.imgdb.cn/item/611f69734907e2d39c727548.jpg" alt="拖进变量"></p><p>上面的脚本还有一个 <code>LayerMask</code> 类型的变量，这个变量保存的是 <code>Layer</code>（图层）。</p><p><img src="https://pic.imgdb.cn/item/611f6b554907e2d39c76aa94.jpg" alt="图层"></p><p>Unity 中任何对象都属于某个图层，这个类型的变量就是用来获取某个图层的。<br>我们要让脚部的判定点与地板图层的对象进行碰撞检测，因此需要创建一个新的图层。<br>点击上图中的 <code>Layers</code>，在下拉菜单中点击 <code>Edit Layers</code> 添加新的图层，取名为 <code>Ground</code>：</p><p><img src="https://pic.imgdb.cn/item/611f6ba74907e2d39c775cf7.jpg" alt="添加图层"></p><p>接着返回角色节点，修改 <code>layerMask</code> 变量的值，选择刚才创建的 <code>Ground</code> 图层：</p><p><img src="https://pic.imgdb.cn/item/611f6bed4907e2d39c77f33e.jpg" alt="选择图层"></p><p>最后回到游戏场景，选择地板，把地板的 <code>Layer</code> 改成 <code>Ground</code>：</p><p><img src="https://pic.imgdb.cn/item/611f6c4e4907e2d39c78b9cc.jpg" alt="修改地板图层"></p><p>接下来只要检测角色脚部的点与这个 <code>Ground</code> 图层的物体发生碰撞即可。<br>具体的检测方法是利用 Unity 的物理函数 <code>Physics2D</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    public Transform firePoint;</span><br><span class="line">    public Transform groundCheck;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否站在地板</span><br><span class="line">    private bool isGround;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br><span class="line"></span><br><span class="line">        if(isGround) &#123;</span><br><span class="line">            &#x2F;&#x2F; ……站在地板的处理，例如更高角色的跳跃状态</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Physics2D.OverlapCircle</code> 会在一个目标点进行画圆，相应的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Physics2D.OverlapCircle(目标点位置, 圆的半径, 检测图层);</span><br></pre></td></tr></table></figure><p>圆的半径越大，检测的范围就越大，可以根据实际情况修改这个值。<br>物理函数画出的圆与 <code>Ground</code> 图层发生接触的时候，就会返回一个 <code>true</code>（布尔值）。</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》框架开发篇（优雅的实现菜单系统）</title>
      <link href="/2021/08/17/monster-game-14/"/>
      <url>/2021/08/17/monster-game-14/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新素材制作期间，我打算利用这段空闲的时间重构之前写的一些不好的地方。</p><p>游戏开发中 UI 的处理是比较复杂的部分。UI 包括窗口、状态栏等等，其中大部分都是展示作用，没有需要控制的地方。本篇文章介绍了一种通过生命周期来实现需要控制的 UI，如菜单系统，优雅的实现方法。</p><h2 id="菜单示例"><a href="#菜单示例" class="headerlink" title="菜单示例"></a>菜单示例</h2><p>之前实现的主菜单/存档界面。</p><p><img src="https://pic.imgdb.cn/item/60e7f75e5132923bf8060305.gif" alt="主菜单/存档界面"></p><p>具体的实现可以前往之前的日志：<a href="https://huotuyouxi.com/2021/07/01/monster-game-version-100-1/#7%E6%9C%889%E6%97%A5">菜单的控制权问题</a></p><p>菜单系统的难点在于操作控制权的变换。<br>比如先打开主菜单，然后选择存档，此时主菜单应该被“暂停”不能操控。<br>而关闭存档时，操作权才会返回主菜单。</p><p>这个原理是通过栈实现的，不再赘述。</p><p>原来的系统虽然已经没问题了，但是代码写的有点散乱。<br>在经过了一番学习之后，有了更加系统化的思路，所以我决定来优化一下菜单系统。</p><h2 id="UI-模型基本思路"><a href="#UI-模型基本思路" class="headerlink" title="UI 模型基本思路"></a>UI 模型基本思路</h2><p>菜单系统的权限控制非常繁琐，如果是面向过程的开发，简直要崩溃……<br>现在要做的事就是开发一个 UI 框架来自动处理这些麻烦的事情，解放自己的双手。</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>UI 框架一共包括两个类：</p><ul><li>UIModel</li><li>UIStack</li></ul><p><code>UIModel</code> 是菜单系统的父类，该类包含了 UI 从创建到销毁的处理。<br><code>UIStack</code> 是菜单的管理类，用来控制菜单的权限自动化处理。</p><p>为了统一规范，所有的 UI 都应当用 <code>Image</code> 来实现，而不是 <code>SpriteRender</code>。<br>在 Unity 中，UI 类型的组件必须挂在 <code>Canvas</code>（画板）底下。<br>因此，在场景中创建一个画板，然后把 <code>UIStack</code> 脚本挂在画板里，实现 UI 的全局管理。</p><p><img src="https://pic.imgdb.cn/item/611b8c174907e2d39c14539f.jpg" alt="UICanvas"></p><p>主场景中的结构如上图所示。<br>接着在主场景的脚本中添加一个获取 <code>UIStack</code> 的变量，并且将 <code>UICanvas</code> 拖进去：</p><p><img src="https://pic.imgdb.cn/item/611b8c5c4907e2d39c1501b3.jpg" alt="UIStack"></p><p>这样主场景就可以对 UI 进行管理了。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>不管是什么框架都有着『生命周期』的概念。<br>即创建时、创建后、销毁时……诸如此类。</p><p>生命周期指的是一个系统从创建开始，直到运行结束销毁回收的过程。<br>为了让代码的条理更加清晰，新的系统也引入生命周期的概念。</p><blockquote><p>Unity 中的 Awake、Start、OnDestroy 就是生命周期函数</p></blockquote><p>通过生命周期来管理一个菜单 <code>UIModel</code> 的创建以及销毁的过程。</p><h3 id="控制权"><a href="#控制权" class="headerlink" title="控制权"></a>控制权</h3><p>菜单的基本实现就是利用了栈的特性，在入栈时将上级菜单暂停，在出栈时才解除暂停状态。<br>栈的结构可以用链表来轻松实现，<code>C#</code> 中就有链表类型 <code>LinkedList</code>。</p><blockquote><p>这个类型也是我刚刚发现的……</p></blockquote><p>链表主要提供两个方法：<code>Pop</code> 和 <code>Push</code>。</p><p><code>Pop</code> 方法从尾部取一个元素，并将其从链表中删除。<br><code>Push</code> 方法将一个元素添加到链表的尾部。</p><p>在这两个操作的过程中即可对菜单的权限进行处理。<br>在新菜单入栈时，将上级菜单暂停；当菜单关闭时，将上级菜单解除暂停。</p><h2 id="UIModel"><a href="#UIModel" class="headerlink" title="UIModel"></a>UIModel</h2><p><code>UIModel</code> 是菜单系统的父类，包含了对生命周期的处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class UIModel : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        protected UIStack stack;</span><br><span class="line"></span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            OnCreate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Start()</span><br><span class="line">        &#123;</span><br><span class="line">            OnLoad();</span><br><span class="line">            OnLoadAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void OnDestroy()</span><br><span class="line">        &#123;</span><br><span class="line">            OnRelease();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            OnUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void FixedUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            OnFixedUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void BindStack(UIStack stack)</span><br><span class="line">        &#123;</span><br><span class="line">            this.stack &#x3D; stack;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void OnLoadAction();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 让UI处于暂停状态，不可进行操作</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract void Pause();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 从暂停状态恢复</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract void Resume();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 关闭UI是一件复杂的行为</span><br><span class="line">         * 此处暴露一个简单的方法以便外部直接调用</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public void Close()</span><br><span class="line">        &#123;</span><br><span class="line">            if (stack &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">            stack.Pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 仅提供给UIStack调用</span><br><span class="line">         * 执行关闭动画，返回动画的时间</span><br><span class="line">         * 当动画播放结束后，会被stack回收</span><br><span class="line">         * 这里只需要执行关闭窗口的效果，而不需要执行Destroy，销毁由stack执行</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract float OnCloseAction();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 生命周期</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected virtual void OnCreate() &#123; &#125;</span><br><span class="line">        protected virtual void OnLoad() &#123; &#125;</span><br><span class="line">        protected virtual void OnUpdate() &#123; &#125;</span><br><span class="line">        protected virtual void OnFixedUpdate() &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 在被Destroy之前再调用一次OnCloseBefore</span><br><span class="line">         * 然后就会被Destroy销毁</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public virtual void OnCloseBefore() &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 执行了Destroy之后最后调用一次OnRelease</span><br><span class="line">         * 整个生命周期就结束了</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected virtual void OnRelease() &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的说明见注释部分。</p><h2 id="UIStack"><a href="#UIStack" class="headerlink" title="UIStack"></a>UIStack</h2><p><code>UIStack</code> 以栈结构保存所有的菜单，并且在出入栈时对权限进行管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR</span><br><span class="line">&#123;</span><br><span class="line">    [RequireComponent(typeof(Canvas))]</span><br><span class="line">    public class UIStack : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private RectTransform rectTransform;</span><br><span class="line">        private LinkedList&lt;UIModel&gt; uiModels &#x3D; new LinkedList&lt;UIModel&gt;();</span><br><span class="line"></span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            rectTransform &#x3D; GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public UIModel Push(GameObject prefab)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!prefab)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(&quot;prefab为空&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var component &#x3D; prefab.GetComponent&lt;UIModel&gt;();</span><br><span class="line"></span><br><span class="line">            if (!component)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(&quot;没有UIModel组件&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 如果在链表中存在其他的UI，则把最后的一个UI设置为暂停状态</span><br><span class="line">            var last &#x3D; (uiModels.Last !&#x3D; null) ? uiModels.Last.Value : null;</span><br><span class="line">            if (last)</span><br><span class="line">            &#123;</span><br><span class="line">                last.Pause();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 调用Unity的Instantiate方法实例化UI对象</span><br><span class="line">            var obj &#x3D; ObjectBuilder.Generate(prefab, rectTransform);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将当前类绑定到UI类中，以便其内部调用</span><br><span class="line">            var model &#x3D; obj.GetComponent&lt;UIModel&gt;();</span><br><span class="line">            model.BindStack(this);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将新加入的UI类添加到链表的尾部</span><br><span class="line">            uiModels.AddLast(model);</span><br><span class="line"></span><br><span class="line">            return model;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Pop()</span><br><span class="line">        &#123;</span><br><span class="line">            if (uiModels.Last &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 取出最后一个UI类并将其移出链表</span><br><span class="line">            var model &#x3D; uiModels.Last.Value;</span><br><span class="line">            uiModels.RemoveLast();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 移除绑定</span><br><span class="line">            model.BindStack(null);</span><br><span class="line"></span><br><span class="line">            &#x2F;**</span><br><span class="line">             * 执行窗口的关闭动画，并且获得动画关闭的等待时间</span><br><span class="line">             * 其实这一步是并行执行的，动画仍在播放，但是先返回一个等待时间给UIStack调用</span><br><span class="line">             * 直接返回动画的时间目的在于解耦</span><br><span class="line">             * 并行处理的好处是降低代码的耦合，但坏处是关闭动画的时间太长时会明显感觉不协调</span><br><span class="line">             * 即在关闭当前UI后，此时UI仍在播放关闭动画，可是上级UI却可以在播放动画期间进行操作</span><br><span class="line">             * 因此在获得动画播放时间的时，进入协程等待状态（与动画播放时间相同）</span><br><span class="line">             * 以此保证关闭动画结束时正好解除上级UI的暂停状态</span><br><span class="line">             *&#x2F;</span><br><span class="line">            float time &#x3D; model.OnCloseAction();</span><br><span class="line"></span><br><span class="line">            StartCoroutine(WaitCloseActionCompleted(model, time));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private IEnumerator WaitCloseActionCompleted(UIModel model, float time)</span><br><span class="line">        &#123;</span><br><span class="line">            yield return new WaitForSeconds(time);</span><br><span class="line"></span><br><span class="line">            var last &#x3D; (uiModels.Last !&#x3D; null) ? uiModels.Last.Value : null;</span><br><span class="line">            if (last)</span><br><span class="line">            &#123;</span><br><span class="line">                last.Resume();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            model.OnCloseBefore();</span><br><span class="line"></span><br><span class="line">            Destroy(model.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类需要挂在场景的 <code>Canvas</code> 节点里。<br><code>Push</code> 方法通过传入 <code>Prefab</code>（预制体）参数来实例化菜单节点。<br>同时将新增的菜单的脚本加入到栈里面，并且对上级菜单进行了暂停操作。</p><p><code>Pop</code> 方法是将最后一个打开的菜单进行销毁，同时解除上级菜单的暂停状态。<br>此处添加一个协程用来处理关闭动画，也可以不加这个方法而是直接销毁菜单。</p><h2 id="游戏中使用"><a href="#游戏中使用" class="headerlink" title="游戏中使用"></a>游戏中使用</h2><p>这两个类属于框架类，不包含任何游戏相关的逻辑，比如菜单的按键控制等。<br>因此需要在游戏项目中，通过继承 <code>UIModel</code> 的方法来创建一个菜单。</p><h3 id="菜单-UI"><a href="#菜单-UI" class="headerlink" title="菜单 UI"></a>菜单 UI</h3><p>在场景中创建一个简单的白底菜单，包括几个选项。</p><p><img src="https://pic.imgdb.cn/item/611b96174907e2d39c2bc70e.jpg" alt="菜单UI"></p><p>目前这个菜单只是一张静态的图，没有控制功能。</p><h3 id="菜单逻辑"><a href="#菜单逻辑" class="headerlink" title="菜单逻辑"></a>菜单逻辑</h3><p>菜单有水平选项的，也有竖直方向的，还有格子排列的。<br>每一种菜单的控制操作都不同，但是其他的地方却基本相同，因此可以封装一个所有类型菜单的基类。<br>然后不同的菜单只要继承这个类，再去实现对应的控制方法即可。</p><h4 id="水平菜单"><a href="#水平菜单" class="headerlink" title="水平菜单"></a>水平菜单</h4><p>水平方向的菜单只能左右移动选项，选项只有一个横排。</p><p><img src="https://pic.imgdb.cn/item/611b97624907e2d39c2eaef0.jpg" alt="水平菜单"></p><h4 id="格子菜单"><a href="#格子菜单" class="headerlink" title="格子菜单"></a>格子菜单</h4><p>格子菜单可以上下左右按键控制，选项至少有两排。</p><p><img src="https://pic.imgdb.cn/item/611b96934907e2d39c2ce048.jpg" alt="格子菜单，选项可以上下左右操作"></p><h4 id="竖直菜单"><a href="#竖直菜单" class="headerlink" title="竖直菜单"></a>竖直菜单</h4><p>竖直方向的菜单只能通过上下键移动选项，选项只有一个竖列。</p><p><img src="https://pic.imgdb.cn/item/611b96e04907e2d39c2d8bdb.jpg" alt="竖直菜单"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>接下来演示如何实现一个竖直方向的菜单系统，其他类型的菜单原理大同小异。</p><h3 id="菜单基类"><a href="#菜单基类" class="headerlink" title="菜单基类"></a>菜单基类</h3><p>首选创建所有菜单的基类 <code>MenuBase</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using FR;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class MenuBase : UIModel</span><br><span class="line">    &#123;</span><br><span class="line">        public Transform itemLayout;</span><br><span class="line">        public List&lt;MenuItemBase&gt; menuItems;</span><br><span class="line">        protected int currentIndex;</span><br><span class="line"></span><br><span class="line">        protected bool isPause, disableCancle, isDestorySelf, isDestoryParent;</span><br><span class="line"></span><br><span class="line">        protected override void OnCreate()</span><br><span class="line">        &#123;</span><br><span class="line">            InitStatusAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnLoadAction()</span><br><span class="line">        &#123;</span><br><span class="line">            SetDefaultStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SetDefaultStatus()</span><br><span class="line">        &#123;</span><br><span class="line">            menuItems[0].SetActiveStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 设置为禁止取消【X键】关闭菜单</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected void SetDisabledCancle()</span><br><span class="line">        &#123;</span><br><span class="line">            disableCancle &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 将菜单设置为自销毁类型</span><br><span class="line">         * 即在确定的时候会调用关闭事件</span><br><span class="line">         * 设置为false表示这是个上级菜单，在打开子菜单的时候保留窗口</span><br><span class="line">         * 设置为true时，菜单在完成事件后会执行销毁操作（只是销毁自身不包括上级菜单）</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected void SetDestroySelfOnCompleted()</span><br><span class="line">        &#123;</span><br><span class="line">            isDestorySelf &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 菜单完成操作时，是否销毁自身及所有上级菜单</span><br><span class="line">         * 即在确定的时候会调用关闭事件</span><br><span class="line">         * 设置为false表示该菜单只关闭自身，上级菜单不受影响</span><br><span class="line">         * 设置为true时，该菜单在完成操作后会连上级菜单也一并销毁</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected void SetDestroyParentOnCompleted()</span><br><span class="line">        &#123;</span><br><span class="line">            SetDestroySelfOnCompleted();</span><br><span class="line">            isDestoryParent &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void Pause()</span><br><span class="line">        &#123;</span><br><span class="line">            isPause &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void Resume()</span><br><span class="line">        &#123;</span><br><span class="line">            isPause &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 菜单的初始化操作</span><br><span class="line">         * 需要设置是否销毁自身或者关闭时是否销毁上级菜单等</span><br><span class="line">         *&#x2F;</span><br><span class="line">        protected abstract void InitStatusAction();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">        * 监听竖直和水平方向按键</span><br><span class="line">        *&#x2F;</span><br><span class="line">        protected virtual void VeticalPrev() &#123; &#125;</span><br><span class="line">        protected virtual void VeticalNext() &#123; &#125;</span><br><span class="line">        protected virtual void HorizontalPrev() &#123; &#125;</span><br><span class="line">        protected virtual void HorizontalNext() &#123; &#125;</span><br><span class="line"></span><br><span class="line">        protected void Handle()</span><br><span class="line">        &#123;</span><br><span class="line">            menuItems[currentIndex].Handle();</span><br><span class="line"></span><br><span class="line">            if (isDestorySelf)</span><br><span class="line">            &#123;</span><br><span class="line">                Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnRelease()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isDestoryParent)</span><br><span class="line">            &#123;</span><br><span class="line">                stack.Pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isPause) return;</span><br><span class="line"></span><br><span class="line">            if (KeyManager.GetConfirmKeyDown())</span><br><span class="line">            &#123;</span><br><span class="line">                Handle();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Input.GetKeyDown(KeyCode.X) &amp;&amp; disableCancle &#x3D;&#x3D; false)</span><br><span class="line">            &#123;</span><br><span class="line">                Close();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Input.GetKeyDown(KeyCode.UpArrow))</span><br><span class="line">            &#123;</span><br><span class="line">                VeticalPrev();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Input.GetKeyDown(KeyCode.DownArrow))</span><br><span class="line">            &#123;</span><br><span class="line">                VeticalNext();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Input.GetKeyDown(KeyCode.LeftArrow))</span><br><span class="line">            &#123;</span><br><span class="line">                HorizontalPrev();</span><br><span class="line">            &#125;</span><br><span class="line">            else if (Input.GetKeyDown(KeyCode.RightArrow))</span><br><span class="line">            &#123;</span><br><span class="line">                HorizontalNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单基类定义了一个菜单具有的基本功能，其中要注意的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public override void Pause()</span><br><span class="line">&#123;</span><br><span class="line">    isPause &#x3D; true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override void Resume()</span><br><span class="line">&#123;</span><br><span class="line">    isPause &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Pause</code> 用来实现暂停菜单操作的功能；<br><code>Resume</code> 用来解除菜单的暂停状态。<br>这里使用一个布尔型的变量 <code>isPause</code> 来控制即可。</p><p>一些菜单不希望可以按 <code>X</code> 键取消，比如战斗中的操作选项；<br>一些菜单在按下确定后，只希望关闭当前窗口，而不是连上级菜单也一起关闭；<br>一些菜单在按下确定键后，希望可以关闭所有打开的窗口。<br>这些都需要一个布尔型的变量来控制，菜单的基本配置在 <code>InitStatusAction</code> 进行设置。</p><p>除此之外，所有的菜单都有「选项」以及初始化选项的方法，具体的初始化行为在子类的 <code>OnLoadAction</code> 进行实现。</p><h3 id="不同菜单"><a href="#不同菜单" class="headerlink" title="不同菜单"></a>不同菜单</h3><p>接着创建三个基本类型的菜单类：</p><p><img src="https://pic.imgdb.cn/item/611b99024907e2d39c32926b.jpg" alt="基本类型的菜单类"></p><p><code>HorizontalMenu</code> 是水平类型的菜单；<br><code>VerticalMenu</code> 是竖直类型的菜单；<br><code>GridMenu</code> 是格子类型的菜单。</p><p>这些基本大同小异，区别在于控制按键的方法，这边只演示竖直类型的菜单类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class VeritalMenu : MenuBase</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void VeticalNext()</span><br><span class="line">        &#123;</span><br><span class="line">            menuItems[currentIndex].SetUnActiveStatus();</span><br><span class="line">            currentIndex++;</span><br><span class="line"></span><br><span class="line">            if (currentIndex &gt;&#x3D; menuItems.Count)</span><br><span class="line">            &#123;</span><br><span class="line">                currentIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            menuItems[currentIndex].SetActiveStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void VeticalPrev()</span><br><span class="line">        &#123;</span><br><span class="line">            menuItems[currentIndex].SetUnActiveStatus();</span><br><span class="line">            currentIndex--;</span><br><span class="line"></span><br><span class="line">            if (currentIndex &lt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                currentIndex &#x3D; menuItems.Count - 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            menuItems[currentIndex].SetActiveStatus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本方法都在 <code>MenuBase</code> 写好了，所以子类只需要实现控制按键的部分即可。</p><h3 id="测试菜单"><a href="#测试菜单" class="headerlink" title="测试菜单"></a>测试菜单</h3><p>接下来创建一个用于测试的菜单 <code>TestMenu</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using FR;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public class TestMenu : VeritalMenu</span><br><span class="line">    &#123;</span><br><span class="line">        public override float OnCloseAction()</span><br><span class="line">        &#123;</span><br><span class="line">            return 0f;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void InitStatusAction()</span><br><span class="line">        &#123;</span><br><span class="line">            SetDestroySelfOnCompleted();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnLoadAction()</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject obj &#x3D; ObjectBuilder.Generate(&quot;Prefabs&#x2F;Test&#x2F;Refactor&#x2F;TestMenuItem&quot;, itemLayout);</span><br><span class="line">                obj.transform.localScale &#x3D; Vector3.one;</span><br><span class="line"></span><br><span class="line">                var item &#x3D; obj.GetComponent&lt;MenuItemBase&gt;();</span><br><span class="line"></span><br><span class="line">                item.BindParent(this);</span><br><span class="line">                menuItems.Add(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SetDefaultStatus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没有添加关闭菜单的动画效果，所以 <code>OnCloseAction</code> 直接返回一个零即可。<br><code>InitStatusAction</code> 方法配置菜单的基本参数，将其设置为自销毁类型，即在确定后就关闭。<br><code>OnLoadAction</code> 方法生成菜单的选项，这里直接用了框架里的 <code>ObjectBuilder</code> 来动态创建选项。</p><h3 id="选项基类"><a href="#选项基类" class="headerlink" title="选项基类"></a>选项基类</h3><p>接下来创建选项类的脚本，首先创建一个选项的父类 <code>MenuItemBase</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class MenuItemBase : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        protected MenuBase parentMenu;</span><br><span class="line"></span><br><span class="line">        protected virtual void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            OnCreate();</span><br><span class="line">            SetUnActiveStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void BindParent(MenuBase parentMenu)</span><br><span class="line">        &#123;</span><br><span class="line">            this.parentMenu &#x3D; parentMenu;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public abstract void OnCreate();</span><br><span class="line">        public abstract void SetUnActiveStatus();</span><br><span class="line">        public abstract void SetActiveStatus();</span><br><span class="line">        public abstract void Handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项的父类包含了选项激活 <code>SetActiveStatus</code> 方法与 <code>SetUnActiveStatus</code> 未激活。<br>即当光标移动到该选项时，选项的变化效果，演示的菜单选项会在激活时改变背景颜色。</p><p><code>BindParent</code> 方法绑定菜单面板类，方便在子类对父类的一些行为进行控制。<br><code>OnCreate</code> 即在菜单选项初始化时的操作，比如将选项的文字进行本地化处理。<br><code>Handle</code> 为菜单选项的实际逻辑，即选中并且按下确认键后要做什么。</p><h3 id="菜单选项"><a href="#菜单选项" class="headerlink" title="菜单选项"></a>菜单选项</h3><p>接着创建 <code>TestMenuItem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public class TestMenuItem : MenuItemBase</span><br><span class="line">    &#123;</span><br><span class="line">        private Image bg;</span><br><span class="line"></span><br><span class="line">        public override void Handle()</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(&quot;选中&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void OnCreate()</span><br><span class="line">        &#123;</span><br><span class="line">            bg &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line">            SetUnActiveStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void SetActiveStatus()</span><br><span class="line">        &#123;</span><br><span class="line">            bg.color &#x3D; new Color(1f, 0f, 0f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void SetUnActiveStatus()</span><br><span class="line">        &#123;</span><br><span class="line">            bg.color &#x3D; new Color(0.5f, 0.5f, 0.5f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化方法 <code>OnCreate</code> 中，获得 <code>Image</code> 组件，并且在激活与未激活状态时对其进行变色处理。<br><code>Handle</code> 方法打印了一个字符串，当按下确定键后就会打出这个字符串。</p><p>以上就完成了一个菜单系统。</p><h3 id="调用菜单"><a href="#调用菜单" class="headerlink" title="调用菜单"></a>调用菜单</h3><p>在 <code>MainScene</code> 中调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void CreateMainMenu()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load&lt;GameObject&gt;(&quot;Prefabs&#x2F;Test&#x2F;Refactor&#x2F;TestMenu&quot;);</span><br><span class="line">    var model &#x3D; uiStack.Push(prefab);</span><br><span class="line"></span><br><span class="line">    model.transform.localScale &#x3D; Vector3.one;</span><br><span class="line">    model.transform.localPosition &#x3D; Vector3.zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要载入菜单的预制体，然后将预制体推送到 <code>UIStack</code> 即可创建出菜单了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新的菜单系统利用生命周期来控制菜单的行为，极大的减少了开发的负担。<br>而且这样一个条理清晰的结构，后期维护起来也简单。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》框架开发篇（素材的处理）</title>
      <link href="/2021/08/13/monster-game-13/"/>
      <url>/2021/08/13/monster-game-13/</url>
      
        <content type="html"><![CDATA[<h2 id="素材说明"><a href="#素材说明" class="headerlink" title="素材说明"></a>素材说明</h2><p>素材即游戏中需要的图片、音乐等等。<br>图片素材主要是行走图的处理，本作中使用「序列帧」动画制作行走图。</p><h2 id="素材规格"><a href="#素材规格" class="headerlink" title="素材规格"></a>素材规格</h2><p>图片在游戏中叫做 Sprite（精灵），一般都是单张图片，也可以是多张图片合成在一起，合成在一起的图片叫做 Sheet（精灵表/图集）。</p><p>RPG Maker 行走图教程：<a href="https://jobyu.gitbooks.io/rpgmakerpixeltutorials/content/di-shi-qi-zhang-ff1a-xing-zou-tu.html">行走图教程</a></p><p>RPG Maker 系列的行走图示例：</p><p><img src="https://pic.imgdb.cn/item/611339af5132923bf8c860cd.jpg" alt="RPG Maker行走图"></p><p>一般都是用专门的打包工具合成这样的图集。<br>图集打包工具：<a href="https://www.codeandweb.com/texturepacker">TexturePacker 官方网站</a></p><h2 id="图集"><a href="#图集" class="headerlink" title="图集"></a>图集</h2><p>通常的游戏开发引擎都可以读取图集。<br>使用打包工具合成一张图集之后还会得到一个文本文件：</p><p><img src="https://pic.imgdb.cn/item/61133ad15132923bf8c9ff99.jpg" alt="图集文本"></p><p>文本记录了一个 JSON 格式的字符串，用来保存偏移位置等等图片的信息。<br>游戏开发引擎可以读取这个文本从而实现图片的切割。</p><h3 id="图集的优点"><a href="#图集的优点" class="headerlink" title="图集的优点"></a>图集的优点</h3><p>游戏引擎有个 <code>DrawCall</code>（绘图次数），Draw Call 就是 CPU 调用图形编程接口，比如 DirectX 或 OpenGL 来命令 GPU 进行渲染的操作。</p><p>简单地说这个值越低越好，数值越高表示要画图的次数越多，这样游戏的性能就会下降。<br>使用图集可以降低 <code>DrawCall</code>（具体的原理还未深究）。<br>但是一次性加载一张图片和每次画图都要加载单张图片相比，效率肯定高得多。</p><p>除了提高画图的性能，还有一个优点就是方便开发者调用。<br>如果是单张图片开发者不使用脚本读取的话，就要一张张拖到组件里；但如果使用图集打包之后，只要拖一次。如果使用脚本动态读取，图集只要加载一次，而单张图片却要加载 N 次，不管是性能还是操作上，图集都要优于单张图片。</p><h3 id="图集的缺点"><a href="#图集的缺点" class="headerlink" title="图集的缺点"></a>图集的缺点</h3><p>因为图片打包在一起，所以修改其中一张就得重新打包。<br>而且如果图集里包含了不需要用到的图片就白白加载了多余的资源。</p><h2 id="格式标准"><a href="#格式标准" class="headerlink" title="格式标准"></a>格式标准</h2><p>为了避免改图必须重新全部打包的问题，我们决定图集只包含单个动作。</p><p>攻击动作：<br><img src="https://pic.imgdb.cn/item/61133e2e5132923bf8cf7718.jpg" alt="攻击动作"></p><p>倒地动作：<br><img src="https://pic.imgdb.cn/item/61133e3e5132923bf8cf935c.jpg" alt="倒地动作"></p><p>像这样每一个动作都是一张图集，如果要改动其中一个动作就不必全部重新打包了。</p><h2 id="图集切割"><a href="#图集切割" class="headerlink" title="图集切割"></a>图集切割</h2><p>使用 TexturePacker 将行走图打包成单张图片：</p><p><img src="https://pic.imgdb.cn/item/611385e95132923bf8561a85.jpg" alt="行走图"></p><p>可以使用 Unity 内置的分割程序将图片切分成 4 等分。</p><p><img src="https://pic.imgdb.cn/item/611386315132923bf856bcd3.jpg" alt="Unity切分图集"></p><h2 id="图集插件"><a href="#图集插件" class="headerlink" title="图集插件"></a>图集插件</h2><p>参考教程：<a href="https://blog.csdn.net/ChinarCSDN/article/details/85059102">Unity3D-图集制作插件TexturePacker中文教程</a><br>（作者：Chinarcsdn）</p><p>Unity 商店提供了一款可以读取 TexturePacker 切割数据的插件：<a href="https://assetstore.unity.com/packages/tools/sprite-management/texturepacker-importer-16641">TexturePacker Import</a></p><p><img src="https://pic.imgdb.cn/item/6115d6625132923bf84bbfe2.jpg" alt="TexturePacker Import"></p><p>从商店把资源添加到账户里，接着导入到游戏项目中：</p><p><img src="https://pic.imgdb.cn/item/6115d6bb5132923bf84c5770.jpg" alt="插件包管理"></p><p>导入插件的时候，插件内的 Example（范例）是没什么用的，可以不勾上。</p><p><img src="https://pic.imgdb.cn/item/6115d7555132923bf84d56fe.jpg" alt="移除不必要的文件"></p><p>第一次导入的时候，插件会查找本地的文件，如果有图集就会自动加载，这个过程比较漫长（如果本地图片多的话）。<br>趁这个时间，打开 TexturePacker，然后重新合成一份 unity 支持的图集类型：</p><p><img src="https://pic.imgdb.cn/item/6115d8475132923bf84ef0f7.jpg" alt="unity 支持的图集类型"></p><p>打包完成后，有一个合并的图像文件和一个 <code>.tpsheet</code> 后缀的文件：</p><p><img src="https://pic.imgdb.cn/item/6115d8985132923bf84f7ed4.jpg" alt="tpsheet"></p><p>这个文件是图集的配置，可以用文本文档打开：</p><p><img src="https://pic.imgdb.cn/item/6115da755132923bf852a7f8.jpg" alt="图集配置"></p><p>将这两个文件一起拷贝粘贴到 Unity 工程里：</p><p><img src="https://pic.imgdb.cn/item/6115d8d85132923bf84fe4cf.jpg" alt="粘贴到工程里"></p><p>可以看到，行走图已经自动被分割好了！这样就不用手动切图啦！</p><h2 id="插件规范"><a href="#插件规范" class="headerlink" title="插件规范"></a>插件规范</h2><p>在导入插件后发现目录出现了一个文件夹：</p><p><img src="https://pic.imgdb.cn/item/6115d94a5132923bf850a573.jpg" alt="插件的文件夹"></p><p>直接放在根目录明显不美观而且也不规范。<br>创建一个 <code>Plugins</code> 文件夹用来存放插件：</p><p><img src="https://pic.imgdb.cn/item/6115d98c5132923bf851194b.jpg" alt="Plugins"></p><p>虽然插件放在哪 Unity 都会自动加载，但是为了统一管理，添加一个用来保存插件的文件夹是最好的。</p><h2 id="动画制作"><a href="#动画制作" class="headerlink" title="动画制作"></a>动画制作</h2><p>行走图切割完成之后，如果使用 Unity 自带的动画程序就比较麻烦了。<br>每一个动画都要添加状态机，并且还要给每一个角色节点添加动画组件，总体的工程量非常大。</p><p>所以这里要在框架里面实现一个动画系统。</p><h3 id="加载行走图"><a href="#加载行走图" class="headerlink" title="加载行走图"></a>加载行走图</h3><p>行走图切割完后放在 Resources 文件夹备用。<br>新建框架类 <code>Spriter</code>，添加一个读取切割好的图片的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR</span><br><span class="line">&#123;</span><br><span class="line">    public class Spriter : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public static Sprite[] LoadSprites(string path)</span><br><span class="line">        &#123;</span><br><span class="line">            Sprite[] sprites &#x3D; Resources.LoadAll&lt;Sprite&gt;(path);</span><br><span class="line"></span><br><span class="line">            return sprites;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我重新修改了所有框架类的命名空间，全部只套一层 FR，不再区分更细的目录。</p></blockquote><h3 id="行走图动画"><a href="#行走图动画" class="headerlink" title="行走图动画"></a>行走图动画</h3><p>行走图的动画可以用 Unity 的动画系统实现，也可以自己手动实现，每个游戏都不一样，因此不应该放在框架中处理，而是要放到游戏本身的逻辑当中。</p><p>添加一个地图角色父类 <code>AbstractCharacter</code>，该方法继承框架的 <code>Character</code>，并且提供了载入行走图以及显示动画的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using FR;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class AbstractCharacter : Character</span><br><span class="line">    &#123;</span><br><span class="line">        protected bool isWalking;</span><br><span class="line">        protected Dictionary&lt;string, Sprite[]&gt; animateSprites;</span><br><span class="line"></span><br><span class="line">        protected int animateIndex;</span><br><span class="line">        protected float walkingInterval &#x3D; 0.15f;</span><br><span class="line">        protected float spriteAnimateTime;</span><br><span class="line"></span><br><span class="line">        protected void LoadAnimateSprites(string characterName)</span><br><span class="line">        &#123;</span><br><span class="line">            animateSprites &#x3D; new Dictionary&lt;string, Sprite[]&gt;();</span><br><span class="line"></span><br><span class="line">            string[] fields &#x3D; new string[] &#123; &quot;walk&quot;, &quot;idle&quot; &#125;;</span><br><span class="line">            string basePath &#x3D; &quot;Sprites&#x2F;Character&#x2F;&quot; + characterName + &quot;&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">            foreach (var field in fields)</span><br><span class="line">            &#123;</span><br><span class="line">                var items &#x3D; Spriter.LoadSprites(basePath + field);</span><br><span class="line"></span><br><span class="line">                if (items.Length !&#x3D; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    animateSprites.Add(field, items);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void AnimateMonitor()</span><br><span class="line">        &#123;</span><br><span class="line">            WalkingAnimate();</span><br><span class="line">            IdleAnimate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void SetCurrentAnimateSprite(string key)</span><br><span class="line">        &#123;</span><br><span class="line">            if (animateSprites.ContainsKey(key) &#x3D;&#x3D; false)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(&quot;没有找到对应的动画文件：&quot; + key);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            spriteAnimateTime &#x3D; Time.time + walkingInterval;</span><br><span class="line"></span><br><span class="line">            animateIndex++;</span><br><span class="line"></span><br><span class="line">            if (animateIndex &gt;&#x3D; animateSprites[key].Length)</span><br><span class="line">            &#123;</span><br><span class="line">                animateIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var sprite &#x3D; animateSprites[key][animateIndex];</span><br><span class="line">            SetSprite(sprite);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void IdleAnimate()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isWalking &#x3D;&#x3D; false &amp;&amp; Time.time &gt; spriteAnimateTime)</span><br><span class="line">            &#123;</span><br><span class="line">                SetCurrentAnimateSprite(&quot;idle&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void WalkingAnimate()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isWalking &amp;&amp; Time.time &gt; spriteAnimateTime)</span><br><span class="line">            &#123;</span><br><span class="line">                SetCurrentAnimateSprite(&quot;walk&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void InputMonitor() &#123; &#125;</span><br><span class="line">        protected virtual void InputHandle() &#123; &#125;</span><br><span class="line"></span><br><span class="line">        protected void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            InputMonitor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void FixedUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            WalkingAnimate();</span><br><span class="line">            IdleAnimate();</span><br><span class="line">            InputHandle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的脚本会自动加载角色的图集文件：<code>walk</code>（行走） 和 <code>idle</code>（待机）。<br>需要在 Resources 添加好对应的图片，以后所有的角色都遵循这个标准，即包含一个行走图和待机图。</p><p><img src="https://pic.imgdb.cn/item/6115db475132923bf8543d20.jpg" alt="图片放置"></p><p><code>InputMonitor</code>（输入监听器） 和 <code>InputHandle</code>（输入处理器）可以在子类重写。</p><p>玩家控制的角色类 <code>PlayerCharacter</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using FR;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public class PlayerCharacter : AbstractCharacter</span><br><span class="line">    &#123;</span><br><span class="line">        public float moveSpeed &#x3D; 3.8f;</span><br><span class="line"></span><br><span class="line">        private Rigidbody2D rb;</span><br><span class="line">        private float horizontal;</span><br><span class="line"></span><br><span class="line">        private Vector3 originalLocalScale;</span><br><span class="line"></span><br><span class="line">        protected override void InitCharacterAction()</span><br><span class="line">        &#123;</span><br><span class="line">            LoadAnimateSprites(&quot;ace&quot;);</span><br><span class="line"></span><br><span class="line">            rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">            originalLocalScale &#x3D; transform.localScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void InputMonitor()</span><br><span class="line">        &#123;</span><br><span class="line">            horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void InputHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            MoveHandle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void MoveHandle()</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, 0);</span><br><span class="line"></span><br><span class="line">            if (horizontal !&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                isWalking &#x3D; true;</span><br><span class="line">                float scaleX &#x3D; horizontal &gt; 0 ? -1 * originalLocalScale.x : originalLocalScale.x;</span><br><span class="line">                SetLocalScale(scaleX);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (isWalking &#x3D;&#x3D; true)</span><br><span class="line">                &#123;</span><br><span class="line">                    animateIndex &#x3D; 0;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                isWalking &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NPC 的角色类 <code>NonePlayerCharacter</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">using FR;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public class NonePlayerCharacter : AbstractCharacter</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void InitCharacterAction()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前还未开始实现 NPC 角色，因此留空备用。</p><p><img src="https://pic.imgdb.cn/item/6115d0f85132923bf8431441.gif" alt="行走测试"></p><h2 id="角色类的新设计"><a href="#角色类的新设计" class="headerlink" title="角色类的新设计"></a>角色类的新设计</h2><p>与前一篇相比，角色基类的改动比较大。<br>最大的不同是节点的创建，在前一篇中是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个字典用于保存场景中的NPC节点</span><br><span class="line">private Dictionary&lt;string, GameObject&gt; npcs &#x3D; new Dictionary&lt;string, GameObject&gt;();</span><br><span class="line"></span><br><span class="line">public GameObject CreateNPC(FR_Data.CharacterData data)</span><br><span class="line">&#123;</span><br><span class="line">    GameObject obj &#x3D; new GameObject();</span><br><span class="line"></span><br><span class="line">    obj.name &#x3D; data.name;</span><br><span class="line">    SpriteRenderer spriteRenderer &#x3D; obj.AddComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    spriteRenderer.sprite &#x3D; Resources.Load&lt;Sprite&gt;(data.walkingGraphPath);</span><br><span class="line">    spriteRenderer.sortingOrder &#x3D; data.sorting;</span><br><span class="line"></span><br><span class="line">    npcs.Add(data.name, obj);</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述脚本通过代码动态创建一个 NPC 节点。</p><p>但是我突然想到，NPC 节点有体型的差异，比如场景中如果出现一只 BOSS，那么它的体型可能比玩家大好几倍，这样的话碰撞器的范围就难以用脚本的方法控制了。因为素材是存在多余的透明区域的，而脚本只能读取到图片的大小，要计算出不透明的宽高就比较麻烦了；所以我决定还是创建一个角色预制体，角色的预制体不需要添加逻辑脚本，而只是一个没有“芯片”的机器人，每一个 NPC 的逻辑都不同，只要给它们植入“控制芯片”就可以了。</p><p>角色预制体相当于是角色的模型，只差给它们“注入灵魂”。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》框架开发篇（场景系统）</title>
      <link href="/2021/08/10/monster-game-12/"/>
      <url>/2021/08/10/monster-game-12/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏框架可以理解为一个具有自动处理功能并且有着丰富可调用方法的类库。</p><p>提前写好各种通用方法，存入“框架”的方法库，然后开发就可以直接调用。<br>其实就是利用了“复用性”原则，把一些可以反复使用的方法抽取出来，作为全局调用类。</p><blockquote><p>面向“复用”编程</p></blockquote><p>方法库只是框架的基本功能，最主要的还是框架对于逻辑的自动处理。<br>比如切换场景时的淡入淡出效果，传送到某个地图，自动判断是否要触发剧情事件等等。</p><p>开发者只要写好触发条件，框架就能自动处理一些繁琐的过程。</p><p>因为游戏的定制性很强，所以网上没有什么好的框架，但是有许多插件包可以使用。<br>如果是别人开源好用的插件包，也可以直接引入框架中使用，减少自己的开发时间。</p><blockquote><p>例如加密系统，需要对存档进行加密防止被本地修改，就要用到第三方的加密插件，当然也可以自己来写加密方法，但是自己写的无法跟专业人士相比，已经有十分成熟的开源插件，就没必要自己重复造轮子。原创系统也不会因为使用了别人的插件包就不叫做“原创”了，现代主流的框架基本都是依赖第三方包，如 PHP 的 composer，JavaScript 的 npm 等等，正是因为站在巨人的肩膀上，我们才能往更高的地方前进。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>游戏设计模式：<a href="https://gpp.tkchu.me/introduction.html">https://gpp.tkchu.me/introduction.html</a></p><h2 id="游戏框架"><a href="#游戏框架" class="headerlink" title="游戏框架"></a>游戏框架</h2><p>游戏框架相当于工厂的流水线，只要设计好流水线，工厂的生产效率就能大幅提升。<br>框架的作用就是帮助开发者减少重复开发的时间，提高类的复用性。</p><p>框架的代码不应该与游戏本身的逻辑存在耦合。<br>耦合即有关联的意思，也就是说，框架应该是可以独立出来用在任何一个新游戏上面的。<br>而不是说只为了这个游戏开发框架。</p><p>除此之外，框架还将复杂的操作封装起来，只暴露出一个简单易调用的方法。<br>因此使用框架的时候，只需要关注开发游戏本身，而不需要关注内部是如何实现的。</p><p>那么接下来就一边学习一边尝试开发出一套属于自己的游戏框架。</p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><p>一套 RPG 游戏的框架包括：</p><ul><li>场景系统</li><li>角色系统</li><li>装备系统</li><li>战斗系统</li><li>敌人系统</li><li>事件系统</li><li>任务系统</li><li>……</li></ul><p>诸如此类，以模块进行区分，逐一实现各个功能。</p><h2 id="规范开发分支"><a href="#规范开发分支" class="headerlink" title="规范开发分支"></a>规范开发分支</h2><p>代码管理工具用的是 Git，因为是开发新的系统框架，所以单独切换出一条分支进行开发。</p><p><img src="https://pic.imgdb.cn/item/610f534f5132923bf8d36cfb.jpg" alt="分支切换"></p><p>新版本取名为 <code>v1.1.0</code>，中版本号更新一位。<br>等系统更新完成再合并到 <code>master</code> 主分支。</p><p>然后推送到仓库服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin v1.1.0</span><br></pre></td></tr></table></figure><p>这样就单独创建了一条新的分支，框架的开发在这条分支上进行。<br>代码仓库使用的是：<a href="http://coding.net/">http://coding.net</a><br>也可以使用 Github，不过不稳定，国内有时候要翻墙才能访问。</p><p>除此之外，国产的还有：<a href="https://gitee.com/">https://gitee.com/</a><br>其他的我就没使用过了，国产的也不是很稳定，偶尔也会出现推送不上去或拉不下来的情况，但是访问速度比国外的快得多。</p><p><img src="https://pic.imgdb.cn/item/610f54435132923bf8d4a4f6.jpg" alt="代码仓库"></p><p>为了提高效率，编写了一个 <code>shell</code> 脚本用来自动提交代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;shell_$1&quot;</span><br><span class="line">git push</span><br><span class="line">echo &quot;shell 快捷提交___$1 上传完成...\n&quot;</span><br></pre></td></tr></table></figure><p>这样每次提交代码只需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;autoloadSave.sh 测试</span><br></pre></td></tr></table></figure><p>直接省略了输入 git 命令，懒人必备！</p><h2 id="场景系统概述"><a href="#场景系统概述" class="headerlink" title="场景系统概述"></a>场景系统概述</h2><p>游戏中分为主场景（负责全局的逻辑处理）以及地图。</p><p><img src="https://pic.imgdb.cn/item/610f40de5132923bf8bb687a.jpg" alt="场景系统"></p><h3 id="主场景"><a href="#主场景" class="headerlink" title="主场景"></a>主场景</h3><p>主场景就是 Unity 的 Scene（场景）。<br>游戏中只有一个主场景，其他的地图全部使用 Prefab（预制体）来实现。<br>这其实就是框架中常说的“单一入口”。</p><p>Unity 中的 Scene：</p><p><img src="https://pic.imgdb.cn/item/610f43a35132923bf8bf3213.jpg" alt="Scene"></p><p>Unity 中的 Prefab：</p><p><img src="https://pic.imgdb.cn/item/610f43c15132923bf8bf583e.jpg" alt="Prefab"></p><h3 id="地图的切换原理"><a href="#地图的切换原理" class="headerlink" title="地图的切换原理"></a>地图的切换原理</h3><p>Prefab 放在 Resources 文件夹进行动态加载，主场景就是玩家当前所在的场景。<br>玩家切换地图时，并不是场景的切换，而是销毁当前地图的节点，然后通过预制体创建新地图的节点。</p><p>通常的游戏开发是一个地图就创建一个 Scene。<br>然后调用切换场景的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SceneManager.LoadScene(&quot;MiniGame&quot;);</span><br></pre></td></tr></table></figure><p>这样是真正的场景切换。<br>如果是体量比较小的游戏，没有几个场景就可以这么做。<br>但是我们的新游戏是长篇的 RPG，粗略的估计地图也有好几百个。</p><p>创建一个新的场景，就需要重新配置 Canvas（摄像机）和场景控制器节点。<br>这么做非常麻烦，因此把地图作为 Prefab（预制体）动态加载的方法就可以复用主场景中的 Canvas 和控制器节点。</p><blockquote><p>单一场景有一个缺点就是很容易出现内存泄露的情况，所谓内存泄露就是没用的变量或者资源没有及时销毁从而白白占用系统内存空间。如果是 Unity 自带的 SceneManager 来切换场景，变量及资源会在切换场景时自动回收，但是单一场景，所有的内存回收都要自己操作，如果不小心忘记了，就会造成内存泄露，结果就是游戏玩得越久，越变越卡。</p></blockquote><h3 id="主场景的实现"><a href="#主场景的实现" class="headerlink" title="主场景的实现"></a>主场景的实现</h3><p>主场景主要负责场景相关逻辑的处理。<br>玩家开始游戏后，只会载入一次主场景，然后由主场景判断当前需要加载的地图。</p><p>比如玩家打开游戏，载入主场景，此时显示的是标题界面。<br>如果玩家选择开始新游戏，就会载入游戏的初始地图；<br>如果玩家选择的是读取存档，就会加载存档数据的地图。</p><p>除了控制地图的加载，初始资源的加载也是在主场景进行的。<br>例如：本地化的语言文本，游戏的常驻资源等等。</p><p>编写 <code>FR_MainScene</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Scene</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class FR_MainScene : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        protected void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            InitMainSceneAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void Start()</span><br><span class="line">        &#123;</span><br><span class="line">            OnLoadAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void InitMainSceneAction();</span><br><span class="line">        protected abstract void OnLoadAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InitMainSceneAction</code> 方法是场景的初始化方法，用于加载配置文件以及其他资源。<br><code>OnLoadAction</code> 方法在载入主场景时的处理方法，例如打开游戏时载入标题画面。</p><p>这两个方法需要在子类进行实现。</p><blockquote><p>由于是编写游戏框架，所有框架类都需要加上命名空间，这样做的好处是以后可以单独抽取出来，下次如果还要开发新游戏就可以直接把这套框架导入到新游戏的工程中。框架与当前游戏的逻辑进行解耦，只抽取出公共的方法，具体的实现通过继承接口或者抽象类的方式来完成。</p></blockquote><p>这里使用了 <code>abstract</code> 来声明方法应当在子类进行实现。实际上在子类直接调用 <code>Start</code> 和 <code>Awake</code> 也没什么差别，抽象方法的作用是“约束”，也就是要子类强制按照规定好的标准写代码，下文也会遵循这样的设计。</p><blockquote><p>框架的作用就是制定一些列的标准，使开发者能够按照统一的要求进行开发。</p></blockquote><p>主场景的代码现在这样就够了，接下来编写地图系统。</p><h2 id="地图系统"><a href="#地图系统" class="headerlink" title="地图系统"></a>地图系统</h2><p>地图系统就比较复杂了。</p><p>一个游戏地图包括：地图中的美术资源、角色、NPC、可调查事件。<br>逻辑的处理又包括：查找地图中的节点，自动触发事件的处理。<br>还有操作方面的处理：监听玩家按键（如打开菜单、控制玩家移动）。</p><h3 id="美术资源"><a href="#美术资源" class="headerlink" title="美术资源"></a>美术资源</h3><p>地图的美术资源需要分层，比如桌子是在地板的上面。<br>地图的分层可以理解为 Photoshop 的图层。</p><p><img src="https://pic.imgdb.cn/item/610f4ea75132923bf8cd67ed.jpg" alt="图层"></p><p>例如，玩家走到桌子前面会被遮挡。</p><p><img src="https://pic.imgdb.cn/item/610f4f005132923bf8cddadb.jpg" alt="遮挡效果"></p><p>这其实就是桌子的图层比玩家所在的图层高，所以桌子显示在上层，玩家显示在下层，所以被遮挡了。<br>Unity 提供了 Sort 字段来控制图层的层级关系：</p><p><img src="https://pic.imgdb.cn/item/610f4f6c5132923bf8ce6a2c.jpg" alt="sort"></p><p>该值越高，图层就显示在上方。<br>利用该值来控制地图的层级关系。</p><blockquote><p>这里将使用 100 为单位，比如底层是 0，第一层就是 100，第二层是 200，这样做的好处是可以设置 101、102 这样的值来进行更加细致的分层。</p></blockquote><p>为了方便直观的看出图层，每一个地图都有几个空的根节点 <code>Div_1</code>、<code>Div_2</code> 以此类推。</p><p><img src="https://pic.imgdb.cn/item/610f501e5132923bf8cf4a39.jpg" alt="空的根节点"></p><p><code>sort</code> 值为<code>100~199</code> 的就放在 <code>Div_1</code>，值为 <code>200~299</code> 的就放在 <code>Div_2</code>，玩家控制的角色放在第三层就可以了，值为 399（其他的 NPC 节点也在第三层，主角是最高的 399，这样就可以显示在 NPC 的上方）。</p><h3 id="地图中的角色"><a href="#地图中的角色" class="headerlink" title="地图中的角色"></a>地图中的角色</h3><p>先创建一个角色节点，给角色加上刚体，然后用物理学的方式来控制玩家移动，再加上 Unity 的动画系统，就实现了角色行走+移动动画。但这些并不是框架类要实现的，因为这已经是与游戏本身相关的逻辑了。</p><blockquote><p>通常的 RPG 游戏有四方向行走，但是我们的新作只能左右移动，这不是“通用”的，所以不能在框架里写角色的移动逻辑。</p></blockquote><p>框架中的角色类只要最基本的方法，操作控制需要抽取出来，让子类自行实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Scene</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class FR_Character : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            InitCharacterAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void InitCharacterAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>框架的 <code>FR_Character</code> 类只抽取最基本的方法，暂时这样就可以了。<br>这个类不仅是玩家控制的角色要继承的，也可以是地图上 NPC 的父类。</p><p>还有一些通用的方法，例如头上显示的心情气泡：</p><p><img src="https://pic.imgdb.cn/item/610f96975132923bf8463606.jpg" alt="显示气泡"></p><p>不管是 NPC 还是玩家控制的角色都可以显示气泡。<br>这些就是公共方法，可以全部在 <code>FR_Character</code> 中实现，然后子类就可以方便的调用了。</p><p>上面只声明了一个初始化方法 <code>InitCharacterAction</code>，实际上的角色类比这个复杂得多，本文只记录开发框架的思想，而不是记录开发框架的具体实现，因此不会把要用的代码全部贴上，只展示部分示例，下文同理。</p><h3 id="地图控制器"><a href="#地图控制器" class="headerlink" title="地图控制器"></a>地图控制器</h3><p>角色移动到某张地图的时候，需要判断是否满足条件自动触发剧情，以及更新玩家当前存档所在位置，并且根据是否触发事件来决定是否创建或隐藏角色的节点。这些逻辑的判断就是地图控制器需要做的事情，下面是一个简单的地图抽象类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Scene</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class FR_Map : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        protected string mapName;</span><br><span class="line">        [HideInInspector]</span><br><span class="line">        public FR_MainScene mainScene;</span><br><span class="line">        [HideInInspector]</span><br><span class="line">        public FR_Player player;</span><br><span class="line"></span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            InitMapAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Start()</span><br><span class="line">        &#123;</span><br><span class="line">            OnLoadAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void InitMapAction();</span><br><span class="line">        protected abstract void OnLoadAction();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 销毁地图</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract void DestroyMap();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 创建玩家节点</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public abstract FR_Player CreatePlayer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="地图节点"><a href="#地图节点" class="headerlink" title="地图节点"></a>地图节点</h4><p>地图是由一个根节点以及许多个子节点构成的：</p><p><img src="https://pic.imgdb.cn/item/610f9b015132923bf85471c1.jpg" alt="地图的节点关系"></p><p>假如要控制一个 NPC 的移动，就必须要获得这个节点的对象。<br>原来的做法是在场景中先将 NPC 放在屏幕外面看不见的地方。</p><p><img src="https://pic.imgdb.cn/item/610f9b425132923bf85542ee.jpg" alt="地图中的NPC"></p><p>地图的脚本里添加几个 <code>GameObject</code> 类型的变量用来保存节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public GameObject npcBaGu, npcMysticMan, npcLouLuo;</span><br></pre></td></tr></table></figure><p>然后在 Unity 的面板中，将这些 NPC 逐个拖到组件的变量里。</p><p><img src="https://pic.imgdb.cn/item/610f9bbc5132923bf856a884.jpg" alt="组件中的节点"></p><p>这样在脚本中就可以用 <code>npcBaGu, npcMysticMan, npcLouLuo</code> 这三个变量来控制节点了。<br>一般的游戏基本都是这么做的，这样做没什么不对，但却有效率上的问题。<br>比如在一个 NPC 很多的地图：</p><p><img src="https://pic.imgdb.cn/item/610f9cd05132923bf859df19.jpg" alt="NPC很多的地图"></p><p>整个场景就变得乱糟糟的，每一个 NPC 都要单独创建一个节点，而且还必须放到地图里面并且一个个拖到脚本组件上。切换到这个场景的时候，这些节点都会加载到内存里，浪费内存资源不说，时间一长，哪些 NPC 对应哪个剧情都难以分辨，极大的影响开发效率。</p><p>为了解决这个问题，地图中的 NPC 节点需要改成动态生成的方式。<br>剧情需要的时候进行创建，不需要的时候就不创建。<br>在创建 NPC 节点的时候，将其加入到 <code>Dictionary&lt;string, GameObject&gt;</code>（字典）中。<br>这样地图控制器就能通过节点名称来获取到地图中指定节点。</p><h5 id="NPC-节点"><a href="#NPC-节点" class="headerlink" title="NPC 节点"></a>NPC 节点</h5><p>这里又有新的问题，如果每一个 NPC 节点都做成 Prefab（预制体），那么当 NPC 多了起来又会无法分辨哪个是哪个。我不希望一个文件夹里存放着成百上千个 NPC 的预制体，因为这样会增加项目的管理难度。</p><p>NPC 节点真的需要单独创建吗？<br>仔细想想的话，每一个 NPC 其实都存在许多共通的部分。<br>比如每一个 NPC 都有行走图，都有移动的方法，玩家与 NPC 接触时，按下调查键都可以进行对话。</p><p>这样就可以把 NPC 节点的公共部分抽取出来，子类只需要单独编写特有的事件处理即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Scene</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class FR_Character : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private void Awake()</span><br><span class="line">        &#123;</span><br><span class="line">            InitCharacterAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected abstract void InitCharacterAction();</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 设置位置（本地坐标）</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public void SetLocalePosition(float x, float y, float scaleX &#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 pos &#x3D; transform.position;</span><br><span class="line">            pos.x &#x3D; x;</span><br><span class="line">            pos.y &#x3D; y;</span><br><span class="line">            transform.position &#x3D; pos;</span><br><span class="line"></span><br><span class="line">            if (scaleX !&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                SetLocalScale(scaleX);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SetLocalScale(float x, float y &#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 scale &#x3D; transform.localScale;</span><br><span class="line">            scale.x &#x3D; x;</span><br><span class="line">            scale.y &#x3D; y;</span><br><span class="line"></span><br><span class="line">            transform.localScale &#x3D; scale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的例子，里面包含了设置节点坐标和朝向的方法。</p><h5 id="角色节点"><a href="#角色节点" class="headerlink" title="角色节点"></a>角色节点</h5><p>同样地，玩家控制的角色节点，也需要封装一个抽象类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">namespace FR_Scene &#123;</span><br><span class="line">    public abstract class FR_Player : FR_Character</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前创建这样一个空壳就可以了。</p><h5 id="在游戏中调用"><a href="#在游戏中调用" class="headerlink" title="在游戏中调用"></a>在游戏中调用</h5><p>创建一个简易的测试地图：</p><p><img src="https://pic.imgdb.cn/item/6111f2265132923bf8bfbf70.jpg" alt="测试地图"></p><p>然后将地图节点拖到 Resources 目录做成预制体：</p><p><img src="https://pic.imgdb.cn/item/6111f7eb5132923bf8c972d4.jpg" alt="地图预制体"></p><p>因为是重构的系统，为了避免与原来的代码产生冲突，我新建了一个 <code>Reactor</code> 文件夹用来存放使用框架的代码。</p><p><img src="https://pic.imgdb.cn/item/6111f24e5132923bf8bfffa7.jpg" alt="新系统的代码"></p><p>分别创建三个类：<code>AbstractMap</code>、<code>MainScene</code>、<code>PlayerCharacter</code>。</p><p><code>AbstractMap</code> 类是游戏中实际地图的基类，包含了地图需要用的基本方法。如获取角色所在图层以及创建玩家节点和销毁地图的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using FR_Scene;</span><br><span class="line"></span><br><span class="line">namespace Refactor.Scene</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class AbstractMap : FR_Map</span><br><span class="line">    &#123;</span><br><span class="line">        protected Transform characterDiv;</span><br><span class="line"></span><br><span class="line">        protected override void InitMapAction()</span><br><span class="line">        &#123;</span><br><span class="line">            characterDiv &#x3D; transform.Find(&quot;Div_3&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void DestroyMap()</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override FR_Player CreatePlayer()</span><br><span class="line">        &#123;</span><br><span class="line">            string path &#x3D; &quot;Prefabs&#x2F;Character&#x2F;PlayerCharacter&quot;;</span><br><span class="line">            GameObject prefab &#x3D; Resources.Load(path) as GameObject;</span><br><span class="line">            GameObject obj &#x3D; Instantiate(prefab, characterDiv);</span><br><span class="line"></span><br><span class="line">            player &#x3D; obj.GetComponent&lt;PlayerCharacter&gt;();</span><br><span class="line"></span><br><span class="line">            return player;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MainScene</code> 类是主场景类，继承框架的主场景同时编写一些游戏特有的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Refactor.Scene</span><br><span class="line">&#123;</span><br><span class="line">    public class MainScene : FR_Scene.FR_MainScene</span><br><span class="line">    &#123;</span><br><span class="line">        [HideInInspector]</span><br><span class="line">        public AbstractMap currentMap;</span><br><span class="line">        [HideInInspector]</span><br><span class="line">        public GameObject mainCamera;</span><br><span class="line"></span><br><span class="line">        protected override void InitMainSceneAction()</span><br><span class="line">        &#123;</span><br><span class="line">            LocaleManager.LoadLocaleSetting();</span><br><span class="line">            mainCamera &#x3D; GameObject.FindWithTag(&quot;MainCamera&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override void OnLoadAction()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void LoadMap(string mapName, Action callback &#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (currentMap !&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                currentMap.DestroyMap();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;Map&#x2F;&quot; + mapName) as GameObject;</span><br><span class="line">            GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line">            currentMap &#x3D; obj.GetComponent&lt;AbstractMap&gt;();</span><br><span class="line">            currentMap.mainScene &#x3D; this;</span><br><span class="line"></span><br><span class="line">            if (callback !&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如在 <code>InitMainSceneAction</code> 方法中，初始化本地语言配置文件以及获得当前场景的摄像机节点；<code>LoadMap</code> 是加载地图的方法，这里只进行简单的实现。</p><p><code>PlayerCharacter</code> 就是玩家控制的角色节点的逻辑处理类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Refactor</span><br><span class="line">&#123;</span><br><span class="line">    public class PlayerCharacter : FR_Scene.FR_Player</span><br><span class="line">    &#123;</span><br><span class="line">        public float moveSpeed &#x3D; 3.8f;</span><br><span class="line"></span><br><span class="line">        private Rigidbody2D rb;</span><br><span class="line">        private float horizontal;</span><br><span class="line"></span><br><span class="line">        private Vector3 originalLocalScale;</span><br><span class="line"></span><br><span class="line">        protected override void InitCharacterAction()</span><br><span class="line">        &#123;</span><br><span class="line">            rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">            originalLocalScale &#x3D; transform.localScale;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Update()</span><br><span class="line">        &#123;</span><br><span class="line">            horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void FixedUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, 0);</span><br><span class="line"></span><br><span class="line">            if (horizontal !&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                float scaleX &#x3D; horizontal &gt; 0 ? originalLocalScale.x : -1 * originalLocalScale.x;</span><br><span class="line">                SetLocalScale(scaleX);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实现了简单的控制移动。</p><p><img src="https://pic.imgdb.cn/item/6111f4325132923bf8c3444d.gif" alt="角色的移动"></p><p>现在做的事情跟原来没什么不同，还花了那么多时间来修改代码，这样做的意义何在？<br>其实主要还是为了规范化的开发，而且现在的演示也没法体现出框架的好处，越往后开发框架的优点才越清晰。</p><h5 id="游戏对象建造器"><a href="#游戏对象建造器" class="headerlink" title="游戏对象建造器"></a>游戏对象建造器</h5><p>上面的代码中，直接调用 Unity 的实例化方法创建节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成角色节点</span><br><span class="line">public override FR_Player CreatePlayer()</span><br><span class="line">&#123;</span><br><span class="line">    string path &#x3D; &quot;Prefabs&#x2F;Character&#x2F;PlayerCharacter&quot;;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(path) as GameObject;</span><br><span class="line">    GameObject obj &#x3D; Instantiate(prefab, characterDiv);</span><br><span class="line"></span><br><span class="line">    player &#x3D; obj.GetComponent&lt;PlayerCharacter&gt;();</span><br><span class="line"></span><br><span class="line">    return player;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成地图节点</span><br><span class="line">public override void LoadMap(string mapName, Action callback &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    if (currentMap !&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        currentMap.DestroyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;Map&#x2F;&quot; + mapName) as GameObject;</span><br><span class="line">    GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line">    currentMap &#x3D; obj.GetComponent&lt;AbstractMap&gt;();</span><br><span class="line">    currentMap.mainScene &#x3D; this;</span><br><span class="line"></span><br><span class="line">    if (callback !&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建游戏节点（GameObject）的时候发现了“冗余”的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;Map&#x2F;&quot; + mapName) as GameObject;</span><br><span class="line">GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line">currentMap &#x3D; obj.GetComponent&lt;AbstractMap&gt;();</span><br></pre></td></tr></table></figure><p>在加载动态资源的时候要用到 <code>Resources.Load</code>，然后又要实例化预制体要用到 <code>Instantiate</code>……这个过程非常繁琐，而且还都是重复性劳动，对于开发体验极其不友好。</p><p>框架的作用就体现出来了，只要封装一个专门用来“生成节点”的类就好了。<br>创建一个专门用来生成游戏对象的类 <code>FR_ObjectBuilder</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Builder</span><br><span class="line">&#123;</span><br><span class="line">    public class FR_ObjectBuilder : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public static GameObject Generate(string prefabPath, Transform parentTrans &#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject prefab &#x3D; Resources.Load&lt;GameObject&gt;(prefabPath);</span><br><span class="line"></span><br><span class="line">            return Generate(prefab, parentTrans);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static GameObject Generate(GameObject prefab, Transform parentTrans &#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject obj &#x3D; Instantiate(prefab);</span><br><span class="line"></span><br><span class="line">            if (parentTrans !&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                obj.transform.SetParent(parentTrans);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后上面创建地图和创建角色对象的方法就可以简化为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建地图</span><br><span class="line">public override void LoadMap(string mapName, Action callback &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    if (currentMap !&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        currentMap.DestroyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GameObject obj &#x3D; FR_Builder.FR_ObjectBuilder.Generate(&quot;Prefabs&#x2F;Map&#x2F;&quot; + mapName);</span><br><span class="line">    currentMap &#x3D; obj.GetComponent&lt;AbstractMap&gt;();</span><br><span class="line">    currentMap.mainScene &#x3D; this;</span><br><span class="line"></span><br><span class="line">    if (callback !&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建角色节点</span><br><span class="line">public override FR_Player CreatePlayer()</span><br><span class="line">&#123;</span><br><span class="line">    string path &#x3D; &quot;Prefabs&#x2F;Character&#x2F;PlayerCharacter&quot;;</span><br><span class="line">    GameObject obj &#x3D; FR_Builder.FR_ObjectBuilder.Generate(path);</span><br><span class="line"></span><br><span class="line">    player &#x3D; obj.GetComponent&lt;PlayerCharacter&gt;();</span><br><span class="line"></span><br><span class="line">    return player;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="角色节点生成器"><a href="#角色节点生成器" class="headerlink" title="角色节点生成器"></a>角色节点生成器</h5><p>地图中的 NPC 以及玩家控制的主角，都叫做角色节点，本质都是同一种类型的节点。<br>只是它们的控制逻辑不同，玩家角色需要玩家输入键盘指令来控制移动，NPC 则是由系统 AI 控制。</p><p>可以把角色节点想象为一团橡皮泥，刚开始的时候是一团不知道什么类型的泥。<br>如果要捏一个 NPC，就捏出 NPC 的形状；如果要捏一个主角，就捏出主角的形状。<br>它们最开始都是 <code>FR_Character</code> 类型的，它们都有获取精灵和动画组件的方法，再根据需要在子类编写特有的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public abstract class FR_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private SpriteRenderer walkingGraphRenderer;</span><br><span class="line">    private Animator animator;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        walkingGraphRenderer &#x3D; GetComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">        animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">        InitCharacterAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetWalkingGraphSprite(Sprite sprite)</span><br><span class="line">    &#123;</span><br><span class="line">        walkingGraphRenderer.sprite &#x3D; sprite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 省略其他方法……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FR_Character</code> 类定义了一团“橡皮泥”，它没有任何“形状”，它提供了一个 <code>SetWalkingGraphSprite</code> 方法用于实现“变形功能”（替换行走图）。</p><p>接着为 <code>FR_Map</code> 类添加生成 NPC 节点的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个字典用于保存场景中的NPC节点</span><br><span class="line">private Dictionary&lt;string, GameObject&gt; npcs &#x3D; new Dictionary&lt;string, GameObject&gt;();</span><br><span class="line"></span><br><span class="line">public GameObject CreateNPC(FR_Data.CharacterData data)</span><br><span class="line">&#123;</span><br><span class="line">    GameObject obj &#x3D; new GameObject();</span><br><span class="line"></span><br><span class="line">    obj.name &#x3D; data.name;</span><br><span class="line">    SpriteRenderer spriteRenderer &#x3D; obj.AddComponent&lt;SpriteRenderer&gt;();</span><br><span class="line">    spriteRenderer.sprite &#x3D; Resources.Load&lt;Sprite&gt;(data.walkingGraphPath);</span><br><span class="line">    spriteRenderer.sortingOrder &#x3D; data.sorting;</span><br><span class="line"></span><br><span class="line">    npcs.Add(data.name, obj);</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GameObject</code> 是 Unity 所有游戏对象的基类，也就是创建一团空白的橡皮泥。<br>要用橡皮泥捏出一个形状，可以是小动物、也可以是人，也可以是建筑物……<br>它们的区别就在于形状和大小、颜色，这些就是“参数”。<br>在创建 NPC 的时候，需要传入 NPC 的行走图、位置等等参数，这样就可以根据参数“定制”出一个 NPC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Data</span><br><span class="line">&#123;</span><br><span class="line">    public class CharacterData</span><br><span class="line">    &#123;</span><br><span class="line">        public string name;</span><br><span class="line">        public string walkingGraphPath;</span><br><span class="line">        public int sorting;</span><br><span class="line">        public Vector3 localePosition;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; …… 还可以定义更加详细的参数，如缩放等等</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在游戏地图的方法中测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CreateNPC(new FR_Data.CharacterData</span><br><span class="line">            &#123;</span><br><span class="line">                name &#x3D; &quot;npc_1&quot;,</span><br><span class="line">                walkingGraphPath &#x3D; &quot;Sprites&#x2F;WalkingGraph&#x2F;xiaoxing&quot;,</span><br><span class="line">                sorting &#x3D; 300,</span><br><span class="line">                localePosition &#x3D; new Vector3(0, -1.35f),</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>通过继承得到了 <code>CreateNPC</code> 方法，传入基本的参数。<br>运行游戏测试：</p><p><img src="https://pic.imgdb.cn/item/611287ba5132923bf8e87721.jpg" alt="动态创建NPC"></p><p>可以看到左上角的节点树多了一个 <code>npc_1</code> 的节点，就是动态创建的 NPC。<br>虽然节点可以存在重名，但是需要人为的避免重名的情况，因为这样不利于查找节点。</p><p>现在，框架已经提供了一个可以动态创建 NPC 的方法，NPC 由脚本控制而不需要在地图中手动添加。<br>而且创建 NPC 的节点不依赖任何 Prefab（预制体），仅需要提供 <code>FR_Data.CharacterData</code> 参数即可。</p><p>如此一来，节省了手动创建节点的时间，而且地图中也会变得非常干净。<br>但是缺点就是没有运行游戏的话，就不知道 NPC 会出现在哪里，总体而言是利大于弊的。</p><h5 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h5><p>在调用 <code>CreateNPC</code> 创建节点的时候，已经将节点的对象添加到 <code>Dictionary&lt;string, GameObject&gt; npcs</code> 字典里了。查找地图中的某个 NPC 只需要知道 NPC 的名字就可以直接获得。</p><p>查询节点是剧情动画中必不可少的一个功能，比如控制地图中哪个 NPC 走动，只要知道名字就能直接拿到对应的 NPC，非常方便。</p><h4 id="自动加载事件"><a href="#自动加载事件" class="headerlink" title="自动加载事件"></a>自动加载事件</h4><p>事件的处理包括：</p><ul><li>事件条件的判断</li><li>事件内容的处理</li></ul><p>首先判断事件的条件是否成立，比如玩家切换到地图的时候，要自动进入一段剧情事件，然后下一次再回到这个地图，这个事件就不应该继续再执行了。也就是说，第一次切换到地图的时候，因为还没执行过事件，就执行一次，然后设置一个标志证明已经执行过事件了，下次回到这个地图，判断是否存在这个标志，如果有这个标志就不进行处理。</p><p>这个标志即事件的触发条件，比如一个开关，一个变量，都可以作为事件的条件判断依据。<br>判断依据是游戏中特有的逻辑，需要单独实现，框架只提供一个抽象类用于继承。</p><h5 id="事件触发器"><a href="#事件触发器" class="headerlink" title="事件触发器"></a>事件触发器</h5><p>事件触发器是通用的，不仅仅只是用来做地图自动触发事件的判断，它可以用在任何需要进行条件判断的地方。<br>它的作用有点类似状态机，但是实现原理与状态机不同。</p><p>触发器的作用相当于 <code>if</code> 结构，即如果……就……。对于事件的判断用 <code>if</code> 结构肯定没问题，但是游戏的剧情逻辑十分复杂，用 <code>if</code> 来处理就不实际了，通俗的讲事件触发器就是比较高级的 <code>if</code> 判断语句。</p><p>事件触发器如果用可视化的界面比喻就是 RPG Maker 系列了的“事件页”系统：</p><p><img src="https://pic.imgdb.cn/item/610fb72c5132923bf89e9528.jpg" alt="RPG Maker 事件页"></p><p>当满足左上角设置的开关、独立开关以及变量的条件，事件就会显示当前页的逻辑处理。</p><blockquote><p>RPG Maker 的事件页里还可以再添加条件判断语句来执行更加细致的条件判断，如上面的“条件分歧”。</p></blockquote><p>事件页模式有一个缺点就是只能单向处理事件。比如有 A、B、C 三个事件，首先触发器的逻辑会从最后一页开始判断，当满足 C 的条件时，就不再继续判断 B 和 A 的条件，而是开始执行 C 的逻辑处理。通常在处理完 C 的事件后，会再添加一个空白的 D 事件，在 C 事件处理完成之后就不再执行。</p><p>比如有一个宝箱，打开之后得到一些金钱，玩家打开宝箱后就要开启一个独立开关，增加一个空白页防止无限获得金钱。</p><p>这样就存在一个问题——无法返回前置的事件，因为 C 事件执行完之后就已经打开了 D 事件的开关，下次重新载入这个事件也只能执行 D 事件，无法回头执行 A、B 事件。</p><p>典型的例子就是当玩家同时完成两个任务，而任务的委托人是同一个 NPC，这样在提交完其中一个任务，另一个任务就无法提交了。<br>为了避免这种情况，我改进了这种单向的事件页模式。</p><p>添加新的命名空间 <code>FR_Trigger</code> 用来管理事件触发器类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Trigger</span><br><span class="line">&#123;</span><br><span class="line">    public class FR_TriggerManager</span><br><span class="line">    &#123;</span><br><span class="line">        protected static List&lt;FR_TriggerEventContainer&gt; containers &#x3D; new List&lt;FR_TriggerEventContainer&gt;();</span><br><span class="line">        protected static bool isHandle;</span><br><span class="line"></span><br><span class="line">        public static FR_TriggerEventContainer CreateContainer()</span><br><span class="line">        &#123;</span><br><span class="line">            FR_TriggerEventContainer container &#x3D; new FR_TriggerEventContainer();</span><br><span class="line">            containers.Add(container);</span><br><span class="line"></span><br><span class="line">            return container;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Handle()</span><br><span class="line">        &#123;</span><br><span class="line">            if (isHandle) return;</span><br><span class="line"></span><br><span class="line">            foreach (var container in containers)</span><br><span class="line">            &#123;</span><br><span class="line">                var data &#x3D; container.GetSatisfiedPage();</span><br><span class="line">                if (data !&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    isHandle &#x3D; true;</span><br><span class="line">                    data.HandleEvent();</span><br><span class="line"></span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进的事件页模式增加了容器的概念，通过 <code>CreateContainer</code> 来创建一个新的事件容器，一个事件容器就是 RPG Maker 的一个事件（包含多页），容器存在执行顺序，当满足了第一个容器之后就不会再执行其他容器事件，避免多个容器的事件被同时执行。</p><h5 id="事件容器"><a href="#事件容器" class="headerlink" title="事件容器"></a>事件容器</h5><p>事件容器存储了多页事件的触发条件以及对应的事件处理，相当于 RPG Maker 里的一个“事件”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Trigger</span><br><span class="line">&#123;</span><br><span class="line">    public class FR_TriggerEventContainer</span><br><span class="line">    &#123;</span><br><span class="line">        public List&lt;FR_TriggerEventPage&gt; pages &#x3D; new List&lt;FR_TriggerEventPage&gt;();</span><br><span class="line"></span><br><span class="line">        public FR_TriggerEventContainer AddTriggerEvent(FR_TriggerEventPage eventData)</span><br><span class="line">        &#123;</span><br><span class="line">            pages.Add(eventData);</span><br><span class="line"></span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public FR_TriggerEventPage GetSatisfiedPage()</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; pages.Count - 1; i &gt; 0; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                if (pages[i].Check())</span><br><span class="line">                &#123;</span><br><span class="line">                    return pages[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单页事件的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Trigger</span><br><span class="line">&#123;</span><br><span class="line">    public class FR_TriggerEventPage</span><br><span class="line">    &#123;</span><br><span class="line">        public List&lt;FR_TriggerConditionAbstract&gt; conditionAbstracts;</span><br><span class="line">        public FR_TriggerEvent triggerEvent;</span><br><span class="line"></span><br><span class="line">        public bool Check()</span><br><span class="line">        &#123;</span><br><span class="line">            foreach (var condition in conditionAbstracts)</span><br><span class="line">            &#123;</span><br><span class="line">                if (condition.Check() &#x3D;&#x3D; false) return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void HandleEvent()</span><br><span class="line">        &#123;</span><br><span class="line">            triggerEvent.Success();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件触发条件"><a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件</h5><p>触发条件是一个抽象类，子类只要继承此类，然后实现一个 <code>Check</code> 检验条件是否成立即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Trigger</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class FR_TriggerConditionAbstract : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public abstract bool Check();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="抽象事件类"><a href="#抽象事件类" class="headerlink" title="抽象事件类"></a>抽象事件类</h5><p>框架只需要封装一个标准的事件类，具体的处理要在游戏实际的场景编写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Trigger</span><br><span class="line">&#123;</span><br><span class="line">    public class FR_TriggerEvent : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        protected System.Action successAction;</span><br><span class="line"></span><br><span class="line">        public FR_TriggerEvent(System.Action successAction &#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            this.successAction &#x3D; successAction;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Success()</span><br><span class="line">        &#123;</span><br><span class="line">            if (successAction &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">            successAction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件页包含了成功时的处理方法以及构造函数用于给方法赋值。</p><h4 id="NPC-事件"><a href="#NPC-事件" class="headerlink" title="NPC 事件"></a>NPC 事件</h4><p>NPC 事件与地图的自动触发事件原理一样，只是触发的时机不同。<br>地图自动触发事件是在地图加载时就进行判断，而 NPC 事件则是玩家走到 NPC 面前，按下调查键才会触发的。</p><h4 id="剧情演出系统"><a href="#剧情演出系统" class="headerlink" title="剧情演出系统"></a>剧情演出系统</h4><p>一段剧情由很多个「事件动作」组成，例如控制 NPC 移动，然后弹出对话。NPC 说完话后离开场景，接着又轮到玩家控制的角色说话……诸如此类。剧情演出系统是由一连串的动作组成，这些动作的具体实现是子类要做的事情，框架只需要提供一个可以触发剧情演出的管理器即可。</p><p>关于剧情演出系统，在上一篇文章已经实现了：<a href="https://huotuyouxi.com/2021/08/06/game-maker-001/">如何优雅的控制游戏中的剧情事件？</a></p><p>剧情演出系统由三个部分构成：</p><ul><li>剧情演出管理器</li><li>事件容器</li><li>事件动作</li></ul><h5 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h5><p>管理器负责调用事件容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public class EventManager : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public static EventContainer eventContainer;</span><br><span class="line"></span><br><span class="line">        public static EventContainer StartNewQueue()</span><br><span class="line">        &#123;</span><br><span class="line">            eventContainer &#x3D; new EventContainer();</span><br><span class="line">            return eventContainer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件容器-1"><a href="#事件容器-1" class="headerlink" title="事件容器"></a>事件容器</h5><p>事件容器负责存储事件动作以及执行当前动作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public class EventContainer</span><br><span class="line">    &#123;</span><br><span class="line">        public Queue&lt;EventActionAbstract&gt; queue &#x3D; new Queue&lt;EventActionAbstract&gt;();</span><br><span class="line"></span><br><span class="line">        public EventContainer Append(EventActionAbstract eventAction)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.Enqueue(eventAction);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void StartEvent()</span><br><span class="line">        &#123;</span><br><span class="line">            if (queue.Count &#x3D;&#x3D; 0) return;</span><br><span class="line"></span><br><span class="line">            var current &#x3D; queue.Dequeue();</span><br><span class="line">            current.Handle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象事件动作"><a href="#抽象事件动作" class="headerlink" title="抽象事件动作"></a>抽象事件动作</h5><p>最后抽象出事件动作，提供一个父类让游戏的实际使用场景继承：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class EventActionAbstract</span><br><span class="line">    &#123;</span><br><span class="line">        protected void EventEnd()</span><br><span class="line">        &#123;</span><br><span class="line">            FR_Event.EventManager.eventContainer.StartEvent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public abstract void Handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="文件规范"><a href="#文件规范" class="headerlink" title="文件规范"></a>文件规范</h5><p>上一篇文章是把事件动作的具体实现放到框架的文件夹里：</p><p><img src="https://pic.imgdb.cn/item/610f99965132923bf8500b27.jpg" alt="事件动作所在目录"></p><p>但是为了与游戏逻辑解耦，需要移除这个文件夹，并放到游戏的脚本目录里：</p><p><img src="https://pic.imgdb.cn/item/610f9a015132923bf8514a7a.jpg" alt="新建存放事件动作的文件夹"></p><p>框架的代码不能包含当前游戏的相关逻辑，这样以后才可以抽取出来用在不同的游戏里。</p><p>完成之后，剧情的演出系统就可以通过如下这种链式调用来组织一段剧情的演出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FR_Event.EventManager</span><br><span class="line">         .StartNewQueue()</span><br><span class="line">         .Append(new DialogAction(&quot;00_test&#x2F;01_text&quot;))</span><br><span class="line">         .Append(new DialogAction(&quot;00_test&#x2F;02_text&quot;))</span><br><span class="line">         .StartEvent();</span><br></pre></td></tr></table></figure><h2 id="场景系统结构图"><a href="#场景系统结构图" class="headerlink" title="场景系统结构图"></a>场景系统结构图</h2><p>大致的组织结构图如下：</p><p><img src="https://pic.imgdb.cn/item/6112904f5132923bf8fccccd.jpg" alt="场景系统结构图"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>目前的框架只是一个基本的雏形，而且后面的大都是理论没有实际测试。我打算把原来做好的部分逐步替换为新框架，根据实际使用的情况来完善这个框架。</p><p>PS.这里发现了自己命名也是不规范的，加上 <code>namespace</code>（命名空间）后，文件和类的名字就不用再加上 <code>FR_</code> 的前缀了，但是因为担心和游戏实际代码的类混淆，所以有时候会加上前缀，有时候又忘了加……总的来说，就算是同一个人写的代码，要保持相同的风格也是不靠谱的……</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于未来的开发计划</title>
      <link href="/2021/08/07/future-001/"/>
      <url>/2021/08/07/future-001/</url>
      
        <content type="html"><![CDATA[<h2 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h2><p>这个月要开始优化游戏的系统以及美术风格。<br>剧情方面应该不会有什么进度，不过如果顺利完成了，会发布一个优化版的 Demo。</p><p>《名为怪物的游戏》是我和 Cee 制作的第一个长篇 RPG 类型的游戏。<br>万丈高楼先打地基……目前的游戏系统和美术风格都不利于长期更新。</p><h3 id="美术风格的不妥之处"><a href="#美术风格的不妥之处" class="headerlink" title="美术风格的不妥之处"></a>美术风格的不妥之处</h3><p>先说美术风格，最初我的想法是一款手绘风的游戏，但是 Cee 把场景那些用 PS 制作出来了。<br>虽然立绘和行走图都是手绘的，为了保证整体的统一风格，场景也应该使用手绘风的。<br>至于 UI 使用 PS 制作就没什么问题了。</p><h3 id="需要一个易于维护的游戏框架"><a href="#需要一个易于维护的游戏框架" class="headerlink" title="需要一个易于维护的游戏框架"></a>需要一个易于维护的游戏框架</h3><p>接着是游戏的系统，虽然最初用 RM 制作了几款游戏，但是实际的游戏开发（代码方面）却是半路出家的。<br>再加上本职也不是游戏开发，所以前期试着摸索完成了一个简单的游戏架构。<br>但还称不上是一个游戏框架，因为基本是“面向过程”开发的，没有一套完整的框架来实现方便的调用。</p><p>游戏是怎么开发出来的对玩家并不重要。<br>但是对于游戏开发者而言，存在效率的区别。<br>就好比一个是纯人工的工厂和一个设计好流水线用机器协助工人的工厂。<br>我们需要一套游戏框架（流水线）来帮助开发游戏。</p><p>对于开发者而言，面向过程的开发是很累的，编码量大且后期维护难度很高。<br>要更新一个长篇游戏，就要打好基础，制作出一套易于编写的游戏框架。</p><p>例如：场景的调用、事件的处理等等。<br>如果是面向过程全部用 <code>if-else</code> 结构，可能坚持不了多久就崩溃了。</p><p>但如果设计好流水线（游戏框架）来自动处理它们就不一样了。<br>参考昨天写的一篇文档：<a href="https://huotuyouxi.com/2021/08/06/game-maker-001/">如何优雅的控制游戏中的剧情事件？</a></p><p>在优化之前，剧情事件的处理需要全靠手写，冗余的代码很多。<br>优化之后，只要提前写好各种事件的动作，只需要直接调用一条指令就可以自动处理了。</p><blockquote><p>编程的艺术就是少写代码。</p></blockquote><p>原先用 cocos creator 制作的时候也是推翻了重来，反反复复加起来也有 4-5 次了。<br>一直在重构，如同背英语单词，永远停留在第一页一样……</p><p>这是现在比较尴尬的情况，一直在修改弄好的东西进度就会停滞不前。<br>但是这是没办法避免的事，因为我们没有在游戏公司上班的经验，只能自己慢慢摸索。</p><blockquote><p>在公司上班，常说的一句“能跑就好，别随便重构”，职场这么做是没错，因为职场上的项目是由许多人同时进行的，如果随便重构导致程序无法正常运行就会牵连到整个项目；我们是独立工作室，程序方面只有我一个人在维护，为了提升开发效率不能随便敷衍。</p></blockquote><p>个人的性格也比较浮躁，急于求成，学知识的时候都是囫囵吞枣，虽然能很快的上手，但是却学不精。<br>正好趁这个机会沉下心来，读点书，慢慢成长吧。</p><h2 id="本月目标"><a href="#本月目标" class="headerlink" title="本月目标"></a>本月目标</h2><p>这个月可能不会在剧情方面有什么进度。<br>我们将会在 3 周的时间进行游戏的优化。<br>在完成优化后会发布一个重制版的 Demo。</p><h3 id="美术优化"><a href="#美术优化" class="headerlink" title="美术优化"></a>美术优化</h3><p>因为鸽了太久，为了赶进度，现在的测试版用的都是临时的美术素材。<br>比如立绘和行走图还有白边没去掉，NPC 也没有行走图动画等等。<br>从现在开始，这个月将会优化这些问题。</p><ul><li>替换一些非原创的场景素材，改为手绘风</li><li>行走图、立绘去掉不规则的线和白边</li><li>美术风格统一标准，为了保证能够完成，只要达到我们自定的“及格线”即可</li><li>减少美术素材的需求量，降低 Cee 的负担</li></ul><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><p>游戏的系统也是赶工制作出来的。<br>现在要考虑以长期更新为目标，因此需要打好地基，编写一个帮助我开发的游戏框架（流水线）。</p><ul><li>原来的系统重构，编写游戏框架保证后期更新</li><li>重制已完成的游戏逻辑，将全部采用新框架的模式书写</li></ul>]]></content>
      
      
      <categories>
          
          <category> 关于我们 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity小技巧】如何优雅的控制游戏中的剧情事件？</title>
      <link href="/2021/08/06/game-maker-001/"/>
      <url>/2021/08/06/game-maker-001/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次尝试更新一篇技术型的文档，目的也是为了记录自己学习的过程。<br>游戏开发与普通开发不一样的地方在于逻辑的处理比较复杂。<br>如果没有一个良好的架构设计，处理游戏逻辑的代码就会看起来乱糟糟的。</p><h2 id="糟糕的代码"><a href="#糟糕的代码" class="headerlink" title="糟糕的代码"></a>糟糕的代码</h2><p>这是在写这篇文档之前，《名为怪物的游戏》中处理场景事件的代码。<br>在火车逃亡篇中，有这样一段剧情：</p><p><img src="https://files.catbox.moe/f20zr5.gif" alt="巴古与神秘人的交易"></p><p>这个剧情事件一共分为如下几个步骤：</p><ul><li>神秘人走过来</li><li>开始第一段对话</li><li>神秘人走到旁边的椅子</li><li>开始第二段对话</li></ul><p>这是游戏剧情中很常见的操作，控制场景 NPC 执行移动事件，然后触发对话。<br>但是要控制这样一连串的行为，用代码如何实现呢？</p><p>在通常情况下，代码是从上至下执行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debug.Log(&quot;aa&quot;);</span><br><span class="line">Debug.Log(&quot;bb&quot;);</span><br></pre></td></tr></table></figure><p>比如上述的代码片段，首先打印出 <code>aa</code>，然后才打印出 <code>bb</code>；<br>这是由于打印 <code>aa</code> 的语句写在前面，所以先执行了，如果交换一下顺序，输出的顺序也会跟着改变。</p><p>这也是程序开发中很寻常的书写方法，那么如果游戏开发也用这种方法，会怎么样呢？</p><p>下面是我用来实现上述剧情事件的代码。</p><h3 id="神秘人走过来"><a href="#神秘人走过来" class="headerlink" title="神秘人走过来"></a>神秘人走过来</h3><p>由于神秘人最开始是看不见的，所以把神秘人放到屏幕外面，不仅是神秘人，还有巴古以及后续登场的小喽喽都放在屏幕外面（玩家看不见的地方）。</p><p><img src="https://files.catbox.moe/s2iepm.jpg" alt="场景中的NPC"></p><p>当玩家进入当前场景的时候，事件就开始执行了。<br>首先是设置登场 NPC 的坐标和朝向。</p><p>例如，下面是控制神秘人移动的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MapManager.SetTargetLocalPosition(npcMysticMan, 7.08f, -0.62f, Direct.LEFT);</span><br><span class="line"></span><br><span class="line">iTween.MoveTo(npcMysticMan, new Hashtable</span><br><span class="line">&#123;</span><br><span class="line">    &#123; &quot;x&quot;, 1.37f &#125;,</span><br><span class="line">    &#123; &quot;isLocal&quot;, true &#125;,</span><br><span class="line">    &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">    &#123; &quot;onComplete&quot;, &quot;Trade&quot; &#125;,</span><br><span class="line">    &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">    &#123; &quot;time&quot;, 2f &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码使用了第三方插件 Itween 来控制目标的移动。<br>因为没有行走图只是单纯的移动坐标，所以角色看起来像是飘过来。</p><p><img src="https://files.catbox.moe/lesfxz.gif" alt="神秘人移动事件"></p><h3 id="触发第一段对话"><a href="#触发第一段对话" class="headerlink" title="触发第一段对话"></a>触发第一段对话</h3><p>神秘人移动结束之后，就要触发第一段对话。<br>这里需要使用 Itween 插件的回调方法 <code>onComplete</code> 来执行。</p><p>Itween 插件可以很方便的控制物体移动，并且在移动结束后执行设置好的回调方法。<br>编写移动结束时的回调方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Trade()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.CallDialog(&quot;06_bagu_room&#x2F;02_trade&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，神秘人移动到指定位置后就会触发第一段对话了，如下。</p><p><img src="https://files.catbox.moe/d230tx.gif" alt="第一段对话"></p><h3 id="神秘人移动到椅子那边"><a href="#神秘人移动到椅子那边" class="headerlink" title="神秘人移动到椅子那边"></a>神秘人移动到椅子那边</h3><p>对话结束后，神秘人要移动到椅子那边。<br>这里用到我自己设计的对话完成后回调的方法。</p><p>修改对话方法，添加移动事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void Trade()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.CallDialog(&quot;06_bagu_room&#x2F;02_trade&quot;, delegate</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.MoveTo(npcMysticMan, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;x&quot;, -4.71f &#125;,</span><br><span class="line">            &#123; &quot;isLocal&quot;, true &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onComplete&quot;, &quot;MysticManLeave&quot; &#125;,</span><br><span class="line">            &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, 2f &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="触发第二段对话"><a href="#触发第二段对话" class="headerlink" title="触发第二段对话"></a>触发第二段对话</h3><p>这里与上面的移动事件同理，在神秘人移动结束后调用 <code>MysticManLeave</code> 方法来执行第二段对话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void MysticManLeave()</span><br><span class="line">&#123;</span><br><span class="line">    MapManager.ChangeDirect(npcMysticMan, Direct.RIGHT);</span><br><span class="line">    MapManager.ChangeDirect(npcBaGu, Direct.LEFT);</span><br><span class="line">    WindowManager.CallDialog(&quot;06_bagu_room&#x2F;03_sitdown&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成后的代码"><a href="#完成后的代码" class="headerlink" title="完成后的代码"></a>完成后的代码</h3><p>至此，上面的小剧情事件已经用代码实现了。<br>回过来看看全部的代码是怎样的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private void Event_001()</span><br><span class="line">&#123;</span><br><span class="line">     MapManager.SetTargetLocalPosition(npcMysticMan, 7.08f, -0.62f, Direct.LEFT);</span><br><span class="line"></span><br><span class="line">    iTween.MoveTo(npcMysticMan, new Hashtable</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; &quot;x&quot;, 1.37f &#125;,</span><br><span class="line">        &#123; &quot;isLocal&quot;, true &#125;,</span><br><span class="line">        &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">        &#123; &quot;onComplete&quot;, &quot;Trade&quot; &#125;,</span><br><span class="line">        &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">        &#123; &quot;time&quot;, 2f &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Trade()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.CallDialog(&quot;06_bagu_room&#x2F;02_trade&quot;, delegate</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.MoveTo(npcMysticMan, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;x&quot;, -4.71f &#125;,</span><br><span class="line">            &#123; &quot;isLocal&quot;, true &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onComplete&quot;, &quot;MysticManLeave&quot; &#125;,</span><br><span class="line">            &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, 2f &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void MysticManLeave()</span><br><span class="line">&#123;</span><br><span class="line">    MapManager.ChangeDirect(npcMysticMan, Direct.RIGHT);</span><br><span class="line">    MapManager.ChangeDirect(npcBaGu, Direct.LEFT);</span><br><span class="line">    WindowManager.CallDialog(&quot;06_bagu_room&#x2F;03_sitdown&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来每个事件分明，一个方法控制一个动作，好像没有什么大问题。<br>但是，从逻辑上来讲，这几个方法的关系不是很明确，只是一直在用回调函数调用下一个事件而已。</p><p>很明显这种方法的弊端很大，不仅没有明确的关联关系，而且存在重复的代码，如控制神秘人移动事件。<br>这种即属于“面向过程”的编程方法，后期维护很不方便，写起来也很烦躁。<br>上面还只是不到 1 分钟的剧情，如果是更长的剧情，代码随随便便就要写上几千行。</p><p>这不仅是代码美不美观的问题，而且还严重影响效率，编写冗余的代码对程序员的身心也不友好。<br>为了保证后续的剧情事件能够「优雅」的开发，需要重制原来的剧情处理事件。</p><h2 id="数据结构与设计模式"><a href="#数据结构与设计模式" class="headerlink" title="数据结构与设计模式"></a>数据结构与设计模式</h2><p>这两个名词是大学的时候最害怕的……<br>数据结构就是定义数据是如何进行排列的，比如最简单的就是数组。</p><p>数据保存在内存，内存是由一大块很大的空间构成。<br>于是数据就要保存在空间的其中一处，也就是地址。<br>根据一组数据在地址中存在的位置，分成数组和链表两种数据结构。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>1、2、3、4、5，这样按顺序排列，在内存中占用一段连续的地址。</p><p><img src="https://files.catbox.moe/xp9tss.png" alt="数组在内存中的结构"></p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表就是一个结构体，也可以是一个类，一共有两个字段，一个是数据，一个是保存下一个数据的地址。<br>用结构体或者类都可以作为链表的数据结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public struct Data &#123;</span><br><span class="line">    int value;</span><br><span class="line">    Data* next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是上面这种结构，<code>Data*</code> 是指向 <code>Data</code> 数据地址的指针。</p><blockquote><p>注意：某启蒙 C 语言书本上写的“指针就是地址，地址就是指针”，个人以为这种说法不准确，因为这两个是不同的概念，打个比方，你给了我一张纸条，上面写着你家地址，我通过纸条就可以找到你家的位置，那么在这里——纸条就是指针，你家的地址就是地址，可以说这张纸条就是你家吗？很明显不能。指针是一种数据类型，它保存的是某种数据在内存中的地址，通过指针可以找到对应数据的地址。</p></blockquote><p>链表数据的其中一个字段保存下一个数据的地址，如下。</p><p><img src="https://files.catbox.moe/mwunmc.png" alt="链表结构"></p><h3 id="数据结构有什么用？"><a href="#数据结构有什么用？" class="headerlink" title="数据结构有什么用？"></a>数据结构有什么用？</h3><p>其实这就是学习的最大敌人——不知道学了有什么用。<br>大学的时候，老师也从来不会告诉你学了知识能用在哪些地方。<br>对着这些枯燥无味的知识，而且还不知道以后能不能用的上，自然就没兴趣学下去了。</p><p>但是在经历了几年的开发经验之后，发现这些数据结构在进行系统设计和框架设计非常有用。<br>（当然，如果一直在从事普通的开发岗，基本没机会接触到这些，业务全部都是用别人写好现成的，自然也就学而无用了。）</p><p>看下面一组例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string a &#x3D; &quot;aaa&quot;;</span><br><span class="line">string b &#x3D; &quot;bbb&quot;;</span><br></pre></td></tr></table></figure><p>这是两个变量，不能叫做数据结构。<br>如果把它们放到一个数组里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string items &#x3D; new string &#123; &quot;aaa&quot;, &quot;bbb&quot; &#125;;</span><br><span class="line"></span><br><span class="line">Debug.Log(items[0]);</span><br><span class="line">Debug.Log(items[1]);</span><br></pre></td></tr></table></figure><p>这样就是一个数据结构，因为他们是在一起的变量。<br>也就是说，单个的变量不能叫做数据结构，而需要一个特殊的关系把它们连接在一起才能叫做数据结构。</p><p>数组可以通过索引快速找到指定元素，如果知道数组的下标，查找数据的复杂程度是 O(1)，也就是瞬间就找到的意思。<br>链表没有下标的概念，查找数据只能一个个对比，找到对应的值才能返回结果，复杂度是 O(n)，也就是最坏的情况下，有多少个数据就要对比多少次。</p><blockquote><p>如果不知道下标，只知道值，即使是数组也只能遍历对比数据，复杂度也是 O(n)。</p></blockquote><p>单个的变量用途十分单一，但是把它们连接在一起功能就变得十分强大了。<br>不仅可以用来搜索数据，还可以定义某些具有特殊功能的结构。</p><h3 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h3><p>队列和栈是比较常见的数据结构，其原理就是利用数组或者链表实现。<br>队列是“先进先出”的一种结构，而栈却相反，即“先进反而后出”。</p><p>关于栈的用处，之前在设计《名为怪物的游戏》中菜单系统就有介绍。<br>队列和栈如何实现就不科普了，感兴趣的可以自行搜索。</p><p>总之，所有的数据结构基本都可以由数组和链表来实现。<br>除了队列和栈，还有堆（树形结构），树型结构又分成很多种，比如二叉树、B 树、B+ 树等等（咱也没深入了解，有兴趣可以自己查）。</p><p>MySQL 的索引就是利用树的结构实现的。</p><blockquote><p>如果当初老师能把数据结构实际的用途告诉我们，那我们应该会比较有兴趣学下去。</p></blockquote><h3 id="设计模式是什么？"><a href="#设计模式是什么？" class="headerlink" title="设计模式是什么？"></a>设计模式是什么？</h3><p>普通的程序员在上班过程中几乎接触不到设计模式，因为都是用别人设计好的。</p><blockquote><p>顶多也就是接触到单例模式、工厂模式那些。</p></blockquote><p>只有在设计框架和系统结构的时候，设计模式才能大显身手。<br>这里暂时用不到，在游戏的开发中设计模式也是很重要的。</p><h2 id="剧情事件优化"><a href="#剧情事件优化" class="headerlink" title="剧情事件优化"></a>剧情事件优化</h2><p>上面讲了那么多，全部都是为了优化剧情事件做的铺垫。<br>回到开头剧情的场景：</p><ul><li>神秘人走过来</li><li>开始第一段对话</li><li>神秘人走到旁边的椅子</li><li>开始第二段对话</li></ul><p>一段剧情可以分成多个部分，每一个部分就可以看做一个零散的“变量”，把它们组合在一起就是一个数据结构。</p><p>剧情的事件执行顺序是一个一个来的，比如先执行神秘人走过来的事件，然后开始第一段对话……以此类推。<br>换句话说，当第一个事件还没执行完成，后面的事件都得“等着”，直到第一个事件完事了，才能轮到下一个事件执行。</p><p>上面的场景描述……已经在指名道姓了，说的就是你——队列。<br>先加入的事件，最先处理，也就是在说队列的特点。</p><p><code>c#</code> 自带队列数据类型 <code>Queue</code>，不用自己实现。<br><code>Enqueue</code> 方法将一个数据插入队列的尾部，<code>Dequeue</code> 方法从队列头部取出一个数据并将其从队列删除。</p><p>利用上述两个方法即可轻松添加和取数据。</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>当一个类的返回值为对象时，就可以实现链式调用。<br>最常见的方法就是一个类返回自身，就可以无限调用自己内部的方法了。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Link &#123;</span><br><span class="line"></span><br><span class="line">    public Link sayHello() &#123;</span><br><span class="line">        Debug.Log(&quot;hello&quot;);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Link link &#x3D; new Link();</span><br><span class="line">link.sayHello().sayHello().sayHello();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码可以无限调用 <code>sayHello</code> 方法，因为调用完这个方法返回了类自身。<br>链式调用属于比较美观的写法，对于代码整洁有很大的帮助。</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>首先需要定义一个用来处理剧情流程的事件系统，其实就是一个简单的结构。</p><p>第一个类是事件容器，用来保存和处理容器内事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public class EventContainer</span><br><span class="line">    &#123;</span><br><span class="line">        public Queue&lt;EventActionAbstract&gt; queue &#x3D; new Queue&lt;EventActionAbstract&gt;();</span><br><span class="line"></span><br><span class="line">        public EventContainer Append(EventActionAbstract eventAction)</span><br><span class="line">        &#123;</span><br><span class="line">            queue.Enqueue(eventAction);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void StartEvent()</span><br><span class="line">        &#123;</span><br><span class="line">            if (queue.Count &#x3D;&#x3D; 0) return;</span><br><span class="line"></span><br><span class="line">            var current &#x3D; queue.Dequeue();</span><br><span class="line">            current.Handle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为了规范，给类加上了命名空间 <code>namespace FR_Event</code>。<br>命名空间是为了避免重名类的冲突，因为 Unity 在启动时就会加载所有类文件。<br>如果有同名的类就会报错，所以给它加上一个命名空间 <code>FR_Event</code>。<br>这样就可以用 <code>FR_Event.EventContainer</code> 与其他类区分开来。</p><p>面向对象有个“开放-封闭”原作，即隐藏无关的内容。<br>在这里，要调用事件，可以增加一个 <code>Manager</code> 类来间接调用事件容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public class EventManager : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        public static EventContainer eventContainer;</span><br><span class="line"></span><br><span class="line">        public static EventContainer StartNewQueue()</span><br><span class="line">        &#123;</span><br><span class="line">            eventContainer &#x3D; new EventContainer();</span><br><span class="line">            return eventContainer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不用每次都 <code>new</code> 一个 <code>EventContainer</code>。</p><p>容器内接收 <code>EventActionAbstract</code> 类型的「事件动作」。<br>每个事件都要继承这个抽象类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    public abstract class EventActionAbstract</span><br><span class="line">    &#123;</span><br><span class="line">        protected void EventEnd()</span><br><span class="line">        &#123;</span><br><span class="line">            FR_Event.EventManager.eventContainer.StartEvent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public abstract void Handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类只要有一个 <code>Handle</code>（处理动作的方法），以及一个 <code>EventEnd</code> 事件结束方法。<br><code>Handle</code> 方法要在子类进行重写，因为每个事件都不一样。</p><p>接着创建一个对话事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">namespace FR_Event</span><br><span class="line">&#123;</span><br><span class="line">    namespace EventAction</span><br><span class="line">    &#123;</span><br><span class="line">        public class DialogAction : EventActionAbstract</span><br><span class="line">        &#123;</span><br><span class="line">            private string textPath;</span><br><span class="line"></span><br><span class="line">            public DialogAction(string textPath)</span><br><span class="line">            &#123;</span><br><span class="line">                this.textPath &#x3D; textPath;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public override void Handle()</span><br><span class="line">            &#123;</span><br><span class="line">                WindowManager.CallDialog(textPath, EventEnd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又添加了一层命名空间 <code>EventAction</code>，比较规范的是每一层文件夹就创建一个。</p><p><img src="https://files.catbox.moe/bm3a6u.jpg" alt="文件结构"></p><p>接着创建两个测试对话文本：</p><p><img src="https://files.catbox.moe/wfy3jw.jpg" alt="测试文本"></p><p>然后开始“优雅”的实现剧情对话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FR_Event.EventManager</span><br><span class="line">          .StartNewQueue()</span><br><span class="line">          .Append(new FR_Event.EventAction.DialogAction(&quot;00_test&#x2F;01_text&quot;))</span><br><span class="line">          .Append(new FR_Event.EventAction.DialogAction(&quot;00_test&#x2F;02_text&quot;))</span><br><span class="line">          .StartEvent();</span><br></pre></td></tr></table></figure><p>看起来好多了！进游戏测试一下。</p><p><img src="https://files.catbox.moe/jc0hvw.gif" alt="对话测试"></p><p>接下来只要再编写等待事件、移动事件、增减道具事件、淡入淡出事件……</p><p>这样完全可以用链式调用实现整个剧情事件！</p><p>参考的完整版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FR_Event.EventManager</span><br><span class="line">         .StartNewQueue()</span><br><span class="line">         .Append(new FR_Event.EventAction.MoveAction(target, new Vector3(1f, 1f), 1f) &#x2F;&#x2F; 在1秒的时间移动到(1,1)位置</span><br><span class="line">         .Append(new FR_Event.EventAction.WaitAction(1f)) &#x2F;&#x2F; 等待1秒</span><br><span class="line">         .Append(new FR_Event.EventAction.DialogAction(&quot;00_test&#x2F;02_text&quot;)) &#x2F;&#x2F; 执行对话</span><br><span class="line">         .Append(new FR_Event.EventAction.FadeOutAction(2f)) &#x2F;&#x2F; 在2秒内淡出屏幕</span><br><span class="line">         .Append(new FR_Event.EventAction.GoMapAction(&quot;map_name&quot;)) &#x2F;&#x2F; 移动到某个地图</span><br><span class="line">         .StartEvent();</span><br></pre></td></tr></table></figure><p>只要编写好以下事件动作：</p><ul><li>MoveAction：移动事件</li><li>WaitAction：等待事件</li><li>DialogAction：对话事件</li><li>FadeOutAction：淡出事件</li><li>GoMapAction：场景移动事件</li><li>……更多事件动作</li></ul><p>无论想要实现什么事件，只要继承 <code>EventActionAbstract</code> 将其用 <code>Append</code> 方法加入到事件容器中就可以优雅的执行了！</p><p>最后，如果觉得命名空间有点碍事，可以在顶部用 <code>using</code> 关键词引入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using FR_Event.EventAction;</span><br><span class="line"></span><br><span class="line">FR_Event.EventManager</span><br><span class="line">          .StartNewQueue()</span><br><span class="line">          .Append(new DialogAction(&quot;00_test&#x2F;01_text&quot;))</span><br><span class="line">          .Append(new DialogAction(&quot;00_test&#x2F;02_text&quot;))</span><br><span class="line">          .StartEvent();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如此一来，代码就更加简洁了！</p><blockquote><p>有了这个剧情事件处理系统，终于解放双手了！</p></blockquote><p>接下来就可以开开心心的写代码了 ♪(^∇^*)<br>跟乱糟糟的代码 say bye bye ~</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>关于游戏剧情的编辑还有很多种方法，上面还是脱离不了代码层面。</p><p>也有大佬用 Unity 设计了一套剧情编辑器：</p><p><img src="https://files.catbox.moe/t9znpv.jpg" alt="剧情编辑器"></p><p>还有这种：</p><p><img src="https://files.catbox.moe/c8yrrs.jpg" alt="剧情编辑器2"></p><p>看起来密密麻麻，密集恐惧症可能都犯了。<br>对于这种用非代码实现的方式，其实才是最好的方法。<br>因为人为手写代码很容易出错，但如果设计好程序，用程序自动生成就可以避免人为写出的 BUG 了。</p><p>除此之外，用文本来写特殊指令的方法也是可以的，总的来说就是把数据转化为指令，可视化的界面目前对我来说难度太高了，我们游戏的体量也没必要专门设计一个制作剧情的工具。</p><p>一个程序员写太多代码不是什么值得夸耀的事，反而是能不写代码就实现功能才顶呱噶。</p><blockquote><p>程序员的最高境界就是“无码”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》v1.0.2版本发布</title>
      <link href="/2021/08/01/monster-game-version-102/"/>
      <url>/2021/08/01/monster-game-version-102/</url>
      
        <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>本次更新至版本：V1.0.2<br>虽然看起来版本号挺大的，不过这是根据章节号来制定的，第一章就是 V1.x.x，第二章就是 V2.x.x，这样方便以后排查问题和让玩家知道更新到哪了，比如某个用户如果不清楚自己玩的版本更新到哪了，只要看一下版本号就知道了。</p><p>本地下载：<a href="https://files.catbox.moe/ftrwcx.zip">点击下载</a><br>百度云：<a href="https://pan.baidu.com/s/1Vev1D5Ji16hxHABZTjAoKg">点击下载</a> 提取码：n4gi</p><h2 id="更新概述"><a href="#更新概述" class="headerlink" title="更新概述"></a>更新概述</h2><p>一些基础系统虽然已经完成了，但在本次更新的版本中没有出现。（一些 BUG 没处理）</p><p>除此之外修复了一些小问题，剧情方面更新到第一章的「逃亡篇」结束。</p><h3 id="基本战斗系统"><a href="#基本战斗系统" class="headerlink" title="基本战斗系统"></a>基本战斗系统</h3><p>包括战斗、角色状态、血条等基础功能。</p><p><img src="https://i.loli.net/2021/07/03/aqoV6YeRLXO1J8b.gif" alt="战斗系统演示"></p><h3 id="存档系统"><a href="#存档系统" class="headerlink" title="存档系统"></a>存档系统</h3><p>存档系统已经基本完成了，可以实现写入数据到本地文件。</p><p><img src="https://files.catbox.moe/s2uyll.jpg" alt="存档系统"></p><p><img src="https://pic.imgdb.cn/item/60e7f75e5132923bf8060305.gif" alt="存档操作"></p><h3 id="角色属性界面"><a href="#角色属性界面" class="headerlink" title="角色属性界面"></a>角色属性界面</h3><p>主菜单部分完成了角色属性界面的 UI 及数据展示。</p><p><img src="https://pic.imgdb.cn/item/60e427db5132923bf8790f4c.jpg" alt="角色属性界面"></p><h3 id="装备界面"><a href="#装备界面" class="headerlink" title="装备界面"></a>装备界面</h3><p>主菜单中的装备界面也完成了 UI 部分，<br>因为需要实现装备系统才能完成更换装备的功能，<br>所以这边就只能等装备系统完成之后再处理了。</p><p><img src="https://pic.imgdb.cn/item/60e429225132923bf87e8c39.jpg" alt="装备界面UI"></p><h3 id="数据库设定"><a href="#数据库设定" class="headerlink" title="数据库设定"></a>数据库设定</h3><p>除此之外就是玩家看不到的部分了。<br>比如定义好角色的属性结构以及数据的录入等等。</p><h3 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h3><p>一些问题的修复。</p><ul><li>菜单系统重做，修复多级菜单控制权问题</li><li>修复在场景中触碰多个事件按 X 键会导致卡死问题</li></ul><h2 id="新角色登场"><a href="#新角色登场" class="headerlink" title="新角色登场"></a>新角色登场</h2><p>本次更新增加了三名新角色。</p><h3 id="Nameless"><a href="#Nameless" class="headerlink" title="Nameless"></a>Nameless</h3><p>本作的女主角之一。<br>被邪恶教会——「影子教团」判为“异端”的存在。</p><p><img src="https://pic.imgdb.cn/item/6105e11a5132923bf8054511.jpg" alt="nameless"></p><h3 id="神秘人"><a href="#神秘人" class="headerlink" title="神秘人"></a>神秘人</h3><p>与邪恶教会进行秘密交易的人，不清楚其真正面目。<br>在交易完成后会说一些多余的话，性格看上去很随意。</p><p><img src="https://pic.imgdb.cn/item/6105e1735132923bf8065533.jpg" alt="神秘人"></p><h3 id="巴古（教会干部）"><a href="#巴古（教会干部）" class="headerlink" title="巴古（教会干部）"></a>巴古（教会干部）</h3><p>影之教团干部级的人物，负责押送 Nameless 到处刑场。<br>似乎有着收集“眼睛”的癖好，是个看起来很阴险谨慎的老头。</p><p><img src="https://pic.imgdb.cn/item/6105e1cc5132923bf807632b.jpg" alt="巴古"></p><h2 id="结尾部分"><a href="#结尾部分" class="headerlink" title="结尾部分"></a>结尾部分</h2><p>好了，本次更新预告就到此结束了。<br>本来是打算加入一场教学战斗的，但是因为后面的场景和目前的战斗系统都不是很满意，所以打算回炉重造，等下一个版本更新再加入。</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏下载 </tag>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》ver1.0.0（后半部分）</title>
      <link href="/2021/07/01/monster-game-version-100-1/"/>
      <url>/2021/07/01/monster-game-version-100-1/</url>
      
        <content type="html"><![CDATA[<h2 id="7月计划"><a href="#7月计划" class="headerlink" title="7月计划"></a>7月计划</h2><p>本月将完成第一章的剧情并且在 8 月 1 日发布测试版。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><h3 id="7月1日"><a href="#7月1日" class="headerlink" title="7月1日"></a>7月1日</h3><ul><li>战斗状态窗口更新角色数据</li><li>战斗状态的 HP/SP 条</li><li>血条/攻击条/SP 条重置</li></ul><p><strong>血条重置</strong><br>设计血条的时候没计划好，一部分是 UI（角色状态），一部分是精灵（敌人血条）。<br>然后现在要把这两个整合在一起，就重写了基本方法，兼容两种的存在。<br>都是因为没计划好的锅，一顿折腾血条系统竟然重写了三遍……</p><p><strong>记录一个小问题</strong><br>定义血条的父类 <code>SpriteBar</code>，子类攻击条 <code>SpriteAttackBar</code> 继承 <code>SpriteBar</code>。<br>在角色类中需要创建攻击条，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected SpriteBar atkBar;</span><br><span class="line"></span><br><span class="line">private void CreateAtkBar()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject atkBarObj &#x3D; GameManager.InstantiatePrefab(&quot;Prefabs&#x2F;UI&#x2F;SpriteAttackBar&quot;, transform);</span><br><span class="line">    atkBarObj.transform.localPosition &#x3D; new Vector3(-0.33f, 1.2f);</span><br><span class="line"></span><br><span class="line">    atkBar &#x3D; atkBarObj.GetComponent&lt;SpriteAttackBar&gt;();</span><br><span class="line"></span><br><span class="line">    float initValue &#x3D; GetInitAttackBar();</span><br><span class="line">    float maxValue &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    atkBar.Init(initValue, 0, maxValue);</span><br><span class="line">    atkBar.SetCharacter(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SetCharacter</code> 方法是在 <code>SpriteAttackBar</code> 类中定义的，但是这里却死活调不出来。<br>刚开始还以为是文件没保存成功或者 IDE 编译失败了……<br>尝试了各种方法之后恍然大悟，原来变量定义的类型是 <code>SpriteBar</code>（也就是父类），因此在获取对象的组件时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atkBar &#x3D; atkBarObj.GetComponent&lt;SpriteAttackBar&gt;();</span><br></pre></td></tr></table></figure><p>这里其实就是类的「多态」，变量 <code>atkBar</code> 是父类 <code>SpriteBar</code> 类型，自然无法调用子类特有方法。<br>只要修改一下定义的变量类型就解决了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected SpriteAttackBar atkBar;</span><br></pre></td></tr></table></figure><p>本来想偷懒少打几行代码，结果犯了低级错误……真不应该。</p><h3 id="7月2日"><a href="#7月2日" class="headerlink" title="7月2日"></a>7月2日</h3><h4 id="目标选择面板"><a href="#目标选择面板" class="headerlink" title="目标选择面板"></a>目标选择面板</h4><p>临时做了一个简单的选择面板。<br><img src="https://i.loli.net/2021/07/02/eHup5ntVfJ8DA1M.gif" alt="目标选择面板"></p><h4 id="普通攻击"><a href="#普通攻击" class="headerlink" title="普通攻击"></a>普通攻击</h4><p>选择普通攻击可以对单个敌人造成伤害。<br>普通攻击实际上包含了几个动作的组合：<br>① 选择敌人，② 计算伤害，③ 弹出伤害数字和攻击动画，④ 行动结束。<br><img src="https://i.loli.net/2021/07/02/VaPHMY1FnL8SIpG.gif" alt="普通攻击"><br>虽然功能已经完成了，但是这里有一些需要改进的地方。</p><ul><li>伤害数字需要增加一个“动态”效果</li><li>两次行动需要间隔一定的时间，而不是一个角色行动结束之后立即轮到下一个角色操作</li><li>目标选择的时候，没有明确提示当前选择的是哪个对象（只有名字而已）</li></ul><h4 id="伤害字体动画"><a href="#伤害字体动画" class="headerlink" title="伤害字体动画"></a>伤害字体动画</h4><p>首先解决第一个问题，纯静态的伤害字体没有打击感。<br>为伤害字体增加一个简易的动态效果，看起来好点了：<br><img src="https://i.loli.net/2021/07/02/s2EodXPvyTw5GAL.gif" alt="伤害字体动画"></p><h4 id="行动间隔"><a href="#行动间隔" class="headerlink" title="行动间隔"></a>行动间隔</h4><p>不论是玩家行动还是敌人行动，都需要有一定的间隔时间。<br>当角色行动结束时，增加 1s 的等待时间：<br><img src="https://i.loli.net/2021/07/02/zfHJq2YGSogntCL.gif" alt="两次行动增加 1s 的间隔时间"></p><blockquote><p>TODO：间隔时间以后可以在菜单中进行设置，分为“高速”与“正常”，方便喜欢快节奏的玩家。</p></blockquote><h4 id="选中高亮"><a href="#选中高亮" class="headerlink" title="选中高亮"></a>选中高亮</h4><p>为了让玩家知道自己选择的目标是哪个，需要加上高亮的效果。<br>这里就先用透明度的变化作为标志，选中效果如下：</p><p><img src="https://files.catbox.moe/zgow63.gif" alt="目标被选中时的高亮效果"></p><h4 id="击退效果"><a href="#击退效果" class="headerlink" title="击退效果"></a>击退效果</h4><p>当目标受到普通攻击伤害的时候，为了表现出“打击感”，要让目标向后挪动一小步。<br>除此之外还要让目标显示受伤动作动画，但是现在没有相应的素材，就简单的实现击退效果：</p><p><img src="https://files.catbox.moe/p16r8h.gif" alt="受伤击退效果"></p><p>今天的工作大概就是这样了，战斗系统的雏形基本完成。<br>明天再弄下敌人的 AI，战斗系统就完成了，比起计划还提前了一天！</p><p>明天和后天还可以顺便把战斗结算 UI 也做完，以及进入战斗时的过场动画处理。<br>总体来说，制作十分顺利，下周就可以开始制作菜单相关的 UI 了。</p><h4 id="战斗系统的优化方案"><a href="#战斗系统的优化方案" class="headerlink" title="战斗系统的优化方案"></a>战斗系统的优化方案</h4><p>我们目前只有两个人，Cee 又要上班，没办法做出全动态的战斗系统。<br>然后进在 Steam 上面闲逛，发现了一款值得参考的游戏，可以实现纯静态图也能实现很强的打击感。</p><p>以目前我们的时间和能力来说，全战斗系统的压力太大了。<br>因此本作的战斗将使用全静态图，如此一来需求的素材也少了，Cee 的压力得以减轻。</p><p>如下所示：</p><p><img src="https://media.st.dl.pinyuncloud.com/steam/apps/1054550/extras/fightLoop.gif?t=1614651101" alt="战斗系统的参考"></p><p>可以用不同的动作和画面效果来弥补静态战斗的不足。</p><p>参考的游戏来源：<a href="https://store.steampowered.com/app/1054550/Phantom_Rose/">Phantom Rose - Steam 页面</a></p><h3 id="7月3日"><a href="#7月3日" class="headerlink" title="7月3日"></a>7月3日</h3><h4 id="敌人行动"><a href="#敌人行动" class="headerlink" title="敌人行动"></a>敌人行动</h4><p>敌人会随机挑选一名玩家控制的角色进行攻击。<br>这样就可以与玩家“有来有回”了：<br><img src="https://i.loli.net/2021/07/03/MGzpE1no8jvafXW.gif" alt="敌人的行动"></p><h4 id="目标死亡"><a href="#目标死亡" class="headerlink" title="目标死亡"></a>目标死亡</h4><p>当 HP 被削减至 0 的时候，目标就会进入「濒死状态」。<br>这个时候就直接让目标淡出消失：<br><img src="https://i.loli.net/2021/07/03/aqoV6YeRLXO1J8b.gif" alt="目标死亡效果"></p><h4 id="胜利-UI"><a href="#胜利-UI" class="headerlink" title="胜利 UI"></a>胜利 UI</h4><p>当全部的敌人都死亡时，弹出战斗胜利的 UI。<br><img src="https://i.loli.net/2021/07/03/Q7vqAafbFjdRWIk.png" alt="战斗胜利UI"></p><h4 id="战败-UI"><a href="#战败-UI" class="headerlink" title="战败 UI"></a>战败 UI</h4><p>当玩家控制的角色全部濒死，则弹出战败的 UI。<br><img src="https://i.loli.net/2021/07/03/6blQjTuBtMZR5rU.png" alt="战斗失败UI"></p><h4 id="胜败判定"><a href="#胜败判定" class="headerlink" title="胜败判定"></a>胜败判定</h4><p>添加逻辑判定以及战斗实测：<br><img src="https://i.loli.net/2021/07/03/WGHveNSEQ6ps5Jk.gif" alt="战斗胜利"></p><h4 id="敌人数据库"><a href="#敌人数据库" class="headerlink" title="敌人数据库"></a>敌人数据库</h4><p>每个敌人都有 HP、攻击力、防御力等属性。<br>为了实现可视化，我直接使用 unity 自带的一个数据类型：<code>Scriptable</code>。<br><img src="https://i.loli.net/2021/07/03/rXo75bl94NJAHFK.png" alt="可视化的敌人数据"></p><p>目前敌人的数据库只有敌人的基本属性，等后续的系统逐渐完善，还可以增加掉落物、战斗逻辑等等。<br>如果用 RPG Maker 系列来比喻的话，就是敌人的数据库设置：<br><img src="https://i.loli.net/2021/07/03/SkPE1QzxmpBDt6J.png" alt="RPG Maker 的敌人数据库"></p><h4 id="角色数据库"><a href="#角色数据库" class="headerlink" title="角色数据库"></a>角色数据库</h4><p>同理，玩家控制的角色也有各种属性，也需要建立这么一个数据库。<br>还有道具数据库、装备数据库……凡是在游戏中有基本属性的，都需要建立一个数据库。</p><h4 id="存档-UI"><a href="#存档-UI" class="headerlink" title="存档 UI"></a>存档 UI</h4><p>战斗系统已经完成了，能够提前一天也是意料之外的事情。<br>所以趁这个机会我把 Cee 之前已经设计好的存档 UI 也完成了。</p><p><img src="https://files.catbox.moe/s2uyll.jpg" alt="存档界面"></p><p>现在的状态超级好！！！<br>维持这个状态，本月完成完整版的第一章毫无压力！</p><p>要保证健康的状态就得按时睡眠不熬夜，明早起来继续完成读档系统。</p><h3 id="7月4日"><a href="#7月4日" class="headerlink" title="7月4日"></a>7月4日</h3><ul><li>存档界面获取本地存档列表</li><li>将数据写入本地存档（存档功能）</li><li>将本地存档加载到游戏（读档功能）</li><li>确认框</li><li>提示框</li><li>主菜单优化</li></ul><h3 id="7月5日"><a href="#7月5日" class="headerlink" title="7月5日"></a>7月5日</h3><p>昨天晚上眼睛有点痛，躺在床上休息，结果就这么睡着了……<br>今天眼睛还是感觉很干涩，所以打算只做一些简单的工作。</p><p>早上把存档系统整合到主菜单里，结果发现弹窗的时候会有问题，计划明天把菜单系统重构一遍。<br>昨天 Cee 完成了主菜单装备界面的 UI，但是时间比较晚就没来得及完成。</p><p>今天的工作就只是把装备菜单的 UI 搭起来，等明天菜单系统重构之后在完成装备系统的实际功能。<br>今天主要还是休息为主……应该是近期用眼过度了，估计今晚睡一觉明天就能好了。</p><h3 id="7月6日"><a href="#7月6日" class="headerlink" title="7月6日"></a>7月6日</h3><p>眼睛好了一点，今天继续干活。<br>昨天被一个滚动视图的问题卡住了，结果没把装备界面的 UI 做完。<br>今天早上找了一些相关的资料，顺利解决了。<br>之前 Cee 反馈说在公司的电脑看不见博客的图片，所以后面发的图片会改用新的图床。</p><p><img src="https://pic.imgdb.cn/item/60e427db5132923bf8790f4c.jpg" alt="角色界面UI"><br><img src="https://pic.imgdb.cn/item/60e429225132923bf87e8c39.jpg" alt="装备属性"></p><p>新的图床据说是多路分发的，应该不会再出现访问不了的情况了。</p><p>除了完成界面的 UI 之外，今天开始要制作角色系统和装备系统，因此剩下的工作都是设计数据格式之类的，就没什么好发的了。本周会完成这两大系统，然后下周开始制作第一章剧情的内容，本月计划有 20 天来制作剧情相关的流程，从时间长度来看，如果能保持良好的状态，做完整章的剧情应该不难。</p><p>第一版的 UI 都是极简风格的，目的是为了加快制作的速度，等全部完成之后我们会回头优化这些地方，我们之前就是因为一开始就想做出完美的效果结果花了太多时间，以至于一直没能做出来，这次也是吸取了经验，对于不影响游戏流程的地方全部采用最简单的形式。</p><p>为了赶进度，系统和 UI 可以简陋一点，但剧情不会马虎。<br>只要保持这种「极简风格」的 UI，Cee 那边的压力会减少很多。<br>在保证完成主线剧情的情况下，我们就会开始回头优化这些简陋的地方。</p><blockquote><p>保证游戏能按时完成，这是我们目前最优先考虑的事情。</p></blockquote><h3 id="7月7日"><a href="#7月7日" class="headerlink" title="7月7日"></a>7月7日</h3><p>祸不单行，眼睛好点了，结果又感冒了……<br>闷热的天气实在是难受啊！！！</p><p>趁早上状态还好的时候，搭建了新的菜单系统的基础。<br>新的菜单系统要兼容各种不同的菜单，比如选项有很多种类型：横排的、竖排的以及网格的。<br>而且还要保证多个菜单之间可以正常联动，估计得到明天才能完成了，现在状态不是很好，继续躺床上了……</p><h3 id="7月8日"><a href="#7月8日" class="headerlink" title="7月8日"></a>7月8日</h3><p>满血复活，继续开工！！！<br>今天测试了新版菜单的基本功能，然后把主菜单和存档菜单改成了新版菜单系统并且整合在一起。</p><h3 id="7月9日"><a href="#7月9日" class="headerlink" title="7月9日"></a>7月9日</h3><p>遇到一个小问题，在弹出确认框并且点下确定的时候，如果再次弹出新窗口，原本的栈结构就会出现问题。</p><p>玩家打开存档进行保存的时候，如果在一个原本有存档的位置进行保存，就会弹出覆盖提示的确认窗口，然后玩家点击确定会再弹出一个保存成功的弹窗。发现在弹出保存成功的时候，按下方向键上级菜单（存档界面）仍然可以进行操作。<br><img src="https://pic.imgdb.cn/item/60e7c1cf5132923bf8450af0.gif" alt="确认框没有正确屏蔽上级菜单的按键"></p><p>这里其实是为了省事把弹窗、确认框都统一成了「菜单」的一部分，但是弹窗和确认框跟菜单有区别：<br><img src="https://pic.imgdb.cn/item/60e7c1805132923bf84428c9.jpg" alt="普通的多级菜单"><br><img src="https://pic.imgdb.cn/item/60e7c3085132923bf848873a.jpg" alt="弹窗与普通多级菜单的区别"></p><p>为了赶进度这个小问题就先不处理，人为避免在确认框后还弹出提示框即可。<br><img src="https://pic.imgdb.cn/item/60e7f75e5132923bf8060305.gif" alt="修改后的存档提示"></p><p>接着要把之前所有的窗口系统都改成新版的菜单。（工作量有点大）</p><h3 id="7月10日"><a href="#7月10日" class="headerlink" title="7月10日"></a>7月10日</h3><p>昨天没全部改完，今天继续昨天的进度。</p><ul><li>战斗中操作面板</li><li>战斗中目标选择面板</li><li>战斗中技能选择面板</li><li>场景中事件选择面板</li></ul><p>至此，旧版的菜单已经全部改成新版菜单系统了。<br>还发现了场景淡入时可以打开菜单的 BUG。<br>这里是因为我把事件的淡入和场景的淡入搞混了，结果测试了半天……<br>要构建一个完整的游戏系统工程量很大，以前写的代码不一定都还能记得住，只有遇到的时候才能想起来了。</p><p>菜单整改完毕之后就开始制作角色界面了，角色界面比较复杂，包括：队伍系统、角色系统、装备系统。<br>而这些系统又包括：角色数据、装备数据、队伍数据。<br>先完成数据结构的设计，接着再一一实现各个系统。</p><ul><li>角色数据</li><li>装备数据</li><li>存档中的队伍数据</li></ul><p>然后是角色界面，这个界面属于菜单，但是不同在于有竖直和水平两种操作。<br>水平方向的按键可以切换角色，竖直方向按键控制选中的装备。</p><p><img src="https://pic.imgdb.cn/item/60e9c10d5132923bf8e7e27e.jpg" alt="角色界面的两个不同区域使用不同按键控制"></p><h3 id="7月11日"><a href="#7月11日" class="headerlink" title="7月11日"></a>7月11日</h3><p>今天陪父母去打疫苗，顺便自己也打了。原本以为会有点疼，结果一点感觉都没有。回到家之后还是有一点不良反应的，打了疫苗的左手感觉使不出力气，原来没什么感觉但到了下午就开始有点疼了。头也有点晕乎乎的，浑身乏力还有一点恶心的反应，应该是身体跟疫苗不太适应，或者是宅家里太久没锻炼的缘故。</p><p>因为状态不是很好，所以就先做一些能完成的简单工作，例如录入本地语言的文本。<br><img src="https://pic.imgdb.cn/item/60eaca4b5132923bf8c43087.jpg" alt="本地文本"></p><p>为了方便管理全局的变量，再写个单独的类保存常量，以此建立映射关系。<br><img src="https://pic.imgdb.cn/item/60eaca915132923bf8c528fe.jpg" alt="全局常量"></p><p>都是一些体力活，除此之外，还完成了一些小细节部分。例如图片的动态调节大小，如果 Cee 提供的素材大小不一致的话，可以用一个类似“中间件”的结构把图片调整为合适的大小。</p><p>前几天才说自己状态很好，结果这几天要么是生病了，要么是打完疫苗有不良反应，难道是因为前几天激昂的状态大反弹了？！今天还是好好休养一下把状态调节好了，避免影响下周的工作。虽然躺在床上休息，但是也可以考虑剧情该如何修改，下周开始就要正式制作剧情部分了。</p><h3 id="7月12日"><a href="#7月12日" class="headerlink" title="7月12日"></a>7月12日</h3><p>20天的倒计时开始，本周正式制作剧情部分。<br>预计 8 月 1 日发布第一章的测试版。</p><p>完成了角色菜单切换角色以及计算人物属性，并且重新讨论了场景素材的规格。</p><h3 id="7月13日"><a href="#7月13日" class="headerlink" title="7月13日"></a>7月13日</h3><p>确定场景素材规格，将由 Cee 最终决定。</p><p>角色菜单里还剩下装备系统没做完，今天也完成了。<br>明天开始重新绘制第一章第一幕的场景，正式进入剧情制作。</p><h3 id="7月14日-7月16日"><a href="#7月14日-7月16日" class="headerlink" title="7月14日~7月16日"></a>7月14日~7月16日</h3><p>第一章第一部分剧情改动，以及录入剧情文本，场景制作。<br>标题画面的制作。</p><h3 id="7月17日-7月25日"><a href="#7月17日-7月25日" class="headerlink" title="7月17日~7月25日"></a>7月17日~7月25日</h3><p>第一章逃亡篇剧情完成。</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》ver1.0.0（前半部分）</title>
      <link href="/2021/06/24/monster-game-version-100/"/>
      <url>/2021/06/24/monster-game-version-100/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>后续的更新不定期发布，有一定进度的时候就会发布一次。<br>按照日期划分，记录每日更新内容，此更新也包含 Cee 的制作进度。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>这篇文章将会记录 Ver1.0.0 即第一章的更新内容（六月份）。<br>由于篇幅比较长就用最简单的条目形式记录下来了。<br>中间也会插入一些制作过程的想法，相当于游戏制作日记一样。</p><h3 id="6月23日"><a href="#6月23日" class="headerlink" title="6月23日"></a>6月23日</h3><ul><li>游戏系统的初步计划确定</li><li>修复对话框下标不显示动画问题</li><li>修复对话框UI在不同系统/分辨率可能显示不全的问题</li><li>减少序章剧情调查事件的部分无意义文字内容</li></ul><p><strong>已知问题记录</strong><br>在发给以前上班的同事测试的时候，出现了对话卡死的 BUG。<br>具体原因不明，可能是跟电脑系统有关。<br>除此之外，有群友反馈 Win7 系统开头的小游戏很卡。<br>目前这两个问题测试的样本太少，无法确定到底是代码出 BUG 了还是因为电脑系统的差异导致。<br>如果有遇到相同的问题的请联系 QQ：874811226 反馈，将你的情况上报有助于我们分析问题。</p><h3 id="6月24日"><a href="#6月24日" class="headerlink" title="6月24日"></a>6月24日</h3><ul><li>确认主线剧情大纲</li><li>增加客厅剧情电视新闻女主持人的对话音效</li><li>修复场景中触碰到多个事件，事件选择面板显示的事件列表会出现重复/未触碰的事件问题</li><li>修复FC游戏按下确定键声音突然变大问题</li><li>增加场景切换时的渐变淡出效果</li><li>确认进入战斗的方式</li><li>确认后续场景展示效果</li></ul><p>素材方面：</p><ul><li>完成神秘少女 Nameless 立绘</li></ul><p><strong>战斗系统的考虑因素</strong><br>传统的回合制战斗需要切换到一个独立的战斗场景，战斗结束后再切换回原场景。<br>最典型的例子就是口袋妖怪走两步就遇到一个拦路的 NPC，这样频繁的切换场景会大幅增加玩家的不耐烦情绪。<br>在我玩过的所有回合制游戏中，《帽子世界》的战斗系统是最优秀的一个。<br>在场景中无缝切换到战斗（直接将地图作为战斗场景），战斗结束时再恢复原位，没有任何切换、淡入淡出效果。<br>也就是说这种无缝衔接的战斗不会中断玩家的操作，并且战斗节奏非常快，一场战斗可能 5s 就结束。<br>帽子世界的战斗系统几乎不会产生不耐烦的情绪，所以战斗系统方面将会参考帽子世界的进行设计。</p><h3 id="6月25日"><a href="#6月25日" class="headerlink" title="6月25日"></a>6月25日</h3><ul><li>「阵型系统」草案</li><li>战斗 UI 基本布局确定</li><li>基础菜单系统</li><li>战斗指令菜单</li></ul><p><strong>阵型系统</strong><br>回合制游戏的站位一直都没有什么特殊意义。<br>有的虽然区分前卫和后卫，但也比较简单，只是前卫增加了被敌人攻击的概率而已。<br>比较值得参考的是梦幻西游的阵型系统，不同阵型有不同的属性加成，而且不同的站位也不一样。<br>这样我们就可以设计出很丰富的阵型效果了，阵型和出战角色的组合也能丰富策略性。</p><h3 id="6月26日"><a href="#6月26日" class="headerlink" title="6月26日"></a>6月26日</h3><ul><li>血条、攻击条和技能条</li><li>基本玩家角色</li><li>基本敌人角色</li><li>基本战斗布局</li></ul><p>素材方面：</p><ul><li>战斗基本 UI 素材</li></ul><h3 id="6月27日"><a href="#6月27日" class="headerlink" title="6月27日"></a>6月27日</h3><ul><li>补充 Ace 行走图缺失的一帧</li><li>血条、攻击条和技能条重置</li><li>第一章剧本改动进行中</li><li>攻击条的加载</li></ul><p>素材方面：</p><ul><li>BOSS 血条/攻击条</li><li>普通血条/SP 条/攻击条</li><li>技能选择菜单</li></ul><p><strong>血条、攻击条和技能条重置</strong><br>原本是用 unity 自带的 slider 实现血条，将血条制成了 UI。<br>吸取了之前做 FC 小游戏的教训，UI 做的血条不方便移动，所以就自己用精灵做一个血条效果。<br>最后的效果如下：<br><img src="https://i.loli.net/2021/06/27/Wkgxin8NLwo2UIp.png" alt="血条和攻击条（白色）"></p><p><img src="https://i.loli.net/2021/06/27/uYLtXkex8nqGChv.gif" alt="攻击条的加载效果"></p><p><strong>后续计划</strong><br>Cee 已经完成了战斗需要的大部分 UI 素材了，战斗系统也在有条不紊的开发中。<br>由于这个系统牵扯的范围比较大，所以制作周期会长一点。<br>计划在 7 月 4 日之前完成战斗系统雏形。<br>下周开始 Cee 制作主菜单相关的素材，如果顺利的话，在 7 月中旬就可以完成第一章需要的大部分系统。<br>如果能赶在 7 月 15 日之前完成大部分的系统，剩下两周的时间说不定可以把第一章全部做完。</p><h3 id="6月28日"><a href="#6月28日" class="headerlink" title="6月28日"></a>6月28日</h3><ul><li>角色获得行动回合</li><li>BOSS 状态栏</li></ul><p>素材方面：</p><ul><li>战斗底部状态栏 UI</li></ul><p><strong>ABB 战斗系统</strong><br>今天的制作任务是战斗系统的核心部分。<br>本作的战斗系统是 Attack Bar Battle（攻击条战斗）模式，简称 ABB（自称）。<br>其实这种模式很早之前就有了，最早源于《最终幻想》系列，不同的是叫做 Active Time Battle（即时战斗回合制）。<br>即时战斗的意思是不管玩家有没有操作，时间都在流逝，如果你来不及做出反应，敌人的拳头就会糊在你脸上。<br>个人觉得，回合制策略游戏的意义就在于每一次行动的思考，而不是考验玩家的临时反应。<br>因此本作的战斗系统是 ATB 模式的改版，保留了时间条的设计，同时取消强制玩家快速反应的操作，当玩家获得回合时，时间就会停止。<br>同时加入了一个“插队机制”避免战斗过于公式化，当玩家获得行动机会时，并且行动已结束，在下一个角色获得行动机会的同时，全场的其他角色都会临时额外的增加一次攻击条，这种情况就叫做「插队机制」。<br>可以观察下图的攻击条变化，当第二个角色获得行动机会的时候，明显看到第一个行动结束的角色获得了“一丝”的攻击条。<br>这“一丝”的攻击条里面暗藏了很多玄机，这也是本作战斗系统最大的策略之一。<br><img src="https://i.loli.net/2021/06/28/rJmFejl49iEbpRt.gif" alt="获得行动机会"></p><blockquote><p>插队机制：跟游戏为什么要加入暴击几率和伤害浮动一样，就是为了避免战斗系统过于“公式化”，所谓的公式化就是做了 A 就一定能得到 B 的结果，玩游戏的乐趣在于随机性，而不是明确知道自己能得到什么结果，好比投骰子，如果所有人都能知道下一次投出的点数，就没人会对投骰子产生乐趣了。本作的战斗系统也是同理，如果你知道自己的角色速度快就一定能比对方先出手，就会失去紧张感，但因为「插队机制」的存在，当你控制的角色攻击条已经满了的时候，而敌人还差一丝，这个时候如果触发了插队机制，即使你的攻击条先满（但是有攻击条溢出的情况，最终会判定攻击条溢出最多的角色先行动），敌人却可以“抢先插队”而获得行动机会，这就是战斗中的不确定性。可能还是有人无法理解为什么要这么做，那就再打个比方，游戏玩到极致的话，就是“一波流”，通俗的讲就是“互秒”，谁先行动，谁就取得胜利。一波流的核心要点在于：Buff手、爆发性AOE、先制，这三点缺一不可。首先是先制，需要保证自己的三名角色比对方先行动，也就是说必须取得「先制权」，其中一个辅助负责拉条（把攻击条拉满），接着轮到BUFF手给C位增加攻击力，最后轮到C位释放爆发性的AOE技能把对面全秒。这一套配合简单粗暴，但是其中一环断了都是致命的，如果用“公式化”的方式，玩家每次操作都是固定的，这一套就无懈可击，但如果加入不确定性的「插队机制」，玩家在试图打出一套伤害之前，敌人插队了，那这套一波流就失败了，也就是说，公式化是『零风险』的行为，但需要让玩家做出的每一个选择都「伴随着风险」，即随机性。</p></blockquote><h3 id="6月29日"><a href="#6月29日" class="headerlink" title="6月29日"></a>6月29日</h3><ul><li>技能选择面板</li><li>多级菜单联动效果</li></ul><p>素材方面：</p><ul><li>伤害数字</li></ul><p>演示效果：<br><img src="https://i.loli.net/2021/06/29/Ib12BGyQDjYOAT5.gif" alt="多级菜单及技能选择面板"></p><p><strong>多级菜单联动效果</strong><br>存在子菜单的时候，父菜单就不能直接关闭。<br>此处对原来的「栈」结构进行了一些小小的调整。<br>基于面向对象的思想，添加了菜单的父级。<br>当子菜单按下取消键的时候，按键监听的权限就会归还父类然后销毁子类菜单。<br>在子菜单按下确认键的时候，通过递归销毁所有父类菜单。<br>这样菜单监听权限以及窗口的销毁就全部变成被动式触发的了，不需要写代码单独控制。</p><h3 id="6月30日"><a href="#6月30日" class="headerlink" title="6月30日"></a>6月30日</h3><ul><li>战斗伤害数字</li><li>角色战斗状态面板 UI</li><li>目标选择面板 UI</li><li>动态生成战斗状态面板</li></ul><p><strong>战斗场景</strong><br>经过几天的努力，战斗界面已经基本成形。<br>现在还只是虚有其表的纯 UI 界面，要实现操作还得加入逻辑处理。<br>逻辑处理牵扯的地方比较多，今晚得仔细想一下要怎么设计比较好，周四到周日的时间应该可以完成。</p><p><img src="https://i.loli.net/2021/06/30/cZxrku41F8EUCAL.jpg" alt="战斗场景"></p><h2 id="本月总结"><a href="#本月总结" class="headerlink" title="本月总结"></a>本月总结</h2><p>今天是 6 月份的最后一天，下个月进入新的计划。<br>序章比起计划的提前完成了两周，原因是之前已经完成了大部分的素材。<br>目前 Cee 的素材制作速度已经提升了不少，只要不纠结细节的话……<br>如果能保持这个速度，接下来的一个月我们有可能直接把第一章全部完成。<br>希望不会出现什么突发事件，只要能顺顺利利的度过下个月就好。</p><p>6月份的更新就到此结束了，现在才是晚上的九点，剩下的时间就用来计划明天要完成的战斗系统核心部分。<br>还有第一章的剧情也要临时进行修改……</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《名为怪物的游戏》序章 Demo（ver 0.3）</title>
      <link href="/2021/06/22/monster-game-prologue/"/>
      <url>/2021/06/22/monster-game-prologue/</url>
      
        <content type="html"><![CDATA[<h1 id="序章说明"><a href="#序章说明" class="headerlink" title="序章说明"></a>序章说明</h1><p>本次更新衔接了之前的 FC 小游戏篇，进入到游戏的正式篇（序章部分）。<br>序章讲述了主角 Ace 与女主角瞳相遇，并且进入到「Monster」之前的故事。</p><h1 id="Demo-下载"><a href="#Demo-下载" class="headerlink" title="Demo 下载"></a>Demo 下载</h1><p>此处为演示版的下载，请优先选择最新版，即版本号比较高的下载。<br>如果测试过程遇到 BUG，请联系 QQ：874811226 反馈。</p><h2 id="v0-3-1"><a href="#v0-3-1" class="headerlink" title="v0.3.1"></a>v0.3.1</h2><p>6月26日更新。</p><p>Windows 版：<a href="https://files.catbox.moe/sxmmeh.zip">点击下载</a><br>Mac 版：<a href="https://files.catbox.moe/jxu9mc.zip">点击下载</a></p><p>更新说明：</p><ul><li>修复对话角标不动问题</li><li>减少部分调查事件对话内容</li><li>修复对话框可能在不同分辨率显示不全问题</li></ul><blockquote><p>经过测试 Windows 10 发现了对话卡死问题（非必现问题）如果遇到这种情况请联系 QQ：874811226 反馈。</p></blockquote><h2 id="v0-3-0"><a href="#v0-3-0" class="headerlink" title="v0.3.0"></a>v0.3.0</h2><p>本地下载：<a href="https://files.catbox.moe/csz8hh.zip">点击下载</a><br>百度云：<a href="https://pan.baidu.com/s/18ALimW9GmS8UXlqhpRdd_g">https://pan.baidu.com/s/18ALimW9GmS8UXlqhpRdd_g</a> 提取码：s5co</p><p>请下载最新版。</p><h1 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h1><p>目前的 Demo 版使用的素材均为临时素材，部分图片是草图甚至缺了一张 CG 用文字代替了。<br>因为正在赶进度，所以素材会比较潦草，不过到了正式发布的时候就会重新绘制。</p><p>小游戏从 cocos creator 移植到 unity 花了快一个月，接着制作序章基本是爆肝模式，从 6-11 开始，前两天其实就完成了，总的制作了差不多 10 天，从零开始构建了游戏的基本系统，然后测试加调整又花了两天，总的来说，<strong>这次的制作速度提高了不少</strong>。<br>其实也就不到十分钟的长度而已，游玩十分钟，制作花十天。</p><p><img src="https://files.catbox.moe/7vfb2i.jpg" alt="这是什么人间疾苦！"></p><h2 id="小游戏关卡"><a href="#小游戏关卡" class="headerlink" title="小游戏关卡"></a>小游戏关卡</h2><p>进入游戏会先进入小游戏关卡，根据玩家通关与否会触发不同的剧情对话。<br>其实小游戏跟正式篇没有什么必然的关系，只是用来纪念我和 Cee 小时候玩 FC 游戏的童年而已。</p><p><img src="https://files.catbox.moe/4fn2pv.jpg" alt="星之魔女小游戏"></p><h2 id="场景系统"><a href="#场景系统" class="headerlink" title="场景系统"></a>场景系统</h2><p>游戏的地图采用横版移动，在 RPG 游戏十分少见的类型。<br>因为这部新作本身就带有解谜要素，横版场景更适合「调查」，而且场景效果看起来也会比较好。<br>除此之外，采用横版地图还有一个考虑就是减少跑地图的时间，让玩家专注于剧情和玩法。</p><p><img src="https://files.catbox.moe/7i3z9r.jpg" alt="Ace房间场景"><br><img src="https://files.catbox.moe/4zwq9n.jpg" alt="客厅场景"><br><img src="https://files.catbox.moe/ltfw2m.jpg" alt="杂物间场景"></p><h2 id="对话系统"><a href="#对话系统" class="headerlink" title="对话系统"></a>对话系统</h2><p>带有人物立绘的对话系统。</p><p><img src="https://files.catbox.moe/p8n19l.png" alt="对话系统"></p><h2 id="事件系统"><a href="#事件系统" class="headerlink" title="事件系统"></a>事件系统</h2><p>在场景中按[Z]键即可进行调查，因为横版的关系可能会出现多个调查对象重叠在一起的情况，所以我临时做了一个选择调查对象的 UI。</p><p><img src="https://files.catbox.moe/c9puwh.jpg" alt="选择调查对象"></p><h1 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h1><p>序章还没有接触到游戏的核心玩法，要等到下次更新的「第一章」。<br>提前发布序章 Demo 主要还是为了让等了很久的群友先体验一下。<br>再不发布新作品，连我自己都怀疑我们到底有没有在做游戏了[○･｀Д´･ ○]<br>这次的更新也证明了我们是真的有在做游戏(～￣▽￣)～<br>之后也会在博客同步更新进度，建议还没入群的盆友加一下 QQ 群：84334403</p><p>因为写博客有点花时间，而且贴了代码感觉没什么人想看o(╥﹏╥)o<br>后面的博文就一切从简了，有时间的话，我会写制作花絮记录制作过程。</p><h1 id="制作花絮"><a href="#制作花絮" class="headerlink" title="制作花絮"></a>制作花絮</h1><p>这一部分是与游戏预告无关的，记录游戏制作过程的花絮（技术向）。<br>如果想要了解这部游戏是怎么做出来的盆友可以看看。</p><h2 id="如何实现RPG游戏的剧情文本？"><a href="#如何实现RPG游戏的剧情文本？" class="headerlink" title="如何实现RPG游戏的剧情文本？"></a>如何实现RPG游戏的剧情文本？</h2><p>众所周知，一部剧情向的游戏都有很长的剧情文本。<br>那么，剧情的文本到底是怎么写进游戏里面的？<br>看起来很简单的对话系统，其实要实现起来……也不难，但是难的如何将文字量庞大的语言用代码表达出来。</p><p>如果是文字量很小的游戏，可以用简单的代码控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dialog.Show(&quot;小白&quot;, &quot;我是小白，本作的主人公。&quot;);</span><br></pre></td></tr></table></figure><p>只要提供一个对话方法：<code>Dialog.Show(string name, string content)</code> 调出对话框就行了。</p><p>其中 <code>name</code> 是人物名字，<code>content</code> 是对话内容。</p><p>按照上面的思路，写一段简单的对话可以用下面的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dialog.Show(&quot;小白&quot;, &quot;可恶的魔王，快把公主放了！&quot;);</span><br><span class="line">Dialog.Show(&quot;魔王&quot;, &quot;哈哈哈！你就是勇者吗？&quot;);</span><br><span class="line">Dialog.Show(&quot;魔王&quot;, &quot;看起来弱的跟豆芽一样，想活命的话，就快点滚！&quot;);</span><br><span class="line">Dialog.Show(&quot;魔王&quot;, &quot;不过看你千辛万苦从新手村来到魔王城也不容易，本魔王就允许你带走一件宝贝。&quot;);</span><br><span class="line">Dialog.Show(&quot;小白&quot;, &quot;什么？这可是你说的！&quot;);</span><br><span class="line">Dialog.Show(&quot;魔王&quot;, &quot;当然，本魔王决不食言。&quot;);</span><br><span class="line">Dialog.Show(&quot;小白&quot;, &quot;那么，把公主给我吧！&quot;);</span><br><span class="line"></span><br><span class="line">Dialog.Show(&quot;旁白&quot;, &quot;勇者小白孤身前往魔王城救出公主，他的英勇事迹最终被写入史书中。&quot;);</span><br></pre></td></tr></table></figure><p>但如果是长篇且文字很多的游戏，这种方法就行不通了。<br>像 GalGame 动则百万字，这样写怕不是要累死程序员。</p><p>而且把剧情文本写在代码里，不仅工作量大，也不利于本地化（多语言）。</p><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><p>在用 cocos creator 制作的时候，我采用的是十分常见的数据存储类型：JSON。</p><p>第一个文件用来保存文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &quot;现在进行基本操作的说明，方向键可以控制角色移动，空格键为确认键。&quot;,</span><br><span class="line">    &quot;2&quot;: &quot;另外，在场景或人物前面按下空格键可以进行调查，请大胆的进行探索吧。&quot;,</span><br><span class="line">    &quot;3&quot;: &quot;有关「线索」的说明。&quot;,</span><br><span class="line">    &quot;4&quot;: &quot;线索是你对于这个世界已掌握的情报，可以在菜单「情报」随时查看。&quot;,</span><br><span class="line">    &quot;5&quot;: &quot;调查场景有时能发现新的线索，得到的线索越多就越接近这个世界的真相。&quot;,    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个文件用来保存文本调用及对应的指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;investigate&quot;,</span><br><span class="line">        &quot;role&quot;: &quot;story&quot;,</span><br><span class="line">        &quot;message&quot;: [</span><br><span class="line">            &quot;118&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;img-show&quot;,</span><br><span class="line">        &quot;src&quot;: &quot;email4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;investigate&quot;,</span><br><span class="line">        &quot;role&quot;: &quot;story&quot;,</span><br><span class="line">        &quot;message&quot;: [</span><br><span class="line">            &quot;119&quot;, &quot;120&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;img-hidden&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过第二个 JSON（指令集）来调用第一个对话中对应的文本，<code>type</code> 字段定义了不同的指令，例如显示普通的对话或者显示/隐藏图片。<br>这样虽然实现了剧情对话系统，但是工作量却异常恐怖，而且调试起来非常麻烦，因为对话文本都是用数字编号的形式，所以光看指令集根本看不懂对话内容是什么。</p><p>这种方式我叫它「指令集」的对话系统，因为不实用所以舍弃了。</p><h3 id="命令集"><a href="#命令集" class="headerlink" title="命令集"></a>命令集</h3><p>指令集的缺点是无法看懂对话内容，那只要让对话连在一起就行了。<br>所以第二版的对话系统，我采用了 Excel 表格的方式进行配置。</p><p><img src="https://files.catbox.moe/d726wh.jpg" alt="excel配置剧情对话"></p><p>用 excel 配置其实就是把指令集变成可视化的而已，看起来更直观。<br>上面所示的就是对话的配置，<code>role</code> 即角色名称，<code>avatar</code> 即显示的头像，<code>action</code> 可以增加一些特殊的事件，比如显示图片之类的，然后是 <code>zh-cn</code> 是简体中文对应的语言，<code>zh-tw</code> 就是繁体中文的文本，其他语言填写在对应的格子即可。</p><p>接着，还需要再新增一个 sheet 用来保存对话的指令：</p><p><img src="https://files.catbox.moe/0zuafn.jpg" alt="命令集合"></p><p>在指令里调用对话的 ID，这里我写了一个可以自动简化输入的符号 <code>~</code>，意思是从 x 到 n 之间连续的数字。<br>比如 <code>1~3</code>，就会自动生成：<code>c_00001</code>、<code>c_00003</code>、<code>c_00003</code> 这三条对话指令。<br>因为是把命令整合在一起，所以叫它「命令集」。<br>这套系统解决了无法看到对话内容的问题，而且也大大减少了输入指令的工作量。</p><p>但麻烦的是要填充剧情对话的表格，这套对话系统还采用了双边立绘，填充剧情对话表格的工作量直接翻倍了。<br>而且这套系统的对话全部保存在一个 excel 表格里，后期文本量巨大，全部加载到内存占用空间。<br>所以「命令集」式的对话，也被弃用了。</p><h3 id="文本集"><a href="#文本集" class="headerlink" title="文本集"></a>文本集</h3><p>既要解决可视化问题，又按需调用节省内存，就需要再次改进原系统。</p><p>最终版是我在制作「梦兽的世界」（宝可梦同人）时想到的。<br>由于宝可梦游戏的对话系统很简单，没有头像，只是单纯的文本。</p><p><img src="https://files.catbox.moe/q3y7yh.jpg" alt="宝可梦游戏的对话系统"></p><p>所以最开始我是以简单文本（txt）形式保存剧情对话的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">？？？：欢迎来到死后的世界。</span><br><span class="line">？？？：还记得以前的事情吗？</span><br><span class="line">？？？：你为了保护在路边睡觉的猫，结果被一辆大货车撞到了。</span><br><span class="line">？？？：那只猫就是我。</span><br></pre></td></tr></table></figure><p>左边是角色名称，右边是对话内容，十分简洁。<br>然后对话的文本单独存放，每一段剧情对话都新建一个 TXT 保存：</p><p><img src="https://files.catbox.moe/e1ksjb.jpg" alt="文本集"></p><p>当玩家与 NPC 对话的时候，根据需要取加载对应的本地文件，对话结束就释放内存节省空间。<br>这种方法我叫它「文本集」，就是新建许多文本的集合。<br>但是怪物游戏的对话系统可比这个复杂多了，所以我对这套系统进行了一些改进。<br>改进之后的文本变成了如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#xiaoxing,normal</span><br><span class="line">为什么我就打不过！</span><br><span class="line"></span><br><span class="line">#xiaoxing,smile</span><br><span class="line">我要再玩一次。</span><br></pre></td></tr></table></figure><p>井号开头的就是一条指令，左边是名字，右边是对应的立绘。<br>这样就实现了怪物游戏的对话系统。</p><p>但是新的问题又来了，剧情对话不仅仅只是显示文本而已，中间如果要显示图片呢？如果要停顿 1s 呢？<br>在还没改进这套系统之前，我是这样实现剧情的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private void SelectGame()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.ShowImage(&quot;computer_1&quot;);</span><br><span class="line"></span><br><span class="line">    MapManager.FadeIn(&quot;black&quot;, 1f, 1f, delegate</span><br><span class="line">    &#123;</span><br><span class="line">        WindowManager.CallDialog(&quot;01_ace_room&#x2F;08_night&quot;, APP);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void APP()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.HideImage();</span><br><span class="line">    WindowManager.ShowImage(&quot;computer_2&quot;);</span><br><span class="line"></span><br><span class="line">    WaitEvent(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        WindowManager.CallDialog(&quot;01_ace_room&#x2F;09_app&quot;, PowerFailure);</span><br><span class="line">    &#125;, 1.5f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void PowerFailure()</span><br><span class="line">&#123;</span><br><span class="line">    WindowManager.HideImage();</span><br><span class="line">    MapManager.FadeOut(&quot;black&quot;, 0.5f, 1f, delegate</span><br><span class="line">    &#123;</span><br><span class="line">        WindowManager.CallDialog(&quot;01_ace_room&#x2F;10_power_failure&quot;, delegate</span><br><span class="line">        &#123;</span><br><span class="line">            MapManager.GoToMap(&quot;01_AceRoomChange&quot;, -2.8f, -0.8f, 1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不仅要手动控制屏幕的淡入淡出、显示图片，而且这种无限嵌套的地狱也十分令人绝望。<br>改进之后，将这些特殊的指令也融入到文本里，最后就变成了这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#none</span><br><span class="line">突然，脑海中浮现了一个画面……</span><br><span class="line"></span><br><span class="line">#img-show,memory_recover</span><br><span class="line">#wait,2</span><br><span class="line"></span><br><span class="line">#ace,normal</span><br><span class="line">这是小幸还有瞳……</span><br><span class="line"></span><br><span class="line">#ace,normal</span><br><span class="line">记忆好像……在一点点恢复……（头痛的感觉）</span><br><span class="line"></span><br><span class="line">#img-hide</span><br><span class="line"></span><br><span class="line">#ace,normal</span><br><span class="line">果然猜的没错，我们是认识的，这样的话，最后的证据也有了。</span><br><span class="line"></span><br><span class="line">#ace,normal</span><br><span class="line">这一连串发生的怪事……我终于知道了。</span><br><span class="line"></span><br><span class="line">#ace,normal</span><br><span class="line">所有的谜题全部解开了！</span><br></pre></td></tr></table></figure><p>井号开头的部分会被系统自动识别，不同的指令解析成对应的脚本执行。如此一来就不需要再手写代码控制显示图片和淡入淡出等操作了。<br>这套系统到最后的文本文件数量会非常多，不过这个缺点可以直接忽略就是了，因为文本文件基本不需要改动。</p><p>目前想到的最好方法就是文本集，但这样控制剧情还是避免不了要用代码，比如控制场景中的角色移动，如果能做到更完美的话，应该是不写一句代码就能控制整个游戏场景，很遗憾目前还不能做到完美，等到以后技术不断提高的时候就有可能实现了。就像最早的指令集到命令集，最后再到文本集的演变一样。</p><h2 id="如何解决按键问题？"><a href="#如何解决按键问题？" class="headerlink" title="如何解决按键问题？"></a>如何解决按键问题？</h2><p>这里的按键问题指的是「并行的按键问题」。<br>场景中有很多东西在监听玩家的按键，比如按「Z」键可以调查，按「X」键可以打开菜单，按「方向键」可以控制角色在场景中移动。<br>这么多监听事件，就会存在并行监听的情况。<br>比如玩家与地图上的 NPC 对话，此时玩家再按「Z」键会怎样呢？<br>① 角色在地图上可以按[Z]来调查<br>② 在对话中，玩家按[Z]键会切换到下一句对话<br>注意，这两个按键是同时监听的，也就是说，玩家想要按[Z]键切换下一句对话的时候，同时也会触发场景调查的[Z]键监听，结果就是对话切换到下一句，而且又触发了调查事件。<br>为了解决并行按键同时执行的问题，就需要确定事件的执行优先级。<br>当打开新窗口的时候，按键的监听权应该转交给最高级的那个窗口。<br>比如上面的例子，在没与 NPC 对话之前，[Z]键是监听调查事件的；<br>而在于 NPC 对话的时候，新建了一个对话窗口，此时应该把监听权交给对话窗口。<br>可以用数据结构里的「栈」来实现这种对话系统。<br>当一个新窗口被创建时，原来的监听对象就被压入栈，在压入栈之前还要解除对象的事件监听。<br>当一个新窗口被关闭时，就从栈弹出这个窗口的对象，把这个窗口删掉，同时继续弹出下一个对象，将操作权限赋予这个对象，再压回栈里。</p><p>最后，回到开头的那句话 <strong>游玩十分钟，制作却要花十天。</strong><br>虽然看起来很简单的事情，但是要实现起来可真不容易呀！！！</p>]]></content>
      
      
      <categories>
          
          <category> 新游预告 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏（十一）正式篇开始制作 / 6月更新计划</title>
      <link href="/2021/06/11/monster-game-11/"/>
      <url>/2021/06/11/monster-game-11/</url>
      
        <content type="html"><![CDATA[<h1 id="正式篇介绍"><a href="#正式篇介绍" class="headerlink" title="正式篇介绍"></a>正式篇介绍</h1><p>前面发布的 FC 游戏只是开篇小游戏，小游戏篇结束之后就进入正式篇了。<br>正式篇的《名为怪物的游戏》是一款 RPG 回合制策略战斗游戏，带有探险、解谜、收集、养成要素。<br>全篇预计共 8 个章节，纯剧情通关时间 16 小时以上，全要素搜集通关时间 40 小时以上。</p><h1 id="工作室成员"><a href="#工作室成员" class="headerlink" title="工作室成员"></a>工作室成员</h1><p>火兔游戏工作室目前仅由两名成员组成：火烧兔子（我）和 Cee。<br>相比于其他独立游戏工作室，我们俩没有在游戏公司真正开发游戏的经验。<br>所以我们要比别人多花费一些摸索的时间，进度会比较慢。</p><p>unity 是我去年刚学的，一直都在学习阶段，经过一年的积累，接下来的更新应该会比较平稳的进行了。</p><h1 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h1><p>新闻充斥着各种“神隐事件”，已知失踪人数已经高达 200 多人，并且人数不断在增加。<br>17 岁高中生“游戏宅” Ace（网名），已经宅在家里 1 年多没去过学校了。<br>妹妹小幸因为不久前的一次意外头部受伤，在家中休养。<br>一次停电的夜晚，次日醒来妹妹却遭遇“神隐”……<br>声称是自己的同学兼好友的神秘少女「瞳」来访，她却告知 Ace 并没有妹妹。<br>在一连串无法解释的事情发生后，Ace 的手机收到了一封奇怪的乱码邮件。<br>在与瞳调查的过程中，逐渐解开谜题……<br>夜晚零点的闹钟响起，邮件的乱码内容逐渐显示出文字：</p><p><strong><em>「想要知道真相的话，就通关这个游戏吧」</em></strong></p><p>一场死亡游戏正式开始。</p><p><img src="https://files.catbox.moe/d1hjad.png" alt="2019年的宣传图（换句话说，鸽了两年？）"></p><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p>「神隐」这个词是算是比较古老的了，这个游戏我们最早的时候是在高中时就计划的，但是因为种种原因没能实现。<br>和第一个版本相比，剧情已经改变了很多，目前最新的剧情是主角因为妹妹失踪而进入到名为「Monster」的游戏。</p><p>剧情不是单纯的在游戏世界冒险，打败魔王通关游戏然后回到现实世界。<br>而是围绕三名智商超群的主角，在游戏世界里因为各种原因产生交集，并斗智斗勇的故事。</p><h1 id="人物介绍"><a href="#人物介绍" class="headerlink" title="人物介绍"></a>人物介绍</h1><p>序章的人设已经完成。</p><h2 id="Ace"><a href="#Ace" class="headerlink" title="Ace"></a>Ace</h2><p>本作男主角，“Ace”为网名。17 岁，头脑聪明，但学习成绩却很一般。<br>由于常年宅在家里玩游戏，现实中变得不擅长与人相处，因此也没有什么朋友。<br>在别人眼里是不说话的不良少年，实际是个温柔的人。<br>在家中直播游戏当 UP 主，有着不少的粉丝，因此能接到一些游戏开发商的广告。<br>通过直播和广告赚取生活费，和妹妹小幸一起生活。</p><p><img src="https://i.loli.net/2021/06/12/gkPaNvALKljht7Z.png" alt="Ace立绘"></p><p>名字：Ace（游戏名，真名不详）<br>年龄：17 岁<br>身高：173 cm<br>爱好：游戏<br>关系：小幸（妹妹）、瞳（朋友/同学）</p><p><img src="https://files.catbox.moe/y4rxoy.jpg" alt="场景中ACE的形象"></p><h2 id="小幸"><a href="#小幸" class="headerlink" title="小幸"></a>小幸</h2><p>Ace 的妹妹，和哥哥不一样，小幸的记忆力很好，性格温柔。</p><p>一旦认真起来会变得很严肃，和哥哥在一起会有点腹黑。</p><p>因为意外事故头部受伤，现正在家中休养。</p><p><img src="https://files.catbox.moe/ddtpg0.jpg" alt="小幸立绘"></p><p>名字：小幸<br>年龄：14 岁<br>身高：160 cm<br>爱好：看星空<br>关系：Ace（哥哥）</p><p><img src="https://files.catbox.moe/0srybx.jpg" alt="场景中小幸的形象"></p><h2 id="瞳"><a href="#瞳" class="headerlink" title="瞳"></a>瞳</h2><p>本作女主角，学习成绩优异，相貌出众。<br>父亲经营了一家私人医院，家庭比较富裕，有私人管家「渡叔」照顾。<br>独来独往的性格，总是给人一种难以靠近的感觉。</p><p>在一次偶然的情况下，瞳收到了「无差别邮件」，一封没有任何内容的邮件。<br>但是发件人的名字，却是因病去世的那个好友——二兔。<br>一向面无表情的瞳，脸上终于有了明显的情感变化，在惊讶之余，又一封邮件发了过来。</p><p><strong><em>“想要知道真相的话，就接受游戏吧，一旦接受游戏，除非通关游戏或者死亡，中途将无法退出。”</em></strong></p><p><img src="https://files.catbox.moe/jddvq3.jpg" alt="瞳立绘"></p><p>名字：微笑杀手兔/瞳（游戏名）      <br>年龄：16 岁<br>身高：165 cm                 <br>爱好：动漫 <br>关系：Ace（同学/朋友）、二兔（好友/已逝）、渡叔（管家）</p><p><img src="https://files.catbox.moe/1zl4dj.jpg" alt="场景中瞳的形象"></p><h1 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h1><p>游戏的系统可能会根据工期和实际情况发生改变，下面的是目前计划实现的部分内容。</p><h2 id="原创性"><a href="#原创性" class="headerlink" title="原创性"></a>原创性</h2><p>游戏开发引擎采用 unity，除引擎自带的功能之外，其他系统均为从零开始搭建。<br>如行走、事件、战斗系统等等，不再像以前用 RPG Maker 一样直接用现成的。<br>制作难度比 RPG Maker 高许多，但好处是可以实现自己心中想要的系统，游戏系统由我负责完成。<br>除系统原创之外，游戏中使用的角色图、CG、动画等图片素材将由 Cee 负责创作。<br>唯一没办法原创的音乐，将采用购买正版或者使用公开免费的音乐素材。</p><h2 id="回合制战斗"><a href="#回合制战斗" class="headerlink" title="回合制战斗"></a>回合制战斗</h2><p>我和 Cee 都是比较喜欢回合制的，所以新作也打算采用回合制。</p><p>我们不打算做成“你打我一下，我打你一下”的枯燥回合制，而是比较具有策略性的战斗系统。<br>《魔王传说》系列第二弹就是一个初步的尝试，加入自由技能组合系统，玩家可以自己 DIY 不同的职业。<br>新作也将延续这种设计，技能、角色、装备三者的搭配可以衍生出许许多多不同的战术。</p><p>我们的新作将设计为难度挑战模式，以挑战极难 BOSS 为目标。<br>玩家既可以升级和养成装备，享受游戏的全部玩法，然后用实力战胜敌人；<br>同样地，也可以用投机取巧的「策略」达成速通。</p><h2 id="使魔系统"><a href="#使魔系统" class="headerlink" title="使魔系统"></a>使魔系统</h2><p>使魔即召唤生物，在游戏中类似宠物一般的存在。<br>特殊的使魔可以带你进入无法进入的区域，例如：海底遗迹、火山入口。<br>在战斗中使魔也可以提供帮助，但是召唤使魔的条件比较苛刻。<br>传说级的使魔还会设计独立的剧情故事。<br>该系统目前还在设计中。</p><h2 id="装备系统"><a href="#装备系统" class="headerlink" title="装备系统"></a>装备系统</h2><p>装备系统将会加入随机属性和养成机制：强化系统、附魔系统和宝石的镶嵌系统。<br>附魔系统是通过打败 BOSS 掉落的材料，将材料与武器进行锻造，从而使武器具备 BOSS 部分能力的系统。<br>除此之外，装备镶嵌不同的宝石角色的定位也会发生改变，这是玩家比较自由的一个点。</p><p>游戏中没有明确的职业概念，只会简单的分成多个系别：攻击系、治疗系、肉盾系。<br>可以让剧情中的奶妈穿上随机词条是暴击率和增伤的装备，再打上增强攻击的宝石，那她不仅可以回血还可以打人。<br>剧情中的马猴烧酒（魔法少女）拿上一百多斤的铁锤化身物理超度魔法使，诸如此类。</p><h1 id="6月更新计划"><a href="#6月更新计划" class="headerlink" title="6月更新计划"></a>6月更新计划</h1><p>怪物游戏重置版由 cocos creator 引擎移植到 unity 引擎。<br>截至目前已经过去一个月了，已完成 FC 小游戏的移植，序章的素材 Cee 也基本完成了。<br>六月份将开启全新的制作——怪物游戏正式篇。</p><p><img src="https://files.catbox.moe/g28a5q.png" alt="6月计划"></p><p>现在已经是 11 号了，制作在有条不紊的进行着。<br>预计月底会发布序章 Demo 版（这次不会再鸽了）。<br>序章的剧情包括主角从现实世界到进入「Monster」游戏世界的这个过程。</p><h1 id="新作：梦兽的世界"><a href="#新作：梦兽的世界" class="headerlink" title="新作：梦兽的世界"></a>新作：梦兽的世界</h1><p>宝可梦同人游戏的名称也确定下来了，叫做「梦兽的世界」。<br>在完成怪物游戏的同时，利用空闲时间我也会更新这部独立制作的游戏。<br>如果顺利的话，就有两部新作能玩了(～￣▽￣)～</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代号：宝可梦（三）</title>
      <link href="/2021/06/09/pokemon-like-05/"/>
      <url>/2021/06/09/pokemon-like-05/</url>
      
        <content type="html"><![CDATA[<h1 id="存档系统"><a href="#存档系统" class="headerlink" title="存档系统"></a>存档系统</h1><p>口袋妖怪系列的游戏一般只能有一个存档。</p><p>但是这样有个不好的地方就是如果其他人想在这台机子上玩就不能重新开始。</p><p>所以多个存档还是有必要的，决定采用 4 个档案位置。</p><p>玩家可以一个存档保存多份，也可以在每个档案的地方都新建一个存档。</p><p>而且存档会以单独的文件形式存放，以后如果其他玩家分享了通关存档，就可以直接导入使用了。<br>（还可以方便排查 BUG，只要玩家将能够复现 BUG 的存档发给我即可）</p><p>没有云存档，想要在多台电脑上面同步进度也可以直接把存档文件复制过去。</p><p>参考仙剑 4 的存档 UI，设计一个简单的存档界面即可。</p><p><img src="https://files.catbox.moe/vnhguy.jpg" alt="仙剑4存档UI"></p><p>自己设计的存档 UI。</p><p><img src="https://files.catbox.moe/p1yevu.jpg" alt="存档UI"></p><p>昨天晚上已经把本地存储功能做好了，现在只要实现存档界面的操作即可。</p><p>先用简单的图块代替，看起来有点丑陋但只是临时的，以后再美化。</p><p><img src="https://files.catbox.moe/skw0cw.jpg" alt="存档UI2"></p><p>加上按键控制，完成版：</p><p><img src="https://files.catbox.moe/v6mfng.gif" alt="存档系统完成版"></p><h1 id="游戏地图"><a href="#游戏地图" class="headerlink" title="游戏地图"></a>游戏地图</h1><p>游戏采用与口袋妖怪游戏一样的四方向行走图。</p><h2 id="调查事件问题"><a href="#调查事件问题" class="headerlink" title="调查事件问题"></a>调查事件问题</h2><p>玩家可以在地图上与 NPC 对话以及调查物体等等。</p><p><img src="https://files.catbox.moe/mcsesx.jpg" alt="与NPC对话"></p><p>要实现对话和调查是比较麻烦的，按照一般的逻辑考虑，先判断玩家的朝向，再判断玩家前方是否存在可以调查的对象。</p><p>朝向比较容易解决，但是如何判断玩家前方或者脚底存在可以调查的物体呢？</p><p>计算坐标？那样需要把地图上所有 NPC 的坐标搜集起来，不是一件容易的事。</p><p>当我觉得要为这个问题苦恼一阵子的时候，突然灵机一动。</p><p>只要跟之前设计的“垃圾桶怪”的警戒区域一样的设计就可以了。</p><p>玩家控制的角色身上挂着一个调查触发器，这是一个范围检测器。</p><p><img src="https://files.catbox.moe/r4vifo.jpg" alt="调查触发器"></p><p>当 NPC 或者可调查物体进入触发器的范围时，玩家按下 Z 键，即可判断当前与玩家接触的对象，获取该对象并且执行调查/对话事件。</p><h2 id="控制玩家的移动"><a href="#控制玩家的移动" class="headerlink" title="控制玩家的移动"></a>控制玩家的移动</h2><p>在之前研究宝可梦室内地图的时候已经完成了简单的角色控制。</p><p><img src="https://files.catbox.moe/vlxb26.gif" alt="控制角色移动"></p><p>但是碰撞和图层还是有点问题。</p><p>等开始制作地图的时候，再根据实际情况想解决的方法。</p><h1 id="确认弹窗"><a href="#确认弹窗" class="headerlink" title="确认弹窗"></a>确认弹窗</h1><p>除了之前弄好的提示框，还有一个很常见的确认弹窗。</p><p>在读取存档的时候给与玩家提示避免误操作。</p><p><img src="https://files.catbox.moe/ddcdvj.jpg" alt="确认弹窗"></p><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>虽然现在是全职在开发，但还是会有日常其他琐事干扰。</p><p>昨天为了做一个网站的功能忙了一个晚上，一边想着赚钱维持生计，一边实现梦想。</p><p>现在这个阶段可能是最黑暗的阶段了，但是如果能成功的话，我们就能拥有一间自己的工作室了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代号：宝可梦（二）</title>
      <link href="/2021/06/07/pokemon-like-04/"/>
      <url>/2021/06/07/pokemon-like-04/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前天做完了对话系统，今天就可以开始制作开头的剧情了。</p><h1 id="UI-自动本地化"><a href="#UI-自动本地化" class="headerlink" title="UI 自动本地化"></a>UI 自动本地化</h1><p>游戏界面的 UI 如果一个个去转化语言就会增加很多的工作量。</p><p>例如下面这个开头让玩家输入名字的界面，光是 UI 文本就有三个。</p><p><img src="https://files.catbox.moe/c30wfa.jpg" alt="输入名字"></p><p>为了减少无意义的劳动，我写了一个可以自动将关键词转化为本地语言的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class LocaleText : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private Text text;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; GetComponent&lt;Text&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        text.text &#x3D; GameManager.GetLocaleText(text.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要在文本对象挂上这个脚本，文本就会自动转化为对应的语言了。</p><p>在没改造之前，每一个 UI 界面都要这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Text tipText, placeText, btnText;</span><br><span class="line">public InputField inputField;</span><br><span class="line"></span><br><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    tipText.text &#x3D; GameManager.uiTexts[&quot;inputNameTip&quot;];</span><br><span class="line">    placeText.text &#x3D; GameManager.uiTexts[&quot;inputPlaceholder&quot;];</span><br><span class="line">    btnText.text &#x3D; GameManager.uiTexts[&quot;confirm&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造之后，不需要代码手动本地化。</p><p>只要将文本上面的字符串设置为对应的关键词即可：</p><p><img src="https://files.catbox.moe/lkvpbk.jpg" alt="文本设置为关键词"></p><p>接着把脚本挂在这个文本上：</p><p><img src="https://files.catbox.moe/00mhir.jpg" alt="文本挂上本地化脚本"></p><p>进入游戏测试：</p><p><img src="https://files.catbox.moe/e6cmj9.jpg" alt="测试本地化文本"></p><p>文本上的关键词自动转化成对应的语言文字了！</p><h1 id="弹窗提示"><a href="#弹窗提示" class="headerlink" title="弹窗提示"></a>弹窗提示</h1><p>如果用户输入的名字不合法，需要弹出窗口提示玩家输入不正确。</p><p><img src="https://files.catbox.moe/kxvbfk.jpg" alt="弹窗提示"></p><p>做了一个简易的弹窗 UI。</p><h1 id="按键冲突问题"><a href="#按键冲突问题" class="headerlink" title="按键冲突问题"></a>按键冲突问题</h1><p>因为本游戏是用键盘操作的，所以会存在一个按键冲突的问题。</p><p>比如玩家打开菜单，此时又弹出一个提示框。</p><p>玩家按下方向键菜单还在监听按键，导致出现弹窗前面的窗口还能控制的情况。</p><p><img src="https://files.catbox.moe/2uymmv.jpg" alt="菜单的按键冲突问题"></p><p>正常的情况应该是：当玩家打开背包，主菜单的按键监听先屏蔽，等玩家关闭背包了，操作权才返回主菜单。</p><p>为了避免这种按键冲突问题，需要实现一种特殊的数据结构「栈」。</p><p>栈是一种先进后出的结构，先进来的菜单最后一个关闭，正好符合窗口的设计。</p><h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><p>在全局的 UI 管理类 GameManager 加入栈结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static Stack windows &#x3D; new Stack();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void PopWindowStack()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Window temp &#x3D; windows.Pop() as Window;</span><br><span class="line">    Debug.Log(&quot;出栈：&quot; + temp.gameObject.name);</span><br><span class="line"></span><br><span class="line">    if (windows.Count !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Window lastMenu &#x3D; windows.Pop() as Window;</span><br><span class="line">        lastMenu.SetEnabled();</span><br><span class="line">        windows.Push(lastMenu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void PushWindowStack(Window window)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;入栈：&quot; + window.gameObject.name);</span><br><span class="line"></span><br><span class="line">    if (windows.Count !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Window lastMenu &#x3D; windows.Pop() as Window;</span><br><span class="line">        lastMenu.SetDisabled();</span><br><span class="line">        windows.Push(lastMenu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.SetEnabled();</span><br><span class="line">    windows.Push(window);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个结构的原理很简单，如下图所示：</p><p><img src="https://files.catbox.moe/0w7boe.jpg" alt="入栈过程"></p><p>当第二个菜单被创建的时候，需要判断栈内是否有其他菜单。</p><p>如果有的话，就取出最后一个，将其设置为未激活状态，然后重新压回栈中。</p><p>再将新创建的菜单激活压入栈内。</p><p><img src="https://files.catbox.moe/ap0djc.jpg" alt="入栈过程2（没有⑤不用找了）"></p><p>出栈的过程同理，就不再“灵魂画图”了。</p><h2 id="菜单基类"><a href="#菜单基类" class="headerlink" title="菜单基类"></a>菜单基类</h2><p>创建一个菜单的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Window : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    protected bool isEnabled;</span><br><span class="line"></span><br><span class="line">    public void SetEnabled()</span><br><span class="line">    &#123;</span><br><span class="line">        isEnabled &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetDisabled()</span><br><span class="line">    &#123;</span><br><span class="line">        isEnabled &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        GameManager.PushWindowStack(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnDestroy()</span><br><span class="line">    &#123;</span><br><span class="line">        GameManager.PopWindowStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接使用 Unity 的生命周期函数 <code>OnEnable</code> 和 <code>OnDestroy</code> 来控制控制入栈和出栈。</p><p>这样可以不用手动去控制进出栈，减少工作量。</p><p>当一个菜单被激活时就会自动入栈，当它被销毁时就会自动出栈，全自动化的处理，十分方便。</p><p>不仅是弹窗要继承窗口类，包括之前设计的对话系统也要让它继承窗口类。</p><p><code>isEnabled</code> 用来控制是否激活菜单的按键控制，在子类中用来控制是否允许按键操作。</p><h2 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h2><p>写好之后，进入游戏测试一下。</p><p>先执行一段对话，然后隔 1 秒的时候出现一个弹窗。</p><p>如果没有栈结构，那么在对话和弹窗同时存在的情况下，按 Z 键时，对话会执行下一句，而弹窗也会消失。</p><p>（即按键的监听没有被屏蔽，导致两个窗口可以同时操作）</p><p>如果有栈的结构，那么在对话还未结束时又弹出一个弹窗，此时若按下 Z 键，会优先关闭弹窗，再按下 Z 键才会使对话进入下一句。</p><p><img src="https://files.catbox.moe/pqzt5p.gif" alt="菜单的执行顺序"></p><p>测试结果没问题，这样菜单按键冲突问题也解决了。</p><h1 id="宝可梦经典开头"><a href="#宝可梦经典开头" class="headerlink" title="宝可梦经典开头"></a>宝可梦经典开头</h1><p>宝可梦系列的开头经常是一个博士出来欢迎，然后随手丢一个精灵。</p><p><img src="https://files.catbox.moe/8rtdlx.jpg" alt="宝可梦经典开头"></p><p>仿照原作，我自己用 PS 弄了一张渐变的背景。</p><p><img src="https://files.catbox.moe/s76tjd.jpg" alt="博士的背景"></p><p>导入游戏场景测试一下：</p><p><img src="https://files.catbox.moe/bppmzx.jpg" alt="场景测试"></p><p>看上去有那么回事了，由于现在还在练习像素画的过程，博士的素材暂时没法完成。</p><p>此处先用黑色图块代替。</p><p>前天顺便也找了对话框的 UI，风格有点不适合游戏，后面再自己做一个新的。</p><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>昨天感冒了，这篇文章本来是要 6-6 的时候发布的，结果拖到了今天。</p><p>目前个人感觉状态十分良好，只要不出什么意外情况，这个宝可梦的游戏在这个月应该就可以出 Demo 版了。<br>（迷之自信）</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代号：宝可梦（一）</title>
      <link href="/2021/06/05/pokemon-like-03/"/>
      <url>/2021/06/05/pokemon-like-03/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>宝可梦同人游戏正式开始制作。</p><p>与怪物游戏同时进行开发，由于许多系统是类似的，所以完成其中一个再改造一下另一个游戏也能使用。</p><p>想过用 RPG Maker 来制作这个游戏。</p><p>自己从零开始写系统要花费好几倍的精力……</p><p>想到原创系统的梦想，还是咬咬牙坚持下去吧。</p><h1 id="对话系统"><a href="#对话系统" class="headerlink" title="对话系统"></a>对话系统</h1><p>昨天晚上就做好了对话系统，但是 UI 还没做。</p><p><img src="https://files.catbox.moe/35k8kn.gif" alt="对话系统"></p><p>虽然功能完成了，但还不能直接使用。</p><p><img src="https://files.catbox.moe/f39ii6.jpg" alt="对话系统代码"></p><p>现在还只是纯代码的形式，每一句话都要写一段代码。</p><p>为了简化工作，对话要做成配置表或者文本形式。</p><p>因为宝可梦的对话系统比较简单，不用配置头像，所以我选择最简单的文本形式作为对话系统的数据存储。</p><p><img src="https://files.catbox.moe/3jjq7n.jpg" alt="对话文本"></p><p>这个对话系统的数据存储也是想了好久才决定用这种形式。</p><p>第一是要直观的看出对话内容，第二是要方便设置和修改。</p><p>用 excel 虽然可以实现更加复杂的对话系统，但是配置对话文本花的时间也会翻倍。</p><p>按照目前的情况时间并不充裕，我要在最短的时间把游戏赶制出来，选择简单文本是最佳方案。</p><h1 id="选项系统"><a href="#选项系统" class="headerlink" title="选项系统"></a>选项系统</h1><p>要让剧情连贯起来不是一件容易的事情。</p><p>所以我的第一步计划是不用连贯的方法，而是分开实现各个系统。</p><p>假如有一个场景是一个 NPC 跑过来跟玩家对话，然后问了玩家一个问题，要让玩家做出二选一，选完之后 NPC 就会离开。</p><p>这个情景看起来很简单，但是要连贯起来是非常困难的。</p><p>在一些大游戏会专门设计一个可视化剧情系统来完成整个剧情动画。</p><p>但是我现在的状况不允许慢悠悠的去做一套剧情系统，相反如果不用连贯的方式来实现就会简单得多。</p><p>比如对话完了要调出一个选项，那就先结束对话，接着创建一个选项，玩家选择完之后，再重新调用下一段的对话。</p><p>理论上可以实现剧情系统的连贯，但是得花好多时间去完成一整套的剧情系统。</p><p>缺点是代码会有很多层嵌套，玩家层面感知不到，所以没关系。</p><p>能用人力解决的，就先用人力代替吧，节省时间。</p><p><img src="https://files.catbox.moe/9dsndy.gif" alt="选项系统"></p><p>选项系统和对话系统是分开的，因此在一个剧情对话中，需要把一段原本完整的剧情分割成多个。</p><p>这也是比较麻烦的地方，但还好问题不大。</p><h1 id="联动效果"><a href="#联动效果" class="headerlink" title="联动效果"></a>联动效果</h1><p>为了方便调用，创建对话和选项的方法要封装起来。</p><p>创建一个 GameManager 游戏管理类，用于调用一些通用的方法。</p><p><img src="https://files.catbox.moe/fid6fp.jpg" alt="封装方法"></p><p>然后试着写一下对话和选项的联动实现剧情的代码实现。</p><p><img src="https://files.catbox.moe/si4hkc.jpg" alt="对话和选项联动的代码"></p><p>如果剧情对话的分支比较多的话，就比较蛋疼了……</p><p>测试结果：</p><p><img src="https://files.catbox.moe/ysobfs.gif" alt="剧情对话和选项的联动"></p><p>看起来是没啥问题了，但代码写起来不是很优雅。</p><p>而且在创建选项的时候，这里的文字是没有本地化语言处理的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> private void Select()</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;OptionData&gt; optionDatas &#x3D; new List&lt;OptionData&gt;();</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;男孩&quot;,</span><br><span class="line">        callback &#x3D; Dialog_2</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;女孩&quot;,</span><br><span class="line">        callback &#x3D; Dialog_3</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    GameManager.CallSelectPanel(optionDatas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前游戏有两种语言：简体中文和繁体中文。</p><p>如果这样写死代码的话，就没办法实现多语言了。</p><blockquote><p>有时候真的想去游戏公司实习一下，看看别人是怎么做的，网上几乎找不到相关的教程，经常卡到头大</p></blockquote><p>要保证能够多语言化，这里的选项文字就得提取出来。</p><p>所以我决定单独把 UI 的文本提取成一个 TXT 文件。</p><h1 id="UI-文本"><a href="#UI-文本" class="headerlink" title="UI 文本"></a>UI 文本</h1><p>创建一个本地化文本 ui.txt：</p><p><img src="https://files.catbox.moe/m6f6gc.jpg" alt="ui.txt"></p><p>这个文件保存了界面 UI 上的文字和对话选项的文字。</p><p>UI 文本需要在游戏启动时进行加载。</p><p>创建一个 Loading 场景加载资源，加载完成后即跳转到测试场景。</p><p>在 GameManager 里用一个静态变量保存所有 UI 文本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class GameManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public static Dictionary&lt;string, string&gt; uiTexts &#x3D; new Dictionary&lt;string, string&gt;();</span><br><span class="line"></span><br><span class="line">    public static void LoadLocaleSetting()</span><br><span class="line">    &#123;</span><br><span class="line">        string lang &#x3D; &quot;zh-cn&quot;;</span><br><span class="line">        TextAsset uiText &#x3D; Resources.Load(&quot;Locale&#x2F;&quot; + lang + &quot;&#x2F;common&#x2F;ui&quot;) as TextAsset;</span><br><span class="line">        string[] data &#x3D; uiText.text.Split(Environment.NewLine.ToCharArray());</span><br><span class="line"></span><br><span class="line">        foreach (string item in data)</span><br><span class="line">        &#123;</span><br><span class="line">            if (item !&#x3D; &quot;&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                string[] res &#x3D; item.Split(&#39;&#x3D;&#39;);</span><br><span class="line">                uiTexts.Add(res[0], res[1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且提供了一个加载资源的方法。</p><p>这样文本就会全部载入到静态变量中，全局都可以调用。</p><h1 id="选项本地化"><a href="#选项本地化" class="headerlink" title="选项本地化"></a>选项本地化</h1><p>修改之前生成选项的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private void Select()</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;OptionData&gt; optionDatas &#x3D; new List&lt;OptionData&gt;();</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;boy&quot;,</span><br><span class="line">        callback &#x3D; Dialog_2</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    optionDatas.Add(new OptionData</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; &quot;girl&quot;,</span><br><span class="line">        callback &#x3D; Dialog_3</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    GameManager.CallSelectPanel(optionDatas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只要传入 UI 文本中等号左边的 key（键名）就可以。</p><p>boy 和 girl 是在 ui.txt 文本中定义的。</p><p>只要传入这个键名，就会转化成对应的键值：男孩和女孩。</p><p>最后在选项数据里加一个将 key 转化为对应文本的方法即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class OptionData</span><br><span class="line">&#123;</span><br><span class="line">    public string text;</span><br><span class="line">    public System.Action callback;</span><br><span class="line"></span><br><span class="line">    public string GetText()</span><br><span class="line">    &#123;</span><br><span class="line">        GameManager.uiTexts.TryGetValue(text, out string value);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下大功告成~</p><p>这样看起来舒服多了~</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝可梦游戏室内地图绘制学习</title>
      <link href="/2021/06/04/pokemon-like-02/"/>
      <url>/2021/06/04/pokemon-like-02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>宝可梦游戏的室内地图都很小巧精致。</p><p>为了制作宝可梦同人，绘制自己的场景地图，需要学习一下宝可梦风格的房子有什么特征。</p><h1 id="单间房子"><a href="#单间房子" class="headerlink" title="单间房子"></a>单间房子</h1><p><img src="https://files.catbox.moe/4ctqor.jpg" alt="单间"><br><img src="https://files.catbox.moe/x2l3f6.jpg" alt="单间"></p><h1 id="隔间房子"><a href="#隔间房子" class="headerlink" title="隔间房子"></a>隔间房子</h1><p>如果房子比较大，就会用墙壁分割成多间小房子。</p><p><img src="https://files.catbox.moe/j9bt4c.jpg" alt="多间"></p><h1 id="风格总结"><a href="#风格总结" class="headerlink" title="风格总结"></a>风格总结</h1><p>宝可梦室内地图都很小巧，掌机屏幕不大所以设计成小房子没什么奇怪的。</p><p>但是观察之后发现可能并不是因为这个原因。</p><p><img src="https://files.catbox.moe/q6hi8v.jpg" alt="实际的场景大小"></p><p>在本来就不大的掌机屏幕，宝可梦公司并没有最大程度的利用屏幕空间。</p><p>反而是把空间进一步的压缩，可以发现所有室内地图周围都有黑边。</p><p>也许是日本那边比较喜欢小的房间，所以将游戏中的房子也设计成小房间。</p><p>房间小还有几个优点：</p><p>① 看起来更加精致</p><p>宝可梦是 Q 版风格，小巧的房间显得更加精致。</p><p>② 减少玩家跑图距离</p><p>避免玩家因为跑图而浪费太多时间。</p><p>在房间里不能骑自行车，所以太远的距离会影响玩家的体验。</p><p>宝可梦公司在掌机屏幕已经很局限的情况下，再将房间进一步的进行压缩，这种设计有点大胆~</p><p>另外，仔细观察不难发现几乎家家户户的边角都有这种植物和电视机。</p><p><img src="https://files.catbox.moe/f3x0vy.jpg" alt="植物和电视机"></p><p>此外，所有的出口都有地毯作为标志物。</p><p><img src="https://files.catbox.moe/mnn1gt.jpg" alt="地毯"></p><p>看到地毯就知道这是房间的出口。</p><p>最后，所有的房间几乎都有窗户（正面）。</p><p><img src="https://files.catbox.moe/x2p3zx.jpg" alt="窗户"></p><h1 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h1><p>总结出宝可梦室内房间风格之后，不难发现有几个特征。</p><ul><li>空间很小</li><li>周围有黑边</li><li>有电视剧、植物等常见室内摆设</li><li>出口出有地毯</li><li>正面看得见窗户</li></ul><p>那么根据这些特征设计房间就能有“宝可梦”的味道了！</p><h1 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h1><p>这是未总结宝可梦风格之前设计的室内地图。</p><p><img src="https://files.catbox.moe/t9chba.jpg" alt="第一版"></p><p>场景的像素为 640*480。</p><p>因为没有使用黑边，所以看起来有点空旷。</p><p>明显可以感觉到左下角和右上角的这两个部分有点“空”。</p><p><img src="https://files.catbox.moe/e9vklw.jpg" alt="空空如也"></p><p>墙壁看不见窗户，有一种密闭感会让人觉得透不过气。</p><h1 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h1><p>在保证基本布局不变的情况下，将此房间改造成“宝可梦风”。</p><h2 id="缩小房间面积"><a href="#缩小房间面积" class="headerlink" title="缩小房间面积"></a>缩小房间面积</h2><p>空间不需要占满，周围用黑边代替。</p><p>将整个房间压缩到一个很精致小巧的大小。</p><p>第一步，绘制地板和墙壁，房间的面积大幅缩减，周围用黑边代替。</p><p><img src="https://files.catbox.moe/da4bmc.jpg" alt="黑边和地板、墙壁"></p><h2 id="出口处放置地毯"><a href="#出口处放置地毯" class="headerlink" title="出口处放置地毯"></a>出口处放置地毯</h2><p><img src="https://files.catbox.moe/e5un5m.jpg" alt="放置地毯"></p><h2 id="摆放房屋物件"><a href="#摆放房屋物件" class="headerlink" title="摆放房屋物件"></a>摆放房屋物件</h2><p>这是一间卧室，所以有床、书柜和桌子等基本物件。</p><p><img src="https://files.catbox.moe/2yrb9i.jpg" alt="基本家具"></p><h2 id="装饰物"><a href="#装饰物" class="headerlink" title="装饰物"></a>装饰物</h2><p>家具有了，已经具备了一个普通房间的基本标准。</p><p>但这个房间没有什么特色，因此接下来摆放一些装饰物来点缀房间。</p><p>给地板铺上毛绒毯子，还有地上随处乱扔的抱枕，再加点猫脚印填补下方的空白。</p><p><img src="https://files.catbox.moe/539gid.jpg" alt="装饰物"></p><p>墙壁有点空，再贴上海报和蝴蝶挂画。</p><p><img src="https://files.catbox.moe/xb1f6n.jpg" alt="墙壁装饰物"></p><h2 id="窗户"><a href="#窗户" class="headerlink" title="窗户"></a>窗户</h2><p>没有窗户会产生密闭感，会让人觉得很压迫。</p><p>这里既可以直接用窗户，也可以用窗帘，都能产生相同的效果。</p><p>（发现植物盆子底下少了一块，趁机补上）</p><p><img src="https://files.catbox.moe/gtpfgo.jpg" alt="窗户"></p><p>这间屋子是典型的少女房间，一般都会拉上窗帘。</p><p>当然用正方形格子的窗户也是可以的。</p><h1 id="两版对比"><a href="#两版对比" class="headerlink" title="两版对比"></a>两版对比</h1><p>改进版虽然左下角没有放装饰物，但看起来却不会那么空旷。</p><p>右上角原本空空的地方已经变成很自然了。</p><p><img src="https://files.catbox.moe/qec56k.jpg" alt="左下角部分"></p><p>左下角还可以再放个毛绒熊的布娃娃填补空白。</p><p>但是留白的地方还是很重要的，太多的装饰物看起来反而会让人眼花缭乱。</p><p>再加上压缩了房间的面积，要素过多就会变得杂乱不堪。</p><p>左右下角两边各有猫脚印的坐垫，好似猫走过的痕迹。</p><p><img src="https://files.catbox.moe/yhzol5.jpg" alt="猫走过的痕迹"></p><p>两边对称的摆设让人看起来会很舒服~</p><p>正中间的地方再放一个猫型抱枕，起到点题的作用。</p><p>因此这间房间就是「猫主题的少女房间」。</p><p><img src="https://files.catbox.moe/n7wxd5.jpg" alt="猫主题少女房间"></p><h1 id="素材来源"><a href="#素材来源" class="headerlink" title="素材来源"></a>素材来源</h1><p>本文演示用的地图块素材来源如下：</p><p><a href="https://rpg.blue/thread-485281-1-1.html">by loffid</a><br><a href="http://www.rpgtuzi.com/?id=35">by  rpgtuzi</a></p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代号：宝可梦</title>
      <link href="/2021/06/02/pokemon-like-01/"/>
      <url>/2021/06/02/pokemon-like-01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小学的时候放学就直奔回家，为了防止错过宝可梦无印篇。</p><p>因为没有办法入手 GB、GBA 等掌机，所以没机会接触到口袋妖怪。</p><p>唯一的童年回忆就是无印篇的动画版了。</p><p>直到初中以后，家里买了电脑，所以开始搜索宝可梦相关的游戏。</p><p>最开始是找到魔兽世界的宝可梦地图，但很遗憾不会用。</p><p>接着无意中搜索了宝可梦的图片（可能是想找壁纸什么的）。</p><p>看到一张图片下面有水印“66RPG”，机缘巧合的打开了新世界的大门。</p><p>估计是某人用 RPG Maker XP 自制的宝可梦同人游戏。</p><p>我期待的下载下来试玩，我还记得只有一场战斗对阵化石翼龙。</p><p>打完就结束了。</p><p>回合制的战斗外加很不错的连击系统，打击感比起正统的宝可梦游戏强得多。</p><p>然后开始逛 6R 的论坛，发现原来这里是一个游戏制作者论坛。</p><p>后面就很奇妙的下载了 RPG Maker XP，开始了游戏制作之旅。</p><p>再后面的话，对电脑的操作技术也越来越熟练了。</p><p>知道原来可以用模拟器启动口袋妖怪游戏，最初玩的是口袋妖怪：钻石。</p><p>后面又玩了白金。</p><p>不知道从哪里发现了一个国产的口袋妖怪在线对战软件 PBO。</p><p>可以自由组合搭配队伍与其他玩家对战。</p><p>但是 PBO 的网络不稳定，经常无法联机。</p><p>然后又不知道从哪里下载了老外的 PBO，可以与全世界的人进行对战。</p><p>玩的不亦乐乎！</p><p>又玩了 GBA 的绿宝石、火红叶绿。</p><p>然后就在电脑上启动两个模拟器，左边是我，右边是 cee，两个人一起玩绿宝石。</p><p>模拟器还可以进行联机对战，我们就在屏幕中间用胶布粘了一个纸板，防止对战的时候偷看。</p><p>可以说宝可梦游戏给我们带来了很多的欢乐。</p><h1 id="最初的梦想"><a href="#最初的梦想" class="headerlink" title="最初的梦想"></a>最初的梦想</h1><p>最初我们是为了寻找口袋妖怪游戏，误打误撞进入了 6R 论坛。</p><p>接触了 RPG Maker 制作工具，当时就想自己做一款宝可梦的同人。</p><p>但是可惜宝可梦的系统没办法实现，后面就不了了之了。</p><p>现在已经有能力原创系统了，所以打算重拾梦想。</p><h1 id="制作计划"><a href="#制作计划" class="headerlink" title="制作计划"></a>制作计划</h1><p>为了避免与《名为怪物的游戏》制作产生冲突。</p><p>这个游戏将会是我个人进行开发，两个游戏同时开发。</p><p>虽然说是宝可梦的同人，但是宝可梦公司是严令禁止二次创作的。</p><p>所以我不会直接使用宝可梦相关的素材，沿用的是宝可梦的世界观和背景、系统。</p><p>当然，并不是单纯的复刻宝可梦，那样没什么意义。</p><p>我想做的是融入自己想法的宝可梦游戏，所以会有一定程度的魔改。</p><p>素材也将从零开始自学像素画完成。</p><p>在制作初期会使用口袋妖怪绿宝石的素材临时替代。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>初步计划是做到第三个道馆的剧情。</p><p>预计在今年发布 Demo 版。</p><p>目标是登录 Steam 发售。</p><p>同时发布免费的体验版在 QQ 群以及本博客。</p><p>如果能顺利完成，将会保持更新直至完结为止。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 代号：宝可梦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏预告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的像素画学习（二）小技巧整合篇</title>
      <link href="/2021/05/31/pixel-02/"/>
      <url>/2021/05/31/pixel-02/</url>
      
        <content type="html"><![CDATA[<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><h3 id="快速描线"><a href="#快速描线" class="headerlink" title="快速描线"></a>快速描线</h3><p>通常像素画要用鼠标一个一个点出线条，但是今天学到一招小技巧。</p><p>先用铅笔点出一个点，再按住 Shift 键在别的地方点一下，一个像素风格的线条就出现了！</p><p><img src="https://i.loli.net/2021/05/31/QAagvjyDHERGV6s.gif" alt="Kapture 2021-05-31 at 12.37.55.gif"></p><h3 id="临摹模式"><a href="#临摹模式" class="headerlink" title="临摹模式"></a>临摹模式</h3><p>通常我们会选用一张参考图片，然后放到旁边当做参考。</p><p><img src="https://i.loli.net/2021/05/30/rN847JuQ1tZlH2K.jpg" alt="参考图片"></p><p>但还有一种临摹模式，可以直接在原图上进行绘制。</p><p>打开一张要临摹的图片，然后在右侧图层将不透明度改成 50% 即可。</p><p><img src="https://i.loli.net/2021/05/31/eSTDtWjgcnNkOb8.jpg" alt="QQ20210531-124256.jpg"></p><p>然后新建一个图层，在新的图层上面描线。</p><p><img src="https://i.loli.net/2021/05/31/IWmNRi5SCJGkPQw.jpg" alt="QQ20210531-124545.jpg"></p><h3 id="新建图层"><a href="#新建图层" class="headerlink" title="新建图层"></a>新建图层</h3><p>线稿以及涂色都要在单独的图层，快速新建图层只要按快捷键：Shift+Ctrl+N。</p><h3 id="切换工具"><a href="#切换工具" class="headerlink" title="切换工具"></a>切换工具</h3><p>想要快速切换橡皮擦与铅笔，只要将鼠标移动到左侧的工具菜单，稍等一会就可以看到快捷键提示。</p><p><img src="https://i.loli.net/2021/05/31/ctdnXvypqk1Ns4P.jpg" alt="QQ20210531-134744.jpg"></p><p>橡皮擦的快捷键是 E（英文：Eraser），画笔的快捷键是 B（Brush）。</p><p>直接使用快捷键切换可以大大提高绘图效率。</p><h3 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h3><p>想要直接获得图像的轮廓，可以按住 Ctrl 键然后点击右侧图层。</p><p>这样整个图层都会变成选中状态。</p><p><img src="https://i.loli.net/2021/05/31/YtoEcLiAu4psh52.jpg" alt="QQ20210531-135140.jpg"></p><h3 id="文字转图层"><a href="#文字转图层" class="headerlink" title="文字转图层"></a>文字转图层</h3><p>默认情况下文字是不能被涂改的，可以将文字栅格化转变为图层。</p><p><img src="https://files.catbox.moe/mrtobf.jpg" alt="栅格化文字"></p><p>栅格化之后文字会变成一个图层，然后就可以随意涂改了。</p><p><img src="https://files.catbox.moe/vpi4oo.jpg" alt="涂改文字"></p><h3 id="自由变换"><a href="#自由变换" class="headerlink" title="自由变换"></a>自由变换</h3><p>按住 Ctrl+T 可以对图像进行自由变换。</p><p>不仅可以缩放、调整位置，还可以旋转图像。</p><p><img src="https://files.catbox.moe/byo0bl.jpg" alt="自由变换"></p><h3 id="所有快捷键"><a href="#所有快捷键" class="headerlink" title="所有快捷键"></a>所有快捷键</h3><p>Photoshop 所有快捷键操作。</p><p>参考官方文档：<a href="https://helpx.adobe.com/cn/photoshop/using/default-keyboard-shortcuts.html">https://helpx.adobe.com/cn/photoshop/using/default-keyboard-shortcuts.html</a></p><h2 id="绘制技巧"><a href="#绘制技巧" class="headerlink" title="绘制技巧"></a>绘制技巧</h2><h3 id="抖动"><a href="#抖动" class="headerlink" title="抖动"></a>抖动</h3><p>能让密集恐惧症抓狂的小技巧。</p><p><img src="https://i.loli.net/2021/05/31/mQ3tdufgHTn1LxE.jpg" alt="QQ20210531-125250.jpg"></p><p>抖动可以让画面更有质感。</p><p><img src="https://i.loli.net/2021/05/31/t9Egz8nBwVSx32d.jpg" alt="QQ20210531-133513.jpg"></p><p>无抖动的效果：</p><p><img src="https://i.loli.net/2021/05/31/bXSw9svhk6xFTRN.jpg" alt="QQ20210531-133647.jpg"></p><p>加了抖动的效果：</p><p><img src="https://i.loli.net/2021/05/31/ozbUMYTmhGciqD6.jpg" alt="QQ20210531-133716.jpg"></p><p>尾巴部分的毛色看起来更加自然。</p><p>如果用不好的话，就会让密集恐惧者抓狂。</p><p><img src="https://i.loli.net/2021/05/31/VOquEPLpXNKbGMr.jpg" alt="QQ20210531-133936.jpg"></p><h3 id="平滑的线"><a href="#平滑的线" class="headerlink" title="平滑的线"></a>平滑的线</h3><p>在保证线条不断的情况下删掉多余的点，让线条变得更加平滑。</p><p><img src="https://i.loli.net/2021/05/31/Vpw6AHsrk2vLxuU.jpg" alt="QQ20210531-125502.jpg"><br><img src="https://i.loli.net/2021/05/31/flkrOqJAVIsgeNT.jpg" alt="QQ20210531-125513.jpg"></p><h3 id="抗锯齿"><a href="#抗锯齿" class="headerlink" title="抗锯齿"></a>抗锯齿</h3><p>像素画的边界会有明显的锯齿感，但是浅色的就比较不会。</p><p>这是因为颜色与背景产生鲜明的对比，所以看起来更加“犀利”。</p><p><img src="https://i.loli.net/2021/05/31/tXHIFPTWrbodcDh.jpg" alt="QQ20210531-130054.jpg"></p><p>要想消除锯齿感只要让边缘与背景颜色的对比不那么鲜明即可。</p><p>像素风的圆不是一个真正的原型，对比之下可以发现与真实的圆存在一些空缺。</p><p><img src="https://i.loli.net/2021/05/31/gplnb9xcMdo7C1k.jpg" alt="QQ20210531-130246.jpg"></p><p>只要在空缺的地方补上较浅的颜色即可。</p><p>缺失得多的地方就补上较深的颜色，缺失少的部分就补上浅色。</p><p><img src="https://i.loli.net/2021/05/31/BwLGhp5U4Q2sVWv.jpg" alt="QQ20210531-130409.jpg"></p><p>补上空缺之后看起来好多了。</p><h3 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h3><p>只要在光暗交界处绘制阴影即可。</p><p><img src="https://i.loli.net/2021/05/31/CMsLEhQc2AkwPYI.jpg" alt="QQ20210531-125652.jpg"></p><h3 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h3><p>通过颜色深浅变化来绘制渐变效果。</p><p><img src="https://i.loli.net/2021/05/31/kWgIpL7iqCj6EnN.jpg" alt="QQ20210531-125744.jpg"></p><h3 id="颜色组合"><a href="#颜色组合" class="headerlink" title="颜色组合"></a>颜色组合</h3><p>不同的颜色组合会有不同的效果。</p><p>绘制阴影的时候可以多尝试几个不同的颜色。</p><p><img src="https://i.loli.net/2021/05/31/TdFIp81B493VkjR.jpg" alt="QQ20210531-125900.jpg"></p><h3 id="转像素图"><a href="#转像素图" class="headerlink" title="转像素图"></a>转像素图</h3><p>将一张非像素图片转化为像素图的方法。</p><p>即直接将一张大图调整为小图，缩放之后自然就会变成像素风格了（其实就是变糊了）。</p><p><img src="https://i.loli.net/2021/05/31/qF4dSjBigWzVLem.jpg" alt="QQ20210531-130849.jpg"></p><p>就着在新图上面描线和添加颜色，就可以完成一张像素画了。</p><p><img src="https://i.loli.net/2021/05/31/5a6UscfwhKJWuBj.jpg" alt="QQ20210531-131503.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> 游戏素材 </tag>
            
            <tag> 像素画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的像素画学习（一）</title>
      <link href="/2021/05/30/pixel-01/"/>
      <url>/2021/05/30/pixel-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 Cee 非全职制作，所以进度比较慢。</p><p>在等待素材完成期间我会再开一个新坑同步开发，保证今年绝不会鸽！</p><p>无论如何我都想开发一个纯原创的游戏（音乐除外），所以排除了用 RPG Maker 的素材，打算自己原创。</p><p>我并不是专业学美术的，所以打算挑选比较适合非专业人员易上手的像素风作为游戏的基本风格。</p><h2 id="第一次练习"><a href="#第一次练习" class="headerlink" title="第一次练习"></a>第一次练习</h2><p>第一次用皮卡丘作为参照物绘制像素画。</p><p>工具是 PS + 画图，PS 的操作还不太熟悉，等熟悉以后就完全用 PS 绘制。</p><p>虽然是第一次画，但是速度还挺快的，大约只花了十几分钟就完成了。</p><p><img src="https://i.loli.net/2021/05/30/XNuRYISp9kVAC4g.jpg" alt="QQ截图20210530230154.jpg"><br><img src="https://i.loli.net/2021/05/30/rN847JuQ1tZlH2K.jpg" alt="QQ截图20210530231344.jpg"><br><img src="https://i.loli.net/2021/05/30/5iHuZvGOS79lYNw.jpg" alt="QQ截图20210530232349.jpg"></p><p>线条看起来毛躁毛躁的，接下来开始看一些像素画教程提升一下绘画水平(～￣▽￣)～</p><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>由于我有色弱，所以天生就不适合当美工，我画的素材颜色可能不对。</p><p>(上面的皮卡丘不会是绿色的吧……)</p><p>记得上幼儿园的时候，老师让我们画画，我画了树和太阳，把树涂成了黄色……结果还被老师批评了。</p><p>并不是我涂错色，我当然知道树应该涂绿色，但是我分不清黄色和绿色，结果涂成了黄色。</p><p>老师并不知道有色盲这种症状，在不知情的情况下批评一个小孩……我还清楚的记得那种打击感。</p><p>如果老师能问：为什么把树涂成黄色了，难道是秋天到了？</p><p>我可能就不会因为这件事产生心理阴影了。</p><p>后面我都不敢继续画画了，即使画了也不敢涂颜色，生怕涂错被人嘲笑……</p><p>（我小时候是很喜欢画画的，就因为涂错了颜色被嘲笑之后留下了心理阴影）</p><p>长大之后最可怕的就是地理课了，各种地图上面用颜色标注我根本就分不清，比如什么温带气候啊，用深色和浅色来标注，我压根就看不清楚到底哪个颜色对应哪个区域，结果被老师提问了也答不上来，然后又被狠狠的批评了……</p><p>真的是欲哭无泪，还有每次体检遇到色盲检测图的时候，总有几个答不上来，如果旁边有其他小朋友，那就十分尴尬了。</p><p>所幸的是我并不是色盲，而只是对于某些颜色分不清，要不然驾照都考不了。</p><p>我一直很疑惑为什么交通红绿灯一定要用颜色来区分？</p><p>为什么不能改变灯的形状，比如圆形是停下，三角形是通行，正方形是警示灯。</p><p>如果用形状区分的话，那么色盲和色弱也能分得清楚了。</p><p>有些事是天生的，没办法改变靠努力改变，ε=(´ο｀*)))唉</p><p>现在长大了，有了克服心理阴影的勇气。</p><p>如果我也能当个美工，那样游戏的制作进度就可以自己掌控了。</p><p>在《名为怪物的游戏》素材完成期间进行开发不会影响到整体的进度，新坑作为 B 计划防止因为意外事件导致今年没能推出游戏作品。</p><p>自从《魔王传说2》和《路人甲的故事》之后，N 年间都没能推出新作品，这是我现在最悔恨的事情。</p><p>制作一个原创游戏是我多年的夙愿，无论如何今年都必须推出新作，如果怪物游戏也能够顺利完成，今年就会有两部新作推出了！！！</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> 游戏素材 </tag>
            
            <tag> 像素画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（END）</title>
      <link href="/2021/05/30/monster-game-10/"/>
      <url>/2021/05/30/monster-game-10/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>真的完结啦！！！</p><p>演示地址：<a href="https://www.bilibili.com/video/BV1Bf4y1h7RE/">前往B站观看</a></p><p>下载地址：<a href="https://pan.baidu.com/s/1lYDppNY_xTawMjX2H5rCkQ">百度网盘</a></p><p>提取码：gq8c</p><h2 id="场景搭建"><a href="#场景搭建" class="headerlink" title="场景搭建"></a>场景搭建</h2><h3 id="基本场景"><a href="#基本场景" class="headerlink" title="基本场景"></a>基本场景</h3><p>导入场景素材，然后搭建游戏基础场景。</p><p><img src="https://files.catbox.moe/faph6j.jpg" alt="游戏场景"></p><h3 id="场景滚动"><a href="#场景滚动" class="headerlink" title="场景滚动"></a>场景滚动</h3><p>玩家向前奔跑时，当玩家跑到屏幕的中线位置，背景就会开始跟随滚动。</p><h3 id="多重卷轴"><a href="#多重卷轴" class="headerlink" title="多重卷轴"></a>多重卷轴</h3><p>多重卷轴的原理是利用多个背景层移动速度不一致让玩家存在视觉的偏差。</p><p>使用多重卷轴可以让背景更有立体感。</p><h3 id="场景限制"><a href="#场景限制" class="headerlink" title="场景限制"></a>场景限制</h3><p>跑到极限位置时，背景不再滚动，并且玩家无法继续向前。</p><p>而玩家跑到屏幕左侧时，也无法往回跑。</p><h3 id="视野跟随"><a href="#视野跟随" class="headerlink" title="视野跟随"></a>视野跟随</h3><p>场景中的摄像机默认是静止的，当玩家向前走时，摄像机应该也跟着走。</p><p>这样才能让主角一直保持在视野里。</p><p>摄像机的移动是有规律的。</p><p>当玩家没有超过屏幕水平中线位置时摄像机不会移动，这样可以让玩家不会超过屏幕中线的位置。</p><p>距离屏幕右侧有一段比较大的安全距离，可以让玩家有足够的判断时间躲避袭来的敌人或者子弹。</p><h4 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h4><p>实际上视野跟随实现起来很简单，但是因为我一开始设计失误，把所有的图片都当做 UI 了。</p><p>UI 无法跟随摄像机移动，但是可以解决图片缩放问题。</p><p>所以制作的过程快了很多，不过现在要让视野跟随玩家移动就比较麻烦了。</p><h4 id="摄像机跟随"><a href="#摄像机跟随" class="headerlink" title="摄像机跟随"></a>摄像机跟随</h4><p>虽然无法通过平移摄像机的方式来改变视野，但是反过来可以让 UI 移动，让视野中心一直处于摄像机中间。</p><p>只不过这样移动是把整个游戏的场景进行平移，在性能上远不如移动摄像机。</p><p>所幸小游戏只有一关而且流程不长，所以可以通过这种方法实现视野跟随。</p><p><img src="https://files.catbox.moe/0hi1bp.jpg" alt="游戏场景"></p><p>玩家控制的角色永远都在红色方块的区域，而玩家移动时，背景也跟着相对移动。</p><p>所以视觉上就会变成玩家在向前奔跑的效果。（请回顾高中物理：相对运动）</p><p><img src="https://i.loli.net/2021/05/21/qtQVvwECgB4esiz.jpg" alt="QQ20210521-175501.jpg"></p><p>总的关卡场景由 4 个屏幕组成，最终要留一个屏幕的距离，每一个屏幕的宽度为 1280 像素。</p><p>背景滚动示意图：</p><p><img src="https://i.loli.net/2021/05/21/4K9nYTcLtjJhHyB.jpg" alt="QQ20210521-181226.jpg"></p><h3 id="阻挡玩家前进-后退"><a href="#阻挡玩家前进-后退" class="headerlink" title="阻挡玩家前进/后退"></a>阻挡玩家前进/后退</h3><p>为了避免玩家可以回头或者继续向前走离开屏幕范围，在场景看不见的位置设置两道“空气墙”（白色区域）阻挡玩家行走。</p><p><img src="https://i.loli.net/2021/05/21/ThyaOvPnemfR5AN.jpg" alt="QQ20210521-175947.jpg"></p><p>玩家走到左侧边缘或者右侧边缘的时候，就会被空气墙挡住了。</p><h2 id="销毁物体-敌人-子弹"><a href="#销毁物体-敌人-子弹" class="headerlink" title="销毁物体/敌人/子弹"></a>销毁物体/敌人/子弹</h2><p>由于游戏场景的道具、敌人、子弹会占用内存并且还会处于一直计算的状态（占用 CPU）。</p><p>对于飞出屏幕之外的子弹以及离开屏幕的道具、敌人应该将其销毁，从而释放内存。</p><p><img src="https://i.loli.net/2021/05/21/NeTI1Wa5poL29tU.jpg" alt="QQ20210521-182310.jpg"></p><p>当前场景中有一个看不见的检测区域，当游戏中的物体进入/离开时，就会触发碰撞监听。</p><p>当物体进入的时候，触发激活状态；当物体离开的时候就销毁。</p><p>激活状态对敌人的设定非常有用，只有敌人进入玩家视野的时候才让敌人开始行动，否则就是静止状态。</p><h2 id="关卡设计"><a href="#关卡设计" class="headerlink" title="关卡设计"></a>关卡设计</h2><p>在玩别人制作的游戏时，总觉得玩起来没有违和感。</p><p>但如果自己来设计关卡的话，总觉得各种怪怪的。</p><p>因为只有一关，所以关卡就设计的比较简单，跑图然后进入 BOSS 战，结束。</p><blockquote><p>小插曲：unity 中的 transform.position 获取的是世界坐标，而 transform.localPosition 才是相对于父节点的坐标，如果直接用世界坐标会出现敌人跟着场景运动（即运动的叠加，例如一个人站在高速行驶的火车上向前跑或者回头跑）所以应该只在相对于父节点的位置进行运动</p></blockquote><h3 id="激活敌人"><a href="#激活敌人" class="headerlink" title="激活敌人"></a>激活敌人</h3><p>场景中的敌人在进入视野前不应该能够自由移动。</p><p>也就是说，默认情况下应该让敌人处于“静止”状态，只有进入玩家的视野才“激活”它们。</p><p>做法十分简单，原理与让子弹消失一样。</p><p><img src="https://files.catbox.moe/kpsunj.jpg" alt="区域检测器"></p><p>区域检测器不仅可以用来让离开区域的子弹消失，同样可以检测进入区域的怪物。</p><p>只要怪物进入区域就自动触发激活状态的回调即可。</p><p>屏幕外的敌人处于不动的状态，进入区域之后才变为激活。</p><p>不仅可以节约 CPU 的开销，也可以避免敌人乱蹦乱跳打乱关卡节奏。</p><p>因为是全局的设置，所以最开始抽取的 <code>MiniGame_Enemy</code> 作为敌人的父类方法就可以直接“一键修改”了。</p><p>这就是抽取出父类的好处，后面加入新功能可以节约很多时间。</p><h3 id="教学关卡"><a href="#教学关卡" class="headerlink" title="教学关卡"></a>教学关卡</h3><p>游戏开始时，前面有一小段“教学关卡”。</p><p><img src="https://i.loli.net/2021/05/14/uQUzMJshAFcOERb.jpg" alt="QQ20210514-190224.jpg"></p><p>因为以前的 FC 游戏都是手柄操作的，所以不需要提示按键。</p><p>玩家可以靠自己尝试了解到每一个键的作用。</p><p>为了让玩家知道基本操作，这是游戏中仅有的一次提示。</p><p>前方设置三个樱桃，即使玩家想要跳过也一定会碰到。</p><p>让玩家知道吃到这个东西可以加分。</p><p>接下来右方有一根水管限制玩家继续移动，玩家需要跳过水管或者站在水管上面。</p><p>接着刚好会飘来一只幽灵，让玩家第一次接触战斗。</p><p>教学关键这样就结束了。</p><p>（这个水管的形状以及放置的位置就是致敬以前玩的马里奥 FC 游戏，毕竟 FC 游戏是我们的启蒙）</p><h2 id="BOSS-及关卡流程"><a href="#BOSS-及关卡流程" class="headerlink" title="BOSS 及关卡流程"></a>BOSS 及关卡流程</h2><p>此处省略一万个字……</p><p>本来是打算边写制作过程记录下来的，结果是边修 BUG，边测试……</p><p>因为最开始设计失误导致全部游戏对象都采用了 UI，接着为了让摄像机跟随就要挪动整个游戏场景；</p><p>挪动整个游戏场景意味着地图上的怪物也会跟着挪动，因此需要重新修改怪物的行动方式……</p><p>“将错就错”反而需要花费更多的时间来弥补前面的失误，重新修改的过程心态都快爆炸了。</p><p>如同网上的段子一样，修好了一个 BUG，就会出现另一个新的 BUG，所以那天一整个下午都沉浸在修 BUG 的恐惧。</p><p>所幸还是坚持改完了，剩下一些操作体验的问题以后有时间再修改。</p><blockquote><p>“以后再改”的潜台词就是“不打算改了”——兔(ge)子(zi)语录</p></blockquote><h2 id="游戏剧情"><a href="#游戏剧情" class="headerlink" title="游戏剧情"></a>游戏剧情</h2><p>为了弥补原来没有设剧情的遗憾，重置版增加了结局。</p><p>（实际上跟哑剧差不多）</p><p>玩家操控女主角将布偶 BOSS 打出真身，然后返回城里。</p><p>返途中，场景出现的怪物会为布偶“送别”，直到快要靠近城里的时候依依不舍的离开。</p><p>最后，女主角将布偶交还给小女孩，剧情结束。</p><p>另外本结局将解锁 CG 一枚。</p><h2 id="素材问题"><a href="#素材问题" class="headerlink" title="素材问题"></a>素材问题</h2><p>由于我们两个人都没有制作音乐的能力，所以我们决定直接使用公开版权的音乐素材。</p><p>游戏是 FC 时代的风格，因此采用 8-Bit 的背景音乐。</p><p>最终选择的是魔王の魂提供的免费版权的素材。</p><p>魔王の魂：<a href="https://maou.audio/">https://maou.audio/</a></p><p>在小游戏最后场景将以滚动文字的方式注明版权出处。</p><h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p>最终完成版：<a href="https://www.bilibili.com/video/BV1Bf4y1h7RE/">https://www.bilibili.com/video/BV1Bf4y1h7RE/</a></p><p>(已投稿至 B 站)</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>中间断更了几天（在摸鱼）</p><p>在闲鱼淘了一个二手的 3DSLL，用来纪念当初逝去的青春~~~</p><p>这几天又沉迷在宝可梦大探险，虽然游戏很坑，但是抵挡不住对宝可梦的热情，结果还是沦陷了，ε=(´ο｀*)))唉！</p><p>网易游戏一直都在挑战我的忍耐力，看看这个宝可梦游戏我能坚持多久。</p><p>但我发誓以后再也不玩网易的游戏了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（EX）</title>
      <link href="/2021/05/12/monster-game-9/"/>
      <url>/2021/05/12/monster-game-9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前篇完成了敌人设计，最后只差 BOSS 了。</p><p>本篇应该能做完了，应该……</p><h2 id="布偶怪（BOSS）"><a href="#布偶怪（BOSS）" class="headerlink" title="布偶怪（BOSS）"></a>布偶怪（BOSS）</h2><p>这是一只被丢弃布偶。</p><p>它的胸前系着巨大的蝴蝶结，看上去并不像玩偶本身的装饰物，而是主人给它戴上的。</p><p>一边的耳朵似乎曾经坏掉过，但被什么人用丝线缝补过。</p><p>给它戴上可爱的蝴蝶结，又修补了破掉的耳朵……</p><p>它的主人应该是十分疼爱它的，但为何它却出现在荒郊野外的垃圾堆里……</p><p>不知是什么原因让它具有了意识，成为了布偶型的魔物。</p><p>是主人丢弃了它？或者是遭遇了什么变故？</p><p>它似乎在等着什么，游荡在附近不肯离开。</p><p>也许，是仍在期待着见到主人一面……</p><p><img src="https://z3.ax1x.com/2021/05/09/gJyNfP.gif" alt="布偶怪"></p><h3 id="行动模式"><a href="#行动模式" class="headerlink" title="行动模式"></a>行动模式</h3><p>BOSS 一共有三个阶段。</p><p>血量被消除到一定程度的时候，将会转换行动模式，不同模式挑战难度由易到难。</p><h4 id="基础设定"><a href="#基础设定" class="headerlink" title="基础设定"></a>基础设定</h4><p>BOSS 始终漂浮在玩家上方的位置，需要玩家跳跃起来才能打得到。</p><p><a href="https://imgtu.com/i/gJgjXT"><img src="https://z3.ax1x.com/2021/05/09/gJgjXT.gif" alt="漂浮的布偶"></a></p><p>如此设计的目的是避免玩家站在地上“无脑”输出，导致毫无挑战性。</p><p>当玩家跳起来的时候，在空中的阶段虽然可以通过方向键改变运动位置，但却没有在地面上灵活。</p><p>跳跃本身就是一个危险的动作，在空中躲避子弹的难度比地面上高得多。</p><p>让玩家不能在舒适区输出，以此增加危机感。 </p><p>太频繁的让玩家进行跳跃也会造成操作性的乏味。</p><p>所以 BOSS 的血量并不会很多，而且除了第一阶段之外也不会经常在低空位置漂浮。</p><p>大多数情况，玩家需要做的就是在地面上躲避 BOSS 的弹幕攻击，然后等 BOSS 飘下来的时候打它。</p><h4 id="技能：隐遁"><a href="#技能：隐遁" class="headerlink" title="技能：隐遁"></a>技能：隐遁</h4><p>潜入黑暗，悄无声息的出现在奇妙的位置。</p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/a0dc8f065c5b6372.gif" alt="技能：隐遁"></p><p>隐遁是 BOSS 经常使用的技能，因此它的位置飘忽不定。</p><p>玩家需要时刻打起精神避免它“突然”出现在身后。</p><h4 id="技能：黑暗能量弹"><a href="#技能：黑暗能量弹" class="headerlink" title="技能：黑暗能量弹"></a>技能：黑暗能量弹</h4><p>从布偶的口中吐出黑暗能量攻击玩家。</p><p><img src="https://files.catbox.moe/xwcx8y.gif" alt="黑暗能量弹"></p><h4 id="平静布偶"><a href="#平静布偶" class="headerlink" title="平静布偶"></a>平静布偶</h4><p>此状态下的布偶，性格温顺，只会缓缓的在场景中低空漂浮，同时发射少量的子弹试探性的攻击。</p><p>这个阶段的 BOSS 仅仅只是做出一些“吓人”的举动，以此来观察玩家的反应。</p><p><img src="https://files.catbox.moe/qqcy6f.gif" alt="平静模式攻击方式"></p><p>布偶怪会向前“逼近”玩家，但是却又在快要靠近极限边缘的时候使用“隐遁”消失在黑暗中。</p><p>然后出现在上方的位置，悠闲的飘到另一边，途中释放 3 次黑暗能量弹攻击玩家，接着又消失在黑暗。</p><p>小插曲：</p><p>控制 BOSS 的行动方式还没找到一个简单有效的方法，只能硬撸。</p><p>结果就是整整一个下午加上忙到晚上 9 点才把这个功能实现出来。</p><p>最后贴上 BOSS 行动轨迹的代码图，简直令人绝望的嵌套地狱：</p><p><img src="https://files.catbox.moe/8ix6fi.jpg" alt="平静布偶行动逻辑代码（部分）"></p><p>这还是我重写了三次，用三种不同方法最后实现的结果（前面两种方法更糟）。</p><p>尽管代码很潦草，但功能本身是没问题的，玩家层面感知不到。</p><p>因为我不懂得使用状态机的缘故，为了赶进度只好暂时妥协了，等忙完了就好好学习。</p><h4 id="狂暴布偶"><a href="#狂暴布偶" class="headerlink" title="狂暴布偶"></a>狂暴布偶</h4><p>布偶被激怒而进入狂暴状态，它会遁入黑暗，然后从高处猛冲向玩家。</p><p><img src="https://files.catbox.moe/m4u3g4.gif" alt="高速猛冲"></p><p>随后，召唤出许多幽灵向玩家袭来。</p><p><img src="https://files.catbox.moe/pzpk3b.gif" alt="幽灵召唤"></p><p>进入第二阶段以后，难度直线上升。</p><p>BOSS 的行动将会锁定玩家的位置，然后以极快的速度向玩家袭来，躲避难度极高。</p><p>第二阶段十分考验玩家的反应速度。</p><h4 id="疯狂布偶"><a href="#疯狂布偶" class="headerlink" title="疯狂布偶"></a>疯狂布偶</h4><p>濒死状态的布偶垂死反击！</p><p>召唤附近生物“大游行”！</p><p><img src="https://files.catbox.moe/4tnx60.jpg" alt="异常生物大游行(静态示意图)"></p><p>BOSS 停留在原地不断召唤出球球怪和幽灵来攻击玩家。</p><p>第三阶段的难度直线上升，虽然 BOSS 此时会停在边缘位置，但是玩家需要躲避袭来的魔物。</p><p>在躲避的同时一边发射子弹攻击 BOSS，空中还会有幽灵的“空袭”威胁。</p><h4 id="形态转换"><a href="#形态转换" class="headerlink" title="形态转换"></a>形态转换</h4><p>BOSS 的三个阶段完成了，但还缺少逻辑判断什么时候该进行下一个阶段。</p><p>只要在 BOSS 受伤的时候判断当前血量即可，分别在：66%、33% 的时候自动进入下一个阶段。</p><h2 id="BOSS-血条"><a href="#BOSS-血条" class="headerlink" title="BOSS 血条"></a>BOSS 血条</h2><p>怪物的血条 UI 制作比较简单。</p><p>在屏幕下方创建一个水平的滑动条即可。</p><p><img src="https://files.catbox.moe/ztybtb.jpg" alt="血条UI"></p><p>实现血条的逻辑有两种方案。</p><p>第一种是被动式的，将怪物和血条绑定，在怪物受到伤害的时候血条也会减少。</p><p>第二种是主动式的，血条实时获取怪物的血量，根据血量改变血条的值。</p><p>第一种比较节省 CPU，第二种普适性比较高。</p><p>因为小游戏的性能没压力，所以就选第二种作为实现方案。</p><p>还有一个需要注意的地方是之前把血量转成 int（整数）类型，可是血条的值是浮点数。</p><p>所以在计算的时候，需要进行转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    slider.value &#x3D; (float)monster.currentHP &#x2F; monster.maxHP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>血条的 Update 方法这样就可以了。</p><p>然后进入游戏测试：</p><p><img src="https://files.catbox.moe/vlv8x8.gif" alt="血条测试"></p><p>BOSS 的血条处理也完成了！</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>EX 篇整整写了三天半才完成。</p><p>除了设计 BOSS 的时候找灵感花了一点时间，还有制作效率也降低了不少。</p><p>可能是跟最近天气变热有关，气温上升了很多，下午的时候会有点迷迷糊糊。</p><p>（舍不得开空调……）</p><p>还有一方面是连续集中精神做一件事很容易出现精神疲劳。</p><p>中间还是得找一些别的事情分散精力，让大脑稍微休息一下。</p><p>总的来说，最后的怪物 BOSS 终于完成了，下一篇 END（终结）篇，将会迎来小游戏的完结（应该）。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（八）</title>
      <link href="/2021/05/08/monster-game-8/"/>
      <url>/2021/05/08/monster-game-8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小游戏终篇，完成最后的敌人设计和关卡设计，以及各种音效处理。</p><p>为了加快写作速度，后面真的不贴代码了。</p><h2 id="敌人系统"><a href="#敌人系统" class="headerlink" title="敌人系统"></a>敌人系统</h2><p>接前前篇，已经完成了部分敌人的动画和幽灵的行动轨迹。</p><h3 id="敌人受伤"><a href="#敌人受伤" class="headerlink" title="敌人受伤"></a>敌人受伤</h3><p>敌人没有受伤动画，而且也没有无敌时间。</p><p>只要计算伤害扣除当前血量，再判断是否归零，就执行死亡回调。</p><p><img src="https://files.catbox.moe/9rs1ht.gif" alt="子弹的物理碰撞"></p><p>这里存在一个很严重的问题，因为子弹添加了刚体，就会与敌人身上的刚体发生碰撞。</p><p>所以子弹击中敌人就会出现上图这样的效果，因为子弹脚本一直在给子弹施加一个前进的力，所以子弹会一直向前飞。</p><p>敌人身上又设置了弹性材质，把子弹弹开，子弹又继续向前，又被弹开……如此反复，变成抖动效果。</p><p>既要使用刚体组件，又不想用它的物理碰撞效果，看起来有点自相矛盾。</p><h3 id="刚体类型"><a href="#刚体类型" class="headerlink" title="刚体类型"></a>刚体类型</h3><p>这个问题困扰了我一段时间，然后查阅手册以及看了一些教程才弄清楚了刚体组件的“妙用”。</p><p><img src="https://files.catbox.moe/d7k0cd.jpg" alt="Body Type"></p><p>刚体组件有三种类型可以设置：</p><ul><li>Dynamic（动力学的）</li><li>Kinematic（运动学的）</li><li>Static（静态的）</li></ul><p>趁这个机会详细搜寻了相关的资料，恶补一下 unity 的知识。</p><h4 id="Dynamic（动力学的）"><a href="#Dynamic（动力学的）" class="headerlink" title="Dynamic（动力学的）"></a>Dynamic（动力学的）</h4><p>贴个官方手册的说明：</p><p><img src="https://files.catbox.moe/uigfio.jpg" alt="Dynamic类型说明"></p><p>简单地说如果一个物体要符合物理特性，可以受到外力的作用，就用此类型。</p><p>如果将物体设置为此类型，那么它应该是受到外力的驱动而发生移动，不应该直接用 transform 来修改坐标。</p><p>此类型对于 CPU 的消耗是极高的，因为它要计算各种物理效果。</p><p>Dynamic 类型的特性大致就是这样，在 FC 小游戏中，把主角设置成这个类型就可以了。</p><p>正如其名“动力学”即通过外力来驱动。</p><h4 id="Kinematic（运动学的）"><a href="#Kinematic（运动学的）" class="headerlink" title="Kinematic（运动学的）"></a>Kinematic（运动学的）</h4><p>Kinematic 类型的刚体，不会受到重力以及其他外力的影响。</p><p>虽然不能受到外力的驱动而移动，但是刚体可以直接赋予速度，例如前文控制主角移动的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br></pre></td></tr></table></figure><p>给与刚体一个水平方向的力，就可以驱动刚体朝着水平方向移动。</p><p>所以这种类型才是我想要的：不会受到外力影响。</p><p>正如其名“运动学”即通过改变速度来驱动。</p><h4 id="Static（静态的）"><a href="#Static（静态的）" class="headerlink" title="Static（静态的）"></a>Static（静态的）</h4><p>静态的比较好理解，就是风雨不动安如山。</p><p>既无法通过外力“撼动”它，亦无法赋予刚体速度来移动它。</p><p>不管你推它、撞它，它都在那里。</p><h3 id="解决子弹卡住问题"><a href="#解决子弹卡住问题" class="headerlink" title="解决子弹卡住问题"></a>解决子弹卡住问题</h3><p>将子弹类型设置为 <code>Kinematic</code>。</p><p><img src="https://files.catbox.moe/vzd7xs.gif" alt="运动学不发生碰撞"></p><p>默认情况下，Kinematic 类型只与 Dynamic 类型的刚体发生碰撞。</p><p>如果要检测与其他类型的碰撞，需要勾选 <code>Use Full Kinematic Contacts</code>：</p><p><img src="https://files.catbox.moe/3w1dbk.jpg" alt="完全碰撞检测设置"></p><p>不过这里并不希望子弹发生物理碰撞效果。</p><p>只需要把子弹的碰撞体改成 <code>Trigger</code>（触发器），然后监听触发器事件即可。</p><h3 id="敌人消失动画"><a href="#敌人消失动画" class="headerlink" title="敌人消失动画"></a>敌人消失动画</h3><p>敌人死亡时，会停止移动，然后原地淡出消失。</p><p><img src="https://files.catbox.moe/cte3md.gif" alt="敌人消失"></p><h3 id="掉落物"><a href="#掉落物" class="headerlink" title="掉落物"></a>掉落物</h3><p>敌人完全消失后，会在原地爆出道具。</p><p><img src="https://files.catbox.moe/8ynq6c.gif" alt="消灭敌人爆金币"></p><p>吃到道具加上分数提示效果。</p><p><img src="https://files.catbox.moe/mxq0hk.gif" alt="分数提示"></p><h3 id="子弹击中特效"><a href="#子弹击中特效" class="headerlink" title="子弹击中特效"></a>子弹击中特效</h3><p>子弹击中敌人时，应该把子弹消除，而不是让子弹还能继续穿透。</p><p>制作子弹击中的特效动画。</p><p><img src="https://files.catbox.moe/xn83qe.gif" alt="子弹击中动画"></p><p>把这个做成预制体，当子弹击中目标的时候就生成这个动画特效，然后把子弹消除。</p><p><img src="https://files.catbox.moe/70zsr7.gif" alt="击中特效"></p><p>击中特效在动画播放结束后也会自动销毁。</p><p>敌人受伤事件这样就完成了。</p><h2 id="怪物设计"><a href="#怪物设计" class="headerlink" title="怪物设计"></a>怪物设计</h2><p>幽灵的行动轨迹比较简单，但是后面的这几个就比较复杂了。</p><h3 id="垃圾桶怪"><a href="#垃圾桶怪" class="headerlink" title="垃圾桶怪"></a>垃圾桶怪</h3><p>垃圾桶怪前方一小片区域是“侦查区”，如果玩家靠近这个区域，自己的“领地”被入侵了，它就会发怒驱逐入侵者。</p><p>玩家没有踏进领地，但是在远处用子弹“骚扰攻击”，也会令垃圾桶怪变得愤怒，原因是“吵到”它休息了！</p><p>愤怒的垃圾桶怪会向前“狂奔”，如果玩家被碰到了就会受到 1 点伤害。</p><p>而且因为有“垃圾桶”的防护，它的防御力比起其他生物要高得多，想要打败它可不容易。</p><p>如果不小心激怒了它，最好的方法就是找个机会从它身上跳过。</p><h4 id="踏入警戒区"><a href="#踏入警戒区" class="headerlink" title="踏入警戒区"></a>踏入警戒区</h4><p>踏入垃圾桶怪的警戒区时，这个距离非常危险。</p><p>垃圾桶怪会现出“原形”吓退入侵者，原本可爱的外表也会变得十分可怕。</p><p><img src="https://files.catbox.moe/m6k160.gif" alt="踏入警戒区"></p><h4 id="骚扰攻击"><a href="#骚扰攻击" class="headerlink" title="骚扰攻击"></a>骚扰攻击</h4><p>玩家使用子弹攻击多次后，垃圾桶怪也会因为被骚扰而变得烦躁愤怒。</p><p>如果本体还未出现，玩家的子弹会打在垃圾桶上，这是不会对本体造成伤害的。</p><p>可以从子弹的攻击特效看出来，在还没露出本体的时候，子弹直接消失了，而本体出现之后，子弹击中会产生特效。</p><p>除此之外，还会加入一个打中铁桶的音效。</p><p>这样设计之后，即使不告诉玩家垃圾桶怪是无敌的，玩家自然也能根据细节判断出来了。</p><blockquote><p>当一个怪物不可战胜的时候，应该让玩家从细微之处发觉不对劲，而不是故意让玩家去挑战一个无法战胜的敌人白费时间。</p></blockquote><p>演示效果：</p><p><img src="https://files.catbox.moe/8259wh.gif" alt="攻击骚扰"></p><h4 id="愤怒追击"><a href="#愤怒追击" class="headerlink" title="愤怒追击"></a>愤怒追击</h4><p>现在它还只是傻傻的在原地挨打，是时候给它增加一些对玩家的威胁了。</p><p>在整个 FC 小游戏中，它是第二危险的魔物！</p><p>垃圾桶怪在进入愤怒状态的时候，会朝着玩家“飞扑”过来。</p><p><img src="https://files.catbox.moe/gmlkn9.gif" alt="受到骚扰的愤怒追击"></p><p><img src="https://files.catbox.moe/dzu46x.gif" alt="进入警戒区域的追击"></p><h4 id="挑战失败案例"><a href="#挑战失败案例" class="headerlink" title="挑战失败案例"></a>挑战失败案例</h4><p>试图强行跳过的玩家很容易被“三连击”。</p><p><img src="https://files.catbox.moe/pi2b6m.gif" alt="三连带走"></p><h4 id="强行击破案例"><a href="#强行击破案例" class="headerlink" title="强行击破案例"></a>强行击破案例</h4><p>强行“站撸”在垃圾桶靠近之前消灭它！</p><p><img src="https://files.catbox.moe/t765u3.gif" alt="强行站撸"></p><p>虽然最终消灭了垃圾桶怪，但还是被带走一颗心。</p><p>比起直接踏入警戒区，用子弹骚扰会让它更加愤怒！</p><p>所以千万不要这么做……</p><h4 id="正确挑战示例"><a href="#正确挑战示例" class="headerlink" title="正确挑战示例"></a>正确挑战示例</h4><p>实际上只要找准位置，可以轻松的从它的头上跃过。</p><p><img src="https://files.catbox.moe/keoplh.gif" alt="正确跳过垃圾桶怪"></p><h3 id="球球怪"><a href="#球球怪" class="headerlink" title="球球怪"></a>球球怪</h3><p>球球怪是在地面巡逻的敌人。</p><p>它会在地面弹跳巡逻指定的区域，不会主动攻击玩家。</p><h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p>在地面弹起动画。</p><p><img src="https://files.catbox.moe/9x9zye.gif" alt="球球怪"></p><h4 id="巡逻逻辑"><a href="#巡逻逻辑" class="headerlink" title="巡逻逻辑"></a>巡逻逻辑</h4><p>因为不是用刚体实现跳跃，花了好长时间……</p><p>不过总算是完成了。</p><p><img src="https://files.catbox.moe/etqlek.gif" alt="跳跃巡逻球球怪"></p><h3 id="自爆怪"><a href="#自爆怪" class="headerlink" title="自爆怪"></a>自爆怪</h3><p>自爆怪是头顶上有着竹蜻蜓的球状炸弹型敌人。</p><p>最开始的时候，并不是将这只怪物设计成投弹自爆的。</p><p>而是想做一个类似“苍蝇”一样很小只的敌人，在 BOSS 的第二阶段，BOSS 使用召唤技能就会招来一群这样的敌人。</p><p>然后这群“苍蝇”会排的整整齐齐飞向玩家（肉搏冲击！）</p><p>它本身并不会发射子弹，仅仅只是用身体撞击玩家造成伤害。</p><p>脑补出它们成群阶段，转着圈圈，摆出各种阵势的样子（类似大雁成群结队飞行，摆出各种阵型）感觉会很有趣。</p><p>但是要实现起来就比较复杂了，要设计好各种阵型的坐标……</p><p>然后就弃坑了。</p><p>弃坑之后，反而激发了另一种灵感：</p><p>既然是飞行，像多啦A梦那样在头上带着竹蜻蜓感觉也是挺有趣的。</p><p>因为本体太重了，竹蜻蜓脱落，并且飞走了！</p><p>它本体并不会飞，所以就自由落体运动掉了下来。</p><p>掉到地上砸到玩家？感觉也不错，但是为何不像飞机投下导弹那样？</p><p>伴随着咻咻的音效（空袭警报）让玩家产生紧张感。</p><p>所以头顶竹蜻蜓的自爆怪就这么设计出来了。</p><h4 id="动态效果"><a href="#动态效果" class="headerlink" title="动态效果"></a>动态效果</h4><p><img src="https://files.catbox.moe/omynqq.gif" alt="自爆怪"></p><p>它会在天上飞行，然后从竹蜻蜓脱落，掉到地上产生爆炸。</p><p>因为体型很小，如果玩家没有注意观察的话很容易中招。</p><h4 id="爆炸动画"><a href="#爆炸动画" class="headerlink" title="爆炸动画"></a>爆炸动画</h4><p>自爆怪掉到地上或者在空中被玩家击中就会产生爆炸。</p><p><img src="https://files.catbox.moe/yk2m92.gif" alt="爆炸动画"></p><h4 id="竹蜻蜓"><a href="#竹蜻蜓" class="headerlink" title="竹蜻蜓"></a>竹蜻蜓</h4><p>竹蜻蜓会与本体分离，独自飞出去，最后消失在天空。</p><p><img src="https://files.catbox.moe/079ac4.gif" alt="竹蜻蜓脱离动画"></p><h4 id="炸弹本体"><a href="#炸弹本体" class="headerlink" title="炸弹本体"></a>炸弹本体</h4><p>当竹蜻蜓脱离后，本体就不能再继续飞行了，而会掉落到地上。</p><p>本体（炸弹）会因为惯性继续向前运动，直到落到地上或者被玩家击中爆炸。</p><p><img src="https://files.catbox.moe/uixqy3.gif" alt="运动轨迹"></p><h4 id="爆炸攻击"><a href="#爆炸攻击" class="headerlink" title="爆炸攻击"></a>爆炸攻击</h4><p>掉落的本体要与角色或者地面碰撞，然后发生爆炸。</p><p><img src="https://files.catbox.moe/5h8d0t.gif" alt="碰到地板爆炸"></p><p>一起去看流星雨，落在主角的头上。</p><p><img src="https://files.catbox.moe/gqne8z.gif" alt="碰到玩家"></p><p>高难度操作，在对方还没落地成盒之前打爆它！</p><p><img src="https://files.catbox.moe/p82413.gif" alt="截胡射击"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>虽然今天又是爆肝一整天，但还是做不完啊！！！！</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（七）</title>
      <link href="/2021/05/07/monster-game-7/"/>
      <url>/2021/05/07/monster-game-7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇完成角色系统和道具系统。</p><p>小游戏的制作也接近尾声了。</p><h2 id="玩家受伤"><a href="#玩家受伤" class="headerlink" title="玩家受伤"></a>玩家受伤</h2><p>主角受到的伤害来自两种，第一是被敌人发射的子弹击中，第二是碰到敌人。</p><p>而敌人受伤只来源于玩家的攻击，主角碰到敌人只有主角会受到伤害，敌人不会受伤。</p><p>给子弹加上 Bullet 的 Tag（标签），给敌人加上 Enemy 标签。</p><p>之后就可以在碰撞回调中通过标签区分碰撞对象。</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>首先需要知道碰到玩家的物体是什么，可以用上面说的标签来区分。</p><p>如果是碰到道具则应该获得加分或加血，如果是敌人和子弹才会受到伤害。</p><p>编辑 <code>MiniGame_Player</code> 脚本，添加碰撞监听事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private void OnCollisionEnter2D(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">    switch (tag)</span><br><span class="line">    &#123;</span><br><span class="line">        case &quot;Enemy&quot;:</span><br><span class="line">            TouchEnemy(collision);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Item&quot;:</span><br><span class="line">            TouchItem(collision);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;Bullet&quot;:</span><br><span class="line">            TouchBullet(collision);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchEnemy(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchItem(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void TouchBullet(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的碰撞事件是两个刚体之间的碰撞，因此需要使用 <code>OnCollisionEnter2D</code> 监听。</p><p>其实这里有两种设计方案，①在角色身上监听碰撞事件 ②在道具上监听碰撞事件</p><p>一般来说在“被动”的一方身上绑定监听事件比较符合常规思想。</p><p>比如道具“被”主角吃，那么就在道具上处理吃到道具的效果；</p><p>再比如主角“被”敌人的子弹击中，那么就在主角身上处理受伤事件。</p><p>所以这里的 <code>TouchItem</code> 有点多余，以后可能会移除。</p><p>此处设置角色与 3 种类型的物体发生碰撞的处理，即敌人、道具、子弹。</p><p>具体的方法留空，接下来逐一进行实现。</p><h3 id="受伤-死亡动画"><a href="#受伤-死亡动画" class="headerlink" title="受伤/死亡动画"></a>受伤/死亡动画</h3><p>增加受伤和死亡动画的状态机。</p><p>任意状态都可以直接进入受伤状态，而当受伤判定为死亡时，进入死亡动画。</p><p><img src="https://files.catbox.moe/6xpk7k.jpg" alt="主角的受伤和死亡状态"></p><h3 id="抽离受伤事件"><a href="#抽离受伤事件" class="headerlink" title="抽离受伤事件"></a>抽离受伤事件</h3><p>因为角色受到伤害会进入一个保护状态，要与敌人区分开来。</p><p>因此需要修改之前写的游戏角色基类，将 <code>TakeDamage</code> 方法改成抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void TakeDamage(float damage);</span><br></pre></td></tr></table></figure><p>接着在 <code>MiniGame_Player</code> 方法里实现受伤处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(&quot;受到伤害：&quot; + damage);</span><br><span class="line"></span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, 0.25f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="碰到敌人"><a href="#碰到敌人" class="headerlink" title="碰到敌人"></a>碰到敌人</h3><p>玩家碰到敌人时，显示受伤动画，减少血量，进入场景测试。</p><p><img src="https://files.catbox.moe/3i5m3g.gif" alt="撞到敌人测试"></p><p>发现撞到敌人之后，虽然播放了受伤动画，但是却没有在 0.25s 后解除。</p><p>这是因为受伤动画没有转换成其他动画的设置。</p><h3 id="受伤动画不解除问题"><a href="#受伤动画不解除问题" class="headerlink" title="受伤动画不解除问题"></a>受伤动画不解除问题</h3><p>修改动画状态机，当解除受伤动画时，让主角变成待机状态。</p><p><img src="https://files.catbox.moe/0q2ogj.jpg" alt="受伤动画转换为待机动画"></p><p>然后再进入游戏测试：</p><p><img src="https://files.catbox.moe/8856n6.gif" alt="受伤修改后测试"></p><p>受伤动画不解除的问题解决了，但是可以发现，如果继续停留在原地，角色与敌人依然保持接触状态，却不会再触发受伤事件了。这是因为两个刚体组件发生碰撞时，会出现弹开的情况。</p><h3 id="无敌时间"><a href="#无敌时间" class="headerlink" title="无敌时间"></a>无敌时间</h3><p>当主角受伤的时候会进入短暂的无敌，避免玩家连续碰到敌人还没反应过来就直接 gg 了。</p><p>增加一个变量用来设定角色无敌状态的持续时间，另一个变量保存当前无敌剩余时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public float pretectedTime &#x3D; 1f;</span><br><span class="line">private float currentPretectedTime;</span><br></pre></td></tr></table></figure><p>当玩家受伤时，就赋予无敌时间，持续时间在 Update 方法里减少。</p><p>修改受伤事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void TouchEnemy(Collision2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentPretectedTime &#x3D; pretectedTime;</span><br><span class="line"></span><br><span class="line">    TakeDamage(1f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在无敌时间里，再次调用受伤方法就直接返回，否则计算伤害同时赋予玩家无敌时间。</p><p>接着消除无敌时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    ProtectedTime();</span><br><span class="line">    Shoot();</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ProtectedTime()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        currentPretectedTime -&#x3D; Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>FixedUpdate</code> 方法里计算无敌时间。</p><p>最后进入游戏场景测试：</p><p><img src="https://files.catbox.moe/oa3v53.gif" alt="无敌时间测试"></p><p>主角跟敌人碰撞之后，还是“停在原地”，看起来依然与敌人保持着接触。</p><p>实际上，无敌时间确实生效了，但是玩家跟敌人保持接触却没有受到伤害不是因为无敌时间的关系。</p><p>而是玩家在撞到怪物身上的时候，发生“弹开”的情况。</p><p>只要稍微修改一下碰撞盒子就可以看出效果了：</p><p><img src="https://files.catbox.moe/q4qmhr.gif" alt="碰撞盒子修改测试"></p><p>把敌人的碰撞盒子变大的时候，可以看到主角被“击退”了一步。</p><p>但是这个弹力实际上很小，所以肉眼看不出来。</p><h3 id="击退效果"><a href="#击退效果" class="headerlink" title="击退效果"></a>击退效果</h3><p>修改弹力需要创建一个物理材质：</p><p><img src="https://files.catbox.moe/p9ud5b.jpg" alt="弹性材质"></p><p>然后把材质拖到敌人的碰撞盒子上。</p><p>为了测试弹力效果，先将弹力设置成一个比较大的值：10.</p><p>观察效果：</p><p><img src="https://files.catbox.moe/roegwf.gif" alt="增强弹力效果"></p><p>可以观察到角色撞到敌人之后被弹开了一段较大的距离。</p><p>如果仔细观察的话，还能发现角色又会向前挪动，继续与敌人发生碰撞，然后反复碰撞出现“抖动”的情况。</p><p>原因是角色受伤状态下仍然可以按方向键向前移动，所以又与前方的敌人发生了碰撞。除此之外，由于移动是用 <code>GetAxis</code> 来监听的，即使松开按键也存在一个缓冲的过程，速度并不会直接降低为 0，所以还会保持向前移动一小段距离，又与敌人产生碰撞。</p><p>只要修改移动方法，在无敌时间里禁止角色受到水平方向的力推动玩家就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br><span class="line"></span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果：</p><p><img src="https://files.catbox.moe/e1zyfr.gif" alt="修改之后的弹力效果"></p><p>因为弹力太大所以主角撞到敌人之后直接飞出屏幕外面了~</p><p>把弹力跳到 0.25 重新测试：</p><p><img src="https://files.catbox.moe/n1x4sd.gif" alt="降低弹力的效果"></p><p>可以看到这样好多了，但是主角在受伤之后会进入“小跑动画”。</p><h3 id="小跑动画问题"><a href="#小跑动画问题" class="headerlink" title="小跑动画问题"></a>小跑动画问题</h3><p>这是因为玩家在受伤的时候仍然可以按住水平方向键，因此还会播放奔跑动画。</p><p>在控制角色移动的方法中，修改动画参数就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentPretectedTime &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 设置水平参数为0，即不会再播放奔跑动画了</span><br><span class="line">        animator.SetFloat(&quot;horizontal&quot;, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br><span class="line"></span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要注意一个问题，这里因为用了 <code>currentPretectedTime</code> 来作为判定时间，就必须让受伤动画的“硬直”时间与无敌时间相同，否则无敌状态还没解除，受伤动画就先解除了，角色就会变成待机状态。</p><p><img src="https://files.catbox.moe/kydjby.gif" alt="受伤动画时间不一致问题"></p><h3 id="动画不一致问题"><a href="#动画不一致问题" class="headerlink" title="动画不一致问题"></a>动画不一致问题</h3><p>修改受伤动画解除事件与无敌时间保持一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, pretectedTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Wait</code> 方法的第二个参数改成无敌时间即可，然后继续测试：</p><p><img src="https://files.catbox.moe/nogqt4.gif" alt="受伤动画优化效果"></p><h3 id="受伤下的操作限制"><a href="#受伤下的操作限制" class="headerlink" title="受伤下的操作限制"></a>受伤下的操作限制</h3><p>但是又有新的问题，受伤的时候还可以跳跃和发射子弹。</p><p><img src="https://files.catbox.moe/cu01km.gif" alt="受伤跳跃和攻击"></p><p>受伤跳跃还可以接受，但是受伤了还能发射子弹就有点离谱。</p><p>修改 <code>Shoot</code> 方法，当角色在无敌状态时，不能发射子弹攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 加上无敌时间判断</span><br><span class="line">    if (currentPretectedTime &lt; 0 &amp;&amp; isShoot)</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; false;</span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, true);</span><br><span class="line"></span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">        GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">        MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">        bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">        bulletObj.transform.SetParent(bg);</span><br><span class="line"></span><br><span class="line">        Wait(delegate</span><br><span class="line">        &#123;</span><br><span class="line">            animator.SetBool(&quot;shoot&quot;, false);</span><br><span class="line">        &#125;, 0.05f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/bb6thw.gif" alt="受伤时限制攻击"></p><p>玩家受伤动作总算完成了（撒花）</p><h2 id="场景UI"><a href="#场景UI" class="headerlink" title="场景UI"></a>场景UI</h2><p>角色受伤虽然减少了 HP，但是现在玩家还看不到具体的生命值还有多少。</p><p>这时候就要开始制作场景的 UI（界面）。</p><p>包括：</p><ul><li>显示剩余生命值</li><li>显示当前得分</li></ul><p>场景 UI 图例：</p><p><img src="https://files.catbox.moe/emgazc.jpg" alt="场景UI"></p><p>左上角显示生命值，右上角显示得分。</p><h3 id="场景控制"><a href="#场景控制" class="headerlink" title="场景控制"></a>场景控制</h3><p>需要一个脚本用来控制整个小游戏的流程。</p><p>如进入游戏、游戏结束、UI 显示。</p><p>新建脚本 <code>MiniGame_Controller</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Controller : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Text scoreText;</span><br><span class="line"></span><br><span class="line">    private int score;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        this.AddScore(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void AddScore(int score)</span><br><span class="line">    &#123;</span><br><span class="line">        this.score +&#x3D; score;</span><br><span class="line">        scoreText.text &#x3D; this.score.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个脚本现在包含了得分显示的方法。</p><p><code>AddScore</code> 方法传入一个分数参数，更新场景中的文本显示数字。</p><p>在游戏对象启动的时候，调用了 <code>this.AddScore(0)</code> 来更新文本。</p><p>脚本挂在小游戏根节点。</p><p><img src="https://files.catbox.moe/7po71z.jpg" alt="控制器脚本"></p><p>小游戏节点的标签更改为：<code>Controller</code></p><p>这样在别的对象中可以直接通过标签来获得场景控制器。</p><h3 id="分数显示"><a href="#分数显示" class="headerlink" title="分数显示"></a>分数显示</h3><p>创建一个 Text 组件，放在右上角的位置即可。</p><p><img src="https://files.catbox.moe/jq4hpc.jpg" alt="分数显示"></p><p>将文本节点拖到控制器的参数上面。</p><p>进入游戏场景测试：</p><p><img src="https://files.catbox.moe/nb28l6.gif" alt="测试分数文本"></p><p>“得分”两字在进入游戏的时候会自动更新为实际的分数值。</p><h3 id="生命值显示"><a href="#生命值显示" class="headerlink" title="生命值显示"></a>生命值显示</h3><p>生命值在界面左上角显示。</p><p><img src="https://files.catbox.moe/zbms1u.jpg" alt="生命值UI结构示意图"></p><p>UI 是由特殊的自动排列 Layout 结构，实现心形血量的自动对齐。</p><p>所以这里需要分成两块制作：① 放置心形血量的 Layout ② 心形血量（单体）</p><p>还有一种做法就是直接“写死”，即固定角色的血量上限是 5 颗心。</p><p>这样不用自动排列结构也不需要单独抽离出单体的心形血量。</p><p>好处是更简单，坏处是不利于扩展，这里就不偷懒了，不然以后还得回头修改。</p><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><p>创建一个空的对象，然后需要注意的是，这里的 Transfrom 并不是普通的，而是 UI 用的 <code>Rect Transfrom</code>。</p><p>普通的 Transform 示例：</p><p><img src="https://files.catbox.moe/r1w7pd.jpg" alt="普通的transform"></p><p>UI 用的 Rect Transfrom：</p><p><img src="https://files.catbox.moe/rl8131.jpg" alt="UI用的rect transform"></p><p>可以看到 UI 的对象有宽度和高度，而且还有锚域（不是锚点）。</p><p>这个真的是非常难理解的一个要点，刚开始学的时候，卡了一个下午都弄不清楚。</p><p>有一篇写的非常好的文章：<a href="http://www.cocoachina.com/articles/16570">Unity进阶技巧 - RectTransform详解</a></p><p>其实现在我也还没完全搞懂这个锚域的原理……所幸还不需要用到。</p><p>Layout 需要设置一个宽度，相当于是一个容器，用来盛放心形图片（血量）。</p><p>给 Layout 添加 <code>Grid Layout Group</code> 组件：</p><p><img src="https://files.catbox.moe/aqlvth.jpg" alt="容器组件"></p><p>这个组件可以设置单元格的大小，然后按照指定的规则进行自动排列。</p><p>设置好之后，把心形图片拖到 Layout 底下，当做子节点，然后测试效果：</p><p><img src="https://files.catbox.moe/gb1nrx.gif" alt="测试容器效果"></p><p>可以看到每次创建一个新的心形图片的时候，容器自动将其排列，超过容器的宽度时自动换行。</p><p>容器这样就设置好了。</p><h4 id="心形血量"><a href="#心形血量" class="headerlink" title="心形血量"></a>心形血量</h4><p>心形血量包括两种形态：①充满血量 ②空</p><p>创建脚本 <code>MiniGame_Heart</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Heart : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] sprites;</span><br><span class="line"></span><br><span class="line">    private Image icon;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        icon &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line"></span><br><span class="line">        SetActive(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetActive(bool result)</span><br><span class="line">    &#123;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        if (result &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            index &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        icon.sprite &#x3D; sprites[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sprite[] sprites</code> 是一个精灵数组（即图片），把空的心和填满的心的图片放在这个数组备用。</p><p>这里对外暴露一个 <code>SetActive</code> 用来控制让心变满或变空的方法。</p><p>默认情况下，心是空的。</p><p><img src="https://files.catbox.moe/wzlt1g.jpg" alt="空的心"></p><p>进入游戏测试：</p><p><img src="https://files.catbox.moe/wesj3x.jpg" alt="测试填充心"></p><p>可以发现心已经被填满了，这是因为通过脚本调用 <code>SetActive</code> 方法修改了心的图片。</p><p>心形血量这样就完成了，拖到 <code>Resources/Prefabs/MiniGame</code> 下作为预制体备用。</p><h4 id="血量控制"><a href="#血量控制" class="headerlink" title="血量控制"></a>血量控制</h4><p>心形血量的控制交给 Layout。</p><p>新建 <code>MiniGame_HeartLayout</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_HeartLayout : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private List&lt;MiniGame_Heart&gt; hearts &#x3D; new List&lt;MiniGame_Heart&gt;();</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GameObject.FindGameObjectWithTag(&quot;Player&quot;).GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line"></span><br><span class="line">        Init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void UpdateLast(bool result)</span><br><span class="line">    &#123;</span><br><span class="line">        GetCurrentHeart().SetActive(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Heart GetCurrentHeart()</span><br><span class="line">    &#123;</span><br><span class="line">        int index &#x3D; player.currentHP - 1;</span><br><span class="line"></span><br><span class="line">        return hearts[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Init()</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; player.maxHP; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateHeart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void CreateHeart()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;Heart&quot;) as GameObject;</span><br><span class="line">        GameObject heartObj &#x3D; Instantiate(prefab, transform);</span><br><span class="line"></span><br><span class="line">        MiniGame_Heart heart &#x3D; heartObj.GetComponent&lt;MiniGame_Heart&gt;();</span><br><span class="line"></span><br><span class="line">        hearts.Add(heart);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要修改之前的设定，角色的血量原来设定成 float 类型，需要改成 int。</p><p>脚本初始化时自动获取场景的 Player 对象，然后根据玩家的最大血量自动初始化对应的心形血量。</p><p>提供了一个可以控制血量变空和填满的方法：<code>UpdateLast</code>。</p><p>进入游戏测试：</p><p><img src="https://files.catbox.moe/kgpyud.jpg" alt="测试血量容器"></p><p>测试 OK，然后在场景控制器新增一个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public MiniGame_HeartLayout heartLayout;</span><br></pre></td></tr></table></figure><p>将容器赋值给场景控制器，这样在场景控制器里就可以对心形容器进行控制了。</p><h2 id="道具系统"><a href="#道具系统" class="headerlink" title="道具系统"></a>道具系统</h2><p>游戏中存在 4 种道具。</p><ul><li>樱桃：在场景中出现，吃到可以加分</li><li>金币：打败怪物出现，吃到可以加分</li><li>爱心：在场景中出现，吃到可以恢复1点HP</li><li>布偶：打败BOSS爆出，吃到可以加分（在正式篇触发隐藏事件）</li></ul><p>总体来说可以分成两类：①加分 ②加血</p><p>搞清楚之后，就可以开始制作道具了。</p><h3 id="道具基类"><a href="#道具基类" class="headerlink" title="道具基类"></a>道具基类</h3><p>道具存在许多共通点，可以抽取出道具的基类。</p><p>创建脚本 <code>MiniGame_Item</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Item : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        if (collision.gameObject.CompareTag(&quot;Player&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            TouchEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void TakeScore()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject root &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;);</span><br><span class="line">        MiniGame_Controller ctrl &#x3D; root.GetComponent&lt;MiniGame_Controller&gt;();</span><br><span class="line"></span><br><span class="line">        ctrl.AddScore(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void TouchEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（其实这个脚本是修改之后的结果，原来是监听刚体碰撞，后来改成了监听触发器，下文解释为什么要这么改）</p><p>道具基类包含了一个 <code>score</code> 参数，用于计算角色吃到道具的得分。</p><p><code>TakeScore</code> 方法是吃到加分道具时更新场景的分数显示的通用方法。</p><p>道具只要监听与主角的碰撞事件即可，然后声明一个抽象方法，获得道具的效果在子类实现。</p><h3 id="加分道具"><a href="#加分道具" class="headerlink" title="加分道具"></a>加分道具</h3><p>加分道具的逻辑很简单，只要玩家吃到道具，更新场景右上角显示的分数即可。</p><p>最后销毁道具就完了。</p><h4 id="动态效果"><a href="#动态效果" class="headerlink" title="动态效果"></a>动态效果</h4><p>为了节约时间，直接使用第三方提供的插件包 <code>Itween</code> 来制作动态效果。</p><p>这是一个可以控制运动、数值变化的插件。</p><p>地址：<a href="https://assetstore.unity.com/packages/tools/animation/itween-84?locale=zh-CN">iTween</a></p><p>直接从 unity 商店添加到工程即可。</p><p><img src="https://files.catbox.moe/nmpnl6.jpg" alt="添加itween"></p><p>获得资源后，在 Unity 的 Window 菜单中选择 <code>Package Manage</code>（包管理）</p><p>在打开的窗口中选择 <code>My Assets</code> 即可看到刚才从商店中获取的 <code>Itween</code> 插件包了。</p><p><img src="https://files.catbox.moe/w7q4ed.jpg" alt="获取我的插件"></p><p>然后选择导入到工程即可。</p><p><img src="https://files.catbox.moe/2un1w2.jpg" alt="导入itween"></p><p>导入的插件放在 <code>Assets/Plugins</code> 目录下，插件会自动加载，因此这样就完成了。</p><h4 id="樱桃"><a href="#樱桃" class="headerlink" title="樱桃"></a>樱桃</h4><p>樱桃是直接出现在场景的道具，它漂浮在空中，有规律的上下浮动。</p><p>在场景中添加樱桃的游戏对象：</p><p><img src="https://files.catbox.moe/d4y2oo.jpg" alt="樱桃道具"></p><p>创建樱桃脚本 <code>MiniGame_CherryItem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_CherryItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 5f;</span><br><span class="line">    public float height &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, height &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, -height &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;loopType&quot;, iTween.LoopType.pingPong &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;MoveAction&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, 0.5f &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        TakeScore();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void MoveAction(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line"></span><br><span class="line">        pos.y +&#x3D; value * moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iTween.ValueTo</code> 方法的作用是动态的将一个初始值 a，调整到 b。</p><p><code>loopType</code> 循环类型为：<code>iTween.LoopType.pingPong</code>，即像打乒乓球一样有来有回。</p><p>比如先从 0 到 1，这样就算值的变化结束了，然后又从 1 到 0，始终如此循环。</p><p><code>easeType</code> 参数指定了变化的曲线，<code>iTween.EaseType.linear</code> 即线性变化，可以理解为均匀的变化。</p><p>参数的 <code>height</code> 指定了樱桃漂浮的高度，通过 <code>ValueTo</code> 方法在这个高度范围内变化。</p><p>每次值改变的时候就会调用 <code>MoveAction</code> 方法修改樱桃的 y 坐标。</p><p>这样樱桃的漂浮轨迹就完成了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/vr39nk.gif" alt="漂浮的樱桃"></p><p>吃到樱桃右上角的分数也更新了。</p><p>发现角色在吃到道具的时候，发生了刚体碰撞，导致角色被道具反弹了一下，影响手感。</p><p>此处是因为我把道具也设置成刚体了，只要将道具设置为触发器，并且移除刚体组件即可。</p><p>然后修改 Item 的碰撞回调为触发器回调即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">&#123;</span><br><span class="line">    if (collision.gameObject.CompareTag(&quot;Player&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        TouchEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新测试：</p><p><img src="https://files.catbox.moe/akm99i.gif" alt="移除道具的刚体"></p><p>刚体碰撞的问题也解决了。</p><h4 id="金币"><a href="#金币" class="headerlink" title="金币"></a>金币</h4><p>金币有自己的动画效果，先给金币加上动画。</p><p><img src="https://files.catbox.moe/n9fz55.gif" alt="金币动画"></p><p>金币在生成的时候，会有一个“爆出”的效果，即向上飞出然后落到地上消失。</p><p>原来的道具基类没有接触地板的判断，因此需要进行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Item : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Player&quot;:</span><br><span class="line">                TouchPlayerEvent();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Ground&quot;:</span><br><span class="line">                TouchGroundEvent();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void TakeScore()</span><br><span class="line">    &#123;</span><br><span class="line">        GameObject root &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;);</span><br><span class="line">        MiniGame_Controller ctrl &#x3D; root.GetComponent&lt;MiniGame_Controller&gt;();</span><br><span class="line"></span><br><span class="line">        ctrl.AddScore(score);</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void TouchGroundEvent();</span><br><span class="line">    protected abstract void TouchPlayerEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增抽象方法 <code>TouchGroundEvent</code>，用于执行道具与地板接触的处理。</p><p>然后创建金币道具类 <code>MiniGame_GoldItem</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_GoldItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    public float ySpeed &#x3D; 300f;</span><br><span class="line">    public float time &#x3D; 1.5f;</span><br><span class="line"></span><br><span class="line">    private float currentSpeed;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, ySpeed &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, -ySpeed &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;MoveAction&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, time &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchGroundEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchPlayerEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        TakeScore();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void MoveAction(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        currentSpeed &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line"></span><br><span class="line">        pos.y +&#x3D; currentSpeed * Time.deltaTime;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同样利用了 <code>ValueTo</code> 方法的值变化。</p><p>金币的上抛速度先是从最大值逐渐减到负数，这样就会反向运动了。</p><p>最后掉落到地上把金币销毁就可以了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/y5xb5x.gif" alt="爆出金币"></p><p>直接消失的观感似乎不怎么好，以后如果有时间的话再优化。</p><h4 id="分值显示"><a href="#分值显示" class="headerlink" title="分值显示"></a>分值显示</h4><p>吃到加分道具的时候，会在原地留下一个分数显示的文本。</p><p>然后逐渐向上飞行然后淡出。</p><p><img src="https://files.catbox.moe/hj2nno.jpg" alt="分数显示效果"></p><p>做法十分简单，创建一个 Text 对象。</p><p>再创建用来控制文本逻辑的脚本 <code>MiniGame_ScoreText</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class MiniGame_ScoreText : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public int score;</span><br><span class="line">    public Text text;</span><br><span class="line">    public float time &#x3D; 1f;</span><br><span class="line">    public float speed &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        text &#x3D; GetComponent&lt;Text&gt;();</span><br><span class="line">        text.text &#x3D; &quot;+&quot; + score.ToString();</span><br><span class="line"></span><br><span class="line">        iTween.ValueTo(gameObject, new Hashtable</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; &quot;from&quot;, 1f &#125;,</span><br><span class="line">            &#123; &quot;to&quot;, 0f &#125;,</span><br><span class="line">            &#123; &quot;easeType&quot;, iTween.EaseType.linear &#125;,</span><br><span class="line">            &#123; &quot;onUpdate&quot;, &quot;UpdateColor&quot; &#125;,</span><br><span class="line">            &#123; &quot;onUpdateTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;onComplete&quot;, &quot;Hiden&quot; &#125;,</span><br><span class="line">            &#123; &quot;onCompleteTarget&quot;, gameObject &#125;,</span><br><span class="line">            &#123; &quot;time&quot;, time &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void UpdateColor(float value)</span><br><span class="line">    &#123;</span><br><span class="line">        text.color &#x3D; new Color(1, 1, 1, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Hiden()</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos &#x3D; transform.position;</span><br><span class="line">        pos.y +&#x3D; speed * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果:</p><p><img src="https://files.catbox.moe/g0rab2.gif" alt="加分文本"></p><h3 id="加血道具"><a href="#加血道具" class="headerlink" title="加血道具"></a>加血道具</h3><p>加血道具直接使用心形图标即可，这样玩家看了就知道这是回血的。</p><p>因为要调用到回血的方法，所以修改 Item 基类，把碰撞体也作为参数传给子类方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protected abstract void TouchGroundEvent(Collider2D collision);</span><br><span class="line">protected abstract void TouchPlayerEvent(Collider2D collision);</span><br></pre></td></tr></table></figure><p>然后给 Player 方法添加回血方法，修改 <code>MiniGame_Character</code> 基类，自动获取场景控制器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected MiniGame_Controller controller;</span><br><span class="line"></span><br><span class="line">controller &#x3D; GameObject.FindGameObjectWithTag(&quot;Controller&quot;).GetComponent&lt;MiniGame_Controller&gt;();</span><br></pre></td></tr></table></figure><p>如此一来在子类中就可以直接获得控制器了。</p><p>接着修改 <code>MiniGame_Player</code>，添加回血方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void RecoverHP()</span><br><span class="line">&#123;</span><br><span class="line">    if (currentHP &gt;&#x3D; maxHP)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentHP +&#x3D; 1;</span><br><span class="line">    controller.heartLayout.UpdateLast(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用这个方法可以恢复 1 点 HP。</p><p>这里需要先让当前 HP 增加，然后才调用 <code>UpdateLast</code> 方法（因为此方法是让最后一格血量充满）。</p><p>然后是主角受伤的时候，应该扣掉一格血。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public override void TakeDamage(int damage)</span><br><span class="line">&#123;</span><br><span class="line">    controller.heartLayout.UpdateLast(false);</span><br><span class="line"></span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, pretectedTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>受伤时应该后先更新血量的标志，然后再扣除当前 HP。</p><p>接着是吃到补血道具时，要调用 Player 的回复 HP 的方法。</p><p>新建 <code>MiniGame_HeartItem</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_HeartItem : MiniGame_Item</span><br><span class="line">&#123;</span><br><span class="line">    protected override void TouchGroundEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void TouchPlayerEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        MiniGame_Player player &#x3D; collision.GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line"></span><br><span class="line">        player.RecoverHP();</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>心形道具与角色碰撞时，获得 Player 脚本，然后调用回血方法。</p><p>最后销毁自身，让道具消失。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/yw4vpt.gif" alt="受伤与回血"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>早上 9 点兴奋的起床，开始撸代码。</p><p>结果到现在第二天的 00:36 还没弄完……</p><p>高估了自己的制作速度。</p><p>看来还需要一篇才能真正的完结了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（六）</title>
      <link href="/2021/05/06/monster-game-6/"/>
      <url>/2021/05/06/monster-game-6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天开始设计与角色相关的东西，比如跟随在主角旁边的小鸟、可以吃的加分道具、场景内的敌人，还有 BOSS 战用来显示 BOSS 的血条。</p><h2 id="宠物跟随"><a href="#宠物跟随" class="headerlink" title="宠物跟随"></a>宠物跟随</h2><p>主角在行动时，旁边会有一只小鸟跟随在身边。</p><p>（其实就是一个装饰物）</p><p><img src="https://files.catbox.moe/v6d4wg.jpg" alt="使魔跟随"></p><p>最早的时候设想过让小鸟可以帮助玩家挡一次子弹，然后小鸟就会死了掉出屏幕。</p><p>但是这样太可怜了，所以取消了这个设定。</p><h3 id="飞行动画"><a href="#飞行动画" class="headerlink" title="飞行动画"></a>飞行动画</h3><p>在场景创建一个小鸟对象，然后为它添加飞行动画。</p><p><img src="https://files.catbox.moe/4n7p7y.gif" alt="飞行动画"></p><h3 id="跟随主角"><a href="#跟随主角" class="headerlink" title="跟随主角"></a>跟随主角</h3><p>这里有一个简单的做法就是直接把小鸟放在角色对象底下。</p><p><img src="https://files.catbox.moe/b5bsgs.gif" alt="放在角色对象下"></p><p>因为 Pet 变成了 Player 的子节点，所以会自动跟随父节点改变位置和翻转。</p><p>然鹅，主角在转向的时候，小鸟会突然“变到”主角身后，很不自然。</p><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><p>以遛狗为例，狗会在绳子周围走动，人物向前走的时候，狗的移动范围也会发生变化，但狗的行动范围总是不会超过绳子的长度。</p><p>因此“绳子”的长度可以理解成宠物的移动范围。</p><p>以主角为中心，存在一条“看不见的绳子”，即宠物和角色之间的距离就是小鸟飞行范围的约束。</p><p>以角色和小鸟的锚点（即中心点）计算两点的距离即可。</p><p>可以用两点间距离公式，也可以直接用 unity 的方法，有现成的方法肯定是直接用啦！</p><p>编写 MiniGame_Pet 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Pet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Transform player;</span><br><span class="line">    public float flySpeed &#x3D; 10f;</span><br><span class="line">    public float followDistance &#x3D; 10f;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Vector3.Distance(player.position, transform.position) &gt;&#x3D; followDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.position &#x3D; Vector3.Lerp(transform.position, player.position, Time.deltaTime * flySpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本有三个参数，第一个是要跟随的对象，即主角的位置。</p><p>第二个是飞行的速度，决定了当主角甩开小鸟的时候，小鸟会以多快的速度追上主角。</p><p>第三个参数是跟随范围的距离，当超过这个距离的时候，小鸟就会开始追主角。</p><p><img src="https://files.catbox.moe/h2vvif.gif" alt="跟随效果"></p><p>看起来丝滑了很多，小鸟现在还不能跟随角色转身，根据玩家的朝向让小鸟也转向就好了。</p><p><img src="https://files.catbox.moe/p1c2xw.gif" alt="转身效果"></p><p>这扑腾翅膀的样子也太萌了~</p><h2 id="角色系统"><a href="#角色系统" class="headerlink" title="角色系统"></a>角色系统</h2><p>基于“万物皆对象”的思想，可以把主角和敌人的相似点抽取出来，做成基类。</p><p>主角有动画，敌人也有动画；</p><p>主角有血量，敌人也有血量；</p><p>诸如此类，它们身上存在许多相似点，所以可以进行抽取。</p><h3 id="角色基类"><a href="#角色基类" class="headerlink" title="角色基类"></a>角色基类</h3><p>新建一个游戏角色的脚本 <code>MiniGame_Character</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float maxHP;</span><br><span class="line">    public GameObject[] bullets;</span><br><span class="line"></span><br><span class="line">    protected float currentHP;</span><br><span class="line"></span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line">    protected Animator animator;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        currentHP &#x3D; maxHP;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">        animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IEnumerator TakeDamage(float damage)</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">        currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">        yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在唤醒的时候自动获取对象的刚体和动画组件，并且赋予当前 HP 属性。</p><p>并且声明了一个抽象方法 <code>DeadCallback</code>（死亡回调），即当角色死亡的时候会发生什么事情，必须在子类中实现。</p><p>虽然游戏中的角色都会死亡，但是玩家死亡了会触发 GameOver，但是敌人死亡了会爆金币，所以要单独实现。</p><p><code>TakeDamage</code> 方法是角色的受伤事件，传入一个 damage（伤害值）。</p><p>类似攻击事件，这里用到协程，在 0.05s 后解除受伤动画状态。</p><p>要调用协程方法必须用 <code>StartCoroutine</code>，这样很不方便。</p><h3 id="延迟类封装"><a href="#延迟类封装" class="headerlink" title="延迟类封装"></a>延迟类封装</h3><p>可以将延迟函数封装成一个工具类，然后让子类继承这个类就可以直接使用延迟函数了。</p><p>在 <code>Assets/Scripts</code> 目录新建一个 Core 文件夹，用来保存游戏的核心类文件。</p><p>新建脚本 <code>TimeManger</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class TimeManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 重复执行</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void RepeatForever(string methodName, float time, float repeatRate)</span><br><span class="line">    &#123;</span><br><span class="line">        InvokeRepeating(methodName, time, repeatRate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延迟执行</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void Wait(System.Action action, float seconds)</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(WaitIEnumerable(action, seconds));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延迟执行方法封装</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private IEnumerator WaitIEnumerable(System.Action action, float seconds)</span><br><span class="line">    &#123;</span><br><span class="line">        yield return new WaitForSeconds(seconds);</span><br><span class="line">        action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 关闭该脚本上的Timer方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected void ClearTimeer()</span><br><span class="line">    &#123;</span><br><span class="line">        CancelInvoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TimeManger</code> 封装了协程的方法，只要直接调用 <code>Wait</code> 就可以实现延迟执行。</p><p>还有一些其他定时重复执行的方法，以后会用到。</p><p>而且这个类必须继承 <code>MonoBehaviour</code>，不然没办法调用 unity 提供的延迟函数。</p><p>而且继承了 <code>MonoBehaviour</code> 可以当做组件挂在场景中的游戏物体上。</p><h3 id="修改调用方法"><a href="#修改调用方法" class="headerlink" title="修改调用方法"></a>修改调用方法</h3><p>未修改前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public IEnumerator TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    if(currentHP &lt;&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        DeadCallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void TakeDamage(float damage)</span><br><span class="line">&#123;</span><br><span class="line">    animator.SetBool(&quot;hurt&quot;, true);</span><br><span class="line">    currentHP -&#x3D; damage;</span><br><span class="line"></span><br><span class="line">    Wait(delegate</span><br><span class="line">    &#123;</span><br><span class="line">        animator.SetBool(&quot;hurt&quot;, false);</span><br><span class="line"></span><br><span class="line">        if (currentHP &lt;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            DeadCallback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, 0.05f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TakeDamage</code> 方法已经不再是返回 <code>IEnumerator</code> 类型了，因此可以作为普通方法调用。</p><p><code>delegate</code> 是 <code>C#</code> 的委托类型，可以传入一个匿名函数作为回调，匿名函数的类型是 <code>System.Action</code>，可以作为函数的参数。</p><p><code>TimeManager</code> 封装的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected void Wait(System.Action action, float seconds)</span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(WaitIEnumerable(action, seconds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要传入一个委托和延迟执行的时间，就会自动去调用协程方法。</p><p>同理，再去修改之前的 Player 脚本的 Shoot 方法，这样代码又整洁了一些。</p><h2 id="制作敌人"><a href="#制作敌人" class="headerlink" title="制作敌人"></a>制作敌人</h2><p>小游戏只有一关，所以敌人数量不会很多。</p><p>包括数个小怪以及最后的 BOSS。</p><p>上面已经封装了角色类，现在再封装一层敌人的通用类。</p><h3 id="敌人基类"><a href="#敌人基类" class="headerlink" title="敌人基类"></a>敌人基类</h3><p>敌人也具有共通点，比如死亡会掉落金币（道具）。</p><p>把基础方法抽取出来可以提高代码的复用性，节省时间。</p><p>新建 <code>MiniGame_Enemy</code> 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Enemy : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveAction();</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死亡回调留个空，后面再完善就行了。</p><p>然后声明了一个抽象的 <code>MoveAction</code>（移动控制），每个敌人的行动模式都不一样，所以要在子类单独实现。</p><h3 id="漂浮幽灵"><a href="#漂浮幽灵" class="headerlink" title="漂浮幽灵"></a>漂浮幽灵</h3><p>幽灵敌人比较简单，它只会在一个区域范围内进行巡逻。</p><p>制作飞行动画：</p><p><img src="https://files.catbox.moe/v9ilid.gif" alt="漂浮幽灵"></p><p>然后再写一个控制幽灵的逻辑。</p><p>幽灵的移动轨迹示意图：</p><p><img src="https://files.catbox.moe/cij098.jpg" alt="幽灵的移动轨迹"></p><p>演示效果：</p><p><img src="https://files.catbox.moe/sm5xoq.gif" alt="演示幽灵移动"></p><h3 id="垃圾桶怪"><a href="#垃圾桶怪" class="headerlink" title="垃圾桶怪"></a>垃圾桶怪</h3><p>垃圾桶怪是固定不动的敌人，只有玩家走进攻击范围或者被玩家攻击的时候才会变成攻击形态。</p><p>待机状态：</p><p><img src="https://files.catbox.moe/snldse.gif" alt="垃圾桶怪待机动画"></p><p>愤怒形态：</p><p><img src="https://files.catbox.moe/h9pa0a.gif" alt="垃圾桶怪愤怒形态"></p><p>攻击形态：</p><p><img src="https://files.catbox.moe/8zprhn.gif" alt="攻击形态"></p><p>动画的状态转化关系也比较简单。</p><p><img src="https://files.catbox.moe/2rebvq.jpg" alt="垃圾桶怪的动画状态机"></p><p>然后为垃圾桶怪添加逻辑处理。</p><p>垃圾桶怪前方有一块警戒区域，当玩家进入这个区域的时候，垃圾桶怪就会变成攻击形态追击玩家。</p><p><img src="https://files.catbox.moe/idqygz.jpg" alt="垃圾桶怪的警戒区域"></p><p>还有第二种情况，当玩家用子弹攻击垃圾桶怪的时候，如果垃圾桶怪藏在桶里，此时是无敌的。</p><p>如果攻击达到一定次数，即使玩家没有踏入警戒区，垃圾桶怪也会变得愤怒，然后开始追击玩家。</p><p>（打扰到它睡觉了）</p><p>警戒区域也是一个碰撞体，设置为触发器即可。</p><p><img src="https://files.catbox.moe/bpsoxg.jpg" alt="警戒区域设置"></p><p>演示效果：</p><p><img src="https://files.catbox.moe/3l8ids.gif" alt="进入垃圾桶怪的警戒区域"></p><p>这里会出现一个问题，因为使用了物理系统，所以会产生物理碰撞效果。</p><p><img src="https://files.catbox.moe/81hsjo.gif" alt="与敌人的物理碰撞效果"></p><p>但这并不是游戏中应该有的效果，主角撞到敌人时，不应该把敌人撞飞。</p><p>只要将刚体组件的类型设置为 <code>Static</code>（静态不受外力）即可。</p><p><img src="https://files.catbox.moe/562zu9.jpg" alt="静态刚体"></p><p>修正后的效果：</p><p><img src="https://files.catbox.moe/mq0eet.gif" alt="无法被击飞的垃圾桶怪"></p><p>垃圾桶怪的行为逻辑还没完成，不过还有不少怪物的动画没完成，今天已经挺晚了，就留到明天再补充。</p><h3 id="自爆怪"><a href="#自爆怪" class="headerlink" title="自爆怪"></a>自爆怪</h3><p>自爆怪是一个组合类型的敌人，包括头顶的“竹蜻蜓”以及本体的“炸弹”。</p><p>当它靠近主角的时候，竹蜻蜓就会飞走，然后本体掉落在地上产生爆炸。</p><p><img src="https://files.catbox.moe/6yuzhl.jpg" alt="自爆怪"></p><p>添加了“竹蜻蜓”的动画效果：</p><p><img src="https://files.catbox.moe/omynqq.gif" alt="竹蜻蜓动画"></p><p>具体的分离逻辑也留到明天完成。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>今天的进度先到这里了，明天写完最后一篇，小游戏应该就能结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（五）</title>
      <link href="/2021/05/05/monster-game-5/"/>
      <url>/2021/05/05/monster-game-5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>unity 自带了一套动画系统，还内置了“状态机”。</p><p>状态机是一种可以实现不同状态之间互相转换的机制。</p><p>本篇开始制作角色的攻击动作以及其他一些动画。</p><p>unity 的动画系统比起 cocos 复杂很多，在网上没找到比较好的教程，因此决定自己看官方文档。</p><p>官方文档：<a href="https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html">https://docs.unity3d.com/cn/2020.3/Manual/AnimationSection.html</a></p><h2 id="攻击系统"><a href="#攻击系统" class="headerlink" title="攻击系统"></a>攻击系统</h2><p>制作动画之前，要先把角色的攻击功能做出来。</p><h3 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h3><p>前文写的方法是通过按键实现连发攻击。</p><p>现在为了让手感更加丝滑，改成按一下攻击键就发射一颗子弹。</p><p>使用 <code>GetButtonDown</code> 来监听玩家按下攻击键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新增</span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        Shoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写 <code>Shoot</code> 方法，在这里创建子弹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">    bulletObj.transform.SetParent(bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样按键攻击的功能就完成了。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/tszeso.gif" alt="按键射击"></p><p>这里的子弹以及如何让子弹飞离屏幕就消失，前面发的博文已经有介绍了，故不再重复说明。</p><h3 id="刚体碰撞问题"><a href="#刚体碰撞问题" class="headerlink" title="刚体碰撞问题"></a>刚体碰撞问题</h3><p>因为现在使用了物理系统，所以之前使用的区域检测法让子弹消失会出现问题。</p><p>如下图：</p><p><img src="https://files.catbox.moe/osp1cd.jpg" alt="内部碰撞"></p><p>这是刚体和刚体之间会发生碰撞，产生物理效果。</p><p>虽然碰撞区域移除了重力影响，但现在这个场景里面，角色身上有刚体组件，地板也有刚体组件，这样必然会触发物理系统，结果就是碰撞区域发生了偏移。</p><p>因为我已经把角色的操控系统改成用物理效果来实现了，原理已经不同了。</p><p>现在不能让碰撞区域作为刚体，而是要让子弹、敌人和玩家作为刚体，区域检测器设置为触发器。</p><p>尽管让子弹加上刚体会影响性能，但至少要先把功能实现了再说，如果出现卡顿现象，到时候再想办法优化。</p><p>（这个小游戏不是弹幕游戏，应该不至于会出现性能问题）</p><h3 id="子弹实例"><a href="#子弹实例" class="headerlink" title="子弹实例"></a>子弹实例</h3><p>移除碰撞区域的刚体，并设置为 Trigger，这样碰撞区域就是一个触发器了。</p><p>再给子弹加上 2D 刚体组件。</p><p>修改原来子弹代码移动逻辑，改成用外力进行推动而不是直接修改坐标，与控制角色的代码一样。</p><p>在父类中获得刚体组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改子类的移动逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 1000f;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(speed * direct, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果：</p><p><img src="https://files.catbox.moe/0l2djk.gif" alt="子弹消失"></p><p>可以看到，子弹离开边界的时候已经被销毁了。</p><h2 id="角色动画"><a href="#角色动画" class="headerlink" title="角色动画"></a>角色动画</h2><p>为了方便观察动画效果，先调整一下 unity 引擎的界面布局。</p><p><img src="https://files.catbox.moe/wpdw8j.jpg" alt="unity 布局调整"></p><p>接下来就可以开始制作动画了。</p><p>在 Assets 目录下创建一个 Animations 文件夹用来存放动画，依次创建 MiniGame、Player 子文件夹。</p><p>这里有个比较坑爹的地方，我用的 2021 版 unity 默认会把动画的播放间隔参数隐藏起来。</p><p>如下图：</p><p><img src="https://files.catbox.moe/t2bkg3.jpg" alt="动画界面"></p><p>其实只要点开界面的右上方，选择更多，在弹出的菜单中再选择 <code>ShowSampleRate</code>：</p><p><img src="https://files.catbox.moe/vgl65s.jpg" alt="showSampleRate"></p><p>勾选以后，就可以在动画界面看到设定帧数的输入框了，默认值是 60，也就是说 1 秒钟有 60 帧：</p><p><img src="https://files.catbox.moe/g48voy.jpg" alt="帧数设置"></p><p>实际上我们没有那么多的素材能用，一般也就几帧而已，每帧对应一张图片素材。</p><h3 id="待机动画"><a href="#待机动画" class="headerlink" title="待机动画"></a>待机动画</h3><p>待机动画是角色静止不动时的动作。</p><p>动画是女主角眨眼的动作，这个动画只播放一次，不循环。</p><p>完整动作只有 4 张素材，也就是把眼睛闭上的动作。</p><p>睁眼的动作其实就反过来倒序播放而已。</p><p>顺序播放：1234321，一共有 7 帧。</p><p>60 / 7 = 8.5，因此这里可以四舍五入取 9 作为帧数，即将 1 秒钟划分成 9 份。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/6c0sgn.gif" alt="待机动画"></p><p>动画默认是循环播放的，我们这个待机效果只要播放一次就够。</p><p>找到刚才存放动画的文件：</p><p><img src="https://files.catbox.moe/4sewgq.jpg" alt="待机动画文件"></p><p>双击选中，然后在右侧的属性面板中把 <code>Loop Time</code> 的勾去掉即可：</p><p><img src="https://files.catbox.moe/c9b7b4.jpg" alt="动画属性"></p><h3 id="奔跑动画"><a href="#奔跑动画" class="headerlink" title="奔跑动画"></a>奔跑动画</h3><p>继续制作奔跑动画，创建新的动画然后把素材拖进去：</p><p><img src="https://files.catbox.moe/xlkzmh.gif" alt="奔跑动画"></p><p>奔跑的动画是循环的，所以不需要调整。</p><h3 id="奔跑攻击动画"><a href="#奔跑攻击动画" class="headerlink" title="奔跑攻击动画"></a>奔跑攻击动画</h3><p>角色一边奔跑一边按攻击键，也有独立的动画。</p><p>直接将素材拖进去即可：</p><p><img src="https://files.catbox.moe/zqdfm6.gif" alt="奔跑攻击"></p><h3 id="攻击动画"><a href="#攻击动画" class="headerlink" title="攻击动画"></a>攻击动画</h3><p>攻击动画只有一张素材，也拖进去即可。</p><p><img src="https://files.catbox.moe/5qsyf4.jpg" alt="攻击动画"></p><h3 id="受伤动画"><a href="#受伤动画" class="headerlink" title="受伤动画"></a>受伤动画</h3><p>受伤也只有一张。</p><p><img src="https://files.catbox.moe/4bwpzy.jpg" alt="受伤动画"></p><h3 id="倒下动画"><a href="#倒下动画" class="headerlink" title="倒下动画"></a>倒下动画</h3><p>角色 gg 的时候倒地动画。</p><p><img src="https://files.catbox.moe/2frez6.jpg" alt="倒地动画"></p><h3 id="未完成动画"><a href="#未完成动画" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>其实还有跳跃、跳跃攻击的动画，但是没有做出来。</p><p>角色的动画这样就算弄好了。</p><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><p>事物具有“状态”属性，遇到不同条件时，状态就会发生变化。</p><p>比如天冷的时候，水结冰，此时水是固态，而当天气变热，冰化了，变成液态的水，然后天气继续升温，水被蒸发了，变成气态的水蒸气，水蒸气遇到冷空气又会变成雨。</p><p>这个过程就是水的状态转化机制，动画系统也是同理。</p><p>当玩家操控角色行走时，由待机动作转化为奔跑动作，而玩家又按下了攻击键，则角色的动画就会从奔跑转变为奔跑攻击，攻击动作完成后又会变回奔跑动作，然后玩家松开方向键停止奔跑，角色的动画就会从奔跑转为待机。</p><p>一般来说，除了自发的转换之外，动画转换基本是根据玩家的操作来决定的。</p><p>来看看令人头大的动画状态控制器：</p><p><img src="https://files.catbox.moe/82a86r.jpg" alt="动画状态控制器"></p><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p>物体总是有一个初始状态，其中 <code>Entry</code> 箭头指向的就是默认进入的动画效果。</p><p><img src="https://files.catbox.moe/4g2m3y.jpg" alt="初始状态"></p><p>这里的意思是，游戏开始时，角色就会进入 <code>Idle</code>（待机动画）。</p><p>打开调试场景测试：</p><p><img src="https://files.catbox.moe/2lsdgf.gif" alt="初始动画"></p><p>可以发现角色播放了眨眼动画，说明设置成功了。</p><p>而且这里只眨眼了一次，说明上面设置的取消循环也成功了。</p><h3 id="待机-奔跑"><a href="#待机-奔跑" class="headerlink" title="待机-奔跑"></a>待机-奔跑</h3><p>角色只有在玩家按键操作的时候，才会从静止状态变为奔跑状态。</p><p>因此可以用两种方法实现状态的转化，第一种是根据玩家的按键，第二种是根据角色当前的移动速度。</p><p>第一种方法是主动变化，第二种方法是被动触发。</p><p>这里选择第一种。</p><p>右键 <code>Player_Idle</code> 动画，在弹出的菜单中选择 <code>Make Transtition</code> 创建一个新的转换关系。</p><p><img src="https://files.catbox.moe/hh7o6d.jpg" alt="新建关系"></p><p>待机动画和奔跑动画是可以相互转换的，所以要建立双向关系。</p><p>动画转换条件只要监听玩家按键就可以了，控制玩家移动的 <code>GetAxis</code> 方法会返回 -1~1 的值。</p><p>当玩家没有按键的时候，返回的是 0，向左移动返回负数，向右返回整数。</p><p>因此这个值就可以当做动画转换的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 保存动画组件</span><br><span class="line">private Animator animator;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在唤醒的时候获取动画组件</span><br><span class="line">animator &#x3D; GetComponent&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在移动方法里获得水平按键参数</span><br><span class="line">animator.SetFloat(&quot;horizontal&quot;, Mathf.Abs(horizontal));</span><br></pre></td></tr></table></figure><p>这里将水平参数转换成绝对值，因为只要正数就够了，方向并不影响动画的播放。</p><p>好了，现在这样就可以进入游戏场景调试了：</p><p><img src="https://files.catbox.moe/d9qysu.gif" alt="待机和奔跑之间的转换"></p><p>简直不要太神奇……如果是自己来写状态机，指不定要花多长的时间呢！</p><h3 id="待机-攻击"><a href="#待机-攻击" class="headerlink" title="待机-攻击"></a>待机-攻击</h3><p>从待机到攻击比较简单，只要在待机状态下玩家按下攻击键就认为是攻击状态。</p><p>这里我对代码进行了一些修改，把按键判定放在 Update，然后在 FixedUpdate 实际发射出子弹。</p><p>因为攻击动作太快（只有 1 帧）会导致以肉眼看不见的速度结束，所以要用到延迟函数，这里我通过协程来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(Shoot());</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void PressedKey()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Fire1&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private IEnumerator Shoot()</span><br><span class="line">&#123;</span><br><span class="line">    if (isShoot)</span><br><span class="line">    &#123;</span><br><span class="line">        isShoot &#x3D; false;</span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, true);</span><br><span class="line"></span><br><span class="line">        GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">        GameObject bulletObj &#x3D; Instantiate(prefab, firePoint);</span><br><span class="line"></span><br><span class="line">        MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">        bullet.attacker &#x3D; this;</span><br><span class="line"></span><br><span class="line">        bulletObj.transform.SetParent(bg);</span><br><span class="line"></span><br><span class="line">        yield return new WaitForSeconds(0.05f);</span><br><span class="line"></span><br><span class="line">        animator.SetBool(&quot;shoot&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成子弹后 0.05s 将攻击状态变为 false，即切换动画状态。</p><p>演示效果：</p><p><img src="https://files.catbox.moe/ps485v.gif" alt="待机-攻击"></p><p>奔跑状态下按攻击键没有触发攻击动画，是因为还没设置。</p><h3 id="奔跑-奔跑攻击"><a href="#奔跑-奔跑攻击" class="headerlink" title="奔跑-奔跑攻击"></a>奔跑-奔跑攻击</h3><p>普通攻击是停下来的，而奔跑攻击有单独的动画。</p><p>演示效果如下：</p><p><img src="https://files.catbox.moe/8odefg.gif" alt="奔跑-奔跑攻击"></p><p>这里出现了一个比较“呆萌”的效果，主角奔跑攻击然后松开方向键，会出现“原地小跑”的情况，然后才停下来。</p><p><img src="https://files.catbox.moe/ojwxmg.gif" alt="原地小跑"></p><p>这是因为动画先从 Player_RunAttack 转换到 Player_Run，本来应该立即从 Player_Run 转化为 Player_Idle 的，但是因为我用的是 <code>GetAxis</code> 会有一段缓冲减速效果，因此这段极短的缓冲时间就是播放奔跑动画的时间，所以就会出现原地小跑的情况。</p><p>还有这段伸手动作：</p><p><img src="https://files.catbox.moe/8qzngf.gif" alt="伸手"></p><p>这是因为奔跑攻击动画用了循环，而且帧数比较多，所以才会有点“迟钝”的样子。</p><p>只要改成不循环然后减少帧数解决可以解决“伸手”的问题，但还是因为看起来很呆萌，所以就保留下来了。</p><blockquote><p>火兔语录：所有的 bug 都是游戏彩蛋！</p></blockquote><h3 id="未完成动画-1"><a href="#未完成动画-1" class="headerlink" title="未完成动画"></a>未完成动画</h3><p>还剩下两个动画没完成，一个是受伤另一个是倒地。</p><p>这两个动画要等制作出敌人才能实现，所以就留到下一篇了。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>参考资料：<a href="https://www.bilibili.com/video/BV1sE411g7jK?t=1301">https://www.bilibili.com/video/BV1sE411g7jK?t=1301</a></p><p>最终还是找到了一个视频资料。</p><p>第一次看到 unity 的动画状态机还以为会是很难理解的东西，但实际体验了一下，感觉并不是想象中那么困难。</p><p>有时候对于未知的事物，还是要勇敢的尝试一下才知道是不是真的很难。</p><p>最开始学 unity 是 4 年前，跟着教学制作了一个 3D 小球的 Demo。</p><p>虽然做出来了，但是全英文的界面让我感觉到学习很困难。</p><p>而且 3D 的摄像机弄了半天也没搞清楚原理，最后就不了了之了。</p><p>也许是因为那时刚毕业，对自己的技术不那么自信，所以才会打退堂鼓。</p><p>但是经过了这么多年以后，技术提高了，自信心也增强了。</p><p>所谓“功夫不负有心人”，我开始相信只要是想学的技术，肯定能学会。</p><p>关键在于决心强不强烈。</p><p>成就感可以驱动行动，如果一个人擅长做一件事，而且这件事具有一定的挑战性，完成这件事就能得到成就感。</p><p>成就感是一种正反馈，得到的正反馈越多，学习的动力越强。</p><p>但如果一个人不擅长做某事，而且尝试过一次之后就失败了，这样就会得到与成就感相反的——『挫败感』。</p><p>如果这个人的内心又比较脆弱，意志也不够坚定，积累了一定的挫败感超过承受能力最终就会打退堂鼓。</p><p>像现在这样记录博客实际上也是在积累「成就感」，边做边写也能够督促自己每天坚持更新。</p><p>如果哪一天没更新了，说明自己偷懒了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（四）</title>
      <link href="/2021/05/04/monster-game-4/"/>
      <url>/2021/05/04/monster-game-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于自己写一个控制系统的工作量太大，因此决定改用 unity 的物理系统来完成这个平台跳跃 FC 小游戏。</p><p>虽然又得重头开始了，但这样也是为了让整个游戏的制作速度更快和更好。</p><h2 id="角色控制系统"><a href="#角色控制系统" class="headerlink" title="角色控制系统"></a>角色控制系统</h2><p>话不多说，直接开始。</p><h3 id="重力系统"><a href="#重力系统" class="headerlink" title="重力系统"></a>重力系统</h3><p>新建场景，然后创建一个角色图像，给角色加上 <code>Rigid Body 2D</code> 组件和 <code>Capsule Collider 2D</code> 组件。</p><p><img src="https://i.loli.net/2021/05/04/WXdDeG4w8UOoSEh.jpg" alt="QQ20210504-184126.jpg"></p><p><code>Rigid Body 2D</code> 是刚体组件，带有物理属性，<code>Capsule Collider 2D</code> 则是胶囊状碰撞体。</p><p>然后进入调试场景，发现角色已经会受到重力自由下落了。</p><p><img src="https://files.catbox.moe/tgafa6.gif" alt="重力效果"></p><h3 id="创建地板"><a href="#创建地板" class="headerlink" title="创建地板"></a>创建地板</h3><p>由于没有地板支撑，角色会掉到屏幕外面。</p><p>接下来创建一个地板，加上 <code>Rigid Body 2D</code> 和 <code>Box Collider 2D</code> 组件。</p><p><img src="https://files.catbox.moe/tnvyq1.jpg" alt="地板"></p><p>同时地板的刚体组件类型设置为 <code>Kinematic</code>：</p><p><img src="https://files.catbox.moe/lccafr.jpg" alt="刚体类型"></p><p>然后打开调试场景测试：</p><p><img src="https://files.catbox.moe/h2l724.gif" alt="地板效果"></p><p>两个刚体之间产生了碰撞，因此角色可以站在地板上面。</p><h3 id="水平移动"><a href="#水平移动" class="headerlink" title="水平移动"></a>水平移动</h3><p>使用物理系统控制角色移动十分简单，只要让角色受到水平方向的力就可以了。</p><p>新建 <code>MiniGame_Player</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 100f;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在唤醒物体时，取得身上绑定的刚体组件，然后监听水平方向的按键，并且赋值给 <code>horizontal</code> 变量。</p><p>然后在 <code>FixedUpdate</code> 方法里对刚体赋予水平速度，测试结果：</p><p><img src="https://files.catbox.moe/xd0xkl.gif" alt="水平移动"></p><p>发现角色受到外力直接倒下了……</p><p>这是因为角色的重心太高了，受到外力很容易倒下。</p><p>解决方法很简单，只要把 z 轴的旋转冻结就可以。</p><p><img src="https://files.catbox.moe/j3bkmm.jpg" alt="冻结z轴旋转"></p><p>然后再进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/chgu4h.gif" alt="重新测试"></p><h3 id="角色朝向"><a href="#角色朝向" class="headerlink" title="角色朝向"></a>角色朝向</h3><p>虽然角色可以左右滑动了，但是角色的朝向并没有改变。</p><p>修改 <code>FixedUpdate</code> 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上一个判断水平按键的条件，根据玩家控制的移动方向改变角色的翻转。</p><p>测试效果：</p><p><img src="https://files.catbox.moe/pv53o4.gif" alt="角色朝向"></p><h3 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h3><p>同理，只需要让角色受到一个向上的力，角色就会“跳起来”了。</p><p>因为跳跃只能触发一次，而不像水平方向移动一样没有限制，所以要增加一个变量用来判断玩家是否按下跳跃键。</p><p>在跳跃状态下就不能再按跳跃键了，因为这个小游戏没有二段跳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private bool jumpPressed;</span><br></pre></td></tr></table></figure><p>接下来这里有个小技巧，可以解决之前提到过的按键监听 <code>GetButtonDown</code> 手感不好的问题。</p><p>即在 Update 方法里监听按键，在 FixedUpdate 方法里写处理逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">    if (Input.GetButtonDown(&quot;Jump&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (jumpPressed &amp;&amp; isJump &#x3D;&#x3D; false)</span><br><span class="line">    &#123;</span><br><span class="line">        jumpPressed &#x3D; false;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下空格键角色已经可以跳跃了，但是可以在空中无限跳。</p><p>正确的逻辑应该是角色跳跃之后，就不能再按空格键进行二段跳或者三段跳。</p><p>而是应该落到地板上面才能重新按跳跃键。</p><h3 id="落地问题"><a href="#落地问题" class="headerlink" title="落地问题"></a>落地问题</h3><p>现在的跳跃机制没有判断落到地板的情况，要实现这个判断实际上很复杂。</p><p>如果直接用碰撞系统无法避免“陷入物体”的情况（详情见前文）。</p><p>完美的解决方法就是上一篇文章中提到过的“射线检测机制”，但是要自己手动写一个检测系统非常困难。</p><p>幸运的是 unity 已经实现了类似的方法。</p><p><code>Physics2D.Overlap</code> 相关方法可以绘制某种图形，然后判断与某个物体是否相交。</p><p>这个跟我自己设想的「探知领域」差不多。</p><p>我今天折腾了一个下午，到底是为了什么……</p><p>在角色的脚底创建一个空的物体，当做角色的“脚”用来判断角色是否与地板接触。</p><p><img src="https://files.catbox.moe/qw5jf7.jpg" alt="地板检测器"></p><p>然后选中游戏场景中的地板，添加一个新的 Layout（图层），命名为 Ground：</p><p><img src="https://files.catbox.moe/w0n4yr.jpg" alt="Layout"></p><p>图层是用来控制游戏中场景的层级关系，在这里也可以作为检测用的“标签”。</p><p>图层 Layout 也可以作为参数传给脚本，类型是 LayerMask，在 Player 脚本添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public LayerMask layerMask;</span><br><span class="line">private bool isGround;</span><br></pre></td></tr></table></figure><p><code>layerMask</code> 用来赋值地板的图层参数，<code>isGround</code> 用来判断是否站在地板上面。</p><p>在 FixedUpdate 方法添加一行代码;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br></pre></td></tr></table></figure><p><code>Physics2D.OverlapCircle</code> 方法会在脚底的位置画一个半径是 0.5 的圆圈，如果圆圈与 layerMask 的图层相交时就会返回 true。</p><p>其实就是下图这样：</p><p><img src="https://files.catbox.moe/jeeovz.jpg" alt="圆圈判定"></p><p>这个圆的半径不能太大，不然角色还没碰到地板就会被判定成站在地板上面了（毕竟踩着那么大一颗球）。</p><p>进入游戏场景进行测试：</p><p><img src="https://files.catbox.moe/x1dj9g.gif" alt="跳跃测试"></p><p>只有落地了才能继续跳跃，无法在空中进行二段跳。</p><p>跳跃功能也完成了！</p><h2 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h2><p>顺便优化一下代码，完整的 <code>MiniGame_Player</code> 脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float moveSpeed &#x3D; 400f;</span><br><span class="line">    public float jumpSpeed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    public Transform groundCheck;</span><br><span class="line"></span><br><span class="line">    private Rigidbody2D rb;</span><br><span class="line">    private float horizontal;</span><br><span class="line"></span><br><span class="line">    private bool jumpPressed;</span><br><span class="line"></span><br><span class="line">    public LayerMask layerMask;</span><br><span class="line">    private bool isGround;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        rb &#x3D; GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PressedKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        Move();</span><br><span class="line">        Jump();</span><br><span class="line">        GroundCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PressedKey()</span><br><span class="line">    &#123;</span><br><span class="line">        horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">        if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGround)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Move()</span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        if (horizontal !&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.localScale &#x3D; new Vector3(horizontal, 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Jump()</span><br><span class="line">    &#123;</span><br><span class="line">        if (jumpPressed)</span><br><span class="line">        &#123;</span><br><span class="line">            jumpPressed &#x3D; false;</span><br><span class="line">            rb.velocity &#x3D; new Vector2(rb.velocity.x, jumpSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void GroundCheck()</span><br><span class="line">    &#123;</span><br><span class="line">        isGround &#x3D; Physics2D.OverlapCircle(groundCheck.position, 0.5f, layerMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小知识，可以发现上面我把方法都抽取出来，然后再在 <code>FixedUpdate</code> 里面进行调用。</p><p>是否会多此一举？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    Move();</span><br><span class="line">    Jump();</span><br><span class="line">    GroundCheck();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到网上有人在讨论这个问题，正好思考了一下。</p><p>程序是堆栈调用，为了代码的美观而封装成单独的方法调用，岂不是增加了入栈和出栈的成本？</p><p>确实可能会有一些影响，但这里并不只是为了代码美观整洁才封装的。</p><p>之所以封装成单独的方法调用是因为可以节省内存。</p><p>如果把全部的代码写在一坨，那定义的一些临时变量就会占着内存不放。</p><p>只有函数执行结束的时候回收机制才会销毁函数内部的临时变量。</p><p>代码的美观整洁也是十分重要的，抽取方法还可以实现代码的复用。</p><p>为了以后方便维护，在觉得一些地方写的不够好的时候，我会回头优化一下，如有必要也会像现在这样直接推翻整个系统重来。</p><h2 id="手感调整"><a href="#手感调整" class="headerlink" title="手感调整"></a>手感调整</h2><p>现在虽然实现了角色控制系统，但是操作手感却很不好。</p><p>接下来就开始优化。</p><h3 id="重力系数"><a href="#重力系数" class="headerlink" title="重力系数"></a>重力系数</h3><p>因为重力太小的原因，角色跳跃看起来很“假”。</p><p>打开顶部的菜单 <code>Edit</code> 然后选择 <code>Project Settings</code> 进入游戏参数配置。</p><p>选中左侧的 <code>Physics 2D</code> 把 <code>Gravity</code> 的 y 值改成 -45.5，如下：</p><p><img src="https://i.loli.net/2021/05/05/PWCBsafOUnMbg86.jpg" alt="QQ20210505-094234.jpg"></p><p>然后再进入游戏场景测试：</p><p><img src="https://i.loli.net/2021/05/05/vcIY8dFeonqx1Sf.gif" alt="Kapture 2021-05-05 at 09.47.53.gif"></p><p>掉落的速度看起来好多了。</p><h3 id="不自然停止问题"><a href="#不自然停止问题" class="headerlink" title="不自然停止问题"></a>不自然停止问题</h3><p>角色跳跃的过程，如果立即放开水平移动键，就会像上图那样直接停止水平移动，看起来有些不自然。</p><p>如果要优化操作手感，应该给水平方向一些惯性，即使玩家松开按键，角色也会向前方保持减速运动直到停止，而不是立即停下来。</p><p>想要实现平滑过渡，将原来的 <code>GetAxisRaw</code> 改成 <code>GetAxis</code> 即可，前者返回 0、1、-1 三个数，而后者却返回 -1~1 的范围值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 原来的水平移动按键监听</span><br><span class="line">horizontal &#x3D; Input.GetAxisRaw(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改之后</span><br><span class="line">horizontal &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br></pre></td></tr></table></figure><p>然后再修改 Move 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void Move()</span><br><span class="line">&#123;</span><br><span class="line">    rb.velocity &#x3D; new Vector2(horizontal * moveSpeed, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">    if (horizontal &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (horizontal &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        transform.localScale &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的效果如下：</p><p><img src="https://i.loli.net/2021/05/05/RmaBeMxqQ3plJKk.gif" alt="Kapture 2021-05-05 at 09.58.03.gif"></p><p>虽然只是很细微的差别，但实际操作会感觉“丝滑”一些。</p><p>水平方向即使松开按键也会保持一小段减速，而不是直接停下来。</p><h3 id="弹起问题"><a href="#弹起问题" class="headerlink" title="弹起问题"></a>弹起问题</h3><p>角色落到地上，有一个软绵绵的弹起效果。</p><p>但这并不是我们需要的，在 unity 老版本中可以修改刚体的弹力，但是我用的是新版的 2021.1.5f1c1，在刚体上面已经找不到弹力设置项了。</p><p>这里需要修改碰撞检测类型，默认值是 <code>Discrete</code> （离散的），需要修改为 <code>Continuous</code>（连续的）：</p><p><img src="https://i.loli.net/2021/05/05/mCw1TkOal9UfhbI.jpg" alt="QQ20210505-101708.jpg"></p><p>然后再进入游戏测试：</p><p><img src="https://i.loli.net/2021/05/05/MOnekuH9oDQp2m6.gif" alt="Kapture 2021-05-05 at 10.21.56.gif"></p><p>现在角色已经站在“钢”做成的地板上了。</p><h3 id="卡住问题"><a href="#卡住问题" class="headerlink" title="卡住问题"></a>卡住问题</h3><p>当角色与刚体的侧边接触时，会出现卡住的情况：</p><p><img src="https://i.loli.net/2021/05/05/yTiMqgX5Y1VhzIc.gif" alt="Kapture 2021-05-05 at 10.24.03.gif"></p><p>这是因为 unity 的物理系统也模拟了摩擦力，所以角色与边缘接触时，会因为强大的摩擦力而被“吸住”。</p><p>只需要修改摩擦力就可以解决此问题。</p><p>在 <code>Assets</code> 新建一个 <code>Physic Material</code> 来保存物理材质。</p><p>然后右键打开菜单，选择 <code>2D</code>，然后再选择 <code>Physic Material 2D</code>，因为这个游戏是 2D 的，所以要选择 2D 的材质。</p><p><img src="https://i.loli.net/2021/05/05/oP59YgpvwZqCNB6.jpg" alt="QQ20210505-102756.jpg"></p><p>将材质文件命名为 Player，然后在右侧打开的属性中，将 <code>Friction</code>（摩擦力）设置为 0。</p><p><img src="https://i.loli.net/2021/05/05/CJNH1xpS9juiVW5.jpg" alt="QQ20210505-102843.jpg"></p><p>最后，点选场景中的角色，选中刚体组件，点击 <code>Material</code> 旁边的小圈，选择刚才创建好的材质：</p><p><img src="https://i.loli.net/2021/05/05/VLWBEymwSHpGeNl.jpg" alt="QQ20210505-103025.jpg"></p><p>测试效果：</p><p><img src="https://i.loli.net/2021/05/05/GI3S9fUlXMqApJg.gif" alt="Kapture 2021-05-05 at 10.33.05.gif"></p><p>加上材质的女主角已经变得十分“光滑”了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时总想自己从零开始造轮子，但其实轮子别人已经造好了，直接用就可以了。</p><p>不应该执着于制作过程，而且学习 unity 提供的功能也是一种提升能力的办法。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（三）</title>
      <link href="/2021/05/03/monster-game-3/"/>
      <url>/2021/05/03/monster-game-3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇将会完成小游戏的跳跃动作以及场景、地面、障碍物的制作。</p><p>PS. 为了节省时间以后的文章可能不会贴代码，只讲实现原理。</p><h2 id="角色跳跃"><a href="#角色跳跃" class="headerlink" title="角色跳跃"></a>角色跳跃</h2><p>按下键盘的 w 键或者 上方向键可以让角色进行单段跳跃。</p><h3 id="动作实现"><a href="#动作实现" class="headerlink" title="动作实现"></a>动作实现</h3><p>因为我不是用物理组件来实现的，所以这里需要自己手动写跳跃的逻辑。</p><p>当玩家按下跳跃键时，给与角色一个 y 轴向上的速度即可，与控制角色移动的原理一样，演示效果：</p><p><img src="https://i.loli.net/2021/05/03/KWGH57lbJ2Ndyvk.gif" alt="Kapture 2021-05-03 at 21.45.07.gif"></p><p>角色“原地升天”！</p><h3 id="重力下降"><a href="#重力下降" class="headerlink" title="重力下降"></a>重力下降</h3><p>这样直接让角色升天可不行，必须受到重力让其下坠。</p><p>如果现实世界一样，当一个人跳起来的时候，受到重力影响 y 轴速度会不断降低，直到掉回地板，有地板的支撑才不会继续下坠。</p><p>所以只要让角色的 y 速度时刻都在减少即可实现重力效果，为了方便演示看到效果，初始 y 速度设置为 0，不然角色会直接掉下去：</p><p><img src="https://files.catbox.moe/ytcuyw.gif" alt="重力效果"></p><p>没有地板的支撑，所以会掉出屏幕外面。</p><h3 id="地板"><a href="#地板" class="headerlink" title="地板"></a>地板</h3><p>角色站在地板可以认为是碰撞事件，即角色和地板产生了碰撞（接触）。</p><p>给角色加上刚体组件和碰撞组件，同时地板也要加上碰撞组件，并且设置为触发器。</p><p>当角色与地板发生碰撞的时候，就给与角色一个“站在地板上”的状态。</p><p>当角色处于「站在地板上」状态的时候，不会受到重力影响而下坠，这样就可以让角色看起来像“站在地板上”了！</p><p>演示效果：</p><p><img src="https://files.catbox.moe/nlb9b2.gif" alt="站在地板"></p><p>角色从空中掉到地板的时候，虽然不再继续下降，但是又出现新的问题——人物“陷入”地板了。</p><p>出现这种情况是因为游戏是按帧渲染的，当一个物体处于高速运动状态的时候，一帧的位移很难正好处于碰撞物体的表面。</p><p>尽管我们在 <code>OnTriggerEnter2D</code> 触发器事件立即让碰撞物停止行动了，但还是无法避免这种情况。</p><h3 id="地板穿透问题"><a href="#地板穿透问题" class="headerlink" title="地板穿透问题"></a>地板穿透问题</h3><p>假设有一面墙壁，朝着墙壁发射子弹，不考虑物理效果，让子弹撞到墙的时候立即停止行动，在游戏里会出现下面这种情况：</p><p><img src="https://files.catbox.moe/oq6v9e.jpg" alt="子弹穿透墙壁示例"></p><p>这是因为子弹飞行的速度太快了，导致每一帧的位置变化非常大，刚好停在墙壁表面的情况几乎不可能出现。</p><p><img src="https://i.loli.net/2021/05/03/45mUqAGTtsO2Hn3.jpg" alt="QQ20210503-223707.jpg"></p><p>如上图所示，虽然保证每一帧的间隔时间相同，但是当子弹与墙壁碰撞的时候，子弹已经移动到墙壁里了。</p><p>这个时候让子弹停止行动也无法解决陷入的问题。</p><p>不过这个问题很容易解决，只要让角色与地板发生碰撞的时候，调整角色的坐标刚好站在地板上不就可以了！？</p><p>没错，改进原来的代码，让角色和地板接触的时候，改变主角的 y 坐标为地板上方，演示如下：</p><p><img src="https://files.catbox.moe/1q3bt7.gif" alt="碰撞时调整y坐标"></p><p>可以看到，虽然调整 y 坐标以后角色确实没有陷入地板，但问题也很明显，落到地板的一刹那出现了一个“幻影”。</p><p>因此，这并非最好的解决方法。</p><h3 id="解决穿透问题"><a href="#解决穿透问题" class="headerlink" title="解决穿透问题"></a>解决穿透问题</h3><p>高速运动的刚体穿透碰撞体是一件很常见的问题，网上的教程一般都是类似上面这样调整坐标或者回到前一帧的位置，但这样就会造成碰撞“抖动”现象，对游戏的操作体验和观感都不好。</p><p>有一个比较靠谱的方案就是「射线检测法」。</p><p>从枪口发射出来的子弹，同时会向前方发射一条射线用来探知前方的碰撞体。</p><p><img src="https://files.catbox.moe/cnptmj.jpg" alt="射线检测法"></p><p>当射线探知的前方有一面墙壁的时候，就可以提前告诉子弹墙壁表面的坐标，当子弹运动到这个坐标的时候，就不再继续前进了。</p><p>这样一来，子弹刚好接触到墙壁表面的位置就停下来了，而且因为接触到墙壁也与墙壁产生了碰撞事件，从而可以在碰撞回调方法进行逻辑处理。</p><p>但是角色跟子弹不一样，如果要用射线检测法，就要从上下左右 4 个方向进行检测，这样比较麻烦。</p><p>相反，从射线检测法得到灵感，我想到一个「探知领域」法：</p><p><img src="https://i.loli.net/2021/05/04/bvxtQGPwmkfeyru.jpg" alt="QQ20210504-125815.jpg"></p><p>角色的周围存在一个「探知领域」，这个领域是一个比角色本身的碰撞盒子稍微大一点的碰撞检测器，因为角色跳跃的时候，并不知道自己的落地点在哪，有可能跳到一个障碍物的上面，也可能落在地板上面，所以需要一个用来检测周围环境的探知领域，由于探知领域的面积比角色本身的碰撞体大，所以探知区域先与地板、障碍物触发碰撞事件，因此就可以提前通知角色的落地点了。</p><p>理论搞清楚了，就开始动手解决问题！</p><p><img src="https://i.loli.net/2021/05/04/ydf31DKcrOECZz5.jpg" alt="QQ20210504-130837.jpg"></p><p>创建一个空白对象，挂在 Player 节点下面，然后给对象加上 <code>Box Collider 2D</code> 碰撞体组件，宽高设置为比角色稍微大一点。</p><p>因为挂在 Player 节点，父节点本身就有刚体组件，所以探知领域不需要再添加刚体。</p><p>新建一个 Tag 命名为 <code>Detect</code>，赋予探知领域此 Tag，用来区分碰撞检测：</p><p><img src="https://i.loli.net/2021/05/04/hOPlt3X4TbinD9V.jpg" alt="QQ20210504-131020.jpg"></p><p>……未完待续。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>我发现如果自己来写这跳跃系统的话，工作量实在太大了。</p><p>折腾了一个下午，居然都在解决陷入地板的问题，但是如果直接使用 unity 的物理系统就不需要考虑这个问题。</p><p>然后又担心物理系统会让小游戏变得太“僵硬”，于是就去看了一些其他平台跳跃游戏的示例，结果发现他们全部都是基于物理系统的。</p><p>甚至包括蔚蓝这种操作手感顶尖的跳跃游戏，也可以用物理效果做出来。</p><p>最后我决定把控制角色的脚本用物理系统重写一遍，下文开始新篇章。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（二）</title>
      <link href="/2021/05/03/monster-game-2/"/>
      <url>/2021/05/03/monster-game-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面一篇文章实现了控制角色移动，今天开始实现角色的攻击事件。</p><h2 id="攻击事件"><a href="#攻击事件" class="headerlink" title="攻击事件"></a>攻击事件</h2><p>玩家控制的小魔女可以发射「星之弹」攻击敌人。</p><p>这是子弹的特写：</p><p><img src="https://i.loli.net/2021/05/03/T34xrIR89U7YlXu.jpg" alt="QQ20210503-004833.jpg"></p><p>演示效果（图片加载比较慢）：</p><p><img src="https://files.catbox.moe/d1kake.gif" alt="子弹"></p><p>静帧图：</p><p><img src="https://files.catbox.moe/z7fu39.jpg" alt="子弹2"></p><p>大致就是从手中发射星星弹攻击敌人。</p><p>要实现角色发射子弹攻击，需要一连串的步骤，接下来就一步一步的进行说明。</p><h3 id="制作子弹"><a href="#制作子弹" class="headerlink" title="制作子弹"></a>制作子弹</h3><p>因为子弹是动态生成的，所以把子弹做成一个 prefab（预制体）。</p><p>放在 Resources/Prefabs/MiniGame 目录下备用，子弹还有很多种，这里就把星弹取名为：StarBullet。</p><p><img src="https://files.catbox.moe/2wcsfw.jpg" alt="子弹3"></p><h3 id="子弹发射口"><a href="#子弹发射口" class="headerlink" title="子弹发射口"></a>子弹发射口</h3><p>按下攻击键会发射子弹，按住攻击键会连续发射子弹。</p><p>首先创建一个子弹发射的位置，这是一个看不见的透明物体（标红位置）：</p><p><img src="https://files.catbox.moe/2033ns.jpg" alt="发射口"></p><p>这个发射口位于角色节点底下，这样就会跟随角色转向而改变位置。</p><h3 id="按键攻击"><a href="#按键攻击" class="headerlink" title="按键攻击"></a>按键攻击</h3><p>我们希望按下 <code>Z</code> 或 <code>J</code> 键来发射子弹，因此需要修改 unity 自带的按键指令：</p><p><img src="https://files.catbox.moe/u3rzlr.jpg" alt="修改按键"></p><p>找到 <code>Fire1</code>，别名需要指定两个按键，<code>negative button</code> 和 <code>postive button</code>，即消极的按钮和积极的按钮。</p><p>当按下消极的按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 -1，即负向增加；</p><p>当按下积极按钮时，<code>GetAxis</code> 的值就会逐渐趋向于 1，即正向增加。</p><p>对于攻击指令，只要判定 <code>GetAxis</code> 不等于 0 即玩家正在按攻击键。</p><p>在 Player 脚本添加攻击按键监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;攻击&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Update()</span><br><span class="line">&#123;</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在按下攻击键只是在控制台打印“攻击”两个字，接下来要生成上面的子弹。</p><h3 id="生成子弹"><a href="#生成子弹" class="headerlink" title="生成子弹"></a>生成子弹</h3><p>通过 <code>Resources</code> 方法动态加载预制体，然后再通过 <code>Instantiate</code> 生成游戏对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>ShootEvent</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ShootEvent()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetAxisRaw(&quot;Fire1&quot;) !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        CreateBullet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://files.catbox.moe/ob6aph.gif" alt="攻击1"></p><p>可以看到子弹好像“粘在”角色身上，这是因为指定了 <code>FirePoint</code> 作为子弹的父节点，而 <code>FirePoint</code> 又挂在 <code>Player</code> 下面，子节点肯定是随着父节点改变位置了。</p><p>解决方法就是把子弹添加到背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 游戏场景</span><br><span class="line">protected GameObject bg;</span><br><span class="line"></span><br><span class="line">private void Awake()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; ... 找到背景对象</span><br><span class="line">    bg &#x3D; GameObject.Find(&quot;Background&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成子弹后，修改子弹的父节点为游戏场景（背景）</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后，再次测试效果：</p><p><img src="https://files.catbox.moe/h2q9qk.gif" alt="攻击2"></p><p>这回子弹的位置正常了，但又发现新的问题——可以看到角色移动时没有播放奔跑动画！</p><h3 id="动画丢失问题"><a href="#动画丢失问题" class="headerlink" title="动画丢失问题"></a>动画丢失问题</h3><p>这是因为 <code>MiniGame_Player</code> 脚本继承了 <code>MiniGame_Character</code>，而动画事件的监听是在父类，现在又在子类重写了 <code>Update</code> 方法，导致父类的动画监听事件没了。</p><p>解决方法就是把父类的 <code>Update</code> 声明为虚方法（virtual），访问修饰符为 <code>protected</code> 可以让子类调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected virtual void Update()</span><br><span class="line">&#123;</span><br><span class="line">    PlayAnimateListerner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改 Player 脚本的 Update 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected override void Update()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 调用父类的方法</span><br><span class="line">    base.Update();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 射击事件</span><br><span class="line">    ShootEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新测试一次：</p><p><img src="https://files.catbox.moe/6gpze2.gif" alt="攻击4"></p><p>我们的女主角终于能快乐的奔跑同时“划出许多星星”了……？！</p><h3 id="攻击频率"><a href="#攻击频率" class="headerlink" title="攻击频率"></a>攻击频率</h3><p>新的问题又出现了，按一下攻击键就生成那么多子弹，甚至造成了卡顿现象。</p><p>子弹的发射应该有限制，比如按住攻击键 0.25s 发射一颗，即存在「攻击间隔」，也可以理解为『攻击速度』。</p><p>原理与前一篇写的动画事件一样，就不再赘述了。</p><p>修改后的效果如下：</p><p><img src="https://files.catbox.moe/5a7utg.gif" alt="攻击5"></p><p>看起来像有频率的进行“划水”了。</p><h2 id="让子弹飞！"><a href="#让子弹飞！" class="headerlink" title="让子弹飞！"></a>让子弹飞！</h2><p>现在的攻击只是生出一颗子弹，但是这个子弹就像一张图片一样一动不动。</p><p>接下来要让子弹能够向前飞行。</p><h3 id="子弹基类"><a href="#子弹基类" class="headerlink" title="子弹基类"></a>子弹基类</h3><p>除了小魔女发射的「星弹」之外，敌人也会发射各种子弹。</p><p>子弹都有共通之处，所以现在新建一个子弹的基类 <code>MiniGame_Bullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Bullet : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float damage;</span><br><span class="line"></span><br><span class="line">    [HideInInspector]</span><br><span class="line">    public MiniGame_Character attacker;</span><br><span class="line"></span><br><span class="line">    protected abstract void MoveEvent();</span><br><span class="line"></span><br><span class="line">    protected void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        MoveEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的子弹都有伤害值，以及攻击者，并且需要在子类实现子弹的移动逻辑。</p><p>将 attacker 字段设置为 public 方便赋值，同时再设置 <code>HideInInspector</code> 就可以让 attacker 字段不在属性面板显示了。</p><h3 id="起飞吧，子弹！"><a href="#起飞吧，子弹！" class="headerlink" title="起飞吧，子弹！"></a>起飞吧，子弹！</h3><p>新建一个星弹的脚本 <code>MiniGame_StarBullet</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_StarBullet : MiniGame_Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public float speed;</span><br><span class="line">    private float direct;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        direct &#x3D; attacker.transform.localScale.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void MoveEvent()</span><br><span class="line">    &#123;</span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; speed * Time.deltaTime * direct;</span><br><span class="line"></span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>星弹的逻辑比较简单，根据玩家的朝向向前直线移动。</p><p>然后把脚本挂在星弹的预制体上，并且将子弹的速度设置为 1500，伤害值设置为 1。</p><p>然后再修改 Player 发射子弹的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void CreateBullet()</span><br><span class="line">&#123;</span><br><span class="line">    GameObject prefab &#x3D; Resources.Load(&quot;Prefabs&#x2F;MiniGame&#x2F;StarBullet&quot;) as GameObject;</span><br><span class="line">    GameObject bulletObj &#x3D; Instantiate(prefab, firePoint.transform);</span><br><span class="line">    bulletObj.transform.SetParent(bg.transform);</span><br><span class="line"></span><br><span class="line">    MiniGame_Bullet bullet &#x3D; bulletObj.GetComponent&lt;MiniGame_Bullet&gt;();</span><br><span class="line">    bullet.attacker &#x3D; this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在发射子弹的时候，将 this 赋值给子弹的 attacker，这样这颗子弹的主人就是主角了。</p><p>然后打开调试场景测试效果：</p><p><img src="https://i.loli.net/2021/05/03/3iXnzk9oZtYsIeG.gif" alt="Kapture 2021-05-03 at 9.46.27.gif"></p><p>看起来已经没问题了，但是……新的问题果然又来了。</p><p>打开调试窗口可以发现，发射出去的子弹并没有消失，而是继续一直往前飞行，仍然残留在游戏内：</p><p><img src="https://i.loli.net/2021/05/03/4IegDpaqQmfJyEU.gif" alt="Kapture 2021-05-03 at 9.56.18.gif"></p><h2 id="子弹消失术"><a href="#子弹消失术" class="headerlink" title="子弹消失术"></a>子弹消失术</h2><p>不管玩家的电脑有多大的内存，也扛不住无限生成的子弹。</p><p>因此在达到某种条件的时候，应该让子弹“消失”。</p><h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><p>有几个方案：</p><ul><li>子弹创建 3 秒后自动销毁</li><li>子弹飞行距离达到某个值后自动销毁</li><li>子弹离开屏幕后消失</li></ul><p>第①个方法和第②个方法实际结果是差不多的。</p><p>因为子弹的飞行速度是恒定的，设定 3 秒后销毁子弹，那么子弹最终移动的距离就是固定的。</p><p>所以有两种方法让子弹消失：①根据飞行距离 ②判定子弹是否离开屏幕</p><p>如果子弹的飞行距离过短，玩家就必须贴脸输出，明明是远程攻击最后却还要拉近距离……</p><p>个人感觉体验不好，所以我决定用第二种方法，这也是大多数 FC 游戏的做法。</p><p><img src="https://files.catbox.moe/2odcjn.jpg" alt="场景示意图"></p><p>上图是玩家在游戏场景按键攻击的示意图，当子弹飞出屏幕外的时候，即要进行销毁。</p><p>常规方法是像这样在游戏场景外生成一片区域，子弹撞到这个区域就会自动销毁。</p><p><img src="https://i.loli.net/2021/05/03/ROuA597oyzKlmwf.jpg" alt="QQ20210503-102015.jpg"></p><p>但是还有一种反其道而行之的方法，即把碰撞检测区域放在游戏场景内，改成监听子弹离开这片区域。</p><p><img src="https://i.loli.net/2021/05/03/zhknjHylax47vU3.jpg" alt="QQ20210503-102429.jpg"></p><p>第二种方法更好，因为第一种方法碰撞检测区域不规则，需要监听的区域比较多，而且子弹的大小形态各异，如下图：</p><p><img src="https://i.loli.net/2021/05/03/vsYMqT4eRylfr2w.jpg" alt="QQ20210503-103608.jpg"></p><p>体积比较大的子弹比起体积小的子弹会提前碰到屏幕边缘而消失。</p><p>而且子弹还没离开场景就“不见”了看起来也会很奇怪。</p><p>所以这里采用第二种方法来实现。</p><h3 id="区域检测器"><a href="#区域检测器" class="headerlink" title="区域检测器"></a>区域检测器</h3><p>unity 中要实现碰撞检测，其中一方必须是“刚体”，且双方都必须包含碰撞体组件。</p><p>这里又面临着一个选择：①刚体组件挂在子弹上面 ②刚体组件挂在区域检测器和敌人身上</p><p>常规做法是选择①，因为正常的思路子弹才是“实体”，刚体属于物理组件，理论上应该挂在子弹上面，而区域检测器更像是“触发器”一类的东西。</p><p>这样的想法虽然没错，但是这里还是选择反其道而行之，选择②才是最优解。</p><p>因为子弹的数量理论上是无限的，频繁创建组件需要耗费性能，而且刚体组件耗费的性能十分感人，如果满屏幕的子弹都是刚体，那很可能会有强烈的卡顿现象。</p><p>把刚体加在子弹上面明显是不理智的选择，子弹只需要添加碰撞体并且设置为触发器即可。</p><p>而且碰撞检测事件只需要监听「区域检测器」和「敌人」，而不是监听每一颗子弹，这样游戏监听的事件数量就大大减少了。</p><blockquote><p>有时候这种反其道而行之的做法，在游戏开发中会有很大的帮助</p></blockquote><p>首先在游戏场景创建一个空白物体 SceneArea，分辨率设置为屏幕大小：1280 * 720。</p><p>然后给这个物体添加 <code>Rigidbody 2D</code> 组件（2D刚体），然后再添加 <code>Box Collider 2D</code> 组件（2D 盒型碰撞体）。</p><p>如图所示：</p><p><img src="https://i.loli.net/2021/05/03/1rHFbAJKi9EvaTc.jpg" alt="QQ20210503-155245.jpg"></p><p>这里的 <code>Body Type</code> 应该设置为 <code>Dynamic</code>（动态的）这样才能与触发器产生碰撞检测。</p><p>因此还需要修改刚体组件的 <code>Gravity Scale</code> 为 0，即让它不受重力影响。</p><p>不然开始测试的时候这个区域就会因为重力掉下去，导致测不出来。</p><p><code>Simulated</code> 默认是勾选的，此处保持勾选状态，此选项是设置刚体是否模拟物理效果，如果取消勾选则检测不出碰撞。</p><p>场景区域这样就设置完毕了，现在虽然可以产生碰撞，但是还未对碰撞事件做出处理。</p><p>新建脚本 <code>MiniGame_SceneArea</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_SceneArea : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    private void OnTriggerExit2D(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(collision.gameObject.name + &quot;离开场景&quot;);</span><br><span class="line"></span><br><span class="line">        string tag &#x3D; collision.gameObject.tag;</span><br><span class="line"></span><br><span class="line">        switch (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;Bullet&quot;:</span><br><span class="line">                BulletEvent(collision);</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Enemy&quot;:</span><br><span class="line">                break;</span><br><span class="line">            case &quot;Item&quot;:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void BulletEvent(Collider2D collision)</span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(collision.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里监听 <code>OnTriggerExit2D</code> 事件，需要注意的是 unity 还有一个类似的碰撞检测事件 <code>OnCollisionExit</code>。</p><p><code>Trigger</code>（触发器） 和 <code>Collision</code>（碰撞体）的碰撞回调方法是不一样的。</p><p>因为我将子弹视为触发器，所以要用 <code>Trigger</code> 作为碰撞的回调方法，当子弹离开这个区域的时候就会触发 <code>OnTriggerExit2D</code> 回调。</p><p><code>OnTriggerExit2D</code> 回调方法会根据物体的 <code>tag</code>（标签）来判断物体属于哪种类型。</p><p>因为不仅仅是子弹会在离开屏幕时消失，道具、敌人之类的也会在离开视野范围内消除，所以这里设置通过标签来区分。</p><p>其实全部只要触发 <code>Destroy</code> 销毁事件即可，但是在这里区分物体的种类，还可以计算「物品搜集率」、「怪物击败率」等等，完美通关还能弄个成就什么的。</p><h3 id="设置子弹"><a href="#设置子弹" class="headerlink" title="设置子弹"></a>设置子弹</h3><p>接下来设置子弹，同样是给子弹加上一个碰撞体，这里选择圆形碰撞体 <code>Circle Collider 2D</code>，并且设置好半径，然后把 <code>Is Trigger</code> 勾选。</p><p><img src="https://i.loli.net/2021/05/03/m75TWwFX9c3Ci2f.jpg" alt="QQ20210503-153200.jpg"></p><p>然后点击属性面板 <code>Inspector</code> 顶部的 <code>Tag</code>，新增一个 <code>Bullet</code> 标签，然后将子弹设置为该标签。</p><p><img src="https://i.loli.net/2021/05/03/WjCBiDguzGR72My.jpg" alt="QQ20210503-155517.jpg"></p><p>接下来修改调试场景的配置，场景像素配置修改为 <code>Free Aspect</code>，再把 <code>Maximize On Play</code>（最大化）点亮。</p><p><img src="https://i.loli.net/2021/05/03/xFUiO4JTQPWncEz.jpg" alt="QQ20210503-160354.jpg"></p><p>这样就可以看到屏幕摄像机拍不到的地方了，然后进入调试场景测试：</p><p><img src="https://i.loli.net/2021/05/03/1dzFQIGHKsuYgZT.gif" alt="Kapture 2021-05-03 at 16.04.59.gif"></p><p>可以看到子弹离开游戏区域（深色）时就会被自动销毁了。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名为怪物的游戏——《星之魔女》FC小游戏移植（一）</title>
      <link href="/2021/05/02/monster-game-1/"/>
      <url>/2021/05/02/monster-game-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>短篇 AVG 游戏的流程已经差不多了，现在就差 cee 把游戏要用的素材提供给我，最后再导入测试就基本完成了。</p><p>所以趁这个时间，我打算把原来在 cocos creator 引擎上《名为怪物的游戏》制作进度移植到 unity 引擎。</p><p>同时花了一晚上的时间把火兔游戏的官网重建成这样一个博客，后续将会以博文的方式直播制作过程或者发布游戏预告。</p><p>（直播制作过程主要是为了防鸽……）</p><h2 id="移植原因"><a href="#移植原因" class="headerlink" title="移植原因"></a>移植原因</h2><p>首先我很喜欢 cocos creator 引擎，不仅是因为国人制作的，而且上手简单。</p><p>在制作了游戏的序章之后，发现 cocos creator 不能满足我们的要求，因为我们打算发布的是 PC 端，<br>而 cocos creator 主打移动游戏，比方说在游戏内调节分辨率 cocos 就不支持，还有因为 JavaScript<br>对文件读写什么的也有限制，要解决这些问题估计得花很多时间，但对于我们来说可以游刃有余的时间并不多了，<br>所以选择对单机游戏支持比较友好的 unity。</p><h2 id="星之魔女"><a href="#星之魔女" class="headerlink" title="星之魔女"></a>星之魔女</h2><p>星之魔女是《名为怪物的游戏》中的一个怀旧向像素风 FC 游戏。</p><p>使用 cocos creator 引擎开发的画面：<a href="https://www.bilibili.com/video/BV167411L7vJ/">https://www.bilibili.com/video/BV167411L7vJ/</a></p><iframe src="//player.bilibili.com/player.html?aid=89983856&bvid=BV167411L7vJ&cid=153683294&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="移植过程"><a href="#移植过程" class="headerlink" title="移植过程"></a>移植过程</h2><p>文章会包含制作过程的技术相关内容，如果有兴趣的小伙伴可以了解一下。</p><h3 id="素材导入"><a href="#素材导入" class="headerlink" title="素材导入"></a>素材导入</h3><p>由于之前小游戏已经做完了，所以素材可以直接导入。</p><p>像素风的序列帧：</p><p><img src="https://i.loli.net/2021/05/02/ZjeiXxRbSLBlHG7.jpg" alt="QQ20210502-214701.jpg"></p><h3 id="场景配置"><a href="#场景配置" class="headerlink" title="场景配置"></a>场景配置</h3><p>新建一个 1280 * 720 的场景。</p><p><img src="https://i.loli.net/2021/05/02/94OvjVgNtaY1HFG.jpg" alt="QQ20210502-214837.jpg"></p><h3 id="让角色动起来"><a href="#让角色动起来" class="headerlink" title="让角色动起来"></a>让角色动起来</h3><p>现在场景有了，但角色只是一张静态图片，要让角色可以通过按键移动，就要开始编写角色控制脚本了。</p><p>新建名为 <code>MiniGame_MoveEvent</code> 的脚本，用来控制角色移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 500f;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">            transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">        &#123;</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">            transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 unity 中加载游戏会加载所有脚本，所以脚本的名字加上 <code>MiniGame_</code> 来区分。</p><p>为了让角色的朝向也能改变，在按下移动键的时候，顺便改变图片的翻转。</p><p>这里可以使用 WASD 来控制移动，也可以用方向键控制移动，目前只有左右移动，把这个脚本挂在 Player 对象上即可用键盘控制角色了：</p><p><img src="https://i.loli.net/2021/05/02/ZC73l8bPK6TiDho.gif" alt="Kapture 2021-05-02 at 21.54.23.gif"></p><p>实现角色移动还可以直接用 unity 自带的物理引擎，碰撞检测阻止移动就比较方便，但是我这里选择自己写脚本逻辑，因为 FC 游戏里的一些操作是不符合物理规律的。</p><h3 id="角色小动作"><a href="#角色小动作" class="headerlink" title="角色小动作"></a>角色小动作</h3><p>现在角色能动起来了，但是看起来就是在移动一张图片，没有游戏的感觉。</p><p>为了让角色变得“生动”，就要给角色加上动画演出效果。</p><p>unity 内置了动画系统，但是我这里也选择自己写脚本来控制。</p><p>新建一个名为 <code>MiniGame_Character</code> 的抽象类，因为不仅主角可以播放动画，敌人也有动画效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public abstract class MiniGame_Character : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Sprite[] idle;</span><br><span class="line">    public Sprite[] hurt;</span><br><span class="line">    public Sprite[] attack;</span><br><span class="line">    public Sprite[] run;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 是否循环播放动画</span><br><span class="line">    private bool animateLoop;</span><br><span class="line">    &#x2F;&#x2F; 当前播放的动画</span><br><span class="line">    private string currentAnimate;</span><br><span class="line">    &#x2F;&#x2F; 当前动画index</span><br><span class="line">    private int animateIndex;</span><br><span class="line">    &#x2F;&#x2F; 当前动画精灵</span><br><span class="line">    public Sprite[] currentAnimateSprites;</span><br><span class="line">    &#x2F;&#x2F; 人物行走图</span><br><span class="line">    private Image character;</span><br><span class="line">    &#x2F;&#x2F; 动画播放间隔</span><br><span class="line">    private float animateInterval;</span><br><span class="line">    &#x2F;&#x2F; 当前时间</span><br><span class="line">    private float time;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        character &#x3D; GetComponent&lt;Image&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 死亡回调</span><br><span class="line">    protected abstract void DeadCallback();</span><br><span class="line"></span><br><span class="line">    public void SetAnimate(string animate)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 不播放重复动画</span><br><span class="line">        if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;切换动画：&quot; + animate);</span><br><span class="line"></span><br><span class="line">        currentAnimate &#x3D; animate;</span><br><span class="line">        animateIndex &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        switch (animate)</span><br><span class="line">        &#123;</span><br><span class="line">            case &quot;idle&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; idle;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;run&quot;:</span><br><span class="line">                animateLoop &#x3D; true;</span><br><span class="line">                animateInterval &#x3D; 0.1f;</span><br><span class="line">                currentAnimateSprites &#x3D; run;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;attack&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; attack;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;hurt&quot;:</span><br><span class="line">                animateLoop &#x3D; false;</span><br><span class="line">                currentAnimateSprites &#x3D; hurt;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void PlayAnimateListerner()</span><br><span class="line">    &#123;</span><br><span class="line">        if (animateLoop &#x3D;&#x3D; false &amp;&amp; animateIndex &gt; currentAnimateSprites.Length - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Time.time &lt; time)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 时间自增</span><br><span class="line">        time &#x3D; Time.time + animateInterval;</span><br><span class="line"></span><br><span class="line">        if (animateLoop &#x3D;&#x3D; true)</span><br><span class="line">        &#123;</span><br><span class="line">            if (animateIndex &gt; currentAnimate.Length - 1)</span><br><span class="line">            &#123;</span><br><span class="line">                animateIndex &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        character.sprite &#x3D; currentAnimateSprites[animateIndex];</span><br><span class="line">        animateIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        PlayAnimateListerner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再新建一个用于玩家控制角色的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_Player : MiniGame_Character</span><br><span class="line">&#123;</span><br><span class="line">    protected override void DeadCallback()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO 进入GameOver场景</span><br><span class="line">        throw new System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画的播放逻辑很简单，就是循环播放图片，以下是主角的序列帧行走图：</p><p><img src="https://i.loli.net/2021/05/02/23e9XzWpJdjHBIw.jpg" alt="QQ20210502-220534.jpg"></p><p>跟制作动画的原理一样，就是以肉眼难以辨别的速度播放细微不同的图片，所以看起来像“动起来”一样。</p><p>为了间隔一定时间播放一张图片，这里用了一个计时器，定义下一个切换图片的时间点，比如 0.1 秒以后，如果当前时间等于 0.1 秒后，就播放下一张图片，然后切换图片的时间点等于当前时间加上 0.1s。</p><p>如果是循环播放类的图片，在图片全部播完之后，就会从第一张开始继续播放，如果是不循环的动画，就停止继续播放。</p><p>声明一个公开的方法 <code>SetAnimate</code>，只要传入要播放的动画，就会自动配置对应的参数，比如当前播放的图片数组和是否循环播放以及播放间隔。</p><p>这里要加一个判断，防止重复播放相同的动画：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (currentAnimate &#x3D;&#x3D; animate)</span><br><span class="line">&#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前已经在播这个动画了，再调用这个方法就直接返回。</p><p>抽象父类还定义了一个 <code>DeadCallback</code> 死亡回调方法，即当目标死亡时会做什么事情。</p><p>玩家死亡了就是 Gamover，敌人死亡了就爆金币。</p><p>现在先来做基本的动画：待机小动作和跑步动作。</p><p>要播放动画就调用 <code>SetAnimate</code> 方法，在 <code>MiniGame_Character</code> 加入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Start()</span><br><span class="line">&#123;</span><br><span class="line">    SetAnimate(&quot;idle&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样角色在进入场景的时候，就会自动播放待机动画。</p><p>把 <code>MiniGame_Character</code> 脚本挂在场景的 Player 节点，并且在脚本组件上把待机动画图拖进去：</p><p><img src="https://i.loli.net/2021/05/02/IrwmhDUNsGRy8vl.jpg" alt="QQ20210502-221735.jpg"></p><p>进入场景就可以看到效果了：</p><p><img src="https://i.loli.net/2021/05/02/ytqZiRHB5nG6k98.gif" alt="Kapture 2021-05-02 at 22.19.09.gif"></p><p>一个简单的眨眼小动作！</p><p>同理要让角色有奔跑动画只需要在 <code>MiniGame_MoveEvent</code> 控制角色移动的时候播放动画即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void FixedUpdate()</span><br><span class="line">&#123;</span><br><span class="line">    if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        transform.Translate(Vector3.left * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;run&quot;);</span><br><span class="line">        gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime * speed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断松开按键</span><br><span class="line">    if (Input.GetKeyUp(KeyCode.A) || Input.GetKeyUp(KeyCode.LeftArrow) ||</span><br><span class="line">        Input.GetKeyUp(KeyCode.D) || Input.GetKeyUp(KeyCode.RightArrow)</span><br><span class="line">        )</span><br><span class="line">    &#123;</span><br><span class="line">        player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要判断当键盘松开的时候，要改成待机动画。</p><p>然后把奔跑的动画素材也拖到脚本组件上，演示效果：</p><p><img src="https://i.loli.net/2021/05/02/hvgxd8Y3pkworau.gif" alt="Kapture 2021-05-02 at 22.26.16.gif"></p><h3 id="小问题修正"><a href="#小问题修正" class="headerlink" title="小问题修正"></a>小问题修正</h3><p>这里其实还存在一个小问题，就是当按键和弹起的一瞬间，有几率出现判定失误，<code>GetKey</code> 方法是监听按键，不管是弹起还是按下都会触发，而 <code>GetKeyUp</code> 则是监听弹起事件，因此会存在监听到弹起事件的一瞬间同时也被判定为按下的情况，导致人物虽然停止移动了，但是奔跑动画却还在播放的情况。</p><p>除此之外，还有一个比较特殊的情况，就是如果玩家同时按下左方向和右方向，这样也会变得很奇怪。</p><p>为了修正上述两个问题，重新修改 <code>MiniGame_MoveEvent</code> 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MiniGame_MoveEvent : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float speed &#x3D; 400f;</span><br><span class="line"></span><br><span class="line">    private MiniGame_Player player;</span><br><span class="line"></span><br><span class="line">    private Vector3 left &#x3D; new Vector3(-1, 1, 1);</span><br><span class="line">    private Vector3 right &#x3D; new Vector3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player &#x3D; GetComponent&lt;MiniGame_Player&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float raw &#x3D; Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        float moveSpeed &#x3D; raw * Time.deltaTime * speed;</span><br><span class="line"></span><br><span class="line">        var pos &#x3D; transform.position;</span><br><span class="line">        pos.x +&#x3D; moveSpeed;</span><br><span class="line">        transform.position &#x3D; pos;</span><br><span class="line"></span><br><span class="line">        if (raw &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (raw &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;run&quot;);</span><br><span class="line">            gameObject.transform.localScale &#x3D; right;</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;</span><br><span class="line">            player.SetAnimate(&quot;idle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听按键的方法改成 <code>GetAxis</code>，这个方法会返回 -1~1的浮点数，</p><p><code>Horizontal</code> 是 unity 内置的常量，对应水平方向相关的按键，即左右方向键和 WASD。</p><p>所有的常量及对应的按键参数可以在构建游戏时，Player Settings 里查看：</p><p><img src="https://i.loli.net/2021/05/03/P4FR6JSWa3giLmK.jpg" alt="QQ20210503-002740.jpg"></p><p>这些常量有一个好处就是可以支持手柄操作。</p><p>因为 <code>GetAxis</code> 会返回一个范围值，而且是渐进式的增加，这样还可以让角色有一个起跑短暂加速的感觉，在松开按键的时候，也会有缓冲减速效果。</p><p>修改后的演示效果：</p><p><img src="https://i.loli.net/2021/05/02/jUuVS9l6sPQzTO2.gif" alt="Kapture 2021-05-02 at 23.17.15.gif"></p><p>另外，unity 还有一个 <code>GetAxisRaw</code> 方法，类似 <code>GetAxis</code>，但是它只会返回三个值：-1、0、1。</p><p>如果使用 <code>GetAxisRaw</code> 方法，就没有平滑起跑的效果了，而是直接以最大的速度奔跑，改成 <code>GetAxisRaw</code> 后的演示效果如下：</p><p><img src="https://i.loli.net/2021/05/02/agpb3rl1ihWxLo7.gif" alt="Kapture 2021-05-02 at 23.20.22.gif"></p><p>两种效果都各有好坏，有缓冲效果感觉更加笨重，但是比较真实，以最大速度起跑操作体验更好。</p><p>这里我就采用直接最大速度开始奔跑的方案，另外，如果同时按下左右方向键，则行动会立即停止，不会因为同时按而产生奇奇怪怪的结果了。</p><p>而动画是根据按压的 raw 返回值来判断的，也就不会出现行动停止奔跑动画还在继续的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 新游开发 </category>
          
          <category> 名为怪物的游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发技术 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于火兔游戏工作室</title>
      <link href="/2021/05/01/welcome/"/>
      <url>/2021/05/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="关于火兔游戏工作室"><a href="#关于火兔游戏工作室" class="headerlink" title="关于火兔游戏工作室"></a>关于火兔游戏工作室</h1><h2 id="成员组成"><a href="#成员组成" class="headerlink" title="成员组成"></a>成员组成</h2><p>火兔游戏工作室目前由两个人组成：我（火烧兔子）和 Cee。</p><p>我主要负责游戏的程序，Cee 主要负责游戏的美工以及剧本的主线剧情。</p><h2 id="游戏作品"><a href="#游戏作品" class="headerlink" title="游戏作品"></a>游戏作品</h2><p>我们联合制作的第一部作品是「月之幻想」，记得当时只用了一个月的时间就完成 Demo 版，但最后很遗憾还是没有做到完结。</p><p>我个人的作品还有：</p><ul><li>【短篇AVG】路人甲的故事</li><li>【网页版】魔王传说系列：第三弹（已下线）</li><li>【RPG】魔王传说系列：第一弹及第二弹</li><li>【RPG】宠物战记</li><li>【RPG】冒险物语</li><li>【RPG】黑暗刻印</li></ul><h2 id="新作预告"><a href="#新作预告" class="headerlink" title="新作预告"></a>新作预告</h2><p>目前正在制作一部短篇 AVG，已经快完成了，近期之内应该就会发布。</p><p>以及原创长篇 RPG ——「名为怪物的游戏」。</p><p>由于种种原因导致进度停滞不前，现在开始重新计划中，等到现在制作的 AVG 完成就可以开始了。</p>]]></content>
      
      
      <categories>
          
          <category> 关于我们 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 官方公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能优化之静态资源加速</title>
      <link href="/2021/03/24/web-optimize-1/"/>
      <url>/2021/03/24/web-optimize-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片、css、js 等等不会在用户访问时改变的资源统称静态资源。</p><p>网站的打开速度除了跟代码有关，静态资源也会拖后腿，优化静态资源加载速度比起优化代码更能显著提高访问速度。</p><h2 id="WEB-服务器"><a href="#WEB-服务器" class="headerlink" title="WEB 服务器"></a>WEB 服务器</h2><p>Apache 和 Nginx 是常用的 WEB 服务器。</p><p>Nginx 处理静态资源的速度比 Apache 更快，所以选择 Nginx 可以提高静态资源访问速度。</p><p>Nginx 可以配置静态资源缓存，参考资料：<a href="https://www.w3cschool.cn/nginxsysc/nginxsysc-cache.html">Nginx 静态资源缓存设置</a></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>两台电脑的远近距离会影响到访问速度，例如在大陆地区访问国外的服务器就会延迟。</p><p>CDN 即内容分发网络，它会根据就近原则为你分配访问的节点。</p><p>比如在广州有一台服务器，上面保存着图片 A，在美国也有一台服务器，也保存着相同的图片 A，假设你的网站客户群体是全球范围，那么让国内用户访问广州的服务器上面的图片 A，美国用户访问美国服务器的图片 A，这样访问速度就是最快的。</p><p>更细分一点，在广州、上海、福州、香港……等等很多个地区都有一台服务器，这些服务器都保存着图片 A，这样广州的人访问广州的服务器，上海的人访问上海的服务器……这就是内容分发，就近原则访问资源。</p><p>我们个人是没办法做到那么多节点的，只有依靠服务商。</p><p>CDN 的原理就是负载均衡，根据 IP 来分配节点。</p><p>有很多免费的 CDN 服务商，推荐使用 jsdelivr + Github 来作为个人的 CDN。</p><p>Github：<a href="http://github.com/">http://github.com/</a></p><p>首先到 Github 创建一个账号，然后新建一个仓库，上传一张图片，比如图片名字为：avatar.png。</p><p>然后就可以直接用 jsdelivr 加载这张图片了。</p><p>格式：<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p><p>版本号不是必须的，但是加上去可以防止用户本地缓存了资源导致没有更新，你可以随意编写自己的版本号，如：@1.0，不过如果你要加上版本号的话，需要用 git 命令打一个版本的标签。</p><p>示例：<a href="https://github.com/laravel/laravel">https://github.com/laravel/laravel</a></p><p>这是 Laravel 框架的仓库地址，仓库根目录下有一个 <code>webpack.mix.js</code> 文件。</p><p>那么可以访问下面的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;laravel&#x2F;laravel&#x2F;webpack.mix.js</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;laravel&#x2F;laravel@8.5.15&#x2F;webpack.mix.js</span><br></pre></td></tr></table></figure><p>这样就 OK 了！</p><p>上面的 @8.5.15 是 Laravel 框架已经打好的版本标签。</p><p>在仓库的 tags 页面可以查看所有标签 ：<a href="https://github.com/laravel/laravel/tags">https://github.com/laravel/laravel/tags</a></p><p>默认不写标签就是引用最新版。</p><p>前端用的最多的 js 即 JQeury 了，仓库地址：<a href="https://github.com/jquery/jquery">https://github.com/jquery/jquery</a></p><p>可以试着拿这个仓库练习一下，首先是确定自己要用的 JQuery 版本：<a href="https://github.com/jquery/jquery/tags">https://github.com/jquery/jquery/tags</a></p><p>例如我要引用最新的 v3.6.0，然后发现 dist 里有不同类型的文件：<a href="https://github.com/jquery/jquery/tree/3.6.0/dist">https://github.com/jquery/jquery/tree/3.6.0/dist</a></p><p>带有 min 即压缩过的，一般我们都是引用这个。 </p><p>可以用下面的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.6.0&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>CDN 不止可以用 js、css 等，还可以把图片也上传到自己的 github 仓库，用相同的办法引入即可。</p><blockquote><p>需要注意的是 jsdelivr 可能不太稳定，一旦它挂了你的网站资源就加载不出来了，这也是用 cdn 的风险</p></blockquote><h2 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h2><p>推荐两个免费图床：</p><p>SM.MS：<a href="http://sm.ms/">http://sm.ms/</a></p><p>牛图网：<a href="http://niupic.com/">http://niupic.com/</a></p><p>把图片上传到这两个网站，它们自带 CDN。</p><p>上传图片之前，可以到 TinyPng：<a href="https://tinypng.com/">https://tinypng.com/</a> 将图片压缩一下，体积减小之后访问的速度也就 更快了。</p><blockquote><p>需要注意的是压缩画质会受损，请根据实际需求选择是否压缩</p></blockquote><p>除此之外，图片的 jpg 格式比起 png 更小，因为 jpg 是压缩的格式，而 png 可以保留透明背景，如果不需要透明背景可以将图片压缩为 jpg 格式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FireRabbit-Engine 实战 从零搭建个人博客（四）完结篇</title>
      <link href="/2021/03/24/firerabbit-engin-4/"/>
      <url>/2021/03/24/firerabbit-engin-4/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个多月没更新了，大致总结一下。</p><p>博客已经做完而且上线了，框架也在边写博客业务的时候边更新，具体过程略。</p><p>静态资源使用 CDN 可以实现秒开，AB 测试的结果差强人意，原本一个单纯的框架测试 hello world 时 RPS 可以达到 200-300，而博客上线后，测试 5000 篇文章使用 Redis 缓存的情况下，RPS 只剩下 20-30，太丢 swoole 的脸了……</p><p>总的来说，通过自己写框架的过程还是学到蛮多知识的，尤其是在做自己的游戏的时候，思维方式发生了很大的改变。</p><p>平时写网站几乎用不到的「设计模式」，对写框架和游戏开发来说却是最根本的基础，现在我已经决定好好学一下各种设计模式了。不然以后做游戏开发的时候，代码肯定是乱糟糟的一团。</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FireRabbitEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FireRabbit-Engine 实战 从零搭建个人博客（三）登录与注册</title>
      <link href="/2021/02/19/firerabbit-engin-3/"/>
      <url>/2021/02/19/firerabbit-engin-3/</url>
      
        <content type="html"><![CDATA[<h2 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h2><p>在 app 下新建一个文件夹 view 用来保存视图模板，</p><p>再创建一个 storage，并继续在 storage 下创建 view_cache 用来保存编译后的视图文件。</p><p>然后修改 app.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constant::VIEW_CONFIG &#x3D;&gt; [</span><br><span class="line">    &#39;path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;view&#39;,</span><br><span class="line">    &#39;cache_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;view_cache&#39;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>此处的文件路径即上述创建的文件夹。</p><h2 id="视图母版"><a href="#视图母版" class="headerlink" title="视图母版"></a>视图母版</h2><p>母版即所有页面共用的代码，比如每个页面都有顶部导航栏跟底部栏，</p><p>只是中间的部分不同，因此只要把内容单独提取出来，顶部和底部的结构可以复用。</p><p>在 view 下新建 layout 用来保存母版，同时创建 app.blade.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;火兔博客&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航栏&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航栏&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航栏&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航栏&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    </span><br><span class="line">    @yield(&#39;content&#39;)</span><br><span class="line"></span><br><span class="line">    &lt;hr&#x2F;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p align&#x3D;&quot;center&quot;&gt;火兔博客©2021&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>中间的 <code>yield(&#39;content&#39;)</code> 即抽取出来的内容页。</p><h2 id="登录-注册页面"><a href="#登录-注册页面" class="headerlink" title="登录/注册页面"></a>登录/注册页面</h2><p>添加登录注册的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbit\Engine\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Http\\Controller\\&#39;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;login&#39;, &#39;IndexController@login&#39;)-&gt;name(&#39;login&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;register&#39;, &#39;IndexController@register&#39;)-&gt;name(&#39;register&#39;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>接着修改控制器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;19</span><br><span class="line"> * Time：12:39</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller;</span><br><span class="line"></span><br><span class="line">use FireRabbit\Engine\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function login()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;show(&#39;login&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function register()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;show(&#39;register&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建对应的 blade 模板，login.blade.php：</p><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FireRabbitEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FireRabbit-Engine 实战 从零搭建个人博客（二）创建博客所需的表</title>
      <link href="/2021/02/19/firerabbit-engin-2/"/>
      <url>/2021/02/19/firerabbit-engin-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Phinx"><a href="#Phinx" class="headerlink" title="Phinx"></a>Phinx</h2><p>官方网站：<a href="https://book.cakephp.org/phinx/0/en/index.html">Phinx - 官方文档</a></p><p>phinx 是一个数据库迁移插件，它可以帮你实现不使用 sql 文件来创建表。</p><p>框架还没集成数据库迁移系统，因此就需要自己手动安装了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行命令：<code>composer require robmorgan/phinx</code>。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>第一次安装还需要进行初始化：<code>vendor/bin/phinx init</code>，不然 phinx 不知道你的数据库账号密码就无法连接了。</p><p>初始化完成后，在项目根目录会出现一个配置文件 phinx.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">[</span><br><span class="line">    &#39;paths&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;migrations&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;migrations&#39;,</span><br><span class="line">        &#39;seeds&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;seeds&#39;</span><br><span class="line">    ],</span><br><span class="line">    &#39;environments&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;default_migration_table&#39; &#x3D;&gt; &#39;phinxlog&#39;,</span><br><span class="line">        &#39;default_environment&#39; &#x3D;&gt; &#39;development&#39;,</span><br><span class="line">        &#39;production&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;production_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ],</span><br><span class="line">        &#39;development&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;development_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ],</span><br><span class="line">        &#39;testing&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;testing_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &#39;version_order&#39; &#x3D;&gt; &#39;creation&#39;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>默认是 development 环境，在这里修改自己的数据库配置。</p><p>虽然 phinx 是数据库迁移，但它本身创建不了数据库，需要手动创建。</p><p>修改完成后，再创建一个名词叫做 blog 的数据库即可。</p><h3 id="迁移目录"><a href="#迁移目录" class="headerlink" title="迁移目录"></a>迁移目录</h3><p>根据配置文件最上方的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;paths&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;migrations&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;migrations&#39;,</span><br><span class="line">    &#39;seeds&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;seeds&#39;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>创建对应的文件夹。</p><h3 id="创建表迁移"><a href="#创建表迁移" class="headerlink" title="创建表迁移"></a>创建表迁移</h3><p>命令：<code>vendor/bin/phinx create xxxx</code>。</p><p>xxx 是表名，使用大驼峰方式。</p><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><p>命令：<code>vendor/bin/phinx migrate</code>。</p><h2 id="项目所需表"><a href="#项目所需表" class="headerlink" title="项目所需表"></a>项目所需表</h2><p>博客项目需要的表及对应的字段，表名默认为复数形式（即加一个 s）。</p><p>所有的表都有一个自增主键。</p><h3 id="用户表：users"><a href="#用户表：users" class="headerlink" title="用户表：users"></a>用户表：users</h3><ul><li>name：昵称</li><li>email：注册邮箱</li><li>password：密码，采用明文方式存储（本项目只是测试而已~~~好孩子不要学）</li><li>created：注册时间</li></ul><p>执行命令：<code>vendor/bin/phinx create User</code></p><p>在迁移目录 migrations 即可看到迁移文件，修改迁移文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class User extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https:&#x2F;&#x2F;book.cakephp.org&#x2F;phinx&#x2F;0&#x2F;en&#x2F;migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table &#x3D; $this-&gt;table(&#39;users&#39;, [&#39;signed&#39; &#x3D;&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#39;name&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 16])</span><br><span class="line">            -&gt;addColumn(&#39;email&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#39;password&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#39;created&#39;, &#39;timestamp&#39;, [&#39;default&#39; &#x3D;&gt; &#39;CURRENT_TIMESTAMP&#39;])</span><br><span class="line">            -&gt;addIndex([&#39;email&#39;, &#39;password&#39;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮箱和密码设置为关联索引，这样用户在登录的时候可以直接从索引返回查询结果，查询速度非常快。</p><p>created 是时间戳，直接使用当前时间作为值。</p><h3 id="文章表：articles"><a href="#文章表：articles" class="headerlink" title="文章表：articles"></a>文章表：articles</h3><ul><li>user_id：作者 ID</li><li>title：标题</li><li>classify：分类</li><li>cover：封面图</li><li>view_count：浏览次数</li><li>created：发布日期</li></ul><p>执行命令：<code>vendor/bin/phinx create ArticleContent</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class Article extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https:&#x2F;&#x2F;book.cakephp.org&#x2F;phinx&#x2F;0&#x2F;en&#x2F;migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table &#x3D; $this-&gt;table(&#39;articles&#39;, [&#39;signed&#39; &#x3D;&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#39;title&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 32])</span><br><span class="line">            -&gt;addColumn(&#39;classify&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 32])</span><br><span class="line">            -&gt;addColumn(&#39;cover&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 255])</span><br><span class="line">            -&gt;addColumn(&#39;user_id&#39;, &#39;integer&#39;, [&#39;signed&#39; &#x3D;&gt; false])</span><br><span class="line">            -&gt;addColumn(&#39;view_count&#39;, &#39;integer&#39;, [&#39;signed&#39; &#x3D;&gt; false])</span><br><span class="line">            -&gt;addColumn(&#39;created&#39;, &#39;timestamp&#39;, [&#39;default&#39; &#x3D;&gt; &#39;CURRENT_TIMESTAMP&#39;])</span><br><span class="line">            -&gt;addIndex([&#39;user_id&#39;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文章内容表：article-contents"><a href="#文章内容表：article-contents" class="headerlink" title="文章内容表：article_contents"></a>文章内容表：article_contents</h3><ul><li>article_id：文章 ID</li><li>content：内容</li></ul><p>执行命令：<code>vendor/bin/phinx create ArticleContent</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class ArticleContent extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https:&#x2F;&#x2F;book.cakephp.org&#x2F;phinx&#x2F;0&#x2F;en&#x2F;migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table &#x3D; $this-&gt;table(&#39;article_contents&#39;, [&#39;signed&#39; &#x3D;&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#39;article_id&#39;, &#39;integer&#39;, [&#39;signed&#39; &#x3D;&gt; false])</span><br><span class="line">            -&gt;addColumn(&#39;content&#39;, &#39;text&#39;)</span><br><span class="line">            -&gt;addIndex([&#39;article_id&#39;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="email-codes：邮件验证码"><a href="#email-codes：邮件验证码" class="headerlink" title="email_codes：邮件验证码"></a>email_codes：邮件验证码</h3><ul><li>email：邮箱</li><li>code：验证码</li><li>created：创建日期</li></ul><p>执行命令：<code>vendor/bin/phinx create EmailCode</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class EmailCode extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https:&#x2F;&#x2F;book.cakephp.org&#x2F;phinx&#x2F;0&#x2F;en&#x2F;migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line">        $table &#x3D; $this-&gt;table(&#39;email_codes&#39;, [&#39;signed&#39; &#x3D;&gt; false]);</span><br><span class="line">        $table-&gt;addColumn(&#39;email&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 64])</span><br><span class="line">            -&gt;addColumn(&#39;code&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 8])</span><br><span class="line">            -&gt;addColumn(&#39;created&#39;, &#39;timestamp&#39;, [&#39;default&#39; &#x3D;&gt; &#39;CURRENT_TIMESTAMP&#39;])</span><br><span class="line">            -&gt;addIndex([&#39;email&#39;])</span><br><span class="line">            -&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成表"><a href="#生成表" class="headerlink" title="生成表"></a>生成表</h2><p>执行命令：<code>vendor/bin/phinx migrate</code></p><p>然后打开数据库，可以看到：</p><p><img src="https://i.loli.net/2021/02/19/BR72FLbv4SoQ1tU.jpg" alt="QQ20210219-193050.jpg"></p><p>生成了这些表之后，就可以直接用框架集成的 ORM 调用了。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>ORM 默认使用的表名即复数形式，也可以指定一个表名，只需要修改 $table 变量即可。</p><p>创建一个用来保存模型文件的目录 app/Http/Model。</p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;19</span><br><span class="line"> * Time：14:00</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">    public $timestamps &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;19</span><br><span class="line"> * Time：19:43</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Article extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">    public $timestamps &#x3D; false;</span><br><span class="line"></span><br><span class="line">    public function content()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;hasOne(ArticleContent::class)-&gt;withDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArticleContent"><a href="#ArticleContent" class="headerlink" title="ArticleContent"></a>ArticleContent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;19</span><br><span class="line"> * Time：19:43</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class ArticleContent extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">    public $timestamps &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmailCode"><a href="#EmailCode" class="headerlink" title="EmailCode"></a>EmailCode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;19</span><br><span class="line"> * Time：19:44</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class EmailCode extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">    public $timestamps &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>现在数据库和模型已经设定好了，接下来就可以直接开始业务处理了！</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FireRabbitEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FireRabbit-Engine 实战 从零搭建个人博客（一）项目规划</title>
      <link href="/2021/02/19/firerabbit-engin-1/"/>
      <url>/2021/02/19/firerabbit-engin-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>居然非常不要脸的在标题写上自己引擎的名字了！</p><p>FireRabbit-Engine（火兔引擎）是基于 swoole 的 Laravel 劣质山寨版！</p><p>但是就性能而言，相比 Laravel 的提升非常巨大！</p><p>（这是 swoole 的功劳啊、喂！）</p><p>我要高呼框架的口号：有手就行，火兔引擎！</p><h2 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h2><p>为了测试框架的性能和发现框架的不足之处，因此我打算用一个博客系统来测试。</p><p>这个博客系统会包含博客应该具备的基本功能，但绝不是手把手每一步都写得清清楚楚。</p><p>而且我的前端技术也不咋样，于是这个博客系统干脆就不需要 css 代码……</p><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>博客包含以下几个简单模块：</p><ul><li>登录/注册（注册需要验证邮箱，顺便测试异步任务）</li><li>文章的增删改查</li><li>数据库迁移</li><li>权限认证（中间件来实现）</li><li>缓存</li></ul><h2 id="制作周期"><a href="#制作周期" class="headerlink" title="制作周期"></a>制作周期</h2><p>这几个模块只要一晚上就能完成，但是昨天晚上睡眠不足，</p><p>现在头有点昏昏沉沉，如果今天晚上没做完，就留到明天继续。</p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FireRabbitEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十九）封包，发到composer仓库！</title>
      <link href="/2021/02/19/my-swoole-framework-19/"/>
      <url>/2021/02/19/my-swoole-framework-19/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过年的假期也结束了，大家都陆续上班了。</p><p>2020 年我辞职回家一年也没有实现游戏梦，2021 年还有最后一次为梦想拼搏的机会。</p><p>再加上今年还有买房的梦想，所以今年开始没有太多任性的时间了，</p><p>如果家里有矿的话，我也想要归隐山林，专心钻研技术，无奈。</p><p>今年是毕业第五年的开始，五年……足以让一个人发生巨大的改变，</p><p>而我却连毕业时当架构师的梦想都没有实现，于是退而求其次才想要自己写一个框架。</p><p>即使是现在雏形完成了，但是技术方面还是没有很大的提升。</p><p>原因我很清楚，因为急于求成，因为想要证明自己给某个人看……</p><p>后悔的是大学没有好好学习，然悔之无用。</p><p>看过一部电视剧，里面有一句台词深深的触动了我：“当你觉得一切都晚了的时候，恰恰是最早的时机。”</p><p>在 30 岁之前幡然醒悟，也许是一种值得庆幸的事，如果再晚几年，恐怕翻身的机会只会愈加渺茫。</p><p>所以今年，2021 年，我要把握最后一年的机会，尽全力实现自己的游戏梦。</p><p>一边实现梦想，一边学好技术，打铁还需自身硬，只有自己变强了，才能掌控自己的生活。</p><h2 id="封装扩展包"><a href="#封装扩展包" class="headerlink" title="封装扩展包"></a>封装扩展包</h2><p>关于 composer 如何发布自己的扩展包，我在去年的时候写过一篇比较详细的文章了。</p><p>传送链接：<a href="https://huotublog.com/composer-package/">https://huotublog.com/composer-package/</a></p><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>因为用到了变量类型声明和返回值声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function test(int num) : int &#123;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 PHP7.4 新增的功能，所以要对 PHP 的版本进行限制。</p><p>修改框架下的 composer.json 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;firerabbit&#x2F;engine&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;基于swoole的个人框架。&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;火烧兔子&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;^7.4&quot;,</span><br><span class="line">    &quot;illuminate&#x2F;database&quot;: &quot;^7.30&quot;,</span><br><span class="line">    &quot;xiaoler&#x2F;blade&quot;: &quot;^5.4&quot;,</span><br><span class="line">    &quot;monolog&#x2F;monolog&quot;: &quot;^2.2&quot;,</span><br><span class="line">    &quot;firebase&#x2F;php-jwt&quot;: &quot;^5.2&quot;,</span><br><span class="line">    &quot;phpmailer&#x2F;phpmailer&quot;: &quot;^6.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;FireRabbit\\Engine\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;src&#x2F;function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了限制 PHP 版本之外，添加了作者和描述信息。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>将框架的目录进行一番修改，大致如下：</p><p><img src="https://i.loli.net/2021/02/19/zMH3gN2DjJWoaAU.jpg" alt="QQ20210219-134228.jpg"></p><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><p>Github 上创建一个公开的仓库。</p><p>然后将框架的代码上传至仓库。</p><p><img src="https://i.loli.net/2021/02/19/JpyXLvh6kqHV9AK.jpg" alt="QQ20210219-115347.jpg"></p><h2 id="Packagist-仓库"><a href="#Packagist-仓库" class="headerlink" title="Packagist 仓库"></a>Packagist 仓库</h2><p>接着发布到 composer 仓库。</p><p>地址：<a href="https://packagist.org/">https://packagist.org/</a></p><p>点击上面的 Submit 按钮，然后把 Github 的仓库地址复制过来，然后提交，检测包名字，没问题就继续点下一步。</p><p>等待 composer 抓取 github 的信息，完成之后显示如下界面：</p><p><img src="https://i.loli.net/2021/02/19/j6VymxTihnfwUJ8.jpg" alt="QQ20210219-120712.jpg"></p><p>说明已经成功传到 composer 的仓库了，现在这个包可供所有人拉取，但包还未指定版本号，因此仍然无法安装成功。</p><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>任何包都需要有一个版本号，第一个版本可以计作：v1.0.0</p><p>版本号是个人自定义的，我定义的版本号规则如下：</p><ul><li>第一个 1，代表大版本，除非框架有翻天覆地的更新，否则这个版本不会改变，一旦大版本号改变就说明原来的代码已经无法保证正常使用了，不应该直接从旧版本升级到新版本，无法保证向下兼容</li><li>第二个 0，代表中版本号，此版本更新说明添加了一些新功能，但是兼容旧版，可以直接升级</li><li>第三个 0，代表小版本号，此版本更新说明一些微不足道的改变，例如优化代码或者结构，不影响正常使用，可以直接升级</li></ul><p>composer 包的版本是通过 git 标签实现的。</p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0.0 -m &quot;初始版本&quot;</span><br><span class="line">git push origin v1.0.0</span><br></pre></td></tr></table></figure><p>发布一个标签之后，回到 Packagist 页面，看看右下角是否有更新，</p><p>如果没有更新，手动点击 Update 按钮，同步完成之后就可以看到右下角多出了一个 v1.0.0。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>现在就可以从远程仓库直接安装框架包了。</p><p>在任意位置创建一个空文件夹，然后进入文件夹，执行命令：<code>composer require firerabbit/engine</code></p><p>具体的使用方法可以参照框架的 readme 文件。</p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>框架部分大致就到这结束了，后续我还会不断更新框架功能。</p><p>接下来就要开始使用这个框架雏形来开发一个博客系统了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十八）异步任务</title>
      <link href="/2021/02/18/my-swoole-framework-18/"/>
      <url>/2021/02/18/my-swoole-framework-18/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>框架现在拥有发送邮件的能力了，但是发送邮件是非常耗时的一件事，</p><p>因此需要用异步任务来解决这个问题。</p><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>swoole 内置了异步任务处理，参照文档：<a href="https://wiki.swoole.com/#/start/start_task">https://wiki.swoole.com/#/start/start_task</a></p><p>一个简单的异步任务示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;set([</span><br><span class="line">    &#39;task_worker_num&#39; &#x3D;&gt; 1,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;Request&#39;, function ($request, $response) use ($http) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 投递任务</span><br><span class="line">    $params &#x3D; [&#39;name&#39; &#x3D;&gt; &#39;花花&#39;];</span><br><span class="line">    $taskID &#x3D; $http-&gt;task($params);</span><br><span class="line">    var_dump(&#39;投递了一个任务，ID：&#39; . $taskID . &#39;，参数：&#39; . json_encode($params, JSON_UNESCAPED_UNICODE));</span><br><span class="line"></span><br><span class="line">    $response-&gt;header(&#39;Content-Type&#39;, &#39;text&#x2F;html; charset&#x3D;utf-8&#39;);</span><br><span class="line">    $response-&gt;end(&#39;&lt;h1&gt;Hello Swoole. #&#39; . rand(1000, 9999) . &#39;&lt;&#x2F;h1&gt;&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理异步任务(此回调函数在task进程中执行)</span><br><span class="line">$http-&gt;on(&#39;Task&#39;, function ($serv, $task_id, $reactor_id, $data) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;收到任务，开始处理，任务ID：&#39; . $task_id . &#39;，参数：&#39; . json_encode($data, JSON_UNESCAPED_UNICODE));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 业务逻辑</span><br><span class="line">    $result &#x3D; &#39;那只猫的名字叫做&#39; . $data[&#39;name&#39;];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;返回任务执行的结果</span><br><span class="line">    $serv-&gt;finish($result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理异步任务的结果(此回调函数在worker进程中执行)</span><br><span class="line">$http-&gt;on(&#39;Finish&#39;, function ($serv, $task_id, $data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 任务执行完成后的回调</span><br><span class="line">    var_dump(&#39;【处理结果】任务ID：&#39; . $task_id . &#39;，返回结果：&#39; . $data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>要开启任务，必须设置 <code>task_worker_num</code>，此参数是处理任务的进程数。</p><p>要投递一个任务，只要调用 server 的 task 方法即可，task 方法接收一个参数，执行完成后返回任务 ID。</p><p>投递的任务会在 task 事件中执行，要监听事件只需要调用 on 方法。</p><p>task 事件处理完成后的结果可以通知给 finish 事件，也可以不通知。</p><p>上述代码输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(59) &quot;投递了一个任务，ID：0，参数：&#123;&quot;name&quot;:&quot;花花&quot;&#125;&quot;</span><br><span class="line">string(71) &quot;收到任务，开始处理，任务ID：0，参数：&#123;&quot;name&quot;:&quot;花花&quot;&#125;&quot;</span><br><span class="line">string(78) &quot;【处理结果】任务ID：0，返回结果：那只猫的名字叫做花花&quot;</span><br></pre></td></tr></table></figure><p>如果多次执行，任务 ID 会从 0 开始不断加 1，第二个任务的 ID 为 1，第三个任务的 ID 为 2，以此类推。</p><p>如果关闭程序再重新启动，任务 ID 又会从 0 开始。</p><p>即使将 <code>task_worker_num</code> 改为 2 或者更大，ID 也是保持相同规则自增，因此可以判定 ID 是多个工作进程共享的，不会出现 ID 重复的情况。</p><h2 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h2><p>swoole 的异步任务必须接受一个数组作为参数，而不能直接将对象作为参数传给任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 错误的方法</span><br><span class="line">$server-&gt;task(new MyTask());</span><br><span class="line"></span><br><span class="line"># 正确的方法</span><br><span class="line">$server-&gt;task([&#39;name&#39; &#x3D;&gt; &#39;花花&#39;]);</span><br></pre></td></tr></table></figure><p>只要想起之前路由是怎么设计的，任务系统就很简单了。</p><p>既然只能传递数组作为参数，那只要传一个任务名称，再实际调用的时候实例化就可以了。</p><h2 id="实现任务"><a href="#实现任务" class="headerlink" title="实现任务"></a>实现任务</h2><p>分发任务必须要在 <code>Swoole\Http\Server</code>，因此原来的代码就需要修改一遍了。</p><h3 id="传参：server"><a href="#传参：server" class="headerlink" title="传参：server"></a>传参：server</h3><p>要调用任务的地方，目前只有 controller，因此 server 必须传给 controller。</p><p>只要修改路由模块传递参数即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 处理路由</span><br><span class="line"> * @param Server $server</span><br><span class="line"> * @param $request</span><br><span class="line"> * @param $response</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function handle(Server $server, $request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    $route &#x3D; $this-&gt;findRoute($request);</span><br><span class="line"></span><br><span class="line">    if ($route &#x3D;&#x3D; null) &#123;</span><br><span class="line">        (new NotFoundResponse)-&gt;response($request, $response, $route);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route-&gt;createResponse($server, $request, $response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handle 多接收一个 server 参数，</p><p>然后再在实例化路由配置的时候把 server 传给路由，</p><p>路由实例化控制器的时候，再把 server 传给控制器就行了，详细的代码就不贴出来了。</p><p>控制器现在已经可以拿到 server 了，但这是 swoole 的方法，</p><h3 id="TaskInterface：标准任务接口"><a href="#TaskInterface：标准任务接口" class="headerlink" title="TaskInterface：标准任务接口"></a>TaskInterface：标准任务接口</h3><p>基于面向对象的思想，此处应该有封装。</p><p>在框架目录下新建 Task 目录，再创建 TaskInterface 接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：20:23</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface TaskInterface</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 处理逻辑</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function handle($params);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 处理完成回调</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function finish($result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口就是一个统一标准的 Task 类，以后用户想要创建一个任务，就实现这个接口。</p><p>handle 方法即 swoole 监听的 task 事件中处理任务逻辑的地方；</p><p>finish 方法即 swoole 监听的 finish 事件处理完任务执行回调的地方。</p><h3 id="Task：分发任务"><a href="#Task：分发任务" class="headerlink" title="Task：分发任务"></a>Task：分发任务</h3><p>统一的标准任务类已经有了，但还需要一个任务处理类，在 Task 文件夹下创建 Task 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：20:29</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class Task</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 分发一个任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param TaskInterface $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @return int</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function dispatch(Server $server, string $task, array $data &#x3D; []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; [</span><br><span class="line">            &#39;task&#39; &#x3D;&gt; $task,</span><br><span class="line">            &#39;data&#39; &#x3D;&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        var_dump($task);</span><br><span class="line"></span><br><span class="line">        return $server-&gt;task($params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类只需要一个 dispatch 方法，接收任务类的名称以及附加参数。</p><p>然后再修改框架的 controller：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:16 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Controller;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Task\Task;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel as HttpKernel;</span><br><span class="line"></span><br><span class="line">class Controller</span><br><span class="line">&#123;</span><br><span class="line">    protected $httpKernel;</span><br><span class="line"></span><br><span class="line">    public function __construct(HttpKernel $httpKernel)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;httpKernel &#x3D; $httpKernel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 分发任务</span><br><span class="line">     * @param $task</span><br><span class="line">     * @param $data</span><br><span class="line">     * @return int</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function dispatch($task, $data)</span><br><span class="line">    &#123;</span><br><span class="line">        $server &#x3D; $this-&gt;httpKernel-&gt;getServer();</span><br><span class="line">        return Task::dispatch($server, $task, $data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;httpKernel-&gt;getResponse()-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">        $this-&gt;httpKernel-&gt;getResponse()-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;httpKernel-&gt;getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;httpKernel-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server 是通过 httpKernel 在路由时传参得到的，</p><p>如果没有 server 就无法调用 swoole 的 task 方法。</p><p>controller 也声明了一个 dispatch 方法供用户直接调用。</p><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>执行任务是在 HttpServer 处通过监听 task 和 finish 两个事件。</p><p>修改 HttpServer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;15</span><br><span class="line"> * Time：16:26</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Auth\Auth;</span><br><span class="line">use FireRabbitEngine\Module\Cache\Cache;</span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line">use FireRabbitEngine\Module\Database\Manager as DatabaseManager;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log as Logger;</span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line">use FireRabbitEngine\Module\Route\Router;</span><br><span class="line">use FireRabbitEngine\Module\Task\TaskInterface;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class HttpServer</span><br><span class="line">&#123;</span><br><span class="line">    public $server;</span><br><span class="line">    public $router;</span><br><span class="line"></span><br><span class="line">    public function __construct($host, $port, $config &#x3D; [])</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server &#x3D; new Server($host, $port);</span><br><span class="line">        $this-&gt;server-&gt;set($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadRouter(Router $router)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;router &#x3D; $router;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadMiddleware($middleware)</span><br><span class="line">    &#123;</span><br><span class="line">        \FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig($middleware);</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function bootstrap($config)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 视图</span><br><span class="line">        Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">        &#x2F;&#x2F; 数据库ORM</span><br><span class="line">        DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">        &#x2F;&#x2F; 日志</span><br><span class="line">        Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line">        &#x2F;&#x2F; 缓存</span><br><span class="line">        $cache &#x3D; $config[Constant::CACHE_CONFIG];</span><br><span class="line">        Cache::setConfig($cache[&#39;driver&#39;], $cache[$cache[&#39;driver&#39;]]);</span><br><span class="line">        &#x2F;&#x2F; JWT</span><br><span class="line">        Auth::setConfig($config[Constant::JWT_CONFIG]);</span><br><span class="line">        &#x2F;&#x2F; 邮件</span><br><span class="line">        Mailer::setConfig($config[Constant::MAIL_CONFIG]);</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function request($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerError($response);</span><br><span class="line">        $this-&gt;router-&gt;handle($this-&gt;server, $request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function registerError($response)</span><br><span class="line">    &#123;</span><br><span class="line">        register_shutdown_function(function () use ($response) &#123;</span><br><span class="line">            $error &#x3D; error_get_last();</span><br><span class="line">            var_dump($error);</span><br><span class="line">            switch ($error[&#39;type&#39;] ?? null) &#123;</span><br><span class="line">                case E_ERROR :</span><br><span class="line">                case E_PARSE :</span><br><span class="line">                case E_CORE_ERROR :</span><br><span class="line">                case E_COMPILE_ERROR :</span><br><span class="line">                    $response-&gt;status(500);</span><br><span class="line">                    $response-&gt;end($error[&#39;message&#39;]);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function task()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#39;task&#39;, function ($server, $taskID, $reactorID, $data) &#123;</span><br><span class="line">            var_dump(&#39;收到任务，开始处理，任务ID：&#39; . $taskID . &#39;，参数：&#39; . json_encode($data));</span><br><span class="line"></span><br><span class="line">            if (isset($data[&#39;task&#39;]) &amp;&amp; class_exists($data[&#39;task&#39;])) &#123;</span><br><span class="line"></span><br><span class="line">                $task &#x3D; new $data[&#39;task&#39;];</span><br><span class="line"></span><br><span class="line">                if ($task instanceof TaskInterface) &#123;</span><br><span class="line">                    $resultData &#x3D; $task-&gt;handle($data[&#39;data&#39;]);</span><br><span class="line">                    $result &#x3D; [</span><br><span class="line">                        &#39;task&#39; &#x3D;&gt; $data[&#39;task&#39;],</span><br><span class="line">                        &#39;result&#39; &#x3D;&gt; $resultData ?? null,</span><br><span class="line">                    ];</span><br><span class="line">                    $server-&gt;finish($result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function finish()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#39;finish&#39;, function ($server, $taskID, $data) &#123;</span><br><span class="line">            var_dump(&#39;任务处理完了，任务ID：&#39; . $taskID);</span><br><span class="line"></span><br><span class="line">            if (isset($data[&#39;task&#39;]) &amp;&amp; class_exists($data[&#39;task&#39;])) &#123;</span><br><span class="line"></span><br><span class="line">                $task &#x3D; new $data[&#39;task&#39;];</span><br><span class="line"></span><br><span class="line">                if ($task instanceof TaskInterface) &#123;</span><br><span class="line">                    $task-&gt;finish($data[&#39;result&#39;]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function start()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#39;request&#39;, [$this, &#39;request&#39;]);</span><br><span class="line">        $this-&gt;server-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增了两个方法：task 和 finish，只要调用此方法即可实现监听事件。</p><h3 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h3><p>在启动程序 http_server.php 处新增监听事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Http\HttpServer;</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line">define(&#39;ROOT_PATH&#39;, __DIR__);</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">$config &#x3D; require &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">$server &#x3D; new HttpServer(&#39;0.0.0.0&#39;, 9527, [</span><br><span class="line">    &#39;worker_num&#39; &#x3D;&gt; 4,</span><br><span class="line">    &#39;task_worker_num&#39; &#x3D;&gt; 1,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$router &#x3D; require &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">$middleware &#x3D; require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;;</span><br><span class="line"></span><br><span class="line">$server-&gt;task();</span><br><span class="line">$server-&gt;finish();</span><br><span class="line"></span><br><span class="line">$server-&gt;bootstrap($config[&#39;framework&#39;])</span><br><span class="line">    -&gt;loadMiddleware($middleware)</span><br><span class="line">    -&gt;loadRouter($router)</span><br><span class="line">    -&gt;start();</span><br></pre></td></tr></table></figure><p>task 和 finish 必须在 start 之前，</p><p>而且 swoole 的参数必须加上 <code>task_worker_num</code>，该值是处理事件的进程数量。</p><blockquote><p>通俗的讲 task_worker_num 就是工具人的数量，工具人越多，堆积的任务处理速度越快，swoole 会轮询分发给工具人任务，工具人至少也要有 1 个，如果没有工具人谁来干活呢？</p></blockquote><p>由于我的博客系统只需要发送邮件这个简单的任务，并不会堆积很多，所以只需要 1 个进程用来处理任务就够了。</p><h2 id="项目任务"><a href="#项目任务" class="headerlink" title="项目任务"></a>项目任务</h2><p>前面已经完成了邮件系统，现在可以把发送邮件当做异步任务来执行了。</p><p>在博客项目新建存放任务类的文件夹 app/Http/Task，再创建一个用来发送邮件的任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：21:46</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Task;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line">use FireRabbitEngine\Module\Task\TaskInterface;</span><br><span class="line"></span><br><span class="line">class MailTask implements TaskInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function handle($params)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;调用handle处理任务&#39;);</span><br><span class="line"></span><br><span class="line">        $mailer &#x3D; new Mailer();</span><br><span class="line">        $mailer-&gt;subject(&#39;测试异步任务发送邮件&#39;)</span><br><span class="line">            -&gt;body(&#39;这是邮件内容&#39;)</span><br><span class="line">            -&gt;address($params[&#39;email&#39;])</span><br><span class="line">            -&gt;send();</span><br><span class="line"></span><br><span class="line">        return &#39;发送成功&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function finish($result)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 controller 添加测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Task\MailTask;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;dispatch(MailTask::class, [&#39;email&#39; &#x3D;&gt; &#39;874811226@qq.com&#39;]);</span><br><span class="line">        $this-&gt;showMessage(&#39;ok&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string(17) &quot;请求URI：&#x2F;test&quot;</span><br><span class="line">string(126) &quot;收到任务，开始处理，任务ID：0，参数：&#123;&quot;task&quot;:&quot;App\\Http\\Task\\MailTask&quot;,&quot;data&quot;:&#123;&quot;email&quot;:&quot;874811226@qq.com&quot;&#125;&#125;&quot;</span><br><span class="line">string(24) &quot;调用handle处理任务&quot;</span><br><span class="line">string(33) &quot;任务处理完了，任务ID：0&quot;</span><br><span class="line">string(12) &quot;发送成功&quot;</span><br></pre></td></tr></table></figure><p>并且邮箱也能正常收到测试邮件。</p><p>如此一来，框架的异步任务也算完成了。</p><h2 id="延迟任务"><a href="#延迟任务" class="headerlink" title="延迟任务"></a>延迟任务</h2><p>swoole 提供了毫秒定时器，可以用来延迟分发任务。</p><p>而定时器又分为 after（一次性）与 tick（重复）两种类型。</p><p>一次性定时器执行完就会销毁，而重复定时器则会间隔执行，直到手动销毁为止。</p><p>Swoole 官方文档：<a href="https://wiki.swoole.com/#/timer">swoole - 定时器</a></p><h3 id="一次性任务"><a href="#一次性任务" class="headerlink" title="一次性任务"></a>一次性任务</h3><p>调用 delay 即可实现延迟发布任务。</p><h3 id="重复性任务"><a href="#重复性任务" class="headerlink" title="重复性任务"></a>重复性任务</h3><p>例如每隔半小时就将缓存中的数据写入到数据库，或者是爬虫任务每小时执行一次，诸如此类。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>修改 Task 类，添加对应的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：20:29</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Task;</span><br><span class="line"></span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line">use Swoole\Timer;</span><br><span class="line"></span><br><span class="line">class Task</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 分发一个任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param TaskInterface $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     * @return int</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function dispatch(Server $server, string $task, array $data &#x3D; []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; [</span><br><span class="line">            &#39;task&#39; &#x3D;&gt; $task,</span><br><span class="line">            &#39;data&#39; &#x3D;&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return $server-&gt;task($params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 延迟分发任务</span><br><span class="line">     * @param Server $server</span><br><span class="line">     * @param int $ms</span><br><span class="line">     * @param string $task</span><br><span class="line">     * @param array $data</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function delay(Server $server, int $ms, string $task, array $data &#x3D; []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; [</span><br><span class="line">            &#39;task&#39; &#x3D;&gt; $task,</span><br><span class="line">            &#39;data&#39; &#x3D;&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return Timer::after($ms, function () use ($server, $params) &#123;</span><br><span class="line">            $server-&gt;task($params);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function tick(Server $server, int $ms, string $task, array $data &#x3D; []): int</span><br><span class="line">    &#123;</span><br><span class="line">        $params &#x3D; [</span><br><span class="line">            &#39;task&#39; &#x3D;&gt; $task,</span><br><span class="line">            &#39;data&#39; &#x3D;&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return Timer::tick(1000, function () use ($server, $params) &#123;</span><br><span class="line">            $server-&gt;task($params);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function clear(int $timerID): bool</span><br><span class="line">    &#123;</span><br><span class="line">        return Timer::clear($timerID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行延迟任务时，可以返回一个 int 类型的时钟 ID，调用 clear 可以将定时器清除。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十七）发送邮件</title>
      <link href="/2021/02/18/my-swoole-framework-17/"/>
      <url>/2021/02/18/my-swoole-framework-17/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人站长一般很难支付起短信的费用，因此邮件认证比较适合个人站长。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>发送邮件是完全免费的，只要搭建一台用于发送邮件的服务器即可，</p><p>但是搭建邮件服务器的成本太昂贵了，因此我选择使用第三方提供的邮箱服务。</p><p>市面上的各大邮箱基本都是免费注册的，比如 QQ 邮箱，163 邮箱等等。</p><p>每种邮箱配置大同小异，我选择网易的 163 邮箱作为演示。</p><p>网易邮箱：<a href="https://www.163.com/">https://www.163.com/</a></p><p>右上角即可免费注册，注册成功后，进入个人中心，点击上方的“设置”，然后可以看到 <strong>POP3/SMTP/IMAP</strong>。</p><p>下方有两个可以选择的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IMAP&#x2F;SMTP服务已关闭 | 开启</span><br><span class="line">POP3&#x2F;SMTP服务已关闭 | 开启</span><br></pre></td></tr></table></figure><p>选择 <code>POP3/SMTP</code> 右边的“开启”按钮，网易会要求你发送短信进行认证，认证后就可以开通了。</p><p>然后会获得一段用于验证的“神秘代码”，要把这个代码存下来，一旦关闭页面就无法再次查看了（但是可以重新创建）。</p><p>这样就申请好一个可以发送邮件的邮箱了。</p><h2 id="安装插件包"><a href="#安装插件包" class="headerlink" title="安装插件包"></a>安装插件包</h2><p>PHP 内置的方法也可以发送邮件，但是我选择使用一个比较成熟的插件包：<code>phpmailer/phpmailer</code>。</p><p>在框架目录下执行：<code>composer require phpmailer/phpmailer</code></p><p>即可完成安装。</p><h2 id="Mailer"><a href="#Mailer" class="headerlink" title="Mailer"></a>Mailer</h2><p>插件安装完成后，需要封装成方便调用的形式。</p><p>在框架目录新建一个 Mail 文件夹用来保存邮件发送相关代码，并且创建 Mailer 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：14:29</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Mail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use PHPMailer\PHPMailer\PHPMailer;</span><br><span class="line"></span><br><span class="line">class Mailer</span><br><span class="line">&#123;</span><br><span class="line">    protected static $mail;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 轮询计数器</span><br><span class="line">     * @var int</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $sort &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 邮件节点</span><br><span class="line">     * @var array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $pool &#x3D; [];</span><br><span class="line"></span><br><span class="line">    protected $subject, $body, $altBody, $reciverMail;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config &#x3D; $config;</span><br><span class="line">        self::$pool &#x3D; $config[&#39;pool&#39;];</span><br><span class="line"></span><br><span class="line">        self::$mail &#x3D; new PHPMailer();</span><br><span class="line">        self::$mail-&gt;isSMTP();</span><br><span class="line">        self::$mail-&gt;SMTPAuth &#x3D; true;</span><br><span class="line">        self::$mail-&gt;SMTPDebug &#x3D; $config[&#39;debug&#39;];</span><br><span class="line">        self::$mail-&gt;isHTML($config[&#39;html&#39;]);</span><br><span class="line">        self::$mail-&gt;SMTPSecure &#x3D; $config[&#39;secure&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function subject($title)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;subject &#x3D; $title;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function body($html)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;body &#x3D; $html;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function altBody($text)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;altBody &#x3D; $text;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function address($mail)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;reciverMail &#x3D; $mail;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function send()</span><br><span class="line">    &#123;</span><br><span class="line">        $node &#x3D; self::$pool[self::$sort];</span><br><span class="line"></span><br><span class="line">        self::$sort++;</span><br><span class="line"></span><br><span class="line">        if (self::$sort &gt;&#x3D; count(self::$pool)) &#123;</span><br><span class="line">            self::$sort &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 载入节点配置</span><br><span class="line">        self::$mail-&gt;Host &#x3D; $node[&#39;host&#39;];</span><br><span class="line">        self::$mail-&gt;Port &#x3D; $node[&#39;port&#39;];</span><br><span class="line">        self::$mail-&gt;Username &#x3D; $node[&#39;user&#39;];</span><br><span class="line">        self::$mail-&gt;Password &#x3D; $node[&#39;password&#39;];</span><br><span class="line">        self::$mail-&gt;setFrom($node[&#39;user&#39;], $node[&#39;name&#39;]);</span><br><span class="line">        self::$mail-&gt;addReplyTo($node[&#39;user&#39;], $node[&#39;name&#39;]);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 生成邮件信息</span><br><span class="line">        self::$mail-&gt;addAddress($this-&gt;reciverMail);</span><br><span class="line">        self::$mail-&gt;Subject &#x3D; $this-&gt;subject;</span><br><span class="line">        self::$mail-&gt;Body &#x3D; $this-&gt;body;</span><br><span class="line">        self::$mail-&gt;AltBody &#x3D; $this-&gt;altBody ?? &#39;&#39;;</span><br><span class="line"></span><br><span class="line">        self::$mail-&gt;send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mailer 类重新封装了插件包发送邮件的代码，外部调用起来方便多了。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>一个 163 邮箱大约每天只能发送 500-1500 封邮件，</p><p>一旦超过这个数，网易就会限制该账户继续发送邮件。</p><p>为了避免被限制导致业务无法正常执行，通常我们需要申请很多个邮箱（毕竟注册免费）。</p><p>然后类似负载均衡一样轮询多个邮箱，所以在 Mailer 类有一个用来控制轮询的变量 <code>$sort</code>，</p><p>并且在 <code>send</code> 方法动态获取节点配置。</p><p>因此需要配置足够多的邮箱以供邮件系统调用，编辑 app.php，添加邮件相关配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Constant::MAIL_CONFIG &#x3D;&gt; [</span><br><span class="line">    &#39;debug&#39; &#x3D;&gt; 1,</span><br><span class="line">    &#39;html&#39; &#x3D;&gt; true,</span><br><span class="line">    &#39;secure&#39; &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">    &#39;pool&#39; &#x3D;&gt; [</span><br><span class="line">        [</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;smtp.163.com&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; 465,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;huotu_001@163.com&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;火兔博客1号&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;xxxx&#39;,</span><br><span class="line">        ],[</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;smtp.163.com&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; 465,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;huotu_002@163.com&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;火兔博客2号&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;xxxx&#39;,</span><br><span class="line">        ],[</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;smtp.163.com&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; 465,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;huotu_003@163.com&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;火兔博客3号&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;xxxx&#39;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>通过增加 <code>pool</code> 内邮箱的数量，即可实现一天发送成千上万封邮件。</p><p>而且邮箱的配置完全是独立的，不仅可以在这里配置 163 邮箱，QQ 邮箱同样可以。</p><p>只要注册多个平台的多个邮箱，这个邮件系统的稳定性就越强，一般而言，个人博客配置 2-5 个邮箱就差不多了。</p><p>具体数量根据博客的功能决定，如果发送邮件的场景只有注册和找回密码，那配置 2 个就差不多了；</p><p>如果你想要在发布新文章的时候，同时发送一封邮件通知博客的订阅者，那就要多准备一些了（反正申请邮箱不要钱）。</p><h2 id="实战调用"><a href="#实战调用" class="headerlink" title="实战调用"></a>实战调用</h2><p>在需要发送邮件的场景，调用 Mailer 提供的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Mail\Mailer;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $mail &#x3D; new Mailer();</span><br><span class="line">        $mail-&gt;subject(&#39;测测&#39;)</span><br><span class="line">            -&gt;body(&#39;bbb&#39;)</span><br><span class="line">            -&gt;altBody(&#39;xxxx&#39;)</span><br><span class="line">            -&gt;address(&#39;874811226@qq.com&#39;)</span><br><span class="line">            -&gt;send();</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(&#39;ok&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，邮件确实可以正常发送。</p><p>值得一提的是，这里的 <code>body</code> 方法可以接收 HTMl 代码，</p><p>因此可以结合 blade 模板发出十分美观的邮件。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十六）JWT用户认证</title>
      <link href="/2021/02/18/my-swoole-framework-16/"/>
      <url>/2021/02/18/my-swoole-framework-16/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用户认证模块也是网页中非常重要的一个环节，</p><p>比如接口无法使用 session，因此只能传一个特殊的参数 “token”，</p><p>token 是一个加密的字符串，在服务端进行解密，如果没问题就代表认证成功。</p><p>由于自己写的加密系统不安全，所以直接使用比较成熟的加密系统——JWT。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>jwt 模块集成在框架里，因此要进入框架目录进行安装，而不是直接安装在博客系统里面。</p><p>执行命令：<code>composer requiire firebase/php-jwt</code>。</p><h2 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h2><p>上一个步骤已经安装了 jwt 插件包，用户只需要关注加密和解密，</p><p>对 jwt 具体是怎么实现的，则不需要了解。</p><p>因此我封装了一个 Auth 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：12:19</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Firebase\JWT\JWT;</span><br><span class="line"></span><br><span class="line">class Auth</span><br><span class="line">&#123;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config &#x3D; $config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function decode($token)</span><br><span class="line">    &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JWT::$leeway &#x3D; self::$config[&#39;leeway&#39;];</span><br><span class="line">            $decoded &#x3D; JWT::decode($token, self::$config[&#39;key&#39;], [self::$config[&#39;alg&#39;]]);</span><br><span class="line">            $data &#x3D; (array)$decoded;</span><br><span class="line"></span><br><span class="line">            return $data[&#39;data&#39;] ?? null;</span><br><span class="line">        &#125; catch (\Exception $e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function encode($data, $expired)</span><br><span class="line">    &#123;</span><br><span class="line">        $currentTimestamp &#x3D; time();</span><br><span class="line">        $key &#x3D; self::$config[&#39;key&#39;];</span><br><span class="line"></span><br><span class="line">        $token &#x3D; [</span><br><span class="line">            &#39;iat&#39; &#x3D;&gt; $currentTimestamp,</span><br><span class="line">            &#39;nbf&#39; &#x3D;&gt; $currentTimestamp,</span><br><span class="line">            &#39;exp&#39; &#x3D;&gt; $currentTimestamp + $expired,</span><br><span class="line">            &#39;data&#39; &#x3D;&gt; $data,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        return JWT::encode($token, $key, self::$config[&#39;alg&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户只需要调用 Auth 暴露的加密和解密方法即可。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>在 app.php 添加新的配置参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constant::JWT_CONFIG &#x3D;&gt; [</span><br><span class="line">    &#39;key&#39; &#x3D;&gt; &#39;password&#39;,</span><br><span class="line">    &#39;alg&#39; &#x3D;&gt; &#39;HS256&#39;,</span><br><span class="line">    &#39;leeway&#39; &#x3D;&gt; 60,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>其中 <code>key</code> 是加密字符串，<code>alg</code> 是加密方法，</p><p><code>leeway</code> 是时间偏差值，意思是说这个 token 在这个偏差的时间内都可以算作认证成功(防止服务器时钟偏差)。</p><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>在 test 方法添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Auth\Auth;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $token &#x3D; Auth::encode([</span><br><span class="line">            &#39;test&#39; &#x3D;&gt; 123,</span><br><span class="line">        ], 60);</span><br><span class="line"></span><br><span class="line">        var_dump($token, base64_decode($token));</span><br><span class="line"></span><br><span class="line">        $value &#x3D; Auth::decode($token);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(json_encode($value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>encode</code> 的参数是一个数组，即用户的信息，可以是用户的 ID，</p><p>但绝对不能是密码或者其他敏感信息，因为 jwt 最终生成的 token 使用的是 base64，可以轻松解密。</p><p>上述代码打印的结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string(17) &quot;请求URI：&#x2F;test&quot;</span><br><span class="line">string(177) &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MTM2MjUwMTIsIm5iZiI6MTYxMzYyNTAxMiwiZXhwIjoxNjEzNjI1MDcyLCJkYXRhIjp7InRlc3QiOjEyM319.ygfIeSOkifgPqWyUyIb5rJFLnHlaYMvGTue0WEsTvP4&quot;</span><br><span class="line">string(131) &quot;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;&#123;&quot;iat&quot;:1613625012,&quot;nbf&quot;:1613625012,&quot;exp&quot;:1613625072,&quot;data&quot;:&#123;&quot;test&quot;:123&#125;&#125;��y#����l�Ȇ���K�yZ&#96;��N�XK��&quot;</span><br><span class="line">object(stdClass)#30 (1) &#123;</span><br><span class="line">  [&quot;test&quot;]&#x3D;&gt;</span><br><span class="line">  int(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，JWT 加密模块就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十五）缓存模块</title>
      <link href="/2021/02/18/my-swoole-framework-15/"/>
      <url>/2021/02/18/my-swoole-framework-15/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>缓存可以大幅提高程序的性能以及减轻数据库压力。</p><p>今天就来设计框架的缓存模块。</p><p>缓存可以用很多种方法实现，例如：redis、数据库或者文件。</p><p>从性能来看，redis 是最优的，因此本框架将会使用 redis 作为缓存系统。</p><h2 id="驱动接口"><a href="#驱动接口" class="headerlink" title="驱动接口"></a>驱动接口</h2><p>虽然现在使用 redis 作为缓存驱动，但是未来可能会添加其他的。</p><p>因此将缓存驱动声明为一个接口，以后就不需要修改业务代码了。</p><p>在框架目录下新建一个 Cache 文件夹用来存放缓存相关的代码。</p><p>接着声明一个接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：10:54</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">interface DriverInterface</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 载入参数</span><br><span class="line">     * @param $config</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function load($config);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 含有过期时间的键值对</span><br><span class="line">     * @param string $key</span><br><span class="line">     * @param int $ttl</span><br><span class="line">     * @param Closure $initFun</span><br><span class="line">     * @return string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function remember(string $key, int $ttl, Closure $initFun): string;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 没有过期时间的键值对</span><br><span class="line">     * @param string $key</span><br><span class="line">     * @param Closure $initFun</span><br><span class="line">     * @return string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function rememberForever(string $key, Closure $initFun): string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里暂且实现两个键值对缓存的方法，</p><p><code>remember</code> 记住一个键值对 ttl 秒；</p><p><code>rememberForever</code> 记住一个键值对，且不过期。</p><p>上述两个方法如果没有默认值，则从 <code>$initFun</code> 闭包函数中获取，同时将数据写入缓存。</p><p>除此之外，还有一个 <code>load</code> 方法用于获取缓存的配置信息。</p><h2 id="RedisDriver"><a href="#RedisDriver" class="headerlink" title="RedisDriver"></a>RedisDriver</h2><p>接着在 Cache 下新建一个 Driver 文件夹，用来保存对应的驱动。</p><p>创建 RedisDriver，让它实现 DriverInterface：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：10:53</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache\Driver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Cache\DriverInterface;</span><br><span class="line"></span><br><span class="line">class RedisDriver implements DriverInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $instance;</span><br><span class="line"></span><br><span class="line">    public function load($config)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;instance &#x3D; new \Redis();</span><br><span class="line">        $this-&gt;instance-&gt;connect($config[&#39;host&#39;], $config[&#39;port&#39;]);</span><br><span class="line">        $this-&gt;instance-&gt;auth($config[&#39;password&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function remember($key, int $ttl, Closure $initFun): string</span><br><span class="line">    &#123;</span><br><span class="line">        $value &#x3D; $this-&gt;instance-&gt;get($key);</span><br><span class="line"></span><br><span class="line">        if ($value !&#x3D;&#x3D; false) &#123;</span><br><span class="line">            var_dump(&#39;从缓存获取&#39;);</span><br><span class="line"></span><br><span class="line">            return $value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var_dump(&#39;从闭包获取&#39;);</span><br><span class="line"></span><br><span class="line">        $value &#x3D; $initFun();</span><br><span class="line">        $this-&gt;instance-&gt;setEx($key, $ttl, $value);</span><br><span class="line"></span><br><span class="line">        return $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function rememberForever($key, Closure $initFun): string</span><br><span class="line">    &#123;</span><br><span class="line">        $value &#x3D; $this-&gt;instance-&gt;get($key);</span><br><span class="line"></span><br><span class="line">        if ($value !&#x3D;&#x3D; false) &#123;</span><br><span class="line">            return $value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $value &#x3D; $initFun();</span><br><span class="line">        $this-&gt;instance-&gt;set($key, $value);</span><br><span class="line"></span><br><span class="line">        return $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis 驱动直接调用 PHP 的 redis 扩展提供的方法。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>现在有了缓存驱动，但是并不是直接在控制器或者其他地方实例化这个缓存驱动来调用。</p><p>而是创建一个通用的 Cache 类来让用户调用，</p><p>如果不这样做，项目的缓存系统就相当于写死了，以后如果要把 redis 换成数据库缓存就很麻烦。</p><p>因此我们提供一个 Cache 类，用户只要调用 Cache 暴露出来的方法即可。</p><p>在框架的 Cache 目录下新建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;18</span><br><span class="line"> * Time：10:53</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Cache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Cache\Driver\RedisDriver;</span><br><span class="line"></span><br><span class="line">class Cache</span><br><span class="line">&#123;</span><br><span class="line">    protected static DriverInterface $driver;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($cache, $config)</span><br><span class="line">    &#123;</span><br><span class="line">        switch ($cache) &#123;</span><br><span class="line">            case &#39;redis&#39;:</span><br><span class="line">                self::redisDriver($config);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected static function redisDriver($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$driver &#x3D; new RedisDriver();</span><br><span class="line">        self::$driver-&gt;load($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function driver(): DriverInterface</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$driver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache 类对外提供了 <code>driver</code> 方法用于获取缓存驱动，</p><p>用户调用框架的缓存系统时，只需要从 driver 方法获得缓存驱动的实例，</p><p>然后再调用 DriverInterface 声明的标准方法即可。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>缓存系统需要在启动程序的时候连接到 redis，</p><p>因此声明一个新的常量，然后在 app.php 添加框架配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Constant::CACHE_CONFIG &#x3D;&gt; [</span><br><span class="line">    &#39;driver&#39; &#x3D;&gt; &#39;redis&#39;,</span><br><span class="line">    &#39;redis&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;host&#39; &#x3D;&gt; &#39;redis&#39;,</span><br><span class="line">        &#39;port&#39; &#x3D;&gt; &#39;6379&#39;,</span><br><span class="line">        &#39;password&#39; &#x3D;&gt; &#39;123123&#39;,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>接着，在封装好的启动程序 HttpServer 初始化时加入缓存系统的初始化代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public function bootstrap($config)</span><br><span class="line">&#123;</span><br><span class="line">    Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">    DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">    Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新增代码</span><br><span class="line">    $cache &#x3D; $config[Constant::CACHE_CONFIG];</span><br><span class="line">    Cache::setConfig($cache[&#39;driver&#39;], $cache[$cache[&#39;driver&#39;]]);</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，缓存系统就算完成了。</p><h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><p>创建一个 test 路由，控制器的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Cache\Cache;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        $value &#x3D; Cache::driver()-&gt;remember(&#39;test&#39;, 5, function () &#123;</span><br><span class="line">            return &#39;aaa&#39;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(json_encode($value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从缓存驱动中获取名称为 “test” 的键，如果不存在则执行闭包，</p><p>闭包里面是用户的业务逻辑，例如从数据库查询数据等等，最终将结果以字符串的形式返回，</p><p>缓存系统将闭包返回的值写入到缓存，最后再把该值返回。</p><p>通俗的讲，就是 <strong>从缓存获取该键的值，如果没有就执行闭包的函数进行初始化。</strong></p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@0a71c06b420b:&#x2F;www&#x2F;blog# php http_server.php </span><br><span class="line">string(17) &quot;请求URI：&#x2F;test&quot;</span><br><span class="line">string(15) &quot;从闭包获取&quot;</span><br><span class="line">string(17) &quot;请求URI：&#x2F;test&quot;</span><br><span class="line">string(15) &quot;从缓存获取&quot;</span><br><span class="line"></span><br><span class="line"># 间隔5秒后再访问</span><br><span class="line">string(17) &quot;请求URI：&#x2F;test&quot;</span><br><span class="line">string(15) &quot;从闭包获取&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现，第一次因为缓存没有数据，因此执行了闭包的函数，</p><p>第二次缓存已经有数据了，所以直接返回缓存中的数据，证明了闭包成功将数据写入到缓存了。</p><p>然后 5 秒之后再访问，可以发现又调用了闭包，证明缓存在 5 秒的时候过期了。</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>键值对只是 redis 的基本类型，后续还会加入更多的操作方法。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十四）启动程序优化</title>
      <link href="/2021/02/17/my-swoole-framework-14/"/>
      <url>/2021/02/17/my-swoole-framework-14/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇文章临时修改程序的启动文件，结果变成如下这般惨不忍睹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#39;view&#39;][&#39;view_path&#39;], $config[&#39;view&#39;][&#39;view_cache_path&#39;]);</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#39;database&#39;][&#39;mysql&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新增行</span><br><span class="line">\FireRabbitEngine\Module\Logger\Log::setConfig($config[&#39;logger&#39;]);</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数的加载方式也需要优化一下，接下来就开始整改。</p><h2 id="参数文件统一"><a href="#参数文件统一" class="headerlink" title="参数文件统一"></a>参数文件统一</h2><p>除了路由配置和中间件映射关系配置，其他的都可以移动到 app.pho 统一管理。</p><p>比如数据库的配置、redis 的配置、模板文件的存放位置等，都属于项目的配置。</p><p>因此将原来几个单独的配置文件删掉，统一放到 app.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &#39;framework&#39; &#x3D;&gt; [</span><br><span class="line">        Constant::DATABASE_CONFIG &#x3D;&gt; [</span><br><span class="line">            &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;database&#39; &#x3D;&gt; &#39;blog&#39;,</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;123123&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">            &#39;collation&#39; &#x3D;&gt; &#39;utf8_unicode_ci&#39;,</span><br><span class="line">            &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        ],</span><br><span class="line">        Constant::LOGGER_CONFIG &#x3D;&gt; [</span><br><span class="line">            &#39;path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;logs&#x2F;log.log&#39;,</span><br><span class="line">            &#39;level&#39; &#x3D;&gt; &#39;info&#39;,</span><br><span class="line">            &#39;channel&#39; &#x3D;&gt; &#39;channel-name&#39;,</span><br><span class="line">        ],</span><br><span class="line">        Constant::VIEW_CONFIG &#x3D;&gt; [</span><br><span class="line">            &#39;path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;view&#39;,</span><br><span class="line">            &#39;cache_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;cache&#x2F;view_cache&#39;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个 Constant 类是框架配置的常量，定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;16</span><br><span class="line"> * Time：10:08</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module;</span><br><span class="line"></span><br><span class="line">class Constant</span><br><span class="line">&#123;</span><br><span class="line">    const DATABASE_CONFIG &#x3D; &#39;firerabbiit_database&#39;;</span><br><span class="line">    const LOGGER_CONFIG &#x3D; &#39;firerabbit_logger&#39;;</span><br><span class="line">    const VIEW_CONFIG &#x3D; &#39;firerabbit_view&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是统一配置的键名。</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>框架现在是直接使用 swoole 的函数来启动程序，</p><p>基于面向对象的思想，现在把 server 也封装为一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;15</span><br><span class="line"> * Time：16:26</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Constant;</span><br><span class="line">use FireRabbitEngine\Module\Database\Manager as DatabaseManager;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log as Logger;</span><br><span class="line">use FireRabbitEngine\Module\Route\Router;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line">use Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">class HttpServer</span><br><span class="line">&#123;</span><br><span class="line">    public $server;</span><br><span class="line">    public $router;</span><br><span class="line"></span><br><span class="line">    public function __construct($host, $port, $config &#x3D; [])</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server &#x3D; new Server($host, $port);</span><br><span class="line">        $this-&gt;server-&gt;set($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadRouter(Router $router)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;router &#x3D; $router;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loadMiddleware($middleware)</span><br><span class="line">    &#123;</span><br><span class="line">        \FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig($middleware);</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function bootstrap($config)</span><br><span class="line">    &#123;</span><br><span class="line">        Blade::setConfig($config[Constant::VIEW_CONFIG]);</span><br><span class="line">        DatabaseManager::setConfig($config[Constant::DATABASE_CONFIG]);</span><br><span class="line">        Logger::setConfig($config[Constant::LOGGER_CONFIG]);</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function request($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;registerError($response);</span><br><span class="line">        $this-&gt;router-&gt;handle($request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function registerError($response)</span><br><span class="line">    &#123;</span><br><span class="line">        register_shutdown_function(function () use ($response) &#123;</span><br><span class="line">            $error &#x3D; error_get_last();</span><br><span class="line">            var_dump($error);</span><br><span class="line">            switch ($error[&#39;type&#39;] ?? null) &#123;</span><br><span class="line">                case E_ERROR :</span><br><span class="line">                case E_PARSE :</span><br><span class="line">                case E_CORE_ERROR :</span><br><span class="line">                case E_COMPILE_ERROR :</span><br><span class="line">                    $response-&gt;status(500);</span><br><span class="line">                    $response-&gt;end($error[&#39;message&#39;]);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function start()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;server-&gt;on(&#39;request&#39;, [$this, &#39;request&#39;]);</span><br><span class="line">        $this-&gt;server-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改启动程序"><a href="#修改启动程序" class="headerlink" title="修改启动程序"></a>修改启动程序</h2><p>现在就可以用 server 类来启动程序了，修改 http_server.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Http\HttpServer;</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line">define(&#39;ROOT_PATH&#39;, __DIR__);</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">$config &#x3D; require &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">$server &#x3D; new HttpServer(&#39;0.0.0.0&#39;, 9527, [</span><br><span class="line">    &#39;worker_num&#39; &#x3D;&gt; 4,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$router &#x3D; require &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">$middleware &#x3D; require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;;</span><br><span class="line"></span><br><span class="line">$server-&gt;bootstrap($config[&#39;framework&#39;])</span><br><span class="line">    -&gt;loadMiddleware($middleware)</span><br><span class="line">    -&gt;loadRouter($router)</span><br><span class="line">    -&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就实现了用类来控制启动程序，启动程序的代码也变得整洁了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十三）框架性能小测</title>
      <link href="/2021/02/14/my-swoole-framework-13/"/>
      <url>/2021/02/14/my-swoole-framework-13/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从写完路由模块之后就各种偷懒了……</p><p>如果所有功能都要自己写的话，工作量实在太大了。</p><p>而且我对于 swoole 也没有花时间来学习，现在写的框架也只不过是简单的封装而已。</p><p>swoole 的优势很难体现出来，但是相比于用 Laravel 这种重型框架来说，</p><p>自己写的框架虽然是“山寨”版 Laravel，但是性能应该比 Laravel 强不少。</p><p>于是忍不住就想用 ab 工具来测一下了。</p><h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>如果是访问域名的话，其实是先经过 nginx，然后再通过反向代理转发给 swoole，</p><p>这种方法与直接访问 swoole 端口有区别，于是就分作两租测试。</p><p>Nginx 反向代理：<code>ab -c 100 -n 10000 http://firerabbit-engine.ht/</code></p><p>直接访问 Swoole 端口：<code>ab -c 100 -n 10000 http://127.0.0.1：9527/</code></p><p>两种情况分别测试三组数据，取平均值。</p><p>测试的路由配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Http\\Controller\\Home\\&#39;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;&#39;, &#39;IndexController@index&#39;)-&gt;middleware([&#39;a&#39;, &#39;b&#39;]);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>路由加入了两个中间件，中间件处理过程也是比较消耗性能的地方。</p><p>然后是测试的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user &#x3D; User::find(1);</span><br><span class="line">        $html &#x3D; Blade::view(&#39;index&#39;, [&#39;name&#39; &#x3D;&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法通过 ORM 查询 users 表的数据，然后传给视图，最后输出视图页面。</p><p>这样可以模拟普通的业务逻辑，看看这个框架写的 WEB 程序到底能跑多少分吧！</p><h3 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><p>第一组数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx&#x2F;1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   51.355 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    194.72 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       513.548 [ms] (mean)</span><br><span class="line">Time per request:       5.135 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          105.92 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.8      0      51</span><br><span class="line">Processing:    42  511  35.3    512     629</span><br><span class="line">Waiting:       30  506  35.2    508     629</span><br><span class="line">Total:         42  511  35.0    512     629</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    512</span><br><span class="line">  66%    523</span><br><span class="line">  75%    529</span><br><span class="line">  80%    533</span><br><span class="line">  90%    546</span><br><span class="line">  95%    557</span><br><span class="line">  98%    572</span><br><span class="line">  99%    581</span><br><span class="line"> 100%    629 (longest request)</span><br></pre></td></tr></table></figure><p>第二组数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx&#x2F;1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   54.842 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    182.34 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       548.422 [ms] (mean)</span><br><span class="line">Time per request:       5.484 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          99.18 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.5      0      40</span><br><span class="line">Processing:    56  544  49.7    543    1046</span><br><span class="line">Waiting:       50  539  49.6    538    1043</span><br><span class="line">Total:         61  544  49.8    543    1050</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    543</span><br><span class="line">  66%    557</span><br><span class="line">  75%    567</span><br><span class="line">  80%    573</span><br><span class="line">  90%    588</span><br><span class="line">  95%    602</span><br><span class="line">  98%    619</span><br><span class="line">  99%    633</span><br><span class="line"> 100%   1050 (longest request)</span><br></pre></td></tr></table></figure><p>第三组数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx&#x2F;1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   54.510 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    183.45 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       545.097 [ms] (mean)</span><br><span class="line">Time per request:       5.451 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          99.79 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   3.1      0     196</span><br><span class="line">Processing:    28  542 112.1    527    1561</span><br><span class="line">Waiting:        9  538 111.6    522    1557</span><br><span class="line">Total:         28  543 111.9    527    1561</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    527</span><br><span class="line">  66%    542</span><br><span class="line">  75%    554</span><br><span class="line">  80%    562</span><br><span class="line">  90%    589</span><br><span class="line">  95%    614</span><br><span class="line">  98%    745</span><br><span class="line">  99%   1471</span><br><span class="line"> 100%   1561 (longest request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="直接访问-swoole-程序"><a href="#直接访问-swoole-程序" class="headerlink" title="直接访问 swoole 程序"></a>直接访问 swoole 程序</h3><p>第一组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.408 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    241.50 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       414.077 [ms] (mean)</span><br><span class="line">Time per request:       4.141 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          132.54 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   1.4      0      15</span><br><span class="line">Processing:    41  412  34.8    410     580</span><br><span class="line">Waiting:       26  411  34.8    410     580</span><br><span class="line">Total:         41  412  34.4    410     591</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    410</span><br><span class="line">  66%    421</span><br><span class="line">  75%    428</span><br><span class="line">  80%    435</span><br><span class="line">  90%    454</span><br><span class="line">  95%    469</span><br><span class="line">  98%    489</span><br><span class="line">  99%    507</span><br><span class="line"> 100%    591 (longest request)</span><br></pre></td></tr></table></figure><p>第二组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   40.637 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    246.08 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       406.368 [ms] (mean)</span><br><span class="line">Time per request:       4.064 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          135.06 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   1.4      0      20</span><br><span class="line">Processing:    38  404  38.0    404     594</span><br><span class="line">Waiting:       19  404  38.0    403     594</span><br><span class="line">Total:         39  404  37.3    404     594</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    404</span><br><span class="line">  66%    415</span><br><span class="line">  75%    423</span><br><span class="line">  80%    428</span><br><span class="line">  90%    443</span><br><span class="line">  95%    461</span><br><span class="line">  98%    484</span><br><span class="line">  99%    497</span><br><span class="line"> 100%    594 (longest request)</span><br></pre></td></tr></table></figure><p>第三组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.103 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    243.29 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       411.031 [ms] (mean)</span><br><span class="line">Time per request:       4.110 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          133.52 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       5</span><br><span class="line">Processing:    39  408  49.5    402    1022</span><br><span class="line">Waiting:       38  407  49.4    402    1022</span><br><span class="line">Total:         43  408  49.5    402    1024</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    402</span><br><span class="line">  66%    413</span><br><span class="line">  75%    420</span><br><span class="line">  80%    426</span><br><span class="line">  90%    441</span><br><span class="line">  95%    463</span><br><span class="line">  98%    521</span><br><span class="line">  99%    628</span><br><span class="line"> 100%   1024 (longest request)</span><br></pre></td></tr></table></figure><h3 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h3><p>主要对比 <code>Requests per second</code> 参数，</p><p>RPS（也叫 QPS）即平均每秒完成的请求数，这个值越大代币能承受的并发量越高。</p><p>nginx 转发的三组分别为：194.72、182.34、182.45</p><p>直接访问 swoole 的三组分别为：241.50、246.08、243.29</p><p>取平均值即：nginx=186.50，swoole=243.62</p><p>也就是说，通过 nginx 反向代理会损失一部分的性能。</p><p>而且距离最开始想要实现在几十毫秒内返回也差了很多，即使是直接访问 swoole 最快的也需要 600ms。</p><p>而且通过 nginx 转发之后，QPS 只有不到 200，相比其他 swoole 框架，自己写的框架性能已经大幅下降了。</p><p>这中间应该是有一些非异步的请求，比如 MySQL 查询，只有完成查询后才会继续往下执行，导致程序阻塞了。</p><p>不过总体而言，使用了 swoole 自己写的框架性能比起普通的 php-fpm 框架要高得多，</p><p>如果再加上一些逻辑业务处理，QPS 应该也能维持在 100-200 之间，这样的结果还是比较满意的。</p><p>关于 swoole 的特性还是需要仔细学习一番，框架方面的代码也还有很大的优化空间。</p><p>如果后续不断更新的话，可支持的并发量应该也会不断变大吧！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为了提高性能，我把 PHP 升级到 7.4，同时 swoole 扩展也升级到 4.6.3，</p><p>然后重新测试了一遍。</p><h3 id="Nginx-反向代理-1"><a href="#Nginx-反向代理-1" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><p>测试数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx&#x2F;1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   55.727 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    179.45 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       557.265 [ms] (mean)</span><br><span class="line">Time per request:       5.573 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          97.61 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.6      0      26</span><br><span class="line">Processing:    37  555  58.0    550     938</span><br><span class="line">Waiting:       24  550  57.8    545     938</span><br><span class="line">Total:         37  555  57.8    550     938</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    550</span><br><span class="line">  66%    565</span><br><span class="line">  75%    576</span><br><span class="line">  80%    583</span><br><span class="line">  90%    604</span><br><span class="line">  95%    628</span><br><span class="line">  98%    676</span><br><span class="line">  99%    797</span><br><span class="line"> 100%    938 (longest request)</span><br></pre></td></tr></table></figure><h3 id="直接访问-swoole-程序-1"><a href="#直接访问-swoole-程序-1" class="headerlink" title="直接访问 swoole 程序"></a>直接访问 swoole 程序</h3><p>测试数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   41.988 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    238.16 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       419.885 [ms] (mean)</span><br><span class="line">Time per request:       4.199 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          130.71 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.3      0       5</span><br><span class="line">Processing:    44  416  50.0    411    1090</span><br><span class="line">Waiting:       44  416  50.0    410    1090</span><br><span class="line">Total:         47  416  50.1    411    1092</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    411</span><br><span class="line">  66%    421</span><br><span class="line">  75%    428</span><br><span class="line">  80%    434</span><br><span class="line">  90%    448</span><br><span class="line">  95%    464</span><br><span class="line">  98%    520</span><br><span class="line">  99%    559</span><br><span class="line"> 100%   1092 (longest request)</span><br></pre></td></tr></table></figure><h3 id="对比结果-1"><a href="#对比结果-1" class="headerlink" title="对比结果"></a>对比结果</h3><p>升级了 PHP 和 swoole 扩展的版本后，</p><p>nginx=179.45，swoole=238.16</p><blockquote><p>原本为：nginx=186.50，swoole=243.62</p></blockquote><p>好像也没有肉眼可见的提升……</p><p>然后又尝试优化 composer 生成的自动加载：<code>composer dump-autoload -o</code></p><p>测试的结果也没有太大的变化。</p><p>看来，如果想进一步提升 QPS 的话，重点应该是解决阻塞的地方了。</p><h3 id="工作进程数"><a href="#工作进程数" class="headerlink" title="工作进程数"></a>工作进程数</h3><p>忽然想到提高工作进程数，按道理应该可以提高一定的性能，</p><p>编辑 http_server.php 为 swoole 的 http 设置参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$http-&gt;set([</span><br><span class="line">    &#39;worker_num&#39; &#x3D;&gt; 8,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>我的电脑是 4 核 i5，把工作进程设置为核心数的两倍，然后继续测试 swoole 程序和 nginx 转发的结果。</p><p>nginx 转发的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        nginx&#x2F;1.15.12</span><br><span class="line">Server Hostname:        firerabbit-engine.ht</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   59.781 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5570000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    167.28 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       597.808 [ms] (mean)</span><br><span class="line">Time per request:       5.978 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          90.99 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.8      0      38</span><br><span class="line">Processing:    46  595  84.2    591    1436</span><br><span class="line">Waiting:       39  590  84.2    585    1435</span><br><span class="line">Total:         46  595  84.7    591    1445</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    591</span><br><span class="line">  66%    607</span><br><span class="line">  75%    618</span><br><span class="line">  80%    624</span><br><span class="line">  90%    647</span><br><span class="line">  95%    668</span><br><span class="line">  98%    697</span><br><span class="line">  99%    742</span><br><span class="line"> 100%   1445 (longest request)</span><br></pre></td></tr></table></figure><p>直接访问 swoole：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        swoole-http-server</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            9527</span><br><span class="line"></span><br><span class="line">Document Path:          &#x2F;</span><br><span class="line">Document Length:        398 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   39.114 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      5620000 bytes</span><br><span class="line">HTML transferred:       3980000 bytes</span><br><span class="line">Requests per second:    255.66 [#&#x2F;sec] (mean)</span><br><span class="line">Time per request:       391.139 [ms] (mean)</span><br><span class="line">Time per request:       3.911 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          140.32 [Kbytes&#x2F;sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+&#x2F;-sd] median   max</span><br><span class="line">Connect:        0    0   0.4      0       6</span><br><span class="line">Processing:    61  387  77.4    380    1409</span><br><span class="line">Waiting:       61  387  77.4    380    1409</span><br><span class="line">Total:         67  388  77.6    381    1413</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    381</span><br><span class="line">  66%    395</span><br><span class="line">  75%    405</span><br><span class="line">  80%    413</span><br><span class="line">  90%    433</span><br><span class="line">  95%    452</span><br><span class="line">  98%    494</span><br><span class="line">  99%    543</span><br><span class="line"> 100%   1413 (longest request)</span><br></pre></td></tr></table></figure><p>nginx=167.28，swoole=255.66</p><blockquote><p>PHP 和 swoole 未升级前：nginx=186.50，swoole=243.62<br>PHP 和 swoole 升级后：nginx=179.45，swoole=238.16</p></blockquote><p>嗯？？？nginx 的反而下降了？swoole 的倒是有一定的提升。</p><p>也许是因为没有足够的业务，导致测试的结果准确性不高。</p><p>测试就到这里吧，博客系统也还没开始制作，框架也属于半成品，等到完成度比较高的时候再测测看。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十二）日志系统</title>
      <link href="/2021/02/14/my-swoole-framework-12/"/>
      <url>/2021/02/14/my-swoole-framework-12/</url>
      
        <content type="html"><![CDATA[<h2 id="安装日志系统"><a href="#安装日志系统" class="headerlink" title="安装日志系统"></a>安装日志系统</h2><p>日志习题属于框架的一部分，因此在框架目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require monolog&#x2F;monolog</span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><p>在框架 module 下新建 Logger 文件夹用来保存日志相关功能代码，</p><p>在 Logger 创建 Log 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;14</span><br><span class="line"> * Time：13:38</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Monolog\Handler\StreamHandler;</span><br><span class="line">use Monolog\Logger;</span><br><span class="line">use Monolog\Formatter\JsonFormatter;</span><br><span class="line"></span><br><span class="line">class Log</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志配置</span><br><span class="line">     * @var array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志对象实例</span><br><span class="line">     * @var Logger</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$config &#x3D; $config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getLogger()</span><br><span class="line">    &#123;</span><br><span class="line">        if (self::$instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">            self::$instance &#x3D; new Logger(self::$config[&#39;channel&#39;]);</span><br><span class="line"></span><br><span class="line">            if (!file_exists(self::$config[&#39;path&#39;])) &#123;</span><br><span class="line">                $file &#x3D; fopen(self::$config[&#39;path&#39;], &#39;w&#39;);</span><br><span class="line">                fwrite($file, &#39;&#39;);</span><br><span class="line">                fclose($file);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $streamHandler &#x3D; new StreamHandler(self::$config[&#39;path&#39;], self::$config[&#39;level&#39;]);</span><br><span class="line">&#x2F;&#x2F;            $streamHandler-&gt;setFormatter(new JsonFormatter());</span><br><span class="line"></span><br><span class="line">            self::$instance-&gt;pushHandler($streamHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>setConfig</code> 加载配置参数，<code>getLogger</code> 判断是否存在日志文件，如果没有则创建，同时返回插件包的 Logger。</p><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>打开 app/config/app.php，添加日志配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config &#x3D; [</span><br><span class="line"></span><br><span class="line">    &#39;view&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;view_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;view&#39;,</span><br><span class="line">        &#39;view_cache_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;cache&#x2F;view_cache&#39;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#39;logger&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;logs&#x2F;log.log&#39;,</span><br><span class="line">        &#39;level&#39; &#x3D;&gt; \Monolog\Logger::INFO,</span><br><span class="line">        &#39;channel&#39; &#x3D;&gt; &#39;channel-name&#39;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#39;database&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;mysql&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;database&#39; &#x3D;&gt; &#39;blog&#39;,</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;123123&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">            &#39;collation&#39; &#x3D;&gt; &#39;utf8_unicode_ci&#39;,</span><br><span class="line">            &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><p>这里的 view 也被我修改了下，这样看起来更整齐。</p><h2 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h2><p>编辑 http_server.php 加载日志配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#39;view&#39;][&#39;view_path&#39;], $config[&#39;view&#39;][&#39;view_cache_path&#39;]);</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#39;database&#39;][&#39;mysql&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新增行</span><br><span class="line">\FireRabbitEngine\Module\Logger\Log::setConfig($config[&#39;logger&#39;]);</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调用日志"><a href="#调用日志" class="headerlink" title="调用日志"></a>调用日志</h2><p>在 IndexController 测试日志是否能正常写入，添加测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\Logger\Log;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user &#x3D; User::find(1);</span><br><span class="line">        $html &#x3D; Blade::view(&#39;index&#39;, [&#39;name&#39; &#x3D;&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        Log::getLogger()-&gt;error(&#39;日志&#39;);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问首页，可以看到配置日志路径的文件夹下多了一个 log.log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2021-02-14T14:26:29.828157+08:00] channel-name.ERROR: 日志 [] []</span><br></pre></td></tr></table></figure><p>这样日志系统也完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十一）数据库模型</title>
      <link href="/2021/02/14/my-swoole-framework-11/"/>
      <url>/2021/02/14/my-swoole-framework-11/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据库操作类自己写不安全，而且也有比较成熟的插件包了，</p><p>因此我打算直接引入 Laravel 相同的 ORM。</p><h2 id="插件包安装"><a href="#插件包安装" class="headerlink" title="插件包安装"></a>插件包安装</h2><p>数据库操作属于框架层面的，因此在框架的目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require illuminate&#x2F;database</span><br></pre></td></tr></table></figure><p>框架目录下也会自动创建一个 composer.json 文件，同时安装完成后会生成 vendor 文件夹。</p><p>在框架目录添加 .gitignore 忽略上传 vendor 文件夹。</p><h2 id="Blade-包错误修正"><a href="#Blade-包错误修正" class="headerlink" title="Blade 包错误修正"></a>Blade 包错误修正</h2><p>在前面完成 blade 模板时，blade 模板的包是在 app 目录下的，</p><p>这样就不是在框架里了，因此回到博客目录用 <code>composer remove xiaoler/blade</code> 命令移除 blade 包。</p><p>然后再进入框架目录重新安装 blade 即可，这样 blade 模块就属于框架内部了。</p><p>框架现在还不是一个 composer 包，因此框架的自动加载文件需要手动添加，</p><p>编辑 swoole 启动文件，http_server.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新增行</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br></pre></td></tr></table></figure><p>在引入自动加载文件的下一行添加框架的自动加载，这样就完成了。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>编辑 app/config/app.php，添加数据库配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config &#x3D; [</span><br><span class="line">    &#39;view_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;view&#39;,</span><br><span class="line">    &#39;view_cache_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;cache&#x2F;view_cache&#39;,</span><br><span class="line"></span><br><span class="line">    &#39;database&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;mysql&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;127.0.0.1&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;database&#39; &#x3D;&gt; &#39;blog&#39;,</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;password&#39; &#x3D;&gt; &#39;123456&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">            &#39;collation&#39; &#x3D;&gt; &#39;utf8_unicode_ci&#39;,</span><br><span class="line">            &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><h2 id="ORM-模块加载"><a href="#ORM-模块加载" class="headerlink" title="ORM 模块加载"></a>ORM 模块加载</h2><p>在框架 module 新建文件夹 Database 用来存储数据库相关功能模块代码，</p><p>在 Database 文件夹下新建 Manager.php 用于加载数据库配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;14</span><br><span class="line"> * Time：13:02</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Database;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Manager</span><br><span class="line">&#123;</span><br><span class="line">    protected static $config;</span><br><span class="line"></span><br><span class="line">    public static function setConfig($config)</span><br><span class="line">    &#123;</span><br><span class="line">        $db &#x3D; new \Illuminate\Database\Capsule\Manager();</span><br><span class="line">        $db-&gt;addConnection($config);</span><br><span class="line">        $db-&gt;setAsGlobal();</span><br><span class="line">        $db-&gt;bootEloquent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getConfig()</span><br><span class="line">    &#123;</span><br><span class="line">        return self::$config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setConfig</code> 方法加载一个数组参数的配置。</p><p>编辑 http_server.php 加入一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;firerabbit-engine&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#39;view_path&#39;], $config[&#39;view_cache_path&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 新增行</span><br><span class="line">\FireRabbitEngine\Module\Database\Manager::setConfig($config[&#39;database&#39;][&#39;mysql&#39;]);</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 on 之前加载数据库配置。</p><blockquote><p>现在这个启动文件已经不堪入目了，等以后再优化</p></blockquote><h2 id="创建-Model"><a href="#创建-Model" class="headerlink" title="创建 Model"></a>创建 Model</h2><p>在 app/Http 下新建 Model 文件夹用来保存模型文件。</p><p>在 Model 新建第一个模型文件 User：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;14</span><br><span class="line"> * Time：13:05</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace App\Http\Model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">    public $timestamps &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要让它继承 <code>Illuminate\Database\Eloquent\Model</code> 即可。</p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>打开数据库，在 users 表加入一行数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name：花花 - 001</span><br><span class="line">password：123123</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>打开 IndexController，修改  index 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:17 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controller\Home;</span><br><span class="line"></span><br><span class="line">use App\Http\Model\User;</span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $user &#x3D; User::find(1);</span><br><span class="line">        $html &#x3D; Blade::view(&#39;index&#39;, [&#39;name&#39; &#x3D;&gt; $user-&gt;name]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来的代码是直接传入 name 字符串，现在改成从数据库查询数据然后传给模板。</p><p>然后测试，发现页面输出了名字：花花 - 001</p><p>如此一来，ORM 模块也完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（十）数据库迁移</title>
      <link href="/2021/02/14/my-swoole-framework-10/"/>
      <url>/2021/02/14/my-swoole-framework-10/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常情况下我们要创建 MySQL 数据库的表需要手动创建 SQL 语句。</p><p>然而这样一方面是很不方便，另一方面也不安全，如果修改表结构的时候不小心改错了，就会造成无法挽回的后果，而且最关键的是还不知道是谁干的！</p><p>之前上班的时候同事就遇到这种情况，有一个同事不小心删了另一个同事要用的表，结果不言而喻……</p><h2 id="Phinx"><a href="#Phinx" class="headerlink" title="Phinx"></a>Phinx</h2><p>官方网站：<a href="https://book.cakephp.org/phinx/0/en/install.html">https://book.cakephp.org/phinx/0/en/install.html</a></p><p>Phinx 是一个数据库迁移插件，使用它可以通过 PHP 代码来创建表或者修改表结构。</p><p>如此一来就不需要手动使用 SQL 语句去修改数据库了。</p><h2 id="安装-Phinx"><a href="#安装-Phinx" class="headerlink" title="安装 Phinx"></a>安装 Phinx</h2><p>使用命令：<code>require robmorgan/phinx</code></p><p>完成安装后，再执行 <code>vendor/bin/phinx init</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;www&#x2F;blog# vendor&#x2F;bin&#x2F;phinx init</span><br><span class="line">Phinx by CakePHP - https:&#x2F;&#x2F;phinx.org.</span><br><span class="line"></span><br><span class="line">created &#x2F;www&#x2F;blog&#x2F;phinx.php</span><br></pre></td></tr></table></figure><p>可以发现它在项目根目录自动创建了一个文件。</p><h2 id="配置-Phinx"><a href="#配置-Phinx" class="headerlink" title="配置 Phinx"></a>配置 Phinx</h2><p>打开上一步得到的 phinx.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">[</span><br><span class="line">    &#39;paths&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;migrations&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;migrations&#39;,</span><br><span class="line">        &#39;seeds&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;seeds&#39;</span><br><span class="line">    ],</span><br><span class="line">    &#39;environments&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;default_migration_table&#39; &#x3D;&gt; &#39;phinxlog&#39;,</span><br><span class="line">        &#39;default_environment&#39; &#x3D;&gt; &#39;development&#39;,</span><br><span class="line">        &#39;production&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;production_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ],</span><br><span class="line">        &#39;development&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;development_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ],</span><br><span class="line">        &#39;testing&#39; &#x3D;&gt; [</span><br><span class="line">            &#39;adapter&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">            &#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,</span><br><span class="line">            &#39;name&#39; &#x3D;&gt; &#39;testing_db&#39;,</span><br><span class="line">            &#39;user&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">            &#39;pass&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">            &#39;port&#39; &#x3D;&gt; &#39;3306&#39;,</span><br><span class="line">            &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &#39;version_order&#39; &#x3D;&gt; &#39;creation&#39;</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个就是数据库的配置表，在这里填上自己的数据库账户和密码。</p><p>这里有不同的开发环境配置：production（线上环境）、development（开发环境）、testing（测试环境）。</p><p>我们暂且只要配置：development 即可。</p><p>paths 字段是数据库迁移文件的存放位置，默认是在项目根目录下的 db 文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;paths&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;migrations&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;migrations&#39;,</span><br><span class="line">    &#39;seeds&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;db&#x2F;seeds&#39;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>数据库迁移文件属于项目的一部分，因此我把它修改成了在 app 目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;paths&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;migrations&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;app&#x2F;database&#x2F;migrations&#39;,</span><br><span class="line">    &#39;seeds&#39; &#x3D;&gt; &#39;%%PHINX_CONFIG_DIR%%&#x2F;app&#x2F;database&#x2F;seeds&#39;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>然后创建对应的文件夹即可。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>配置好之后就可以使用命令来创建表了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor&#x2F;bin&#x2F;phinx create User</span><br></pre></td></tr></table></figure><p>上述命令生成了 User 表的数据库迁移文件，</p><p>可以发现在 app/database/migrations 目录下多出了一个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare(strict_types&#x3D;1);</span><br><span class="line"></span><br><span class="line">use Phinx\Migration\AbstractMigration;</span><br><span class="line"></span><br><span class="line">final class User extends AbstractMigration</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Change Method.</span><br><span class="line">     *</span><br><span class="line">     * Write your reversible migrations using this method.</span><br><span class="line">     *</span><br><span class="line">     * More information on writing migrations is available here:</span><br><span class="line">     * https:&#x2F;&#x2F;book.cakephp.org&#x2F;phinx&#x2F;0&#x2F;en&#x2F;migrations.html#the-change-method</span><br><span class="line">     *</span><br><span class="line">     * Remember to call &quot;create()&quot; or &quot;update()&quot; and NOT &quot;save()&quot; when working</span><br><span class="line">     * with the Table class.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function change(): void</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 change 方法里添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function change()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; create the table</span><br><span class="line">    $table &#x3D; $this-&gt;table(&#39;users&#39;);</span><br><span class="line">    $table-&gt;addColumn(&#39;name&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 32])</span><br><span class="line">        -&gt;addColumn(&#39;password&#39;, &#39;string&#39;, [&#39;limit&#39; &#x3D;&gt; 64])</span><br><span class="line">        -&gt;addColumn(&#39;created&#39;, &#39;timestamp&#39;, [&#39;default&#39; &#x3D;&gt; &#39;CURRENT_TIMESTAMP&#39;])</span><br><span class="line">        -&gt;create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码创建了一张 users 表，包括名称、密码和注册日期。</p><p>然后打开 MySQL 数据库，创建一个名字叫做 blog 的数据库。</p><blockquote><p>注意！这里的数据库名字要与 phinx.php 配置文件对应</p></blockquote><h2 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h2><p>数据库迁移文件写好之后，就可以用命令执行数据库迁移了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor&#x2F;bin&#x2F;phinx migrate</span><br></pre></td></tr></table></figure><p>执行完成之后再返回查看 blog 数据库，可以发现 users 表已经创建好了。</p><p>除了 users 表之外，还有一张 phinxlog 表，这是用来保存迁移记录的。</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>数据库迁移属于项目单独引用的，以后再考虑封装到框架里面。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（九）视图blade模板</title>
      <link href="/2021/02/13/my-swoole-framework-9/"/>
      <url>/2021/02/13/my-swoole-framework-9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>路由模块终于告一段落了，虽然完成了但还没有经过严格测试，</p><p>因此可能会存在一些问题，具体问题就等接下来的开发过程发现就好了。</p><h2 id="视图模块"><a href="#视图模块" class="headerlink" title="视图模块"></a>视图模块</h2><p>由于我的框架不是专门做 API 的，也不是微服务架构，而是单体应用，</p><p>也就是说会出现 HTML 代码跟 PHP 代码混合在一块的视图文件，</p><p>直接用原生的 PHP 来写 HTML 页面肯定不是好方法，而模板引擎比较好用的就是 blade 模板了。</p><h2 id="安装-blade-模板"><a href="#安装-blade-模板" class="headerlink" title="安装 blade 模板"></a>安装 blade 模板</h2><p>模板引擎的开发成本太高了，因此我打算直接用别人写好的。</p><p>使用 composer 命令 <code>composer require xiaoler/blade</code>，</p><p>安装完成后 composer.json 的 require 字段即可看到刚才的安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;xiaoler&#x2F;blade&quot;: &quot;^5.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;app&#x2F;&quot;,</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine&#x2F;module&#x2F;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;firerabbit-engine&#x2F;common&#x2F;function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎的配置"><a href="#模板引擎的配置" class="headerlink" title="模板引擎的配置"></a>模板引擎的配置</h2><p>模板引擎在第一次运行时，会根据模板创建出编译后的 php 文件，</p><p>也就是说，它需要将模板语言转化成 PHP 语言，生成对应解析后的文件。</p><p>在 app 下创建 view 文件夹，用来存放视图模板文件。</p><p>在 app 下创建 storage 文件夹，用来保存上传的文件或者缓存文件。</p><p>在 storage 目录下继续创建 cache，在 cache 目录下创建 view_cache 用来保存视图缓存文件。</p><blockquote><p>view_cache 要加入到 .gitignore 忽略的目录，缓存文件不需要同步上传</p></blockquote><p>视图缓存文件即经过模板引擎编译后生成的 PHP 文件。</p><p>为了方便管理全局配置，在博客目录下创建 app/config/app.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$config &#x3D; [</span><br><span class="line">    &#39;view_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;view&#39;,</span><br><span class="line">    &#39;view_cache_path&#39; &#x3D;&gt; __DIR__ . &#39;&#x2F;..&#x2F;storage&#x2F;cache&#x2F;view_cache&#39;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">return $config;</span><br></pre></td></tr></table></figure><p>app.php 是博客系统全局的配置文件。</p><h2 id="视图模块-1"><a href="#视图模块-1" class="headerlink" title="视图模块"></a>视图模块</h2><p>接下来在框架的 module 目录创建文件夹 View 用来保存视图相关的功能类。</p><p>创建 Blade 调用 composer 引入的 blade 模板引擎插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2021&#x2F;2&#x2F;13</span><br><span class="line"> * Time：22:06</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\View;</span><br><span class="line"></span><br><span class="line">use Xiaoler\Blade\Compilers\BladeCompiler;</span><br><span class="line">use Xiaoler\Blade\Engines\CompilerEngine;</span><br><span class="line">use Xiaoler\Blade\Engines\EngineResolver;</span><br><span class="line">use Xiaoler\Blade\Factory;</span><br><span class="line">use Xiaoler\Blade\Filesystem;</span><br><span class="line">use Xiaoler\Blade\FileViewFinder;</span><br><span class="line"></span><br><span class="line">class Blade</span><br><span class="line">&#123;</span><br><span class="line">    protected static $viewPath, $cachePath;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置模板文件目录</span><br><span class="line">     * @param $viewPath</span><br><span class="line">     * @param $cachePath</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function setConfig($viewPath, $cachePath)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$viewPath &#x3D; $viewPath;</span><br><span class="line">        self::$cachePath &#x3D; $cachePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取模板引擎返回的html代码</span><br><span class="line">     * @param $blade</span><br><span class="line">     * @param $params</span><br><span class="line">     * @return string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function view($blade, $params)</span><br><span class="line">    &#123;</span><br><span class="line">        $file &#x3D; new Filesystem;</span><br><span class="line">        $compiler &#x3D; new BladeCompiler($file, self::$cachePath);</span><br><span class="line"></span><br><span class="line">        $resolver &#x3D; new EngineResolver;</span><br><span class="line">        $resolver-&gt;register(&#39;blade&#39;, function () use ($compiler) &#123;</span><br><span class="line">            return new CompilerEngine($compiler);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $factory &#x3D; new Factory($resolver, new FileViewFinder($file, [self::$viewPath]));</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            return $factory-&gt;make($blade, $params)-&gt;render();</span><br><span class="line">        &#125; catch (\Throwable $e) &#123;</span><br><span class="line">            return $e-&gt;getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setConfig</code> 方法可以用来设置视图和缓存文件的目录。</p><p>修改 http_server.php，引入上面创建的 app.php 全局配置文件，同时视图模板加载对应的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;config&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;);</span><br><span class="line">\FireRabbitEngine\Module\View\Blade::setConfig($config[&#39;view_path&#39;], $config[&#39;view_cache_path&#39;]);</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>现在这个启动文件看起来乱七八糟的，后面再慢慢优化吧。</p><p>通过上面的配置，已经可以调用 Blade 类来生成视图文件了。</p><h2 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h2><p>在 app/view 下创建 layout，layout 是视图共用的模板，</p><p>比如顶部导航栏，底部 footer 之类的，也就是说 HTML 的母版。</p><p>在 layout 目录下面创建 app.blade.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    @yield(&#39;content&#39;)</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>blade 模板文件的命名规则是：视图名称.blade，当然也可以通过配置取消 blade 后缀</p></blockquote><p>这是一个简单的 HTML 代码，<code>@yield(&#39;content&#39;)</code> 即子页需要编写的内容。</p><blockquote><p>关于 blade 模板的使用方法可以网上自行了解</p></blockquote><p>接着在 app/view 目录下创建首页 index.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@extends(&#39;layout.app&#39;)</span><br><span class="line"></span><br><span class="line">@section(&#39;content&#39;)</span><br><span class="line">    &lt;h1&gt;index 首页&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;这是一个参数：&#123;&#123; $name &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure><p>index 继承了 layout/app.blade.php，只需要编写 ‘content’ 部分即可，</p><p>这里输出了一个 $name 参数，用来测试模板传参。</p><h2 id="调用-blade-模板"><a href="#调用-blade-模板" class="headerlink" title="调用 blade 模板"></a>调用 blade 模板</h2><p>编辑 IndexController 的 index 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line">use FireRabbitEngine\Module\View\Blade;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $html &#x3D; Blade::view(&#39;index&#39;, [&#39;name&#39; &#x3D;&gt; &#39;花花&#39;]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage($html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用视图的方法为：<code>Blade::view(视图文件名, [参数])</code></p><p>视图文件名即去掉 blade 的名字，如：index.blade.php，即 index。</p><p><code>showMessage</code> 方法即调用 swoole 的 response 输出字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function showMessage($message)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;httpKernel-&gt;getResponse()-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">    $this-&gt;httpKernel-&gt;getResponse()-&gt;end($message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后打开浏览器，访问首页，即可看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index 首页</span><br><span class="line">这是一个参数：花花</span><br></pre></td></tr></table></figure><p>这样，框架的视图模块就完成了！</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（八）路由中间件</title>
      <link href="/2021/02/12/my-swoole-framework-8/"/>
      <url>/2021/02/12/my-swoole-framework-8/</url>
      
        <content type="html"><![CDATA[<h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><p>中间件就是一种系统之间互相连接的“中间的一层”。</p><p>通俗的讲类似古代的关口，西游记里唐僧每到一个国家都要取得这个国家的“通关文凭”，如果没有通关文凭就无法离开国界。边关的守卫就可以理解为“中间件”，唐僧就是请求，如果没有通过文凭（即达不到某种要求）就会被拦截在关口。</p><p>也就是说，中间件的主要功能是“拦截不符合规范的请求”。</p><p>它就是一种 <code>if-else</code> 条件判断结构，如果……就……</p><p>比如要设计一个活动页面，只有今天晚上 9：00 到 10：00 这个时间段才会进入活动页，如果还不到 9 点就打开这个页面就会显示“活动还未开始”，如果是 10 点之后打开这个页面，就会显示“活动已结束”。</p><p>要实现这种功能十分简单，直接用 <code>if-else</code> 结构就可以了。</p><p>但是这种思想属于面向过程，在框架里可以将判断条件封装为“中间件”实现自动化处理请求，满足要求的就放过，不满足要求的就拦截下来，返回失败的处理。</p><h2 id="中间件的应用场景"><a href="#中间件的应用场景" class="headerlink" title="中间件的应用场景"></a>中间件的应用场景</h2><p>中间件即拦截不符合规范的请求，因此它能用的场景非常多。</p><p>例如规定了某个时间段开放、关闭的活动页面；</p><p>表单验证、用户登录状态验证等等。</p><p>总之，凡是能用“如果……就……”描述的，几乎都可以用中间件实现，因为它本身即是一种条件判断结构。</p><h2 id="Laravel-中的中间件"><a href="#Laravel-中的中间件" class="headerlink" title="Laravel 中的中间件"></a>Laravel 中的中间件</h2><p>Laravel 中的中间件的使用非常优雅！</p><p>创建一个中间件，用于验证用户是否登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class AuthCheck</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param \Illuminate\Http\Request $request</span><br><span class="line">     * @param \Closure $next</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function handle($request, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断用户是否登录状态，如果已登录则进入下一步</span><br><span class="line">        if (auth()-&gt;check()) &#123;</span><br><span class="line">            return $next($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果未登录则返回提示页面的视图</span><br><span class="line">        $message &#x3D; &#39;用户未登录，无法操作，&lt;a href&#x3D;&quot;#&quot;&gt;前往登录&lt;&#x2F;a&gt;。&#39;;</span><br><span class="line">        return $this-&gt;showErrorPage($message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public functio showErrorPage($message) &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 返回自定义视图页面</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 Kernel.php 中注册中间件，并且命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware &#x3D; [</span><br><span class="line">    &#39;auth.check&#39; &#x3D;&gt; AuthCheck::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>最后只要在路由配置中为需要验证用户身份的路由加上中间件即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;middleware(&#39;auth.check&#39;)-&gt;get(&#39;&#x2F;user&#39;, &#39;UserController@index&#39;)-&gt;name(&#39;user.index&#39;);</span><br></pre></td></tr></table></figure><p>只需如此简单的配置即可实现路由拦截。</p><h2 id="Laravel-中间件的原理"><a href="#Laravel-中间件的原理" class="headerlink" title="Laravel 中间件的原理"></a>Laravel 中间件的原理</h2><p>一个路由可以有很多中间件，只有满足所有中间件才让请求继续下去，否则就终端请求返回错误的结果。</p><p>看起来只需要一个 foreach 循环就能实现中间件了，用伪代码实现思路如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$flag &#x3D; true;</span><br><span class="line"></span><br><span class="line">$conditions &#x3D; [条件1, 条件2, 条件3];</span><br><span class="line"></span><br><span class="line">foreach ($conditions as $condition) &#123;</span><br><span class="line">    if($condition &#x3D;&#x3D; false) &#123;</span><br><span class="line">        $flag &#x3D; false;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($flag &#x3D;&#x3D; true) &#123;</span><br><span class="line">    &#x2F;&#x2F; 成功，进入下一步</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; 失败，返回失败页</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像确实可以，但我出于好奇研究了一下 Laravel 的源码。</p><h3 id="Laravel-源码"><a href="#Laravel-源码" class="headerlink" title="Laravel 源码"></a>Laravel 源码</h3><p>在定义 Middleware 类的时候，我发现 Middleware 不需要继承任何框架的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class AuthCheck</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Handle an incoming request.</span><br><span class="line">     *</span><br><span class="line">     * @param \Illuminate\Http\Request $request</span><br><span class="line">     * @param \Closure $next</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function handle($request, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断用户是否登录状态，如果已登录则进入下一步</span><br><span class="line">        if (auth()-&gt;check()) &#123;</span><br><span class="line">            return $next($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果未登录则返回提示页面的视图</span><br><span class="line">        $message &#x3D; &#39;用户未登录，无法操作，&lt;a href&#x3D;&quot;#&quot;&gt;前往登录&lt;&#x2F;a&gt;。&#39;;</span><br><span class="line">        return $this-&gt;showErrorPage($message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public functio showErrorPage($message) &#123;</span><br><span class="line">        &#x2F;&#x2F; ... 返回自定义视图页面</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是定义一个 handle 方法，一共接收两个参数，</p><p>一个是 Laravel 的 $request，另一个是闭包类型 $next。</p><p>如果请求验证成功，则直接返回闭包执行结果 <code>$next($request)</code>，</p><p>如果请求不符合要求，就自定义一个响应返回。</p><p>看来，玄机并不在 Middleware 的定义里。</p><p>基于 php-fpm 的框架入口文件基本上都是 index.php，</p><p>因此找到 Laravel 的入口文件在 public 目录下面，index.php 的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Laravel - A PHP Framework For Web Artisans</span><br><span class="line"> *</span><br><span class="line"> * @package  Laravel</span><br><span class="line"> * @author   Taylor Otwell &lt;taylor@laravel.com&gt;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">define(&#39;LARAVEL_START&#39;, microtime(true));</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Register The Auto Loader</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Composer provides a convenient, automatically generated class loader for</span><br><span class="line">| our application. We just need to utilize it! We&#39;ll simply require it</span><br><span class="line">| into the script here so that we don&#39;t have to worry about manual</span><br><span class="line">| loading any of our classes later on. It feels great to relax.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">require __DIR__.&#39;&#x2F;..&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Turn On The Lights</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| We need to illuminate PHP development, so let us turn on the lights.</span><br><span class="line">| This bootstraps the framework and gets it ready for use, then it</span><br><span class="line">| will load up this application so that we can run it and send</span><br><span class="line">| the responses back to the browser and delight our users.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$app &#x3D; require_once __DIR__.&#39;&#x2F;..&#x2F;bootstrap&#x2F;app.php&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Run The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Once we have the application, we can handle the incoming request</span><br><span class="line">| through the kernel, and send the associated response back to</span><br><span class="line">| the client&#39;s browser allowing them to enjoy the creative</span><br><span class="line">| and wonderful application we have prepared for them.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$kernel &#x3D; $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response &#x3D; $kernel-&gt;handle(</span><br><span class="line">    $request &#x3D; Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里引入了一个文件，然后得到一个 $app 对象，接着调用 handle 方法执行响应事件，</p><p>然后就没有其他代码了，因此这个引入的 app.php 是关键所在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$app &#x3D; require_once __DIR__.&#39;&#x2F;..&#x2F;bootstrap&#x2F;app.php&#39;;</span><br></pre></td></tr></table></figure><p>找到 app.php 发现如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Create The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| The first thing we will do is create a new Laravel application instance</span><br><span class="line">| which serves as the &quot;glue&quot; for all the components of Laravel, and is</span><br><span class="line">| the IoC container for the system binding all of the various parts.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$app &#x3D; new Illuminate\Foundation\Application(</span><br><span class="line">    $_ENV[&#39;APP_BASE_PATH&#39;] ?? dirname(__DIR__)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Bind Important Interfaces</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Next, we need to bind some important interfaces into the container so</span><br><span class="line">| we will be able to resolve them when needed. The kernels serve the</span><br><span class="line">| incoming requests to this application from both the web and CLI.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Return The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| This script returns the application instance. The instance is given to</span><br><span class="line">| the calling script so we can separate the building of the instances</span><br><span class="line">| from the actual running of the application and sending responses.</span><br><span class="line">|</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">return $app;</span><br></pre></td></tr></table></figure><p>这里是注册服务容器的地方，服务容器 Laravel 实例化类的一种设计模式，</p><p>具体的原理我也没有搞懂，只要知道这是一个“注册和实例化类”的地方就可以了。</p><p>跟 HTTP 请求相关的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>按住 Ctrl 点击 <code>App\Http\Kernel::class</code> 可以跳转到类定义的地方，</p><p>结果发现跳转到中间件配置的地方了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http;</span><br><span class="line"></span><br><span class="line">use Illuminate\Foundation\Http\Kernel as HttpKernel;</span><br><span class="line"></span><br><span class="line">class Kernel extends HttpKernel</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * The application&#39;s global HTTP middleware stack.</span><br><span class="line">     *</span><br><span class="line">     * These middleware are run during every request to your application.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected $middleware &#x3D; [</span><br><span class="line">        &#x2F;&#x2F; \App\Http\Middleware\TrustHosts::class,</span><br><span class="line">        \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">        \Fruitcake\Cors\HandleCors::class,</span><br><span class="line">        \App\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line">        \App\Http\Middleware\TrimStrings::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * The application&#39;s route middleware groups.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected $middlewareGroups &#x3D; [</span><br><span class="line">        &#39;web&#39; &#x3D;&gt; [</span><br><span class="line">            \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line">            \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">            &#x2F;&#x2F; \Illuminate\Session\Middleware\AuthenticateSession::class,</span><br><span class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        &#39;api&#39; &#x3D;&gt; [</span><br><span class="line">&#x2F;&#x2F;            &#39;throttle:60,1&#39;,</span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * The application&#39;s route middleware.</span><br><span class="line">     *</span><br><span class="line">     * These middleware may be assigned to groups or used individually.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected $routeMiddleware &#x3D; [</span><br><span class="line">        &#39;auth&#39; &#x3D;&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">        &#39;auth.basic&#39; &#x3D;&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来离想要找到的结果不远了，这个配置也没什么奇怪的地方，</p><p>接着发现这个类继承了另一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use Illuminate\Foundation\Http\Kernel as HttpKernel;</span><br></pre></td></tr></table></figure><p>于是我们继续前往这个类，发现这个类有很多方法，</p><p>我就直接截取关键部分了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Handle an incoming HTTP request.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  $request</span><br><span class="line"> * @return \Illuminate\Http\Response</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function handle($request)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response &#x3D; $this-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; catch (Throwable $e) &#123;</span><br><span class="line">        $this-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response &#x3D; $this-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;app[&#39;events&#39;]-&gt;dispatch(</span><br><span class="line">        new RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handle 方法？也就是说最开始入口文件执行的便是这个方法了。</p><p>根据注释：Handle an incoming HTTP request</p><p>可以知道这里确实是处理进来请求的地方。</p><p>第一行执行的方法：<code>enableHttpMethodParameterOverride</code>，即 Laravel 重写请求方法的地方，</p><p>在 Laravel 除了 GET 和 POST 之外，还定义了 PUT、DELETE 等方法，</p><p>这里就是判断 <code>_method</code> 变量生成特殊请求方法的地方。</p><p>接着查看 <code>sendRequestThroughRouter</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Send the given request through the middleware &#x2F; router.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  $request</span><br><span class="line"> * @return \Illuminate\Http\Response</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function sendRequestThroughRouter($request)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;app-&gt;instance(&#39;request&#39;, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(&#39;request&#39;);</span><br><span class="line"></span><br><span class="line">    $this-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    return (new Pipeline($this-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码应该就是我想要找的了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return (new Pipeline($this-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                -&gt;then($this-&gt;dispatchToRouter());</span><br></pre></td></tr></table></figure><p>send 方法非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * Set the object being sent through the pipeline.</span><br><span class="line"> *</span><br><span class="line"> * @param  mixed  $passable</span><br><span class="line"> * @return $this</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function send($passable)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;passable &#x3D; $passable;</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并不是处理中间件的逻辑，接着看 through：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Set the array of pipes.</span><br><span class="line"> *</span><br><span class="line"> * @param  array|mixed  $pipes</span><br><span class="line"> * @return $this</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function through($pipes)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;pipes &#x3D; is_array($pipes) ? $pipes : func_get_args();</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不是，最后的 then：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Run the pipeline with a final destination callback.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Closure  $destination</span><br><span class="line"> * @return mixed</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function then(Closure $destination)</span><br><span class="line">&#123;</span><br><span class="line">    $pipeline &#x3D; array_reduce(</span><br><span class="line">        array_reverse($this-&gt;pipes()), $this-&gt;carry(), $this-&gt;prepareDestination($destination)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return $pipeline($this-&gt;passable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也只有短短数行的代码，难道最后也没找到中间件的实现逻辑？</p><p>而且……这个 <code>array_reduce</code> 是什么鬼？</p><p>仔细的研究了一番，发现这里的代码虽然只有 4 行，可真的不简单！</p><p>其中，最关键的部分是这个叫做 carry 的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Get a Closure that represents a slice of the application onion.</span><br><span class="line"> *</span><br><span class="line"> * @return \Closure</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (is_callable($pipe)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; If the pipe is a callable, then we will call it directly, but otherwise we</span><br><span class="line">                    &#x2F;&#x2F; will resolve the pipes out of the dependency container and call it with</span><br><span class="line">                    &#x2F;&#x2F; the appropriate method and arguments, returning the results back out.</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (! is_object($pipe)) &#123;</span><br><span class="line">                    [$name, $parameters] &#x3D; $this-&gt;parsePipeString($pipe);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; If the pipe is a string we will parse the string and resolve the class out</span><br><span class="line">                    &#x2F;&#x2F; of the dependency injection container. We can then build a callable and</span><br><span class="line">                    &#x2F;&#x2F; execute the pipe function giving in the parameters that are required.</span><br><span class="line">                    $pipe &#x3D; $this-&gt;getContainer()-&gt;make($name);</span><br><span class="line"></span><br><span class="line">                    $parameters &#x3D; array_merge([$passable, $stack], $parameters);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    &#x2F;&#x2F; If the pipe is already an object we&#39;ll just make a callable and pass it to</span><br><span class="line">                    &#x2F;&#x2F; the pipe as-is. There is no need to do any extra parsing and formatting</span><br><span class="line">                    &#x2F;&#x2F; since the object we&#39;re given was already a fully instantiated object.</span><br><span class="line">                    $parameters &#x3D; [$passable, $stack];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $carry &#x3D; method_exists($pipe, $this-&gt;method)</span><br><span class="line">                                ? $pipe-&gt;&#123;$this-&gt;method&#125;(...$parameters)</span><br><span class="line">                                : $pipe(...$parameters);</span><br><span class="line"></span><br><span class="line">                return $this-&gt;handleCarry($carry);</span><br><span class="line">            &#125; catch (Throwable $e) &#123;</span><br><span class="line">                return $this-&gt;handleException($passable, $e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="array-reduce"><a href="#array-reduce" class="headerlink" title="array_reduce"></a>array_reduce</h3><p>如果猜的没错，Laravel 应该就是使用 <code>array_reduce</code> 来实现中间件的。</p><p>查了一下 PHP 的官方文档，它对 <code>array_reduce</code> 的描述是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_reduce — 用回调函数迭代地将数组简化为单一的值</span><br></pre></td></tr></table></figure><p>嗯……不愧是官方文档，说了跟没讲一样。</p><p>还是通过实战来了解一下什么是 <code>array_reduce</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">$result &#x3D; array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;carry&#x3D;&#39; . $carry);</span><br><span class="line">    var_dump(&#39;item&#x3D;&#39; . $item);</span><br><span class="line"></span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>声明一个数组 $params 且包含三个字符串，</p><p>然后通过 array_reduce 传入数组参数，同时还有一个闭包，</p><p>闭包接收两个参数 $carry, $item，然后试着打印这两个参数以及最终结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;carry&#x3D;&quot;</span><br><span class="line">string(6) &quot;item&#x3D;a&quot;</span><br><span class="line">string(7) &quot;carry&#x3D;a&quot;</span><br><span class="line">string(6) &quot;item&#x3D;b&quot;</span><br><span class="line">string(8) &quot;carry&#x3D;ab&quot;</span><br><span class="line">string(6) &quot;item&#x3D;c&quot;</span><br><span class="line">string(3) &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>也就是说，一开始 $carry 的值是空的（Null），然后随着循环，</p><p>$carry 会逐渐合并数组的每一个元素。</p><p><code>array_reduce</code> 可以说是如下代码构成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">$result &#x3D; null;</span><br><span class="line"></span><br><span class="line">foreach ($params as $param) &#123;</span><br><span class="line">    $result .&#x3D; $param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>循环遍历数组的每一个元素，然后保持一个不变的值。</p><p>与官方文档的描述对应起来了！<strong>将数组简化为一个单一的值。</strong></p><p>也就是说通过 <code>array_reduce</code> 最终会返回一个值作为处理的结果。</p><p><code>array_reduce</code> 可以接收第三个参数，即初始值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">$result &#x3D; array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;, &#39;init&#39;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>最终会输出：<code>initabc</code></p><p>如果不设置第三个参数，那么初始值就会默认为 Null。</p><p>最开始，我以为会是返回 true 或者 false 来判定中间件的执行结果，</p><p>但是 Laravel 的设计却令人惊叹！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Get a Closure that represents a slice of the application onion.</span><br><span class="line"> *</span><br><span class="line"> * @return \Closure</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (is_callable($pipe)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; If the pipe is a callable, then we will call it directly, but otherwise we</span><br><span class="line">                    &#x2F;&#x2F; will resolve the pipes out of the dependency container and call it with</span><br><span class="line">                    &#x2F;&#x2F; the appropriate method and arguments, returning the results back out.</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (! is_object($pipe)) &#123;</span><br><span class="line">                    [$name, $parameters] &#x3D; $this-&gt;parsePipeString($pipe);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; If the pipe is a string we will parse the string and resolve the class out</span><br><span class="line">                    &#x2F;&#x2F; of the dependency injection container. We can then build a callable and</span><br><span class="line">                    &#x2F;&#x2F; execute the pipe function giving in the parameters that are required.</span><br><span class="line">                    $pipe &#x3D; $this-&gt;getContainer()-&gt;make($name);</span><br><span class="line"></span><br><span class="line">                    $parameters &#x3D; array_merge([$passable, $stack], $parameters);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    &#x2F;&#x2F; If the pipe is already an object we&#39;ll just make a callable and pass it to</span><br><span class="line">                    &#x2F;&#x2F; the pipe as-is. There is no need to do any extra parsing and formatting</span><br><span class="line">                    &#x2F;&#x2F; since the object we&#39;re given was already a fully instantiated object.</span><br><span class="line">                    $parameters &#x3D; [$passable, $stack];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $carry &#x3D; method_exists($pipe, $this-&gt;method)</span><br><span class="line">                                ? $pipe-&gt;&#123;$this-&gt;method&#125;(...$parameters)</span><br><span class="line">                                : $pipe(...$parameters);</span><br><span class="line"></span><br><span class="line">                return $this-&gt;handleCarry($carry);</span><br><span class="line">            &#125; catch (Throwable $e) &#123;</span><br><span class="line">                return $this-&gt;handleException($passable, $e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码十分生涩难懂，简直如同“天书”，</p><p>因此我自己尝试实现相同的逻辑并且让代码变成“说人话”。</p><h3 id="对暗号游戏"><a href="#对暗号游戏" class="headerlink" title="对暗号游戏"></a>对暗号游戏</h3><p>接下来我开始参考着 Laravel 中间件的代码实现一个“对暗号”的“游戏”，</p><p>比如在一个军营里，一共有 A、B、C 三个巡逻队，</p><p>为了避免整个暗号泄露出去，规定每一个巡逻队都只持有暗号的其中一句，</p><p>今晚的暗号是：“上山打老虎”，</p><p>那么三个巡逻队分别得到的暗号是：</p><p>A：上山</p><p>B：打</p><p>C：老虎</p><p>而你半夜出去嘘嘘，刚好被巡逻队给碰上了……</p><p>于是，你必须说出你的口令，否则就会被当做奸细就地正法……</p><p>三只巡逻队可以抽象成“巡逻队”概念，即定义一个 Middleware 作为父类，</p><p>他们都有核对口号的方法 handle，以及自己的密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">abstract class Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword;</span><br><span class="line"></span><br><span class="line">    public function handle($value, Closure $closure)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;暗号：&#39; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 包含指定关键词的口令视为核对成功</span><br><span class="line">        if (strstr($value, $this-&gt;keyword) !&#x3D; false) &#123;</span><br><span class="line">            return $closure($value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &#39;口令核对失败&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建三个巡逻队，继承基类并且拥有独立的口令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Middleware_A extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword &#x3D; &#39;上山&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Middleware_B extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword &#x3D; &#39;打&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Middleware_C extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public $keyword &#x3D; &#39;老虎&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现具体的逻辑，声明一个包含 N 只巡逻队的数组（可以是 0-3 个）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function middlewares()</span><br><span class="line">&#123;</span><br><span class="line">    $params &#x3D; [&#39;Middleware_A&#39;, &#39;Middleware_B&#39;, &#39;Middleware_C&#39;];</span><br><span class="line">    $params &#x3D; array_reverse($params);</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了一个 <code>array_reverse</code> 将数组反转的方法，下文会解释。</p><p>然后实现核对密令的逻辑，比如你遇到巡逻队 A，那就核对巡逻队 A 的密令，</p><p>如果同时遇到两只巡逻队，A+B 或者 A+C 或者 B+C，那就应该核对两个巡逻队的密令，</p><p>如果你非常不幸的同时遇到三只巡逻队，那就要核对 ABC 的密令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            if ($pipe instanceof Closure) &#123;</span><br><span class="line">                return $pipe($passable, $stack);</span><br><span class="line">            &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                $pipe &#x3D; new $pipe;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($destination) &#123;</span><br><span class="line"></span><br><span class="line">        var_dump($destination);</span><br><span class="line"></span><br><span class="line">        return &#39;ok&#39;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$response &#x3D; array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">var_dump($response(&#39;小鸡炖蘑菇&#39;));</span><br><span class="line">var_dump($response(&#39;上山打野鸡&#39;));</span><br><span class="line">var_dump($response(&#39;上山打老虎&#39;));</span><br></pre></td></tr></table></figure><p>上面的代码虽然很短，但是要理解起来非常不易。</p><p><code>array_reduce</code> 可以接收三个参数：</p><p>第一个参数是数组，即要遍历的数组；</p><p>第二个参数是一个方法/闭包（匿名函数），即执行遍历的逻辑；</p><p>第三个参数是初始值。</p><p>初始值是最终想要实现的结果，当满足所有条件后，就会返回初始值函数里的代码。</p><p>而 <code>middlewares</code> 是最开始定义巡逻队的地方，很不幸你同时遇到三只巡逻队：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function middlewares()</span><br><span class="line">&#123;</span><br><span class="line">    $params &#x3D; [&#39;Middleware_A&#39;, &#39;Middleware_B&#39;, &#39;Middleware_C&#39;];</span><br><span class="line">    $params &#x3D; array_reverse($params);</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>array_reverse</code> 这里的反转数组与接下来的堆栈调用有关，</p><p>栈结构是先进后出，会导致乱序，我们希望的结果是按照 A、B、C 的顺序执行。</p><p><code>init</code> 方法定义了最终希望输出的值，如果满足所有条件的话，就返回这个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($destination) &#123;</span><br><span class="line"></span><br><span class="line">        var_dump($destination);</span><br><span class="line"></span><br><span class="line">        return &#39;ok&#39;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>carry</code> 是整个逻辑最关键的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function carry()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($stack, $pipe) &#123;</span><br><span class="line">        return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            if ($pipe instanceof Closure) &#123;</span><br><span class="line">                return $pipe($passable, $stack);</span><br><span class="line">            &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                $pipe &#x3D; new $pipe;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法涉及了闭包的递归调用，<strong>最终的返回结果依然是一个闭包。</strong></p><p>carry 方法传入两个参数 $stack, </p><p>$stack 即遍历过程中持续引用的值，而 $pipe 则是当前元素。</p><p>回忆一下上面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line">$result &#x3D; array_reduce($params, function ($carry, $item) &#123;</span><br><span class="line">    return $carry . $item;</span><br><span class="line">&#125;, &#39;init&#39;);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>应该不难理解，这里就是循环遍历一个数组，依次取值进行计算，最终返回一个结果而已。</p><p>接下来分析代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">return function ($stack, $pipe) &#123;</span><br><span class="line">    return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">        if ($pipe instanceof Closure) &#123;</span><br><span class="line">            return $pipe($passable, $stack);</span><br><span class="line">        &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">            $pipe &#x3D; new $pipe;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>carry 返回一个闭包，同时它内层的代码也是返回一个闭包，并且接收一个 $passable 作为参数。</p><blockquote><p>$passable 的作用就是递归函数中不断传给下一次调用的值</p></blockquote><p>在最内层，是一个条件判断语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe &#x3D; new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return $pipe-&gt;handle($passable, $stack);</span><br></pre></td></tr></table></figure><p>如果传来的值不是 Closure（闭包类型），则判断它是否是一个对象，</p><p>如果不是对象则根据这个元素的名字实例化出对象来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe &#x3D; new $pipe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用实例化对象的 handle 方法，并且把 $passable 和 持续保留的那个值 $stack 传给 handle。</p><p>再看一次执行的逻辑，并且模拟每一次执行的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">return function ($stack, $pipe) &#123;</span><br><span class="line">    return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">        if ($pipe instanceof Closure) &#123;</span><br><span class="line">            return $pipe($passable, $stack);</span><br><span class="line">        &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">            $pipe &#x3D; new $pipe;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; array_reduce 返回的是一个闭包，可以当做函数调用</span><br><span class="line">$response &#x3D; array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 传入一个用来验证的口令</span><br><span class="line">$result &#x3D; $response(&#39;上山打野鸡&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印出验证结果</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>第一次遍历：</p><p>通过 init 方法赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一步：$stack 赋值，init 方法也是一个闭包，接收一个 $destination 参数</span><br><span class="line">&#x2F;&#x2F; $stack 的初始值即 init 方法返回的闭包，所以是：</span><br><span class="line"></span><br><span class="line">$stack &#x3D; function ($destination) &#123;</span><br><span class="line">     var_dump($destination);</span><br><span class="line">     </span><br><span class="line">     return &#39;ok&#39;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接着，取出数组的第一个元素</span><br><span class="line">$pipe &#x3D; &#39;Middleware_A&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二步，进入闭包：function ($passable) use ($stack, $pipe)</span><br><span class="line">&#x2F;&#x2F; 这里的 $passable 就是上面调用时传入的值：“上山打野鸡”</span><br><span class="line">&#x2F;&#x2F; 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe &#x3D; new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 很明显 $pipe 此时只是一个字符串，因此不满足 $pipe instanceof Closure</span><br><span class="line">&#x2F;&#x2F; 于是进入 else 条件 !is_object($pipe) 它并不是一个对象，因此满足此条件</span><br><span class="line">&#x2F;&#x2F; 所以将 $pipe &#x3D; new $pipe; 实例化成对象</span><br><span class="line">&#x2F;&#x2F; 此处的代码即：$pipe &#x3D; new Middleware_A();</span><br><span class="line">&#x2F;&#x2F; 实例化出巡逻队A的对象，然后调用他的 handle 方法并返回</span><br><span class="line"></span><br><span class="line">return $pipe-&gt;handle($passable, $stack);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Middleware_A 继承了父类 Middleware，因此 handle 为：</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;暗号：&#39; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) !&#x3D; false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#39;口令核对失败&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此时 value 的值为：上山打野鸡，巡逻队A的暗号是：上山</span><br><span class="line">&#x2F;&#x2F; 因此巡逻队A验证成功，将这个值传给闭包然后返回</span><br><span class="line"></span><br><span class="line">return $closure($value);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接收到参数的 $closure 就是 $stack，也就是我们最开始定义的 init 方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二次遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此时已经不会经过 init 初始化了，</span><br><span class="line">&#x2F;&#x2F; $stack的值是第一步返回的 return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">&#x2F;&#x2F; 也就是说init方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二次遍历$pipe就会取第二个巡逻队：Middleware_B</span><br><span class="line">&#x2F;&#x2F; 继续进入 function ($passable) use ($stack, $pipe) 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe &#x3D; new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 同样Middleware_B只是一个字符串，因此会被实例化成类</span><br><span class="line">&#x2F;&#x2F; 然后与第一步一样，进行比对暗号，Middleware_B的暗号是：打</span><br><span class="line">&#x2F;&#x2F; 因此：上山打野鸡包含了这个字符，就符合巡逻队B的暗号</span><br><span class="line">&#x2F;&#x2F; 又经过父类的方法：</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;暗号：&#39; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) !&#x3D; false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#39;口令核对失败&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; init 方法继续被传递给下一个执行的对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步，也就是最后的一个巡逻队了，这里产生了一个分歧点，即最后一个暗号不符合要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第三次遍历$pipe就会取第三个巡逻队：Middleware_C</span><br><span class="line">&#x2F;&#x2F; 继续进入 function ($passable) use ($stack, $pipe) 执行判断语句</span><br><span class="line"></span><br><span class="line">if ($pipe instanceof Closure) &#123;</span><br><span class="line">    return $pipe($passable, $stack);</span><br><span class="line">&#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">    $pipe &#x3D; new $pipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一样是实例化的过程，然后分歧点出现了</span><br><span class="line">&#x2F;&#x2F; 第三个巡逻队的暗号是：老虎，而此时给出的却是：上山打野鸡</span><br><span class="line">&#x2F;&#x2F; 不包括“老虎”两个字</span><br><span class="line"></span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;暗号：&#39; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) !&#x3D; false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#39;口令核对失败&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不符合结果就直接返回了一个字符串“口令核对失败”</span><br><span class="line">&#x2F;&#x2F; 这个返回的值会被当做$stack的值</span><br><span class="line">&#x2F;&#x2F; 最后就跟递归函数一样层层返回，将“口令核对失败”作为array_reduce将数组简化的唯一值</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 也就是说，$response(&#39;上山打野鸡&#39;) 最后返回的是“口令核对失败”</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; array_reduce 返回的是一个闭包，可以当做函数调用</span><br><span class="line">$response &#x3D; array_reduce(middlewares(), carry(), init());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 传入一个用来验证的口令</span><br><span class="line">$result &#x3D; $response(&#39;上山打野鸡&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印出验证结果</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>如果是传入正确的口令：上山打老虎呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 巡逻队C核对口令正确，就会继续把参数传给闭包</span><br><span class="line">public function handle($value, Closure $closure)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(&#39;暗号：&#39; . $this-&gt;keyword);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 包含指定关键词的口令视为核对成功</span><br><span class="line">    if (strstr($value, $this-&gt;keyword) !&#x3D; false) &#123;</span><br><span class="line">        return $closure($value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#39;口令核对失败&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此时三个巡逻队已经遍历完了，还记得一直传下来的$stack的值是什么吗？</span><br><span class="line">&#x2F;&#x2F; 答案是：init</span><br><span class="line">&#x2F;&#x2F; 你可以重新返回去查看第一步到第三步，只要是验证口令成功的时候，</span><br><span class="line">&#x2F;&#x2F; init 方法都会被当做下一个闭包传递下去，init 闭包即 $stack 的值</span><br><span class="line">&#x2F;&#x2F; 所以最终返回的 $stack 即 init 方法</span><br></pre></td></tr></table></figure><blockquote><p>注意！上面的 array_reduce 执行完毕后并不是真的执行了代码，而是返回一个层层嵌套的递归函数（闭包），只有在调用的时候才会一层一层的执行，因而最先调用的中间件反而会变成最后执行（栈结构先进后出），所以我们才会在最开始反转数组，以保证执行顺序。</p></blockquote><p>至此，Laravel 中间件验证路由请求的原理也就搞清楚了。</p><p>捋顺之后只剩下久久的深思，一段简单的代码却蕴藏着如此精深的奥妙。</p><p>可是……写完了如此长篇的文章，我的框架的中间件却还没有开始着手……</p><h2 id="为框架添加中间件"><a href="#为框架添加中间件" class="headerlink" title="为框架添加中间件"></a>为框架添加中间件</h2><h3 id="中间件原理"><a href="#中间件原理" class="headerlink" title="中间件原理"></a>中间件原理</h3><p>中间件其实跟路由的原理类似，即创建一个专门保存命名和映射关系的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 键值对数组的键即中间件名称，值即对应的中间件</span><br><span class="line">&#39;auth&#39; &#x3D;&gt; &#39;App\\Middleware\\AuthMiddleware&#39;</span><br></pre></td></tr></table></figure><p>只需要用一个简单的名称字符串即可映射到对应的中间件类。</p><p>由于一个路由可以有很多个中间件，所以路由配置里需要添加一个数组用来存储中间件的名称。</p><h3 id="优化路由模块"><a href="#优化路由模块" class="headerlink" title="优化路由模块"></a>优化路由模块</h3><p>在之前的设计中，Router 的 $routes 设计为静态变量，</p><p>其实只要修改 http_server.php 修改引入方式即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require_once &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>而路由配置文件 web.php 只要返回 $router 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>这样 Router 的 $routes 就不再需要设置为静态变量了。</p><h3 id="路由添加中间件"><a href="#路由添加中间件" class="headerlink" title="路由添加中间件"></a>路由添加中间件</h3><p>在路由配置的时候，期望效果是可以通过如下两种方式配置中间件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line">    &#39;middleware&#39; &#x3D;&gt; [&#39;auth&#39;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;)-&gt;middleware([&#39;auth&#39;]);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>第一种是在分组的时候，配置全组共用的中间件，</p><p>第二种是在单个路由配置的时候，可以自定义该路由的中间件，</p><p>如果使用第二种方法，并且该路由在一个分组里，该路由不仅有分组的中间件，还有自己单独添加的中间件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line">    &#39;middleware&#39; &#x3D;&gt; [&#39;auth&#39;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个路由的中间件为：[auth, other]</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;IndexController@index&#39;)-&gt;middleware([&#39;other&#39;]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个路由的中间件为：[auth]</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;admin&#39;, &#39;IndexController@index&#39;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>上面的 /user 路由额外添加了一个中间件 other，而 /admin 路由不会受到影响。</p><p>中间件的合并顺序为：分组&gt;自定义</p><p>即优先执行分组设置的全局中间件，然后再执行自定义中间件。</p><p>middleware 方法必须放在 get/post/any 方法之后。</p><p>修改 name 方法，让该方法也返回 $this，这样就可以链式调用了。</p><p>然后为 Router 添加 middleware 方法，该方法接收一个数组参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 新增属性(全局中间件)</span><br><span class="line">protected $middlewares &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 路由添加中间件</span><br><span class="line">*</span><br><span class="line">* @param array $middlewares</span><br><span class="line">* @return Router</span><br><span class="line">*&#x2F;</span><br><span class="line">public function middleware(array $middlewares)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;lastHandleRouteIndex &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 合并中间件，优先级为：分组&gt;单个路由自定义配置</span><br><span class="line">    $middlewares &#x3D; array_merge($this-&gt;middlewares, $middlewares);</span><br><span class="line">    &#x2F;&#x2F; 去除重复中间件</span><br><span class="line">    $middlewares &#x3D; array_unique($middlewares);</span><br><span class="line">    &#x2F;&#x2F; 找到最后一个添加的路由</span><br><span class="line">    $route &#x3D; $this-&gt;routes[$this-&gt;lastHandleRouteIndex];</span><br><span class="line">    $route-&gt;middleware &#x3D; $middlewares;</span><br><span class="line"></span><br><span class="line">    $this-&gt;routes[$this-&gt;lastHandleRouteIndex] &#x3D; $route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是分组的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 设置参数</span><br><span class="line">* @param $key</span><br><span class="line">* @param $value</span><br><span class="line">*&#x2F;</span><br><span class="line">protected function createConfig($key, $value)</span><br><span class="line">&#123;</span><br><span class="line">    switch ($key) &#123;</span><br><span class="line">        case &#39;namespace&#39;:</span><br><span class="line">            $this-&gt;namespace &#x3D; $value;</span><br><span class="line">            break;</span><br><span class="line">        case &#39;middleware&#39;:</span><br><span class="line">            $this-&gt;middlewares &#x3D; $value;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分组配置时将中间件加入全局的中间件数组。</p><p>在调用结束的时候，应该把这个数组清空：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 路由分组</span><br><span class="line">* @param $func</span><br><span class="line">*&#x2F;</span><br><span class="line">public function group($func)</span><br><span class="line">&#123;</span><br><span class="line">    $func();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行完成后将参数初始化</span><br><span class="line">    $this-&gt;namespace &#x3D; &#39;&#39;;</span><br><span class="line">    $this-&gt;middlewares &#x3D; [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给路由增加中间件的功能就完成了。</p><p>现在 RouteParams 路由配置对象里已经可以取到 middleware 属性的值了。</p><h3 id="封装请求与响应"><a href="#封装请求与响应" class="headerlink" title="封装请求与响应"></a>封装请求与响应</h3><p>框架的请求和响应是 swoole 的对象，内置的方法无法满足框架的需求，</p><p>因此需要将请求和响应进行封装，在框架的 module 目录新建文件夹 Http，</p><p>Http 模块用于实现 Http 请求相关的处理类，新建两个类：Request 和 Response 用于封装请求和响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"># Request.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Route\RouteParams;</span><br><span class="line"></span><br><span class="line">class Request</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $route;</span><br><span class="line"></span><br><span class="line">    public function __construct($request, $route)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request &#x3D; $request;</span><br><span class="line">        $this-&gt;route &#x3D; $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取路由</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getRoute(): RouteParams</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 判断该请求是否ajax</span><br><span class="line">     * @return bool</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function isAjax()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;XMLHttpRequest&#39; &#x3D;&#x3D; $this-&gt;request-&gt;header[&#39;x-requested-with&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取get参数</span><br><span class="line">     * @param null $key</span><br><span class="line">     * @param null $default</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getQueryParams($key &#x3D; null, $default &#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;get;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return isset($this-&gt;request-&gt;get[$key]) ? $this-&gt;request-&gt;get[$key] : $default;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取post参数</span><br><span class="line">     * @param null $key</span><br><span class="line">     * @param null $default</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getPostParams($key &#x3D; null, $default &#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;post;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return isset($this-&gt;request-&gt;post[$key]) ? $this-&gt;request-&gt;post[$key] : $default;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取请求方法</span><br><span class="line">     * @return string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getRequestMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;server[&#39;request_method&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取请求IP地址</span><br><span class="line">     * @return string | null</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getRequestIP()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;header[&#39;x-real-ip&#39;] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取请求头</span><br><span class="line">     * @param $key</span><br><span class="line">     * @return string | null</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getHeaders($key &#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;header;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;request-&gt;header[$key] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取cookie</span><br><span class="line">     * @param $key</span><br><span class="line">     * @return string | null</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getCookies($key &#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($key &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return $this-&gt;request-&gt;cookie;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;request-&gt;cookie[$key] ?? null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取请求URI</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function getRequestURI()</span><br><span class="line">    &#123;</span><br><span class="line">        return rtrim($this-&gt;request-&gt;server[&#39;request_uri&#39;], &#39;&#x2F;&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Request 请求类实现了一些简单方法的封装，后续如有需求还可以继续扩展。</p><p>接下来创建 Response 响应类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;12&#x2F;21</span><br><span class="line"> * Time：11:31 AM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Response</span><br><span class="line">&#123;</span><br><span class="line">    protected $response;</span><br><span class="line"></span><br><span class="line">    public function __construct($response)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response &#x3D; $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">        $this-&gt;response-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类实现了一个简单的输出消息的方法，后续将会增加输出 view 和 API 类型的响应。</p><p>现在 Request 和 Response 都有了，但是每次都要分别取这两个对象不太方便，</p><p>于是我又定义了一个 Kernel（Http 请求核心类）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $response;</span><br><span class="line"></span><br><span class="line">    public function __construct(Request $request, Response $response)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request &#x3D; $request;</span><br><span class="line">        $this-&gt;response &#x3D; $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request-&gt;getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getHttpRequest()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getHttpResponse()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类可以取到 swoole 的请求和响应，也可以取到框架自定义的请求和响应。</p><p>这样就把请求和响应封装成一个 Http 核心类了。</p><h3 id="中间件类"><a href="#中间件类" class="headerlink" title="中间件类"></a>中间件类</h3><p>Laravel 的中间件不需要继承任何类，完全由用户自定义，</p><p>为了统一规范，我定义了一个中间件的父类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">abstract class Middleware</span><br><span class="line">&#123;</span><br><span class="line">    abstract public function handle(Kernel $kernel, Closure $next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里类只有一个抽象方法 handle，所有的中间件继承这个类实现统一的标准。</p><p>handle 第一个参数即上文封装的 kernel，在中间件里通过 kernel 来获取参数和返回响应。</p><p>再在博客项目的路径下，新建 app/middleware 用来存放中间件 TestMiddlewareA 和 TestMiddlewareB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel;</span><br><span class="line">use FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class TestMiddlewareA extends Middleware</span><br><span class="line">&#123;</span><br><span class="line">    public function handle(Kernel $kernel, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        $request &#x3D; $kernel-&gt;getHttpRequest();</span><br><span class="line"></span><br><span class="line">        if ($request-&gt;getQueryParams(&#39;a&#39;) &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            $kernel-&gt;getHttpResponse()-&gt;showMessage(&#39;aa&#39;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $next($kernel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestMiddlewareB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use FireRabbitEngine\Module\Http\Kernel;</span><br><span class="line">use FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class TestMiddlewareB extends Middleware</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function handle(Kernel $kernel, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        $request &#x3D; $kernel-&gt;getHttpRequest();</span><br><span class="line"></span><br><span class="line">        if ($request-&gt;getQueryParams(&#39;b&#39;) &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            $kernel-&gt;getHttpResponse()-&gt;showMessage(&#39;bb&#39;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $next($kernel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个中间件的逻辑非常简单，就是通过 get 参数来判断是否通过请求，</p><p>这样在测试的时候就很方便了，只要在路径上面修改参数即可看到中间件的效果。</p><blockquote><p>中间件实际上可以不需要 return null，为了美观后面会对此处的代码进行优化。</p></blockquote><h3 id="中间件逻辑"><a href="#中间件逻辑" class="headerlink" title="中间件逻辑"></a>中间件逻辑</h3><p>前文通过 array_reduce 来演示 Laravel 中间件的处理逻辑，</p><p>现在就要把这个逻辑在框架中进行实现，在 Http 文件夹下新建一个 PipeLine 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line"></span><br><span class="line">class Pipeline</span><br><span class="line">&#123;</span><br><span class="line">    protected $pipes, $kernel;</span><br><span class="line"></span><br><span class="line">    public function send(Kernel $kernel)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;kernel &#x3D; $kernel;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function through($pipes)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pipes &#x3D; $pipes;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function then(Closure $destination)</span><br><span class="line">    &#123;</span><br><span class="line">        return array_reduce($this-&gt;pipes, $this-&gt;carry(), $this-&gt;dispatchRouter($destination));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function carry()</span><br><span class="line">    &#123;</span><br><span class="line">        return function ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">            return function ($passable) use ($stack, $pipe) &#123;</span><br><span class="line"></span><br><span class="line">                if ($pipe instanceof Closure) &#123;</span><br><span class="line">                    return $pipe($passable, $stack);</span><br><span class="line">                &#125; elseif (!is_object($pipe)) &#123;</span><br><span class="line">                    $pipe &#x3D; new $pipe;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return $pipe-&gt;handle($passable, $stack);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function dispatchRouter($destination)</span><br><span class="line">    &#123;</span><br><span class="line">        return function ($passable) use ($destination) &#123;</span><br><span class="line">            $destination($passable);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类就是用来处理中间件逻辑的地方，具体逻辑与前文“对口令游戏”一样。</p><p>这个类通过 send 方法接收上面封装好的 Http 核心类 Kernel，</p><p>Kernel 类具有获取请求参数和返回响应的权限，它会被传到中间件里。</p><blockquote><p>中间件要根据请求参数判断是否符合条件，在中间件还可以直接返回响应</p></blockquote><p>中间件的逻辑类也完成了，接下来就要修改 RouteParams 解析路由实例化控制器的地方。</p><p>将原来创建控制器实例的方法抽取出来，封装为 routeResponse：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 执行路由响应</span><br><span class="line">* @return \Closure</span><br><span class="line">*&#x2F;</span><br><span class="line">protected function routeResponse()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($kernel) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 实例化类</span><br><span class="line">        $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">        $controllerObject &#x3D; new $controllerName($kernel);</span><br><span class="line">        $this-&gt;uri &#x3D; rtrim($this-&gt;request-&gt;server[&#39;request_uri&#39;], &#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">        $params &#x3D; $this-&gt;getRouteParams();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 执行方法时，路径参数作为方法的参数</span><br><span class="line">        call_user_func_array([$controllerObject, $this-&gt;action], $params);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回的是一个闭包，也就是说返回值是一个匿名函数。</p><p>接下来修改原来的 createResponse 方法，现在可以直接实例化 PipeLine 来调用中间件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 执行路由</span><br><span class="line">    * @param $request</span><br><span class="line">    * @param $response</span><br><span class="line">    *&#x2F;</span><br><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method !&#x3D; RequestMethod::ANY &amp;&amp; $request-&gt;server[&#39;request_method&#39;] !&#x3D; $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断方法是否存在</span><br><span class="line">    $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action &#x3D; $this-&gt;action;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;request &#x3D; $request;</span><br><span class="line">    $this-&gt;response &#x3D; $response;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试用</span><br><span class="line">    $pipes &#x3D; [&#39;App\\middleware\\TestMiddlewareA&#39;, &#39;App\\middleware\\TestMiddlewareB&#39;];</span><br><span class="line"></span><br><span class="line">    $pipeline &#x3D; new Pipeline();</span><br><span class="line"></span><br><span class="line">    $kernel &#x3D; new Kernel(new Request($request, $this), new Response($response));</span><br><span class="line"></span><br><span class="line">    $routeResponse &#x3D; $pipeline-&gt;send($kernel)</span><br><span class="line">        -&gt;through(array_reverse($pipes))</span><br><span class="line">        -&gt;then($this-&gt;routeResponse());</span><br><span class="line"></span><br><span class="line">    $routeResponse($kernel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pipes &#x3D; [&#39;App\\Middleware\\TestMiddlewareA&#39;, &#39;App\\middleware\\TestMiddlewareB&#39;];</span><br></pre></td></tr></table></figure><p>手动声明了两个中间件，然后访问任意路由就可以看到中间件的效果了。</p><p>测试之后发现中间件正常运行。</p><h3 id="添加映射关系"><a href="#添加映射关系" class="headerlink" title="添加映射关系"></a>添加映射关系</h3><p>框架现在没有中间件名称和类名的映射关系，所以才只能用上面的测试代码来调试。</p><p>接下来创建一个配置中间件映射关系的文件，在博客目录下创建 app/Middleware/Kernel.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Middleware;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 实例化的中间件</span><br><span class="line">     *</span><br><span class="line">     * @var [Middleware]</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $instances;</span><br><span class="line"></span><br><span class="line">    protected static $middlewares &#x3D; [</span><br><span class="line">        &#39;a&#39; &#x3D;&gt; TestMiddlewareA::class,</span><br><span class="line">        &#39;b&#39; &#x3D;&gt; TestMiddlewareB::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public static function getMiddlewareInstance($name)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 从已实例化的对象数组中取</span><br><span class="line">        if(isset(self::$instances[$name])) &#123;</span><br><span class="line">           return self::$instances[$name]; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 未实例化的创建新对象</span><br><span class="line">        $middlewareName &#x3D; self::$middlewares[$name] ?? null;</span><br><span class="line"></span><br><span class="line">        if($middlewareName &#x3D;&#x3D; null) &#123;</span><br><span class="line">            self::$instances[$name] &#x3D; null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self::$instances[$name] &#x3D; new $middlewareName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instances[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我用一个静态变量来保存实例化的中间件，因为中间件的对象是固定的，</p><p>没必要每次调用的时候都重新创建一次，一旦实例化之后就直接放进内存，这样可以提高效率。</p><p>这样就完成整个中间件的功能了。</p><h2 id="测试中间件"><a href="#测试中间件" class="headerlink" title="测试中间件"></a>测试中间件</h2><p>编辑 web.php，添加两个测试路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line">    &#39;middleware&#39; &#x3D;&gt; [&#39;a&#39;]</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个路由的中间件为：[auth, other]</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;IndexController@index&#39;)-&gt;middleware([&#39;b&#39;]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个路由的中间件为：[auth]</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;admin&#39;, &#39;IndexController@index&#39;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">return $router;</span><br></pre></td></tr></table></figure><p>通过访问上述定义的路由，然后修改 a 和 b 参数的值即可看到中间件的拦截功能。</p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><h3 id="中间件配置化"><a href="#中间件配置化" class="headerlink" title="中间件配置化"></a>中间件配置化</h3><p>修改时间：2020-02-13 22:47</p><p>突然发现 PipeLine 方法调用 Kernel 类十分不合理。</p><p>框架的代码不应该依赖项目的代码，因此需要优化。</p><p>在 app/config 目录下创建 middleware.php 用来保存中间件的名称映射关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &#39;a&#39; &#x3D;&gt; App\Middleware\TestMiddlewareA::class,</span><br><span class="line">    &#39;b&#39; &#x3D;&gt; App\Middleware\TestMiddlewareB::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>接着将原本放在 app/Middleware 下面的 Kernel 删掉，</p><p>并且在框架 module/Http 目录新建一个 Middleware 目录，将 Middleware.php 移到这个目录下。</p><p>同时重新创建一个 Kernel 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Http\Middleware;</span><br><span class="line"></span><br><span class="line">class Kernel</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 实例化的中间件</span><br><span class="line">     *</span><br><span class="line">     * @var [Middleware]</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected static $instances;</span><br><span class="line"></span><br><span class="line">    protected static $middlewares &#x3D; [];</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 读取配置文件</span><br><span class="line">     * @param $middlewares</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static function setConfig($middlewares)</span><br><span class="line">    &#123;</span><br><span class="line">        self::$middlewares &#x3D; $middlewares;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getMiddlewareInstance($name)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 从已实例化的对象数组中取</span><br><span class="line">        if (isset(self::$instances[$name])) &#123;</span><br><span class="line">            return self::$instances[$name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 未实例化的创建新对象</span><br><span class="line">        $middlewareName &#x3D; self::$middlewares[$name] ?? null;</span><br><span class="line"></span><br><span class="line">        if ($middlewareName &#x3D;&#x3D; null) &#123;</span><br><span class="line">            self::$instances[$name] &#x3D; null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self::$instances[$name] &#x3D; new $middlewareName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return self::$instances[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件的配置不再直接写在这个类里，而是通过 <code>setConfig</code> 读取配置参数。</p><p>接着在修改文件 http_server.php，加入一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\FireRabbitEngine\Module\Http\Middleware\Kernel::setConfig(require &#39;.&#x2F;app&#x2F;config&#x2F;middleware.php&#39;);</span><br></pre></td></tr></table></figure><p>这样框架和项目之间就不再有直接的依赖关系了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（七）路由动态注入参数</title>
      <link href="/2021/02/11/my-swoole-framework-7/"/>
      <url>/2021/02/11/my-swoole-framework-7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经写到第七章了，竟然还是在写路由 = =</p><p>今天就来实现路由给方法动态传参的功能。</p><p>动态传参就是说路由定义的规则：<code>/article/&#123;id&#125;</code>，会自动注入到 ArticleController 的 show 方法。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个路由</span><br><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#39;, &#39;ArticleController@show&#39;)-&gt;name(&#39;article.show&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 有了上面的路由，用户访问地址：&#x2F;article&#x2F;1 就会自动调用ArticleController的show方法</span><br><span class="line">&#x2F;&#x2F; 在前面Controller定义了一个setRouteParams方法把路由参数传给控制器</span><br><span class="line">&#x2F;&#x2F; 控制器内部就存储了一个一维数组：[1]</span><br><span class="line">&#x2F;&#x2F; 但是这样调用起来很麻烦，尤其是参数比较多的时候容易造成混乱</span><br><span class="line">&#x2F;&#x2F; 最优雅的方式就是Laravel的路由参数自动注入</span><br><span class="line">&#x2F;&#x2F; 只要在ArticleController定义一个show方法，接收一个id参数，而路由参数会自动注入到这个方法</span><br><span class="line"></span><br><span class="line">public function show($id) &#123;</span><br><span class="line">    var_dump($id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果是多个参数的呢？也是一样的。</span><br><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#x2F;edit&#x2F;&#123;classify&#125;&#39;, &#39;ArticleController@test&#39;)-&gt;name(&#39;article.test&#39;);</span><br><span class="line"></span><br><span class="line">public function test($id, $classify) &#123;</span><br><span class="line">    var_dump($id, $classify);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>这里涉及到一个函数动态传参的问题，</p><p>“如何将数组元素的值，依次作为参数传给函数？”</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>PHP 支持函数不定参数，就是用三个点加上参数名即视为可变参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 支持可变参数的函数</span><br><span class="line">function test(...$args) &#123;</span><br><span class="line">    var_dump($args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试传入不同的参数</span><br><span class="line">test(&#39;a&#39;);</span><br><span class="line">test(&#39;a&#39;, &#39;b&#39;);</span><br><span class="line">test(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;b&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(3) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;b&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，在函数中可以将可变参数当成数组来使用，</p><p>那是不是说明我们传一个数组进去，就会被当成多个参数了呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 支持可变参数的函数</span><br><span class="line">function test(...$args) &#123;</span><br><span class="line">    var_dump($args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试传入不同的参数</span><br><span class="line">$params &#x3D; [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;];</span><br><span class="line">test($params);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码，我们传入一个数组，按照设想的情况，</p><p>数组中的三个值应该会作为三个参数传入 test 方法，</p><p>假设的情况是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$params &#x3D; [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 想象中的样子</span><br><span class="line">test($params); &#x3D;&gt; test(&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;);</span><br></pre></td></tr></table></figure><p>但实际的打印结果却是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    string(2) &quot;aa&quot;</span><br><span class="line">    [1]&#x3D;&gt;</span><br><span class="line">    string(2) &quot;bb&quot;</span><br><span class="line">    [2]&#x3D;&gt;</span><br><span class="line">    string(2) &quot;cc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，数组只是被当成了一个参数传给 test 方法，</p><p>其实不难想像，如果数组会被解析成多个参数，</p><p>那可变参数不是不能传入数组作为参数了吗？</p><h3 id="函数的动态调用"><a href="#函数的动态调用" class="headerlink" title="函数的动态调用"></a>函数的动态调用</h3><p>通常情况下，没办法实现将数组依次当做函数的参数。</p><p>而要用到 PHP 内置的一个方法：<code>call_user_func_array</code></p><blockquote><p>注意！有一个类似的方法：call_user_func，不要输错！</p></blockquote><p>这个方法可以动态调用函数，它可以接收两个数组作为参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array([调用对象，方法名称]，[参数1，参数2，参数3...]);</span><br></pre></td></tr></table></figure><p>第一个数组，第一个元素是调用的对象，即类的实例化，第二个参数是一个字符串即要调用对象的方法名称。</p><p>第二个数组即是要依次传入方法的参数。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class  Test</span><br><span class="line">&#123;</span><br><span class="line">    public function show($name)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function playGame($name, $game)</span><br><span class="line">    &#123;</span><br><span class="line">        $text &#x3D; $name . &#39;在玩&#39; . $game;</span><br><span class="line">        var_dump($text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new Test();</span><br><span class="line"></span><br><span class="line">call_user_func_array([$test, &#39;show&#39;], [&#39;小白&#39;]);</span><br><span class="line">call_user_func_array([$test, &#39;playGame&#39;], [&#39;小白&#39;, &#39;俄罗斯方块&#39;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;小白&quot;</span><br><span class="line">string(27) &quot;小白在玩俄罗斯方块&quot;</span><br></pre></td></tr></table></figure><h2 id="RouteParams：动态传参"><a href="#RouteParams：动态传参" class="headerlink" title="RouteParams：动态传参"></a>RouteParams：动态传参</h2><p>动态传参的原理已经弄明白了，接下来只要改造原来的解析方法就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 执行路由</span><br><span class="line"> * @param $request</span><br><span class="line"> * @param $response</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method !&#x3D; RequestMethod::ANY &amp;&amp; $request-&gt;server[&#39;request_method&#39;] !&#x3D; $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断方法是否存在</span><br><span class="line">    $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action &#x3D; $this-&gt;action;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实例化类</span><br><span class="line">    $controllerObject &#x3D; new $controllerName($request, $response, $this-&gt;name);</span><br><span class="line">    $this-&gt;uri &#x3D; rtrim($request-&gt;server[&#39;request_uri&#39;], &#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">    $params &#x3D; $this-&gt;getRouteParams();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ... 以后的中间件写在这里</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行方法时，路径参数作为方法的参数</span><br><span class="line">    call_user_func_array([$controllerObject, $action], $params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取路由参数</span><br><span class="line"> * @return array</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function getRouteParams()</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;uri &#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preg_match_all($this-&gt;pattern, $this-&gt;uri, $result);</span><br><span class="line"></span><br><span class="line">    if (count($result[0]) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $params &#x3D; [];</span><br><span class="line"></span><br><span class="line">    for ($i &#x3D; 1; $i &lt; count($result); $i++) &#123;</span><br><span class="line">        $params[] &#x3D; $result[$i][0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RouteParams 将获取路由参数的方法抽离出来，</p><p>并且移除了 Controller 的 setRouteParams 方法，改用动态注入参数。</p><p>这样路由的参数注入也完成了！</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>编辑 web.php 添加路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#x2F;edit&#x2F;&#123;classify&#125;&#39;, &#39;ArticleController@test&#39;)-&gt;name(&#39;article.test&#39;);</span><br><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#39;, &#39;ArticleController@show&#39;)-&gt;name(&#39;article.show&#39;);</span><br></pre></td></tr></table></figure><p>编辑 ArticleController 添加方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class ArticleController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function show($id)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($id);</span><br><span class="line">        $this-&gt;showMessage(&#39;ok&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test($id, $classify)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($id,$classify);</span><br><span class="line"></span><br><span class="line">        $this-&gt;showMessage(&#39;ok&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果均能正确打印出注入的参数。</p><p>另外，发现到一个新问题就是路由的顺序，由于是使用正则匹配的，只要修改声明路由的顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;article&#x2F;&#123;id&#125;</span><br><span class="line">&#x2F;article&#x2F;&#123;id&#125;&#x2F;edit&#x2F;&#123;classify&#125;</span><br></pre></td></tr></table></figure><p>结果访问：<a href="http://firerabbit-engine.ht/article/1/edit/aa">http://firerabbit-engine.ht/article/1/edit/aa</a></p><p>就会优先匹配到上面的正则，而 id 参数则是：1/edit/aa</p><p>只能人为避免因为书写顺序而产生奇奇怪怪的问题了，在编辑路由的时候优先将匹配规则较多的写在上面就不会弄错了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（六）为路由模块添加命名功能</title>
      <link href="/2021/02/10/my-swoole-framework-6/"/>
      <url>/2021/02/10/my-swoole-framework-6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考 Laravel 的路由，希望我的框架可以跟 Laravel 一样给路由命名，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;home&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;);</span><br></pre></td></tr></table></figure><p>然后提供一个全局函数 <code>route</code> 生成链接。</p><p>比如定义一个路由名 index，路由规则是：“/home”，</p><p>然后通过 <code>route(&#39;index&#39;)</code> 会生成 “/home” 链接。</p><p>其实就是从路由配置表里找到对应名字的路由然后取出路由规则而已。</p><p>对于需要解析路由参数的就不能只是简单的返回字符串了，</p><p>比如显示文章详情：路由命名为：<code>article.show</code>，对应的路由规则：<code>/article/&#123;id&#125;</code>，</p><p>通过全局函数生成文章详情的链接 <code>route(&#39;article.show&#39;, [&#39;id&#39;=&gt;1])</code> 返回：“/article/1”。</p><p>原理与解析路由参数一样，即正则匹配进行替换。</p><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>只要方法返回类本身就可以实现链式调用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    protected $word &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">    public function say($word)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;word .&#x3D; $word . PHP_EOL;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showResult()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new Test();</span><br><span class="line"></span><br><span class="line">$test-&gt;say(&#39;hello&#39;)-&gt;say(&#39;world&#39;)-&gt;showResult();</span><br></pre></td></tr></table></figure><h2 id="Router：添加命名功能"><a href="#Router：添加命名功能" class="headerlink" title="Router：添加命名功能"></a>Router：添加命名功能</h2><p>其实这个地方我有点疑惑，为什么 name 方法是写在最后面，</p><p>get 方法已经将路由参数写入到配置里面了，写在链式调用最后的方法如何修改前面设定的值？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;home&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;);</span><br></pre></td></tr></table></figure><p>结果灵鸡一动！突然想到一种奇妙的方法来实现“后调改前值”，</p><p>就是加入一个 lastIndex，在插入路由配置的时候，计算这个插入值所在数组的索引并保存下来。</p><p>如果要修改最后一个调用的配置，就可以从 lastIndex 获取到了。</p><p>修改 Router 原来生成路由配置的方法，</p><p>为了链式调用必须返回类本身，同时加入 lastIndex 变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 保存最后一个操作的路由对象索引</span><br><span class="line"> * @var null</span><br><span class="line"> *&#x2F;</span><br><span class="line">private $lastHandleRouteIndex &#x3D; null;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个 GET 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function get($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::GET, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个 POST 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function post($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::POST, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个任意请求皆可的路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function any($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;addRoute(RequestMethod::ANY, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 将路由加入配置数组</span><br><span class="line"> * @param $method</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @return Router</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function addRoute($method, $route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $param &#x3D; new RouteParams();</span><br><span class="line"></span><br><span class="line">    $param-&gt;method &#x3D; $method;</span><br><span class="line">    $param-&gt;route &#x3D; $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 格式为：控制器@方法名</span><br><span class="line">    $actions &#x3D; explode(&#39;@&#39;, $controller);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">    if (count($actions) !&#x3D; 2) &#123;</span><br><span class="line">        throw new RouteParamException(&#39;控制器和方法名称错误，应该为：控制器名称@方法名称&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $param-&gt;controller &#x3D; $actions[0];</span><br><span class="line">    $param-&gt;action &#x3D; $actions[1];</span><br><span class="line">    $param-&gt;namespace &#x3D; $this-&gt;namespace;</span><br><span class="line">    $param-&gt;pattern &#x3D; $this-&gt;getPattern($route);</span><br><span class="line"></span><br><span class="line">    self::$routes[] &#x3D; $param;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 新加入行</span><br><span class="line">    $this-&gt;lastHandleRouteIndex &#x3D; count(self::$routes) - 1;</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引一开始是空的，所以赋值为 null，在插入路由配置的时候，</p><p>通过 <code>count(self::$routes) - 1</code> 计算当前新插入值的索引。</p><p>接下来新增一个 name 方法，路由名相当于唯一的 ID，因此不允许重复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 给路由命名</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function name($routeName)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;lastHandleRouteIndex &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断路由是否存在同名</span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line">        if ($route-&gt;name &#x3D;&#x3D; $routeName) &#123;</span><br><span class="line">            throw  new RouteParamException(&#39;路由名称重复[&#39; . $routeName . &#39;]&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route &#x3D; self::$routes[$this-&gt;lastHandleRouteIndex];</span><br><span class="line">    $route-&gt;name &#x3D; $routeName;</span><br><span class="line"></span><br><span class="line">    self::$routes[$this-&gt;lastHandleRouteIndex] &#x3D; $route;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 lastIndex 找到最后一个修改的路由配置，然后给它赋值 name 属性。</p><h3 id="避坑指南：诡异的-null-值"><a href="#避坑指南：诡异的-null-值" class="headerlink" title="避坑指南：诡异的 null 值"></a>避坑指南：诡异的 null 值</h3><blockquote><p>这里有个神坑！</p></blockquote><p><strong>PHP 对 null 值的判定很诡异</strong>。</p><p>在 PHP 中，<code>0 == null</code> 的结果为 true。</p><p>因此必须使用三等号：<code>===</code> 来判定包括类型也必须完全一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($this-&gt;lastHandleRouteIndex &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 if 本来是为了判定是否有路由配置，如果还没配置路由就调用 name 就直接跳过，</p><p>第一次操作时，lastIndex 的索引是 0，如果不使用三等号第一个配置的路由就会被跳过了。</p><blockquote><p>在使用判空操作，如：empty、isset 时必须注意 0、null、false 这几个值</p></blockquote><p>再来个有趣的小测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(0 &#x3D;&#x3D; false);</span><br><span class="line">var_dump(0 &#x3D;&#x3D; null);</span><br><span class="line">var_dump(0 &#x3D;&#x3D; &#39;&#39;);</span><br></pre></td></tr></table></figure><p>以上三个，全部输出：<code>bool(true)</code>，是不是惊到了！</p><p>在某些场合双等号判定会造成失误，应该改用三等号。</p><h2 id="测试路由名称"><a href="#测试路由名称" class="headerlink" title="测试路由名称"></a>测试路由名称</h2><p>编辑 web.php 修改路由配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line"></span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line"></span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;login&#39;, &#39;IndexController@login&#39;)-&gt;name(&#39;login&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;UserController@index&#39;)-&gt;name(&#39;user.index&#39;);</span><br><span class="line">    $router-&gt;post(&#39;&#x2F;user&#x2F;loginSubmit&#39;, &#39;UserController@loginSubmit&#39;)-&gt;name(&#39;login.submit&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#39;, &#39;ArticleController@show&#39;)-&gt;name(&#39;article.show&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 Router 执行 <code>var_dump(self::$routes)</code> 即可看到所有路由，name 字段已经变成设置的值了。</p><h2 id="RouteParams：生成链接"><a href="#RouteParams：生成链接" class="headerlink" title="RouteParams：生成链接"></a>RouteParams：生成链接</h2><p>RouteParams 保存了路由的所有配置，接下来要让它能根据路由规则生成对应的链接。</p><p>PHP 提供了一个正则替换函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$uri &#x3D; &#39;&#x2F;article&#x2F;&#123;id&#125;&#x2F;classify&#x2F;&#123;classify&#125;&#39;;</span><br><span class="line"></span><br><span class="line">$pattern &#x3D; &#39;&#x2F;&#123;id&#125;&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">$res &#x3D; preg_replace($pattern, &#39;123&#39;, $uri);</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>上面的示例代码通过正则替换将自定义规则的 id 替换成数字 123。</p><p>接着，继续看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$uri &#x3D; &#39;&#x2F;article&#x2F;&#123;id&#125;&#x2F;classify&#x2F;&#123;classify&#125;&#39;;</span><br><span class="line"></span><br><span class="line">$patterns &#x3D; [&#39;&#x2F;&#123;id&#125;&#x2F;&#39;, &#39;&#x2F;&#123;classify&#125;&#x2F;&#39;, ];</span><br><span class="line">$replacements &#x3D; [123, 456];</span><br><span class="line"></span><br><span class="line">$res &#x3D; preg_replace($patterns, $replacements, $uri);</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(25) &quot;&#x2F;article&#x2F;123&#x2F;classify&#x2F;456&quot;</span><br></pre></td></tr></table></figure><p>通过传入数组参数即可实现批量替换，输出的字符串即链接地址。</p><p>原理已经搞清楚了，开始实际上手，修改 RouteParams，创建一个空方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个用来生成 query 参数的私有方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * 构建query参数的地址</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $query</span><br><span class="line"> * @return string</span><br><span class="line"> *&#x2F;</span><br><span class="line">private function buildQuery($route, $query)</span><br><span class="line">&#123;</span><br><span class="line">    if (empty($query)) &#123;</span><br><span class="line">        return $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route . &#39;?&#39; . http_build_query($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有参数就直接返回，不然就返回包含 query 参数的路由地址。</p><p>现在可以开始编写 createLink 的方法体了，</p><p>因为斜杠是正则符号，所以首页的路由“/”要单独返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着判断是否包含路由参数，没有参数的也直接返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 取出自定义规则</span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;.*?\&#x2F;(\&#123;.*?\&#125;)&#x2F;&#39;;</span><br><span class="line">    preg_match_all($pattern, $this-&gt;route, $result);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果匹配不到自定义参数则直接返回路由规则</span><br><span class="line">    if (count($result[0]) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我希望实现全局函数 <code>route</code> 传入指定的参数就可以替换掉路由自定义的参数，生成替换了值的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过调用全局函数生成路由</span><br><span class="line">route(&#39;article.show&#39;, [&#39;id&#39; &#x3D;&gt; 1])    &#x3D;&gt; 返回结果：&#x2F;article&#x2F;1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 也就是说，路由规则需要实现如下变换效果</span><br><span class="line">&#x2F;article&#x2F;&#123;id&#125;   &#x3D;&gt; 从 route 函数传入的数组中取出 id 变量，然后再替换掉 &#123;id&#125;</span><br></pre></td></tr></table></figure><p>这一步比较复杂，要先获取到匹配的规则：<code>&#123;id&#125;</code>，以及花括号里面的参数名 <code>id</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取自定义匹配规则</span><br><span class="line">$patterns &#x3D; [];</span><br><span class="line">$paramNames &#x3D; [];</span><br><span class="line"></span><br><span class="line">for ($i &#x3D; 1, $count &#x3D; count($result[1]); $i &lt;&#x3D; $count; $i++) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 此处得到自定义规则的参数，如：&#123;id&#125;</span><br><span class="line">    $rule &#x3D; $result[1][$i - 1];</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 花括号是正则表达式的符号，必须加上反斜杠转转义</span><br><span class="line">     * 最后，在前后加上斜杠才是一个完整的正则表达式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    $patterns[] &#x3D; &#39;&#x2F;&#39; . str_replace([&#39;&#123;&#39;, &#39;&#125;&#39;], [&#39;\&#123;&#39;, &#39;\&#125;&#39;], $rule) . &#39;&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 截取中间的变量名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    $paramNames[] &#x3D; substr($rule, 1, strlen($rule) - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共得到了两个数组，<code>$patterns</code> 是正则替换表达式，而 <code>$paramNames</code> 是自定义路由参数的名字。</p><p>接下来把自定义路由中的 <code>&#123;id&#125;</code> 替换成  <code>$params</code> 传入的变量值，</p><p>因为传入的 <code>$params</code> 是一个关联数组，而 PHP 的正则替换函数是一维数组，</p><p>所以要把 <code>$params</code> 中对应的参数提取出来，</p><p>从 <code>$paramNames</code> 获取到的路径参名称作为键，取 <code>$params</code> 传进来的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 生成要替换的数组结构，根据规则与传入的参数一一对应</span><br><span class="line"> * 假设路由规则是 &#x2F;article&#x2F;&#123;id&#125;</span><br><span class="line"> * 那么$params传入的参数就应该是：[&#39;id&#39;&#x3D;&gt;1]</span><br><span class="line"> *&#x2F;</span><br><span class="line">$replacements &#x3D; [];</span><br><span class="line">foreach ($paramNames as $key) &#123;</span><br><span class="line"></span><br><span class="line">    if (!isset($params[$key])) &#123;</span><br><span class="line">        throw new RouteParamException(&#39;路由缺失参数[&#39; . $key . &#39;]&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $replacements[] &#x3D; $params[$key];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 移除路径参数</span><br><span class="line">    unset($params[$key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的数组不符合规则就抛出一个 <code>RouteParamException</code> 异常（这个异常是之前定义的）。</p><p>生成替换的值后，就可以把这个键从 <code>$params</code> 里面移除了，因为最后我们要生成 query 参数，</p><p>而路径参数已经被使用了，如果不去掉，最后就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;article&#x2F;1?id&#x3D;1</span><br></pre></td></tr></table></figure><p>所以这一步顺便使用 <code>unset</code> 方法把已经用过的数组元素去掉。</p><p>接下来就可以使用正则替换将规则中的 <code>&#123;id&#125;</code> 替换成对应的值了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 然后将替换值根据规则进行置换</span><br><span class="line">$res &#x3D; preg_replace($patterns, $replacements, $this-&gt;route);</span><br></pre></td></tr></table></figure><p>最后再构建 query 参数就大功告成，完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 生成链接</span><br><span class="line"> * @param $params</span><br><span class="line"> * @return string</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function createLink($params)</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;route &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 取出自定义规则</span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;.*?\&#x2F;(\&#123;.*?\&#125;)&#x2F;&#39;;</span><br><span class="line">    preg_match_all($pattern, $this-&gt;route, $result);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果匹配不到自定义参数则直接返回路由规则</span><br><span class="line">    if (count($result) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return $this-&gt;buildQuery($this-&gt;route, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取自定义匹配规则</span><br><span class="line">    $patterns &#x3D; [];</span><br><span class="line">    $paramNames &#x3D; [];</span><br><span class="line"></span><br><span class="line">    for ($i &#x3D; 1, $count &#x3D; count($result[1]); $i &lt;&#x3D; $count; $i++) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 此处得到自定义规则的参数，如：&#123;id&#125;</span><br><span class="line">        $rule &#x3D; $result[1][$i - 1];</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 花括号是正则表达式的符号，必须加上反斜杠转转义</span><br><span class="line">         * 最后，在前后加上斜杠才是一个完整的正则表达式</span><br><span class="line">         *&#x2F;</span><br><span class="line">        $patterns[] &#x3D; &#39;&#x2F;&#39; . str_replace([&#39;&#123;&#39;, &#39;&#125;&#39;], [&#39;\&#123;&#39;, &#39;\&#125;&#39;], $rule) . &#39;&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 截取中间的变量名</span><br><span class="line">         *&#x2F;</span><br><span class="line">        $paramNames[] &#x3D; substr($rule, 1, strlen($rule) - 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 生成要替换的数组结构，根据规则与传入的参数一一对应</span><br><span class="line">     * 假设路由规则是 &#x2F;article&#x2F;&#123;id&#125;</span><br><span class="line">     * 那么$params传入的参数就应该是：[&#39;id&#39;&#x3D;&gt;1]</span><br><span class="line">     *&#x2F;</span><br><span class="line">    $replacements &#x3D; [];</span><br><span class="line">    foreach ($paramNames as $key) &#123;</span><br><span class="line"></span><br><span class="line">        if (!isset($params[$key])) &#123;</span><br><span class="line">            throw new RouteParamException(&#39;路由缺失参数[&#39; . $key . &#39;]&#39;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $replacements[] &#x3D; $params[$key];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 移除路径参数</span><br><span class="line">        unset($params[$key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 然后将替换值根据规则进行置换</span><br><span class="line">    $res &#x3D; preg_replace($patterns, $replacements, $this-&gt;route);</span><br><span class="line"></span><br><span class="line">    return $this-&gt;buildQuery($res, $params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 构建query参数的地址</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $query</span><br><span class="line"> * @return string</span><br><span class="line"> *&#x2F;</span><br><span class="line">private function buildQuery($route, $query)</span><br><span class="line">&#123;</span><br><span class="line">    if (empty($query)) &#123;</span><br><span class="line">        return $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route . &#39;?&#39; . http_build_query($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Router：查找路由名"><a href="#Router：查找路由名" class="headerlink" title="Router：查找路由名"></a>Router：查找路由名</h2><p>路由的名称是唯一的，每一个名称对应一个路由，相当于路由的唯一 ID。</p><p>只要根据这个 ID 就可以找到对应的路由。</p><p>Router 方法应该暴露一个可供外部调用的查找路由名方法，修改 Router 添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 根据路由名称寻找路由</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function findRouteFromName($routeName)</span><br><span class="line">&#123;</span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line">        if ($route-&gt;name &#x3D;&#x3D; $routeName) &#123;</span><br><span class="line">            return $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法倒是很简单，只要循环找到对应名字的路由配置就行了。</p><blockquote><p>查找数组效率最高的方法不是遍历而是通过数组的下标，我考虑过将路由分为已命名路由和未命名路由，未命名路由就是一个普通的索引数组，而已命名路由则是关联数组，键即路由的名字，这样查找路由时优先从已命名路由通过下标查询，如果没有再去遍历未命名路由，但是如果改成这样，Router 匹配路由规则时就要再进行一次数组合并，反而会降低路由解析的性能，因此舍弃了这种想法</p></blockquote><h2 id="route：全局函数"><a href="#route：全局函数" class="headerlink" title="route：全局函数"></a>route：全局函数</h2><p>只要 <code>new</code> 一个 Router 对象就可以调用 <code>findRouteFromName</code> 找到对应的路由，</p><p>然后再调用路由的 <code>createLink</code> 生成路由链接。</p><p>现在缺少一个全局函数：<code>route</code>。</p><p>同样借助 composer 的自动加载功能，修改 composer.jsp，添加加载规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;&#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;app&#x2F;&quot;,</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine&#x2F;module&#x2F;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;files&quot;: [</span><br><span class="line">      &quot;firerabbit-engine&#x2F;common&#x2F;function.php&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 psr-4 下面增加了一个字段 files，而这个文件即框架的通用函数库。</p><p>创建 <code>firerabbit-engine/common/function.php</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据路由名称生成对应路由</span><br><span class="line"> * @param $routeName</span><br><span class="line"> * @param array $params</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> * @throws \FireRabbitEngine\Module\Route\Exception\RouteNotFoundException</span><br><span class="line"> *&#x2F;</span><br><span class="line">function route($routeName, $params &#x3D; [])</span><br><span class="line">&#123;</span><br><span class="line">    $router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">    $route &#x3D; $router-&gt;findRouteFromName($routeName);</span><br><span class="line"></span><br><span class="line">    if ($route &#x3D;&#x3D; null) &#123;</span><br><span class="line">        throw new \FireRabbitEngine\Module\Route\Exception\RouteNotFoundException(&#39;不存在路由[&#39; . $routeName . &#39;]&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $route-&gt;createLink($params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我不使用 <code>function_exists</code> 来判断方法是否存在，即使真的冲突了就直接报错，</p><p>实际上使用了这个方法来判断也没任何意义，重名了就不定义这个函数？</p><p>那连错在哪都不知道，为何要屏蔽可能报错的信息？我是百思不得其解。</p><p>如果遇到重名的函数，在我们执行 <code>php http_server.php</code> 启动程序的时候就会报错了，完全不用担心。</p><p>如果我们引入了第三方的包，其他人也定义了 route 函数那样才会产生麻烦。</p><p>一般的第三方包也不会去定义全局函数，而是封装成类进行调用，</p><p>函数是面向过程开发，也不符合开发包的理念，所以这一点完全不用担心。</p><p>因为我开发的是框架，只有框架才会定义全局函数，我的框架里也不可能引入其他框架。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>三种不同类型的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;login&#39;, &#39;IndexController@login&#39;)-&gt;name(&#39;login&#39;);</span><br><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#39;, &#39;ArticleController@show&#39;)-&gt;name(&#39;article.show&#39;);</span><br><span class="line">$router-&gt;get(&#39;&#x2F;test&#x2F;&#123;id&#125;&#x2F;user&#x2F;&#123;name&#125;&#x2F;goods&#x2F;&#123;qq&#125;&#39;, &#39;TestController@test&#39;)-&gt;name(&#39;test&#39;);</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$link &#x3D; route(&#39;test&#39;, [&#39;id&#39; &#x3D;&gt; 1, &#39;name&#39; &#x3D;&gt; &#39;哈哈怪&#39;, &#39;qq&#39; &#x3D;&gt; &#39;okok&#39;]);</span><br><span class="line">$link2 &#x3D; route(&#39;article.show&#39;, [&#39;id&#39; &#x3D;&gt; 123]);</span><br><span class="line">$link3 &#x3D; route(&#39;login&#39;);</span><br><span class="line"></span><br><span class="line">var_dump($link, $link2, $link3);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(33) &quot;&#x2F;test&#x2F;1&#x2F;user&#x2F;哈哈怪&#x2F;goods&#x2F;okok&quot;</span><br><span class="line">string(12) &quot;&#x2F;article&#x2F;123&quot;</span><br><span class="line">string(6) &quot;&#x2F;login&quot;</span><br></pre></td></tr></table></figure><p>看上去没有问题了！</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（五）为路由模块添加解析路径参数功能</title>
      <link href="/2021/02/09/my-swoole-framework-5/"/>
      <url>/2021/02/09/my-swoole-framework-5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上文已经实现简单路由，但还没办法解析路由参数。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;1</span><br></pre></td></tr></table></figure><p>包含了路径参数，即 article 后面的 1。</p><p>本章将为路由模块添加解析路径参数的功能。</p><p>另外，Query 参数不叫路由参数，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;1?a&#x3D;222</span><br></pre></td></tr></table></figure><p>这里的 a 是 query 参数，不是路径参数。</p><h2 id="匹配原理"><a href="#匹配原理" class="headerlink" title="匹配原理"></a>匹配原理</h2><p>假设路径参数可以有无限多个，在这样无法确定数量情况，</p><p>无法使用一般的 if-else 来获取。</p><p>这个时候就需要用到<strong>正则表达式</strong>了。</p><p>正则表达式可以按照某种规则来匹配特殊的字符串，包括替换字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$url &#x3D; &#39;&#x2F;article&#x2F;123&#39;;</span><br><span class="line">$pattern &#x3D; &#39;&#x2F;article\&#x2F;(\d+)&#x2F;&#39;;</span><br><span class="line">preg_match_all($pattern, $url, $res);</span><br><span class="line"></span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure><p>以上示例输出结果：123</p><p>正则表达式不仅可以匹配特定的规则，而且只要加上括号就可以把匹配规则视为一个变量单独取出来。</p><p>如果不了解正则表达式可以自行搜索，这里不扩展。</p><p>因为我的路由配置参考 Laravel，所以要实现 Laravel 一样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;article&#x2F;&#123;id&#125;</span><br><span class="line">&#x2F;article&#x2F;&#123;id&#125;&#x2F;edit</span><br></pre></td></tr></table></figure><p>用花括号包起来的部分视为变量，即有如下匹配规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;article&#x2F;&#123;id&#125;       &#x3D;&gt;  &#x2F;article&#x2F;1</span><br><span class="line">&#x2F;article&#x2F;&#123;id&#125;&#x2F;edit  &#x3D;&gt;  &#x2F;article&#x2F;1&#x2F;edit</span><br></pre></td></tr></table></figure><p>还要获取路径上面的变量，也就是说 <code>&#123;id&#125;</code> 部分视为一个路径参数。</p><p>既要匹配路由规则，又要获得路径参数，一共需要两步才能实现这样的效果。</p><p>第一步是把 <code>/article/&#123;id&#125;</code> 转化为一个正则表达式，</p><p>第二步是拿上一步得到的正则表达式去匹配 URI。</p><p>路径参数不只是数字，也有可能是别的什么，甚至是中文都可以当做路径参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个正确的 URI</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;我的swoole框架</span><br></pre></td></tr></table></figure><p>只不过你在浏览器输入上面的地址，然后再复制下来，会被 urlencode。</p><p>结果就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;huotublog.com&#x2F;article&#x2F;%E6%88%91%E7%9A%84swoole%E6%A1%86%E6%9E%B6</span><br></pre></td></tr></table></figure><p>所以如果我们只匹配数字是不行的，而是要用全匹配 <code>.</code>。</p><blockquote><p>.（点）在正则表达式里是匹配除了换行之外所有字符串</p></blockquote><p>例如有一个包括两个路径参数的路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$url &#x3D; &#39;&#x2F;article&#x2F;&#123;id&#125;&#x2F;show&#x2F;&#123;classify&#125;&#39;;</span><br><span class="line">$pattern &#x3D; &#39;&#x2F;.*?\&#x2F;(\&#123;.*?\&#125;)&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">preg_match_all($pattern, $url, $result);</span><br><span class="line"></span><br><span class="line">$transform &#x3D; str_replace($result[1], &#39;(.*?)&#39;, $url);</span><br><span class="line"></span><br><span class="line">var_dump($transform);</span><br></pre></td></tr></table></figure><p>这里的规则 <code>.*?</code> 是三个正则表达式符号，意思是说尽可能多的匹配字符串。</p><p>加上括号就可以取出匹配的字符串了，匹配到的结果存入 $result 变量，</p><p>也就是说一共会得到两个值：<code>&#123;id&#125;</code>、<code>&#123;classify&#125;</code></p><p>然后用 PHP 的 <code>str_replace</code> 函数进行简单的替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(25) &quot;&#x2F;article&#x2F;(.*?)&#x2F;show&#x2F;(.*?)&quot;</span><br></pre></td></tr></table></figure><blockquote><p>如果不懂正则表达式，直接套用 (.*?) 即可，既简单又粗暴</p></blockquote><p>替换后的字符串还不是表达式，只是加入了正则表达式符号而已。</p><blockquote><p>就跟 json 字符串不是 json 对象一个道理，还需要转换一下才能变成表达式</p></blockquote><p>斜杠是正则表达式里比较敏感的字符，过滤掉干扰字符串，修改为完整的正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$transform &#x3D; &#39;&#x2F;article&#x2F;(.*?)&#x2F;show&#x2F;(.*?)&#39;</span><br><span class="line">$pattern &#x3D; &#39;&#x2F;&#39; . str_replace(&#39;&#x2F;&#39;, &#39;\&#x2F;&#39;, $transform) . &#39;$&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">var_dump($pattern);</span><br></pre></td></tr></table></figure><blockquote><p>rtrim 去掉右侧的斜杠，防止匹配不到</p></blockquote><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(32) &quot;&#x2F;\&#x2F;article\&#x2F;(.*?)\&#x2F;show\&#x2F;(.*?)$&#x2F;&quot;</span><br></pre></td></tr></table></figure><p>转换得到的正则表达式，用它就可以匹配出路由规则中的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 用户请求的 URI</span><br><span class="line">$requestUri &#x3D; &#39;&#x2F;article&#x2F;123&#x2F;show&#x2F;abc&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过匹配得到参数</span><br><span class="line">preg_match_all(&#39;&#x2F;\&#x2F;article\&#x2F;(.*?)\&#x2F;show\&#x2F;(.*?)$&#x2F;&#39;, $requestUri, $params);</span><br><span class="line"></span><br><span class="line">var_dump($params);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    string(21) &quot;&#x2F;article&#x2F;123&#x2F;show&#x2F;abc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    string(3) &quot;123&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    string(3) &quot;abc&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由参数解析原理已经搞清楚了，接下来就在路由解释器里实现这个功能。</p><h2 id="实现解析路由功能"><a href="#实现解析路由功能" class="headerlink" title="实现解析路由功能"></a>实现解析路由功能</h2><p>有一个特殊的路由，即 <code>/</code>（首页的地址），</p><p>所有的路由都带有 <code>/</code>，导致无法正确匹配，因此这个路由需要单独判断。</p><h3 id="RouteParams：解析参数传给控制器"><a href="#RouteParams：解析参数传给控制器" class="headerlink" title="RouteParams：解析参数传给控制器"></a>RouteParams：解析参数传给控制器</h3><p>RouteParams 增加一个新的变量用来保存替换后的正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 正则表达式匹配规则</span><br><span class="line"> * @var string</span><br><span class="line"> *&#x2F;</span><br><span class="line">public $pattern;</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method !&#x3D; RequestMethod::ANY &amp;&amp; $request-&gt;server[&#39;request_method&#39;] !&#x3D; $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断方法是否存在</span><br><span class="line">    $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action &#x3D; $this-&gt;action;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实例化类</span><br><span class="line">    $controllerObject &#x3D; new $controllerName($request, $response, $this-&gt;name);</span><br><span class="line"></span><br><span class="line">    $uri &#x3D; rtrim($request-&gt;server[&#39;request_uri&#39;], &#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">    if ($uri !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        &#x2F;&#x2F; 匹配路径参数</span><br><span class="line">        preg_match_all($this-&gt;pattern, $uri, $result);</span><br><span class="line"></span><br><span class="line">        if (count($result[0]) !&#x3D; 0) &#123;</span><br><span class="line"></span><br><span class="line">            $params &#x3D; [];</span><br><span class="line"></span><br><span class="line">            for ($i &#x3D; 1; $i &lt; count($result); $i++) &#123;</span><br><span class="line">                $params[] &#x3D; $result[$i][0];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $controllerObject-&gt;setRouteParams($params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ... 以后的中间件写在这里</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行方法</span><br><span class="line">    $controllerObject-&gt;$action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RouteParams 创建出控制器对象的时候解析出路径参数，把路径参数传给控制器。</p><h3 id="Controller：接收路径参数"><a href="#Controller：接收路径参数" class="headerlink" title="Controller：接收路径参数"></a>Controller：接收路径参数</h3><p>控制器还没有 setRouteParams 方法，修改控制器的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Controller;</span><br><span class="line"></span><br><span class="line">class Controller</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $response, $route, $routeParams;</span><br><span class="line"></span><br><span class="line">    public function __construct($request, $response, $route)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request &#x3D; $request;</span><br><span class="line">        $this-&gt;response &#x3D; $response;</span><br><span class="line">        $this-&gt;route &#x3D; $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">        $this-&gt;response-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function setRouteParams($params)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;routeParams &#x3D; $params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来控制器也能够获取到路径参数了。</p><h3 id="Router：赋值匹配规则"><a href="#Router：赋值匹配规则" class="headerlink" title="Router：赋值匹配规则"></a>Router：赋值匹配规则</h3><p>Router 在生成配置的时候，可以同时生成路由的正则匹配规则。</p><p>修改生成路由配置的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 将路由加入配置数组</span><br><span class="line"> * @param $method</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function addRoute($method, $route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $param &#x3D; new RouteParams();</span><br><span class="line"></span><br><span class="line">    $param-&gt;method &#x3D; $method;</span><br><span class="line">    $param-&gt;route &#x3D; $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 格式为：控制器@方法名</span><br><span class="line">    $actions &#x3D; explode(&#39;@&#39;, $controller);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">    if (count($actions) !&#x3D; 2) &#123;</span><br><span class="line">        throw new RouteParamException(&#39;控制器和方法名称错误，应该为：控制器名称@方法名称&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $param-&gt;controller &#x3D; $actions[0];</span><br><span class="line">    $param-&gt;action &#x3D; $actions[1];</span><br><span class="line">    $param-&gt;namespace &#x3D; $this-&gt;namespace;</span><br><span class="line">    $param-&gt;pattern &#x3D; $this-&gt;getPattern($route);</span><br><span class="line"></span><br><span class="line">    self::$routes[] &#x3D; $param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected function getPattern($route)</span><br><span class="line">&#123;</span><br><span class="line">    if ($route &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">        return &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;.*?\&#x2F;(\&#123;.*?\&#125;)&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">    preg_match_all($pattern, $route, $result);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果第一个数组的个数为0，表示没有匹配到路径参数</span><br><span class="line">    if (count($result[0]) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return &#39;&#x2F;&#39; . str_replace(&#39;&#x2F;&#39;, &#39;\&#x2F;&#39;, $route) . &#39;&#x2F;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $transform &#x3D; str_replace($result[1], &#39;(.*?)&#39;, $route);</span><br><span class="line">    $transform &#x3D; &#39;&#x2F;&#39; . str_replace(&#39;&#x2F;&#39;, &#39;\&#x2F;&#39;, $transform) . &#39;$&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">    return $transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getPattern 方法将路由中自定义的规则解析成对应的正则表达式，</p><p>然后赋值给 RouteParams 对象。</p><h3 id="Router：修改匹配规则"><a href="#Router：修改匹配规则" class="headerlink" title="Router：修改匹配规则"></a>Router：修改匹配规则</h3><p>现在已经可以获取到正则表达式了，接下来修改路由匹配规则。</p><p>将之前 Router 直接匹配的方法改成正则匹配，</p><p>PHP 有一个用来测试正则匹配结果的函数：<code>preg_match</code>。</p><p>没有匹配到正则表达式的字符，这个函数会返回 0，以此来判断是否符合路由规则。</p><p>修改 findRoute 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * 寻找路由</span><br><span class="line"> * @param $request</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function findRoute($request)</span><br><span class="line">&#123;</span><br><span class="line">    $uri &#x3D; rtrim($request-&gt;server[&#39;request_uri&#39;], &#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line"></span><br><span class="line">        if (empty($uri)) &#123;</span><br><span class="line"></span><br><span class="line">            if ($route-&gt;route !&#x3D; &#39;&#x2F;&#39;) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return $route;</span><br><span class="line"></span><br><span class="line">        &#125; else if ($route-&gt;pattern !&#x3D; &#39;&#39; &amp;&amp; preg_match($route-&gt;pattern, $uri) !&#x3D; 0) &#123;</span><br><span class="line"></span><br><span class="line">            return $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由解释器的解析功能也改完了，接下来创建一个新的控制器来测试是否能获取到参数。</p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>在 app/controller/Home 创建 ArticleController：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class ArticleController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function show()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;showMessage(json_encode($this-&gt;routeParams));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编辑 web.php 添加一条路由配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;article&#x2F;&#123;id&#125;&#39;, &#39;ArticleController@show&#39;);</span><br></pre></td></tr></table></figure><p>然后访问地址：<a href="http://firerabbit-engine.ht/article/1">http://firerabbit-engine.ht/article/1</a></p><p>可以看到输出了一个数组，且只有一个值：1。</p><h2 id="防止路由冲突"><a href="#防止路由冲突" class="headerlink" title="防止路由冲突"></a>防止路由冲突</h2><p>由于匹配规则具有先后级，就是书写的顺序。</p><p>定义具有歧义的路由时要注意先后顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;user&#x2F;&#123;id&#125;&#39;, &#39;UserController@test&#39;);</span><br><span class="line">$router-&gt;get(&#39;&#x2F;user&#x2F;home&#39;, &#39;UserController@home&#39;);</span><br></pre></td></tr></table></figure><p>上面将 <code>/</code> 后面的参数视为 id 变量，</p><p>所以会匹配到第一个路由，第二个路由就被忽略了。</p><p>在配置路由的时候要注意先后顺序，最好不要定义具有歧义的路由。</p><h2 id="防止路由重名"><a href="#防止路由重名" class="headerlink" title="防止路由重名"></a>防止路由重名</h2><p>在 Laravel 里面可以有相同匹配规则但是请求方法不同的路由，</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(&#39;&#x2F;user&#x2F;home&#39;, &#39;UserController@homeGet&#39;);</span><br><span class="line">$router-&gt;post(&#39;&#x2F;user&#x2F;home&#39;, &#39;UserController@homePost&#39;);</span><br></pre></td></tr></table></figure><p>我设计的路由模块不支持这个功能，不能定义同名路由。</p><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><p>路由解析是框架里面最核心且使用频率最高的一个部分，</p><p>正则表达式的性能可能会比较低。</p><p>有一个优化的方法就是增加路由缓存，将匹配成功的路由记录下来，</p><p>下次访问先检测这条记录是不是在缓存里，如果是的话就不去正则匹配而是直接从缓存取出记录过的路由对象。</p><p>现在还不需要考虑到性能优化，如果到时候真的有问题了再优化也不迟。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（四）路由模块</title>
      <link href="/2021/02/09/my-swoole-framework-4/"/>
      <url>/2021/02/09/my-swoole-framework-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>路由是一个框架最基本的功能，</p><p>虽然没研究过框架的路由是怎么加载的，</p><p>这里就凭直觉和使用 Laravel 的经验来自己写一个。</p><h2 id="REQUEST-URI"><a href="#REQUEST-URI" class="headerlink" title="REQUEST_URI"></a>REQUEST_URI</h2><p>用户请求网页输入的网址叫做 URL，URL 在网上已经被统称为 URI 了，下文也采用 URI 的说法。</p><p>（注意区分：一个是i，一个是l）</p><blockquote><p>其实 URL 跟 URI 有区别，如果你有兴趣可以了解一下这个小知识：URL 是 URI 的子集，URI 是一种抽象的概念，只要是任何可以可以找到某个资源的方法就叫做 URI，它还包括：URN，就是通过资源名字+身份证的方式找资源，但是 URN 几乎没人用，导致 URI 几乎全部是 URL，所以现在把 URL 当做 URI 也没什么问题，实际上它们算是抽象父类和子类的关系</p></blockquote><p>swoole 可以通过 <code>$request-&gt;server[&#39;request_uri&#39;]</code> 获取到请求的资源路径。</p><h2 id="路由模块原理"><a href="#路由模块原理" class="headerlink" title="路由模块原理"></a>路由模块原理</h2><p>用户访问网站的本质就是请求服务器上面的一个文件。</p><p>比如请求一张图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 名称为 1.jpg 的文件</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;img&#x2F;1.jpg</span><br></pre></td></tr></table></figure><p>不仅是图片，js、css 都是文件，包括 php 也是一种文件。</p><p>我们在 nginx 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name firerabbit-engine.ht;</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|jpeg|png|css|js|ico|ttf|woff|woff2|svg|map)$ &#123;</span><br><span class="line">        root &#x2F;www&#x2F;firerabbit-engine&#x2F;public;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;keep-alive&quot;;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        </span><br><span class="line">        if (!-e $request_filename)&#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;php-fpm72:9527; # 注意</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把图片等静态文件全部指向 /www/firerabbit-engine/public 目录。</p><p>如果没有找到文件，就转发给 <code>http://php-fpm72:9527</code> 来处理。</p><p>而监听这个端口的，就是 swoole 程序。</p><p>例如用户访问网页地址为：<a href="http://www.huotublog.com/article/1">http://www.huotublog.com/article/1</a></p><p>这个地址的后缀不符合 nginx 配置的设定，属于“找不到文件”的情况，</p><p>因此 nginx 就会把请求转发给我们设置的 swoole 监听的端口，</p><blockquote><p>nginx 在转发时会将请求的参数、cookie 等也一并转发</p></blockquote><p>swoole 接收到的 URI 即：/article/1</p><p>“/article/1” 只是一个字符串，</p><p>究竟是怎么变成 Controller 里的方法被执行的？</p><p>这就是路由解释器的作用了：<strong>将字符串解析成对应的控制器和方法。</strong></p><h3 id="PHP-实例化方法"><a href="#PHP-实例化方法" class="headerlink" title="PHP 实例化方法"></a>PHP 实例化方法</h3><p>在 PHP 中实例化对象是通过：<code>new 类名</code> 的方法，但是我们这里只能拿到字符串。</p><p>那应该怎么实例化出对象呢？</p><p>下面这样明显是错的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    public function sayHello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;hello&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 想要实例化一个字符串的错误方法</span><br><span class="line">$obj &#x3D; new &#39;IndexController&#39;;</span><br></pre></td></tr></table></figure><p>这里就要用到 PHP 中的一个概念：<strong>可变变量</strong>。</p><p>这里的“可变”不是指变量的类型，而是变量本身就是可变的。</p><p>直接看示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义两个变量</span><br><span class="line">$dog &#x3D; &#39;狗狗&#39;;</span><br><span class="line">$cat &#x3D; &#39;猫猫&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 再定义一个变量，取名为 $dog 变量的名字 </span><br><span class="line">$test &#x3D; &#39;dog&#39;;</span><br><span class="line">&#x2F;&#x2F; 会输出什么？</span><br><span class="line">echo $$test;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接着，改变 $test 的值为 $cat 变量的名字</span><br><span class="line">$test &#x3D; &#39;cat&#39;;</span><br><span class="line">&#x2F;&#x2F; 会输出什么？</span><br><span class="line">echo $$test;</span><br></pre></td></tr></table></figure><p>结果是：狗狗猫猫</p><p>可变变量也就是可以“改变”的变量，我们利用这个特性就可以实例化对象和调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class IndexController</span><br><span class="line">&#123;</span><br><span class="line">    public function sayHello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;hello&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controller &#x3D; &#39;IndexController&#39;;</span><br><span class="line">$obj &#x3D; new $controller;</span><br><span class="line"></span><br><span class="line">$obj-&gt;sayHello();</span><br></pre></td></tr></table></figure><p>可变变量是实现路由的基础。</p><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>最后只需要将 URI 解析成对应的控制器和方法的字符串就可以了，</p><p>至少有三种方法可以实现。</p><h4 id="方法一：Query-参数"><a href="#方法一：Query-参数" class="headerlink" title="方法一：Query 参数"></a>方法一：Query 参数</h4><p>简单的粗暴的 query 参数。</p><p>query 参数就是 GET 方法的查询参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># a 就是 query 参数</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com?a&#x3D;1</span><br></pre></td></tr></table></figure><p>我们可以直接指定请求的控制器和方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># c 是控制器名称，a 是方法，其他的是参数</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com?c&#x3D;article&amp;a&#x3D;show&amp;id&#x3D;1</span><br></pre></td></tr></table></figure><p>上面的例子即请求 ArticleController 的 Show 方法，显示 ID=1 的文章。</p><p>这种方法简单粗暴，并且十分无脑，<strong>最大的问题是太丑了</strong>，所以直接舍弃这个方案。</p><p>好看的路由应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示文章详情</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;1</span><br><span class="line"></span><br><span class="line"># 编辑文章页面</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;edit</span><br><span class="line"></span><br><span class="line"># 文章列表 ，可适当加入 query 参数</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article_list?classify&#x3D;1</span><br></pre></td></tr></table></figure><h4 id="方法二：文件映射"><a href="#方法二：文件映射" class="headerlink" title="方法二：文件映射"></a>方法二：文件映射</h4><p>建立文件映射关系，即路由映射到指定目录下的文件。</p><p>比如有一个路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article&#x2F;show&#x2F;1</span><br></pre></td></tr></table></figure><p>我们拿到 “/article/show/1” 这个字符串，以 “/“ 为分割符，可以得到对应的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$uri &#x3D; &#39;&#x2F;article&#x2F;show&#x2F;1&#39;;</span><br><span class="line"></span><br><span class="line">$route &#x3D; explode(&#39;&#x2F;&#39;, $uri);</span><br></pre></td></tr></table></figure><p>然后将 $route[0] 作为控制器的名字，</p><p>$route[1] 作为方法的名字，</p><p>如果有 $route[2] 则视为路由参数。</p><p>遇到特殊的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 网站首页</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com</span><br><span class="line"></span><br><span class="line"># 列表页</span><br><span class="line">http:&#x2F;&#x2F;www.huotublog.com&#x2F;article_list</span><br></pre></td></tr></table></figure><p>则进行特殊处理，当访问首页时，接收到的字符串是 “/”,</p><p>即 $route[0] 为空，这种情况就默认请求 IndexController，</p><p>如果 $route[1] 是空的（即方法名为空），</p><p>则默认请求 index 这个方法。</p><p>实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$uri &#x3D; &#39;&#x2F;&#39;;</span><br><span class="line"></span><br><span class="line">$route &#x3D; array_filter(explode(&#39;&#x2F;&#39;, $uri));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 控制器名称</span><br><span class="line">$controllerName &#x3D; &#39;Index&#39;;</span><br><span class="line"></span><br><span class="line">if(isset($route[0])) &#123;</span><br><span class="line">    $controllerName &#x3D; ucfirst(strtolower($route[0]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法名称</span><br><span class="line">$method &#x3D; &#39;index&#39;;</span><br><span class="line"></span><br><span class="line">if(isset($route[1])) &#123;</span><br><span class="line">    $method &#x3D; $route[1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 路由参数</span><br><span class="line">$param &#x3D; isset($route[2]) ?? null;</span><br></pre></td></tr></table></figure><p>这样就解决了特殊路由无法匹配的问题，</p><p>这种方法的好处是直接将请求的路由解析成对应的控制器和方法名称，</p><p>但是局限性也比较大，所有的路由都是相同规格的，而且不支持路由命名。</p><p>如果你要生成一个链接就只能写硬编码了。</p><p>最好的方法是给路由命名，然后通过一个函数来生成对应的路由。</p><h4 id="方法三：映射关系表"><a href="#方法三：映射关系表" class="headerlink" title="方法三：映射关系表"></a>方法三：映射关系表</h4><p>配置映射关系表关联数组)，</p><p>键名即路由的名字，值保存了路由的配置，</p><p>这样我们就可以实现路由命名的功能了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$routes &#x3D; [</span><br><span class="line">    &#39;home&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;route&#39; &#x3D;&gt; &#39;&#x2F;&#39;,</span><br><span class="line">        &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\&#39;,</span><br><span class="line">        &#39;controller&#39; &#x3D;&gt; &#39;IndexController&#39;,</span><br><span class="line">        &#39;method&#39; &#x3D;&gt; &#39;index&#39;,</span><br><span class="line">    ],</span><br><span class="line">    &#39;user.home&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;route&#39; &#x3D;&gt; &#39;&#x2F;user&#39;,</span><br><span class="line">        &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\&#39;,</span><br><span class="line">        &#39;controller&#39; &#x3D;&gt; &#39;UserController&#39;,</span><br><span class="line">        &#39;method&#39; &#x3D;&gt; &#39;index&#39;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>其中路由配置里包含了 namespace（命名空间），controller（对应控制器的名称），</p><p>method（控制器方法名称），route 是匹配的路由规则。</p><p>如果我们要引用一个路由地址，例如首页：<code>$routes[&#39;home&#39;][&#39;route&#39;]</code>。</p><p>如果要匹配一个路由，例如请求为：“/”，则可以遍历 $routes，然后匹配 route 字段是否符合要求。</p><p>到这里，思路已经很清晰了，我们现在就可以创建一个 <code>routes.php</code> 路由配置表，</p><p>但是这样属于硬编码，我们不应该直接用一个数组文件来配置路由，</p><p>（这样是面向编程开发了，而框架应该是面向对象开发。）</p><p>接下来开始封装类，通过类来执行路由的初始化。</p><h2 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h2><p>在框架 module 目录下，创建 Route 文件夹，作为路由模块相关代码存放点。</p><h3 id="Router：路由解释器"><a href="#Router：路由解释器" class="headerlink" title="Router：路由解释器"></a>Router：路由解释器</h3><p>接着创建类文件 <code>Router</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- app</span><br><span class="line">|   &#96;-- public</span><br><span class="line">|-- composer.json</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">|       &#96;-- Route</span><br><span class="line">|           &#96;-- Router.php</span><br><span class="line">|-- http_server.php</span><br><span class="line">&#96;-- vendor</span><br></pre></td></tr></table></figure><p>给 Router 加上命名空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">class Router</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Laravel 的路由配置是比较优雅的，</p><p>我打算直接参考 Laravel 路由的调用方法再自己实现一个。</p><p>Laravel 的路由配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;&#39;, &#39;IndexController@index&#39;)-&gt;name(&#39;index&#39;);</span><br></pre></td></tr></table></figure><p>简单地说就是在 Route 类里面以数组存储路由配置，也就是上面的数组格式，</p><p>然后通过调用方法将路由规则写入到数组里面。</p><h3 id="RequestMethod：请求方法常量"><a href="#RequestMethod：请求方法常量" class="headerlink" title="RequestMethod：请求方法常量"></a>RequestMethod：请求方法常量</h3><p>我们知道请求方法主要有 GET、POST，</p><p>请求方法也是路由的一部分，可以通过限制请求方法来阻止一些不符合规范的请求。</p><p>创建一个专门用来保存常量的类 <code>/module/Route/RequestMethod.php</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">class RequestMethod</span><br><span class="line">&#123;</span><br><span class="line">    const GET &#x3D; &#39;GET&#39;;</span><br><span class="line">    const POST &#x3D; &#39;POST&#39;;</span><br><span class="line">    const ANY &#x3D; &#39;ANY&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，any 意思是两种方法都允许。</p><h3 id="RouteParams：路由对象"><a href="#RouteParams：路由对象" class="headerlink" title="RouteParams：路由对象"></a>RouteParams：路由对象</h3><p>每个路由配置都当成一个对象来处理，因此同样封装一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：12:48 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">class RouteParams</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 路由名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $name;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 路由匹配规则</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 命名空间</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $namespace;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 控制器名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $controller;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 调用的控制器方法名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $action;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $method;</span><br><span class="line">    </span><br><span class="line">    public function createResponse($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 待实现</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function getFullControllerName()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;namespace . $this-&gt;controller;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类里的 createResponse 方法暂时放空，待会实现。</p><h3 id="Controller：控制器"><a href="#Controller：控制器" class="headerlink" title="Controller：控制器"></a>Controller：控制器</h3><p>现在还没有控制器，因此在 module 文件夹里面创建一个 Controller，</p><p>并创建一个 Controller 基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm</span><br><span class="line"> * Author：FireRabbit</span><br><span class="line"> * Date：2&#x2F;9&#x2F;21</span><br><span class="line"> * Time：1:16 PM</span><br><span class="line"> **&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Controller</span><br><span class="line">&#123;</span><br><span class="line">    protected $request, $response;</span><br><span class="line"></span><br><span class="line">    protected $route;</span><br><span class="line"></span><br><span class="line">    public function __construct($request, $response, $route)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request &#x3D; $request;</span><br><span class="line">        $this-&gt;response &#x3D; $response;</span><br><span class="line">        $this-&gt;route &#x3D; $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function showMessage($message)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">        $this-&gt;response-&gt;end($message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后博客的控制器全部继承框架的基类，目前里面只有一个简单的显示消息的方法。</p><p>然后为了测试路由，在 app/controller 下面创建两个控制器：IndexController 和 UserController：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class IndexController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;showMessage(&#39;网站首页&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function login()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;showMessage(&#39;登录页面&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\controller\Home;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Controller\Controller;</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;showMessage(&#39;用户中心&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function loginSubmit()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;showMessage(&#39;注册成功！&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前的文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">|-- app</span><br><span class="line">|   |-- controller</span><br><span class="line">|      &#96;-- Home</span><br><span class="line">|          |--- IndexController.php</span><br><span class="line">|          &#96;--- UserController.php</span><br><span class="line">|-- composer.json</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">|       |-- Controller</span><br><span class="line">|       |   &#96;-- Controller.php</span><br><span class="line">|       &#96;-- Route</span><br><span class="line">|           |-- RouteParams.php</span><br><span class="line">|           &#96;-- Router.php</span><br><span class="line">&#96;-- http_server.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Router：生成路由配置"><a href="#Router：生成路由配置" class="headerlink" title="Router：生成路由配置"></a>Router：生成路由配置</h3><p>接下来实现路由解释器的配置功能，编辑 Router.php，添加方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 保存路由配置的数组</span><br><span class="line">protected static $routes &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个 GET 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function get($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;addRoute(RequestMethod::GET, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个 POST 请求路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function post($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;addRoute(RequestMethod::POST, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 定义一个任意请求皆可的路由</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function any($route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;addRoute(RequestMethod::ANY, $route, $controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 将路由加入配置数组</span><br><span class="line"> * @param $method</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function addRoute($method, $route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $param &#x3D; new RouteParams();</span><br><span class="line"></span><br><span class="line">    $param-&gt;method &#x3D; $method;</span><br><span class="line">    $param-&gt;route &#x3D; $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 格式为：控制器@方法名</span><br><span class="line">    $actions &#x3D; explode(&#39;@&#39;, $controller);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">    if (count($actions) !&#x3D; 2) &#123;</span><br><span class="line">        throw new RouteParamException(&#39;控制器和方法名称错误，应该为：控制器名称@方法名称&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $param-&gt;controller &#x3D; $actions[0];</span><br><span class="line">    $param-&gt;action &#x3D; $actions[1];</span><br><span class="line"></span><br><span class="line">    self::$routes[] &#x3D; $param;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义了 get、post、any 方法实现路由配置，</p><p>控制器和方法的格式就模仿 Laravel，如：<code>IndexController@index</code>，</p><p>就是请求 IndexController 控制器的 index 方法。</p><h3 id="RouteParamException：自定义异常"><a href="#RouteParamException：自定义异常" class="headerlink" title="RouteParamException：自定义异常"></a>RouteParamException：自定义异常</h3><p>这里我还抛出了一个自定义异常，因此需要在 module/Route 下再创建一个 Exception 文件夹用来保存自定义异常类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route\Exception;</span><br><span class="line"></span><br><span class="line">use Exception;</span><br><span class="line"></span><br><span class="line">class RouteParamException extends Exception</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常类只要有一个壳就好了。</p><h3 id="web-php：路由配置文件"><a href="#web-php：路由配置文件" class="headerlink" title="web.php：路由配置文件"></a>web.php：路由配置文件</h3><p>现在路由添加参数的功能也做好了，接下来就要一个用来配置路由的文件。</p><p>在 app 目录下新建一个 route 文件夹，再创建一个 web.php 用来保存页面路由。</p><blockquote><p>以后还可以创建 api.php 用来实现接口路由</p></blockquote><p>web.php 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line">$router-&gt;get(&#39;&#x2F;&#39;, &#39;App\\Controller\\Home\\IndexController@index&#39;);</span><br></pre></td></tr></table></figure><p>这样显然很不美观，命名空间应该被提取出来。</p><h3 id="Router：增加分组功能"><a href="#Router：增加分组功能" class="headerlink" title="Router：增加分组功能"></a>Router：增加分组功能</h3><p>重新编辑 Router.php，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 分组命名空间</span><br><span class="line">protected $namespace &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 设置配置参数外部调用方法</span><br><span class="line"> * @param $configs</span><br><span class="line"> * @return $this</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function setConfig($configs)</span><br><span class="line">&#123;</span><br><span class="line">    foreach ($configs as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">        $this-&gt;createConfig($key, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 设置参数</span><br><span class="line"> * @param $key</span><br><span class="line"> * @param $value</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function createConfig($key, $value)</span><br><span class="line">&#123;</span><br><span class="line">    switch ($key) &#123;</span><br><span class="line">        case &#39;namespace&#39;:</span><br><span class="line">            $this-&gt;namespace &#x3D; $value;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 路由分组</span><br><span class="line"> * @param $func</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function group($func)</span><br><span class="line">&#123;</span><br><span class="line">    $func();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行完成后将参数初始化</span><br><span class="line">    $this-&gt;namespace &#x3D; &#39;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 将路由加入配置数组</span><br><span class="line"> * @param $method</span><br><span class="line"> * @param $route</span><br><span class="line"> * @param $controller</span><br><span class="line"> * @throws RouteParamException</span><br><span class="line"> *&#x2F;</span><br><span class="line">protected function addRoute($method, $route, $controller)</span><br><span class="line">&#123;</span><br><span class="line">    $param &#x3D; new RouteParams();</span><br><span class="line"></span><br><span class="line">    $param-&gt;method &#x3D; $method;</span><br><span class="line">    $param-&gt;route &#x3D; $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 格式为：控制器@方法名</span><br><span class="line">    $actions &#x3D; explode(&#39;@&#39;, $controller);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">    if (count($actions) !&#x3D; 2) &#123;</span><br><span class="line">        throw new RouteParamException(&#39;控制器和方法名称错误，应该为：控制器名称@方法名称&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $param-&gt;controller &#x3D; $actions[0];</span><br><span class="line">    $param-&gt;action &#x3D; $actions[1];</span><br><span class="line">    </span><br><span class="line">    $param-&gt;namespace &#x3D; $this-&gt;namespace; &#x2F;&#x2F; 将命名空间赋值给路由对象</span><br><span class="line"></span><br><span class="line">    self::$routes[] &#x3D; $param;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加了一个 group 分组方法，现在就可以把路由按照分组进行配置了，</p><p>createConfig 方法以后可以支持更多的分组配置参数。</p><p>重新编辑 web.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;&#39;, &#39;IndexController@index&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;login&#39;, &#39;IndexController@login&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;UserController@index&#39;);</span><br><span class="line">    $router-&gt;post(&#39;&#x2F;user&#x2F;loginSubmit&#39;, &#39;UserController@loginSubmit&#39;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来好多了，配置文件也弄好了。</p><h3 id="RouteParams：执行路由"><a href="#RouteParams：执行路由" class="headerlink" title="RouteParams：执行路由"></a>RouteParams：执行路由</h3><p>Router 里只负责解析路由和生成路由配置，执行路由不应该在 Router，</p><p>上面定义了 RouteParams 类（路由对象），这个类才是实际的执行者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public function createResponse($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 判断请求方法是否正确</span><br><span class="line">    if ($this-&gt;method !&#x3D; RequestMethod::ANY &amp;&amp; $request-&gt;server[&#39;request_method&#39;] !&#x3D; $this-&gt;method) &#123;</span><br><span class="line">        (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 判断方法是否存在</span><br><span class="line">    $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">    if (!class_exists($controllerName)) &#123;</span><br><span class="line">        (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $action &#x3D; $this-&gt;action;</span><br><span class="line">    &#x2F;&#x2F; 不存在方法则返回404</span><br><span class="line">    if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">        (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实例化类</span><br><span class="line">    $controllerObject &#x3D; new $controllerName($request, $response, $this-&gt;name);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ... 以后的中间件写在这里</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行方法</span><br><span class="line">    $controllerObject-&gt;$action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照面向对象的编程思想，RouteParams 类即一个实际的路由，这个类暴露 createResponse （创建响应）方法供外部调用。</p><h3 id="RouteResponse：路由响应"><a href="#RouteResponse：路由响应" class="headerlink" title="RouteResponse：路由响应"></a>RouteResponse：路由响应</h3><p>这个类里还有一些返回响应的方法，比如找不到方法或者类文件，</p><p>因此需要创建一个 module/Route/Response 文件夹用来保存响应相关的类。</p><p>创建一个响应类的基类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route\Response;</span><br><span class="line"></span><br><span class="line">abstract class RouteResponse</span><br><span class="line">&#123;</span><br><span class="line">    public abstract function response($request, $response, $route);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再创建几个继承该类的响应，例如 NotFoundResponse 响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route\Response;</span><br><span class="line"></span><br><span class="line">class NotFoundResponse extends RouteResponse</span><br><span class="line">&#123;</span><br><span class="line">    public function response($request, $response, $route)</span><br><span class="line">    &#123;</span><br><span class="line">        $response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">        $response-&gt;end(&#39;不存在页面，404&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他的响应类都一样，这里是临时用的，以后要让用户可以自定义错误页面。</p><h3 id="Router：解析路由"><a href="#Router：解析路由" class="headerlink" title="Router：解析路由"></a>Router：解析路由</h3><p>路由的执行方法也弄好了，但是现在还没办法匹配路由，</p><p>Router 做的事情是匹配用户的请求，判断是否在 $routes 的配置里，</p><p>如果找到对应的配置就去执行路由，现在还缺少匹配路由的方法。</p><p>回到 Router.php 新增一个解析路由的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 处理路由</span><br><span class="line"> * @param $request</span><br><span class="line"> * @param $response</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function handle($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    $uri &#x3D; $request-&gt;server[&#39;request_uri&#39;];</span><br><span class="line">    $route &#x3D; $this-&gt;findRoute($uri);</span><br><span class="line"></span><br><span class="line">    if ($route &#x3D;&#x3D; null) &#123;</span><br><span class="line">        (new NotFoundResponse)-&gt;response($request, $response, $route);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $route-&gt;createResponse($request, $response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 寻找路由</span><br><span class="line"> * @param $uri</span><br><span class="line"> * @return mixed|null</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function findRoute($request)</span><br><span class="line">&#123;</span><br><span class="line">    $uri &#x3D; $request-&gt;server[&#39;request_uri&#39;];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 查找规则和方法都匹配的路由</span><br><span class="line">    foreach (self::$routes as $route) &#123;</span><br><span class="line">        if ($route-&gt;route &#x3D;&#x3D; $uri) &#123;</span><br><span class="line">            return $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 findRoute 即路由解释器的核心功能，通过循环逐一与配置文件进行匹配，</p><p>如果符合要求就返回路由对象，然后执行路由。</p><p>现在先简单的实现，如果一个请求路径完全匹配 route 字段即认为匹配。</p><h3 id="引入路由配置"><a href="#引入路由配置" class="headerlink" title="引入路由配置"></a>引入路由配置</h3><p>路由解析功能也完成了，但是路由配置文件 web.php 还没引入，</p><p>配置文件应该是在程序启动时就加载到内存中的，直接用 require 引入就可以了，</p><p>我把 $routes 定义成静态变量了，它的作用范围是全局的。</p><p>编辑根目录下面的 http_server.php，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line">require &#39;.&#x2F;app&#x2F;route&#x2F;web.php&#39;;</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    var_dump(&#39;请求URI：&#39; . $request-&gt;server[&#39;request_uri&#39;]);</span><br><span class="line"></span><br><span class="line">    $router-&gt;handle($request, $response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加入 var_dump 方便调试，每次刷新网页的时候都可以在终端看到输出结果，</p><p>实际上线的时候要删掉这一句。</p><p>这里通过 require 引入 web.php，然后在 <code>$http-&gt;on</code> 里调用解释器解析路由。</p><p>路由模块仅仅只是暴露一个简单的 handle 方法：<code>$router-&gt;handle($request, $response)</code></p><p>代码十分整洁干净，符合自己的预期要求。</p><p>到这一步已经完成了，但还有一个地方要做！</p><h3 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h3><p>最开始创建的 Controller 并没有被加入 psr-4 自动加载配置里，</p><p>编辑根目录下面的 composer.json，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;&#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;app&#x2F;&quot;,</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine&#x2F;module&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增 App 自动加载路径，这样以后我们创建的控制器或者模型都会被自动加载了。</p><p>由于修改了配置，因此需要执行 <code>composer dump-autoload</code> 重新生成自动加载文件。</p><blockquote><p>每次新创建用来保存类的文件夹时都要重新加载一下</p></blockquote><p>然后就可以打开浏览器，测试路由功能了！</p><p>最终文件目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">|-- app</span><br><span class="line">|   |-- config</span><br><span class="line">|   |-- controller</span><br><span class="line">|   |   &#96;-- Home</span><br><span class="line">|   |       |-- IndexController.php</span><br><span class="line">|   |       &#96;-- UserController.php</span><br><span class="line">|   |-- public</span><br><span class="line">|   &#96;-- route</span><br><span class="line">|       &#96;-- web.php</span><br><span class="line">|-- composer.json</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">|       |-- Controller</span><br><span class="line">|       |   &#96;-- Controller.php</span><br><span class="line">|       &#96;-- Route</span><br><span class="line">|           |-- Exception</span><br><span class="line">|           |   &#96;-- RouteParamException.php</span><br><span class="line">|           |-- RequestMethod.php</span><br><span class="line">|           |-- Response</span><br><span class="line">|           |   |-- ActionNotFoundResponse.php</span><br><span class="line">|           |   |-- ClassNotFoundResponse.php</span><br><span class="line">|           |   |-- MethodErrorResponse.php</span><br><span class="line">|           |   |-- NotFoundResponse.php</span><br><span class="line">|           |   &#96;-- RouteResponse.php</span><br><span class="line">|           |-- RouteParams.php</span><br><span class="line">|           &#96;-- Router.php</span><br><span class="line">|-- http_server.php</span><br><span class="line">|-- test.php</span><br><span class="line">&#96;-- vendor</span><br><span class="line">    |-- autoload.php</span><br><span class="line">    &#96;-- composer</span><br><span class="line">        |-- ClassLoader.php</span><br><span class="line">        |-- LICENSE</span><br><span class="line">        |-- autoload_classmap.php</span><br><span class="line">        |-- autoload_namespaces.php</span><br><span class="line">        |-- autoload_psr4.php</span><br><span class="line">        |-- autoload_real.php</span><br><span class="line">        |-- autoload_static.php</span><br><span class="line">        &#96;-- installed.json</span><br></pre></td></tr></table></figure><p>简单的路由功能这样就算完成了，但是现在还没办法实现路径参数，下文再补充。</p><blockquote><p>每次修改代码都记得要 Ctrl+C 结束 swoole 进程再重新启动，不然修改不会生效。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后是贴上完整的代码：</p><p>Router.php 文件是作为“解析/分发”和“配置”路由的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Route\Exception\RouteParamException;</span><br><span class="line">use FireRabbitEngine\Module\Route\Response\NotFoundResponse;</span><br><span class="line"></span><br><span class="line">class Router</span><br><span class="line">&#123;</span><br><span class="line">    protected static $routes &#x3D; [];</span><br><span class="line"></span><br><span class="line">    protected $namespace &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 处理路由</span><br><span class="line">     * @param $request</span><br><span class="line">     * @param $response</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function handle($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        $uri &#x3D; $request-&gt;server[&#39;request_uri&#39;];</span><br><span class="line">        $route &#x3D; $this-&gt;findRoute($uri);</span><br><span class="line"></span><br><span class="line">        if ($route &#x3D;&#x3D; null) &#123;</span><br><span class="line">            (new NotFoundResponse)-&gt;response($request, $response, $route);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $route-&gt;createResponse($request, $response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 寻找路由</span><br><span class="line">     * @param $uri</span><br><span class="line">     * @return mixed|null</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function findRoute($request)</span><br><span class="line">    &#123;</span><br><span class="line">        $uri &#x3D; $request-&gt;server[&#39;request_uri&#39;];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 查找规则和方法都匹配的路由</span><br><span class="line">        foreach (self::$routes as $route) &#123;</span><br><span class="line">            if ($route-&gt;route &#x3D;&#x3D; $uri) &#123;</span><br><span class="line">                return $route;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 定义一个 GET 请求路由</span><br><span class="line">     * @param $route</span><br><span class="line">     * @param $controller</span><br><span class="line">     * @throws RouteParamException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function get($route, $controller)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;addRoute(RequestMethod::GET, $route, $controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 定义一个 POST 请求路由</span><br><span class="line">     * @param $route</span><br><span class="line">     * @param $controller</span><br><span class="line">     * @throws RouteParamException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function post($route, $controller)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;addRoute(RequestMethod::POST, $route, $controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 定义一个任意请求皆可的路由</span><br><span class="line">     * @param $route</span><br><span class="line">     * @param $controller</span><br><span class="line">     * @throws RouteParamException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function any($route, $controller)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;addRoute(RequestMethod::ANY, $route, $controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置配置参数外部调用方法</span><br><span class="line">     * @param $configs</span><br><span class="line">     * @return $this</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function setConfig($configs)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($configs as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">            $this-&gt;createConfig($key, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置参数</span><br><span class="line">     * @param $key</span><br><span class="line">     * @param $value</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function createConfig($key, $value)</span><br><span class="line">    &#123;</span><br><span class="line">        switch ($key) &#123;</span><br><span class="line">            case &#39;namespace&#39;:</span><br><span class="line">                $this-&gt;namespace &#x3D; $value;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 路由分组</span><br><span class="line">     * @param $func</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function group($func)</span><br><span class="line">    &#123;</span><br><span class="line">        $func();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 执行完成后将参数初始化</span><br><span class="line">        $this-&gt;namespace &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将路由加入配置数组</span><br><span class="line">     * @param $method</span><br><span class="line">     * @param $route</span><br><span class="line">     * @param $controller</span><br><span class="line">     * @throws RouteParamException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected function addRoute($method, $route, $controller)</span><br><span class="line">    &#123;</span><br><span class="line">        $param &#x3D; new RouteParams();</span><br><span class="line"></span><br><span class="line">        $param-&gt;method &#x3D; $method;</span><br><span class="line">        $param-&gt;route &#x3D; $route;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 格式为：控制器@方法名</span><br><span class="line">        $actions &#x3D; explode(&#39;@&#39;, $controller);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不按照规则设置控制器和方法名则抛出异常</span><br><span class="line">        if (count($actions) !&#x3D; 2) &#123;</span><br><span class="line">            throw new RouteParamException(&#39;控制器和方法名称错误，应该为：控制器名称@方法名称&#39;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $param-&gt;controller &#x3D; $actions[0];</span><br><span class="line">        $param-&gt;action &#x3D; $actions[1];</span><br><span class="line">        $param-&gt;namespace &#x3D; $this-&gt;namespace;</span><br><span class="line"></span><br><span class="line">        self::$routes[] &#x3D; $param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RouteParam.php 是作为路由对象，在这里实例化控制器并且执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">use FireRabbitEngine\Module\Route\Response\ActionNotFoundResponse;</span><br><span class="line">use FireRabbitEngine\Module\Route\Response\MethodErrorResponse;</span><br><span class="line">use FireRabbitEngine\Module\Route\Response\ClassNotFoundResponse;</span><br><span class="line"></span><br><span class="line">class RouteParams</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 路由名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $name;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 路由匹配规则</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $route;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 命名空间</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $namespace;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 控制器名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $controller;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 调用的控制器方法名称</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $action;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     * @var string</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public $method;</span><br><span class="line"></span><br><span class="line">    public function createResponse($request, $response)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断请求方法是否正确</span><br><span class="line">        if ($this-&gt;method !&#x3D; RequestMethod::ANY &amp;&amp; $request-&gt;server[&#39;request_method&#39;] !&#x3D; $this-&gt;method) &#123;</span><br><span class="line">            (new MethodErrorResponse())-&gt;response($request, $response, $this);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断方法是否存在</span><br><span class="line">        $controllerName &#x3D; $this-&gt;getFullControllerName();</span><br><span class="line">        if (!class_exists($controllerName)) &#123;</span><br><span class="line">            (new ClassNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $action &#x3D; $this-&gt;action;</span><br><span class="line">        &#x2F;&#x2F; 不存在方法则返回404</span><br><span class="line">        if (!method_exists($controllerName, $action)) &#123;</span><br><span class="line">            (new ActionNotFoundResponse())-&gt;response($request, $response, $this);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 实例化类</span><br><span class="line">        $controllerObject &#x3D; new $controllerName($request, $response, $this-&gt;name);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; ... 以后的中间件写在这里</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 执行方法</span><br><span class="line">        $controllerObject-&gt;$action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getFullControllerName()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;namespace . $this-&gt;controller;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而 web.php 则是全局的路由配置文件，实现了用类配置路由，而不是用纯数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line"></span><br><span class="line">$router-&gt;setConfig([</span><br><span class="line">    &#39;namespace&#39; &#x3D;&gt; &#39;App\\Controller\\Home\\&#39;,</span><br><span class="line">])-&gt;group(function () use ($router) &#123;</span><br><span class="line"></span><br><span class="line">    $router-&gt;get(&#39;&#x2F;&#39;, &#39;IndexController@index&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;login&#39;, &#39;IndexController@login&#39;);</span><br><span class="line">    $router-&gt;get(&#39;&#x2F;user&#39;, &#39;UserController@index&#39;);</span><br><span class="line">    $router-&gt;post(&#39;&#x2F;user&#x2F;loginSubmit&#39;, &#39;UserController@loginSubmit&#39;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上，简单路由就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（三）类的自动加载</title>
      <link href="/2021/02/06/my-swoole-framework-3/"/>
      <url>/2021/02/06/my-swoole-framework-3/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>创建文件目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blog</span><br><span class="line">|-- app</span><br><span class="line">|   &#96;-- public</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">&#96;-- http_server.php</span><br></pre></td></tr></table></figure><p>其中，根目录 blog 为项目根目录，app 文件夹是项目所在目录，</p><p>public 用来存放 web 的静态资源如图片、js 文件等。</p><p>firerabbit-engine 是框架目录，module 存放模块代码，</p><p>目前框架代码跟是项目代码放在一起的，</p><p>为了以后方便分离，所以把项目的代码放在 app 里面处理。</p><blockquote><p>文件夹的大小写规范自己定义即可</p></blockquote><h2 id="psr-4-自动加载"><a href="#psr-4-自动加载" class="headerlink" title="psr-4 自动加载"></a>psr-4 自动加载</h2><p>在根目录创建文件 <code>composer.json</code>，并输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;&#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;FireRabbitEngine\\Module\\&quot;: &quot;firerabbit-engine&#x2F;module&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们指定了框架的命名空间以及将镜像源修改为阿里云。</p><p>接着使用命令 <code>composer install</code> 执行安装，</p><p>完成后出现 vendor 文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|-- app</span><br><span class="line">|   &#96;-- public</span><br><span class="line">|-- composer.json</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">|-- http_server.php</span><br><span class="line">&#96;-- vendor</span><br><span class="line">    |-- autoload.php</span><br><span class="line">    &#96;-- composer</span><br><span class="line">        |-- ClassLoader.php</span><br><span class="line">        |-- LICENSE</span><br><span class="line">        |-- autoload_classmap.php</span><br><span class="line">        |-- autoload_namespaces.php</span><br><span class="line">        |-- autoload_psr4.php</span><br><span class="line">        |-- autoload_real.php</span><br><span class="line">        |-- autoload_static.php</span><br><span class="line">        &#96;-- installed.json</span><br></pre></td></tr></table></figure><p>我们第一步要实现路由功能，路由是一个模块，</p><p>因此在 modlue 下新建文件夹 Route，</p><p>接着在该目录新建文件 <code>Router.php</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace FireRabbitEngine\Module\Route;</span><br><span class="line"></span><br><span class="line">class Router</span><br><span class="line">&#123;</span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(&#39;ok&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>FireRabbitEngine 即框架的命名空间</p></blockquote><p>接着编辑 <code>http_server.php</code>，引入 composer 加载文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 测试</span><br><span class="line">$router &#x3D; new \FireRabbitEngine\Module\Route\Router();</span><br><span class="line">$router-&gt;test();</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) &#123;</span><br><span class="line">    $response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">    $response-&gt;end(&quot;&lt;h1&gt;Hello Swoole. #&quot;.rand(1000, 9999).&quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><p>在终端输入 <code>php http_server.php</code>，看到打印出 ok 就说明自动加载没问题了。</p><blockquote><p>每次修改代码都要 Ctrl+C 关掉再重新启动，不然修改了代码也不会生效，因为 swoole 是常驻内存的，只在启动时加载一次</p></blockquote><p>完整的项目目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">|-- app</span><br><span class="line">|   &#96;-- public</span><br><span class="line">|-- composer.json</span><br><span class="line">|-- firerabbit-engine</span><br><span class="line">|   &#96;-- module</span><br><span class="line">|       &#96;-- Route</span><br><span class="line">|           &#96;-- Router.php</span><br><span class="line">|-- http_server.php</span><br><span class="line">&#96;-- vendor</span><br><span class="line">    |-- autoload.php</span><br><span class="line">    &#96;-- composer</span><br><span class="line">        |-- ClassLoader.php</span><br><span class="line">        |-- LICENSE</span><br><span class="line">        |-- autoload_classmap.php</span><br><span class="line">        |-- autoload_namespaces.php</span><br><span class="line">        |-- autoload_psr4.php</span><br><span class="line">        |-- autoload_real.php</span><br><span class="line">        |-- autoload_static.php</span><br><span class="line">        &#96;-- installed.json</span><br></pre></td></tr></table></figure><p>我们需要同步到 Git 防止丢失代码，</p><p>因此需要设置 .gitignore 文件来忽略不需要上传的文件或者目录。</p><p>在终端或者直接右键创建文件都可以，.gitignore 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vendor</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><blockquote><p>我用的是 PhpStorm 会产生 .idea 文件夹，但这个是不需要上传的，如果你用的是 vscode，要把 .vscode 文件夹也加进去</p></blockquote><p>然后就可以把项目同步到 Git 上面了。</p><p>如此一来类的自动加载就实现了，</p><p>下一步我们就可以开始编写路由模块了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（二）项目的规划和设计草案</title>
      <link href="/2021/02/06/my-swoole-framework-2/"/>
      <url>/2021/02/06/my-swoole-framework-2/</url>
      
        <content type="html"><![CDATA[<h2 id="项目的规划和设计草案"><a href="#项目的规划和设计草案" class="headerlink" title="项目的规划和设计草案"></a>项目的规划和设计草案</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第（一）章中我们已经实现了 hellow  world！</p><p>但是现在不用急着撸代码，</p><p>而是要把我们设计这款框架的想法捋顺。</p><h2 id="期望效果"><a href="#期望效果" class="headerlink" title="期望效果"></a>期望效果</h2><p>按照重要性给各项指标进行打分，其中星星越多代表重要性越高。</p><h3 id="开发舒适度：★★★★★"><a href="#开发舒适度：★★★★★" class="headerlink" title="开发舒适度：★★★★★"></a>开发舒适度：★★★★★</h3><p>这是最关键的一条！</p><p>使用了我们的框架，</p><p>开发者撸代码会变成愉♂悦的过程！</p><p>我给它起个口号：</p><blockquote><p>享受令人愉♂悦的开发过程。 — by FireRabbit-Engine 火兔引擎</p></blockquote><p>但是怎么个舒适法得有一个定义，不然就太宽泛了。</p><ul><li>能够帮助开发者快速排查错误以及调试的能力</li><li>在框架层面自动帮用户解决掉麻烦问题，比如 SQL 注入、用户权限、跨域问题、表单校验等等</li><li>指令式开发，开发者可以在控制台输入指令自动生成对应的文件，比如输入 <code>make:model</code> 就会生成一个数据库查询模型</li></ul><h3 id="高性能：★★★★★"><a href="#高性能：★★★★★" class="headerlink" title="高性能：★★★★★"></a>高性能：★★★★★</h3><p>我们既然选择了 swoole 扩展，</p><p>自然要体现出它应该具有的高性能特点，</p><p>高性能的指标是响应速度，期望效果是 1-30 ms。</p><p>（以接口的响应速度为判定指标） </p><blockquote><p>它要非常的快！不快怎么装 X 呢！</p></blockquote><h3 id="高并发：★★★★★"><a href="#高并发：★★★★★" class="headerlink" title="高并发：★★★★★"></a>高并发：★★★★★</h3><p>同样是 swoole 的特色，</p><p>我们的框架也应该支持强大的并发连接。</p><p>框架完成后我们会用 ab 测试来查看高并发情况下的性能。</p><h3 id="扩展性：★★★★★"><a href="#扩展性：★★★★★" class="headerlink" title="扩展性：★★★★★"></a>扩展性：★★★★★</h3><p>人没梦想跟咸鱼有什么区别！</p><p>万一框架火了呢！？</p><p>我们这套框架应该是能让开发者 DIY 的。</p><p>框架的扩展性要非常的强，</p><p>各个模块之间尽可能的解耦。</p><h3 id="安全性：★★★★★"><a href="#安全性：★★★★★" class="headerlink" title="安全性：★★★★★"></a>安全性：★★★★★</h3><p>手撸框架要十分注意的地方！</p><p>市面的框架基本上已经把安全隐患在框架层面解决了，</p><p>以至于我们完全忽视了本应该注意的漏洞。</p><p>就比如 SQL 注入，你用的框架封装好的 ORM 自动帮你处理了。</p><p>但是我们自己从零开始撸框架就不一样了，</p><p>我们要让这个框架使用起来非常安全。</p><h3 id="代码规范：★★★"><a href="#代码规范：★★★" class="headerlink" title="代码规范：★★★"></a>代码规范：★★★</h3><p>为了后期可维护，代码规范也是十分必要的，</p><p>毕竟老夫也不是什么大神，只能说在认知的范围内尽量吧……</p><p>如果后期觉得设计不合理，会推翻重做。</p><h3 id="小白化：★★★"><a href="#小白化：★★★" class="headerlink" title="小白化：★★★"></a>小白化：★★★</h3><p>让一个没学过 swoole 的人也能上手。</p><p>（其实我自己就是现学现卖）</p><p>我们再给它起个口号：</p><blockquote><p>有手就能撸。 — by FireRabbit-Engine 火兔引擎</p></blockquote><p>“会增删改查吗？”</p><p>“明天可以来上班了。” —— 根据本人亲身经历改编。</p><h3 id="半自动化：★★★"><a href="#半自动化：★★★" class="headerlink" title="半自动化：★★★"></a>半自动化：★★★</h3><p>谁说做开发就一定要手撸代码的？</p><p>要我说的话，</p><blockquote><p>开发的最高境界是“无码”</p></blockquote><p>其实是我开发游戏的时候得到的灵感，</p><p>比如关卡的设计，每个场景都要单独写一个吗？</p><p>那如果是几千个关卡的游戏呢？</p><p>只要一个配置文件就能搞定！</p><p>而我们只需要写一个关卡解释器，</p><p>将配置的参数实例化为游戏的场景。</p><p>所以我有一个预感，以后的开发者不需要写太多的代码，</p><p>只要配置文件就可以解决大部分的问题。</p><p>在开发这个框架的时候，我会把这个思想融入到设计层面。</p><blockquote><p>亲，我们这个框架高清无码。— by FireRabbit-Engine 火兔引擎</p></blockquote><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><p>框架是由模块构成的，</p><p>我们要把每个模块都拆分成独立的，以后还能拆分成单独的包。</p><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><p>swoole 已经是单一入口了，</p><p>所以直接用就行了。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>有一个专门用来读取配置文件的模块，</p><p>除了框架的配置还支持用户自定义配置。</p><p>不同的模块有不同的配置文件，全部单独区分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文件目录 config&#x2F;</span><br><span class="line">database.php  &#x2F;&#x2F; 数据库配置</span><br><span class="line">cache.php     &#x2F;&#x2F; 缓存配置</span><br><span class="line">sms.php       &#x2F;&#x2F; 短信配置</span><br><span class="line">……            &#x2F;&#x2F; 诸如此类</span><br></pre></td></tr></table></figure><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>直接使用 composer 实现自动加载即可。</p><p>遵循 <code>psr-4</code> 加载规范。</p><h3 id="路由模块"><a href="#路由模块" class="headerlink" title="路由模块"></a>路由模块</h3><p>需要一个路由解析器来处理 swoole 收到的请求路径，</p><p>将请求分发到控制器和对应的方法，还有处理路径上的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 用户浏览一篇博客文章</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article&#x2F;1</span><br><span class="line"></span><br><span class="line"># swoole 收到 nginx 转发的请求是这样的</span><br><span class="line">&#x2F;article&#x2F;1</span><br><span class="line"></span><br><span class="line"># 这个时候我们就需要定义一个解释器解析路由</span><br><span class="line">&#x2F;article&#x2F;1 是一个字符串，要将字符串按照某种规则匹配</span><br><span class="line"></span><br><span class="line"># 最终解析的结果为：</span><br><span class="line">&#x2F;article&#x2F;1 &#x3D;&gt; 控制器是 article，方法是 show，参数是 1 </span><br><span class="line"></span><br><span class="line"># 实例化控制器</span><br><span class="line">$name &#x3D; &#39;ArticleController&#39;; &#x2F;&#x2F; 解析后得到的控制器名字</span><br><span class="line">$controller &#x3D; new $name;</span><br><span class="line"></span><br><span class="line"># 执行对应的方法</span><br><span class="line">$method &#x3D; &#39;show&#39;;</span><br><span class="line">$controller-&gt;$show;</span><br></pre></td></tr></table></figure><p>以上就是路由解析器的大概原理。</p><p>真正要实现是很复杂的，因为路由是各种各样奇奇怪怪的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 文章详情</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article&#x2F;1</span><br><span class="line"></span><br><span class="line"># 编辑文章</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article&#x2F;1&#x2F;edit</span><br><span class="line"></span><br><span class="line"># 很长很长，看得出来哪些是路径参数吗？</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article&#x2F;classify_1&#x2F;list&#x2F;12345&#x2F;show</span><br><span class="line"></span><br><span class="line"># 注意！下面这种是 query 参数，要获取这种参数很简单</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article?id&#x3D;1</span><br></pre></td></tr></table></figure><p>如果我们的网站不打算使用路径参数，</p><p>那就简单得多了，但是用 query 参数很不美观。</p><p>比如 TP 框架的这种路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># c 代表控制器，a 代表方法，id 是查询参数</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1?c&#x3D;article&amp;a&#x3D;show&amp;id&#x3D;1</span><br><span class="line"></span><br><span class="line"># 美化后的路由（这才是我们想要的）</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;article&#x2F;1</span><br></pre></td></tr></table></figure><h3 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h3><p>这个就是面试的时候经常考的问题了，</p><p>就不再详细介绍了，</p><p>简单地说就是用户访问我们的网站，</p><p>我们要给它输出什么样的结果。</p><ul><li>请求要经过过滤器（中间件、数据/权限验证）</li><li>响应返回的格式（content-type）</li></ul><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>对用户提交的表单字段验证。</p><p>如果每个表单都要这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用户注册</span><br><span class="line">if(isset($_GET[&#39;name&#39;] &amp;&amp; strlen($_GET[&#39;name&#39;]) &lt; 4 || strlen($_GET[&#39;name&#39;]) &gt; 10) &#123;</span><br><span class="line">    echo &#39;用户名不能为空，且长度为4~10&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 下面还有重名判断、邮箱、手机号码、密码长度……</span><br><span class="line"># 接着，用户修改密码，找回密码，更新账户资料</span><br><span class="line"># 以上，请再来一遍……</span><br></pre></td></tr></table></figure><p>一个框架没有表单处理模块，你离升仙也就不远了。</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>通俗的将就是请求拦截器。</p><p>表单验证也是拦截请求，</p><p>但是在拦截的层面上不一样，</p><p>表单验证一般是在控制器里面拦截的，</p><p>而中间件是在还没进入到控制器的时候就开始拦截。</p><p>比如一个抢购活动在晚上 9 点开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$startTime &#x3D; date(&#39;Y-m-d 21:00:00&#39;)</span><br><span class="line">$currentTime &#x3D; date(&#39;Y-m-d H:i:s&#39;);</span><br><span class="line"></span><br><span class="line">if($currentTime &gt;&#x3D;  $startTime ) &#123;</span><br><span class="line">    # 显示活动页</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    # 显示活动还没开始</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在控制器里面写上这样的代码来判断活动是否开始，</p><p>但是这种硬编码绝对会让你原地爆炸，</p><p>即使你自己觉得没啥，你同事绝对会想在月黑风高的时候把你弄死……</p><p>我们为什么不这样做呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个“规则”，把它命名为：2021_12_12_active</span><br><span class="line">规则 2021_12_12_active : </span><br><span class="line">如果当前时间大于等于 2021-12-12 21:00:00 则返回 true，否则返回 false</span><br><span class="line"></span><br><span class="line"># 然后再修改路由解析器：</span><br><span class="line">用户访问：http:&#x2F;&#x2F;127.0.0.1&#x2F;goods&#x2F;1</span><br><span class="line">路由解析器解析出：控制器：goods，方法：show，参数：1</span><br><span class="line"></span><br><span class="line">它正准备实例化对象呢！</span><br><span class="line">这个时候，中间件站了出来，说：路由老哥，等一哈！</span><br><span class="line"></span><br><span class="line">路由老哥愣住了，停下来听中间件想说什么。</span><br><span class="line">中间件不慌不忙的解释道：这个路径被加上了“规则”，要验证之后才可以。</span><br><span class="line"></span><br><span class="line">而这个规则叫做：2021_12_12_active</span><br><span class="line">根据《小学生手册》里规定：</span><br><span class="line">第 2021_12_12_active 条：</span><br><span class="line">好孩子在 2021-12-12 这一天必须在晚上九点以后上传睡觉。</span><br><span class="line">在九点之前睡觉的都不是好孩子！不能让它们通过！</span><br><span class="line">这件事交给我来处理，你可以退下了。</span><br><span class="line"></span><br><span class="line">于是路由解释器就把执行权限交给了中间件。</span><br><span class="line">中间件就会查询时间是否符合要求，</span><br><span class="line">如果符合要求就让请求正常进行下去，</span><br><span class="line">不符合要求就返回异常的结果。</span><br></pre></td></tr></table></figure><p>中间件就是一套“规则”，你可能会问那跟表单验证有什么不同？</p><p>其实表单验证就是中间件的子集，除了表单验证之外，还有权限验证。</p><p>比如你可以规定一个请求不带 token 就不让它通过。</p><p>表单验证和权限验证虽然都属于中间件，</p><p>但我们还是会单独拆分出来，</p><p>因为他们在细节还是有些不同的，</p><p>而且我们还可以通过封装实现更加简单的操作。</p><blockquote><p>表单验证和权限验证均可以在控制器里面处理，如果是在控制器层面处理的话就不叫做中间件的，为了实现复用性，我们会把表单验证跟用户验证以中间件的形式实现</p></blockquote><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>不论是本地调试还是线上查询问题所在，</p><p>日志都是非常重要的，日志系统可以支持数据库和文件。</p><p>我们暂时只支持文件日志。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>需要一个专门的类来保存框架使用的各种常量。</p><p>比如返回的错误码之类的，redis 的键等等。</p><p>如果不统一管理常量的话，后期会变得非常麻烦。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>将缓存的调用封装起来，</p><p>我们自定义一个 Cache 类，</p><p>外部只要调用暴露出来的接口即可。</p><p>而 Cache 内部则可以支持不同的缓存数据库，</p><p>包括 Redis 集群的调用等等。</p><p>目前仅考虑：Redis</p><h3 id="数据库（Model）"><a href="#数据库（Model）" class="headerlink" title="数据库（Model）"></a>数据库（Model）</h3><p>同缓存系统，</p><p>数据库模型直接暴露一个供外部调用的接口，</p><p>然后通过配置文件来自定义包括集群甚至是数据库类型等等配置。</p><p>数据库类型目前仅考虑：MySQL</p><p>模型文件主要是定义字段以及处理一些关联关系。</p><p>不将复杂的代码放到这里。</p><p>比较复杂的数据库逻辑可以再定义一个 Action 层来处理。</p><h3 id="模板引擎（View）"><a href="#模板引擎（View）" class="headerlink" title="模板引擎（View）"></a>模板引擎（View）</h3><p>为了支持搜索引擎的 SEO，</p><p>我们不采用前后端分离的设计，</p><p>当然也不能直接写 phtml（即 php 和 html 混合的代码）</p><p>第一次学 PHP 的时候，我们都接触过这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># index.php</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;?php echo &#39;hello world&#39;;&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>phtml 文件把 php 的逻辑代码与 html 代码混合在一起，</p><p>如果是循环或者增加条件判断，简直不忍直视……</p><p>而使用模板引擎的情况下，我们只要传入参数，</p><p>然后模板渲染结果就可以了，</p><p>模板引擎当然也可以改成可配置的。</p><p>目前仅考虑：blade</p><h3 id="控制器（Controller）"><a href="#控制器（Controller）" class="headerlink" title="控制器（Controller）"></a>控制器（Controller）</h3><p>在我设计的这个框架里，</p><p>控制器不是用来处理业务逻辑的，</p><p>而是验证+分发请求+返回响应。</p><p>不过，验证可以完全交给中间件来处理，</p><p>这样控制器的代码就可以更加简洁。</p><p>期望效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function index() &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取参数</span><br><span class="line">    $params &#x3D; $this-&gt;getParams();</span><br><span class="line">    &#x2F;&#x2F; 将参数传递给 service，处理查询逻辑</span><br><span class="line">    $items &#x3D; ArticleService::getInstance()-&gt;getList($params);</span><br><span class="line">    &#x2F;&#x2F; 返回视图响应，并将参数传给视图渲染页面</span><br><span class="line">    $this-&gt;view(&#39;home.index&#39;, [&#39;items&#39; &#x3D;&gt; $items]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有控制器的方法内的代码不超过 10 行。</p><h3 id="逻辑处理（Service）"><a href="#逻辑处理（Service）" class="headerlink" title="逻辑处理（Service）"></a>逻辑处理（Service）</h3><p>处理逻辑代码的地方，本质是一个类。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>按照原生开发的话，应该会使用 redis + 死循环来实现队列，</p><p>但是考虑到 swoole 自带了任务处理机制，</p><p>等我学习之后再具体考虑怎么实现。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>没有。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大致就想到这么多，后期如果有需要再进行补充。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（一）框架概述</title>
      <link href="/2021/02/04/my-swoole-framework-1/"/>
      <url>/2021/02/04/my-swoole-framework-1/</url>
      
        <content type="html"><![CDATA[<h2 id="从入口文件开始说起"><a href="#从入口文件开始说起" class="headerlink" title="从入口文件开始说起"></a>从入口文件开始说起</h2><h2 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h2><p>简单地说框架就是封装好各种便利功能的工具，</p><p>同时还会“自动化”的处理复杂的事情，</p><p>通俗的说就是让程序员开开心心码代码的结构。</p><p>我们现在要撸的这套框架，应该满足以下需求：</p><ul><li>可以缩短开发时间</li><li>支持后期扩展</li></ul><p>不是仅仅封装一下类和方法就叫框架了，</p><p>它整体的结构应该让程序员使用起来非常舒服！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>PHP 版本：7.2.31<br>Swoole 版本：4.5.2<br>PHP Redis 版本：5.1.1</p><p>这里我用的 redis 是 PHP 的扩展，</p><p>如果你不安装 redis 扩展也可以用 composer 引入。</p><h2 id="框架起名"><a href="#框架起名" class="headerlink" title="框架起名"></a>框架起名</h2><p>第一步是给框架起个好名字，</p><p>我把这个框架叫做“火兔引擎”，</p><p>创建目录：<code>/firerabbit-engine</code>。</p><p>这个目录名称和位置你可以随意设置，</p><p>之后用 nginx 指定就行了，最简单的就是放到 www 目录下。</p><h2 id="虚拟域名"><a href="#虚拟域名" class="headerlink" title="虚拟域名"></a>虚拟域名</h2><p>平时我们可能都是用 <code>127.0.0.1</code>，</p><p>但是本地的项目多了的话，就不能用单一的地址了。</p><p>我们可以设置一个虚拟域名，即修改本地的主机解析记录。</p><p>windows 系统和 mac os 都是修改 hosts 文件，</p><p>以 mac os 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>在最底下插入一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 firerabbit-engine.ht</span><br></pre></td></tr></table></figure><p><code>firerabbit-engine.ht</code> 是你设置的虚拟域名，</p><p>可以任意设置，但是最好不要是跟真正域名冲突的，</p><p>比如你设置了 <code>baidu.com</code>，</p><p>那你访问百度就会变成解析到自己本机了，</p><p>这个 <code>.ht</code> 后缀也是我虚构的。</p><p>测试的时候就可以在浏览器输入 <code>firerabbit-engine.ht</code> 访问博客地址。</p><h2 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h2><p>现在项目是空的，一个文件也没有，</p><p>首先在项目目录下新建一个 <code>http_server.php</code>。</p><p>然后查看 Swoole 官方文档：<a href="https://wiki.swoole.com/#/start/start_http_server">Http 服务器</a></p><p>直接把示例代码抠下来复制到 <code>http_server.php</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$http &#x3D; new Swoole\Http\Server(&#39;0.0.0.0&#39;, 9527);</span><br><span class="line"></span><br><span class="line">$http-&gt;on(&#39;request&#39;, function ($request, $response) &#123;</span><br><span class="line">    var_dump($request-&gt;server);</span><br><span class="line">    $response-&gt;header(&quot;Content-Type&quot;, &quot;text&#x2F;html; charset&#x3D;utf-8&quot;);</span><br><span class="line">    $response-&gt;end(&quot;&lt;h1&gt;Hello Swoole. #&quot;.rand(1000, 9999).&quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure><blockquote><p>注意我这里把默认端口改成 9527 了。</p></blockquote><p>之后可以用 <code>127.0.0.1:9527</code> 进行访问。</p><p>如果你跟我一样是用 docker 的话，</p><p>记得要设置端口映射：<code>-p 9527:9527</code>，不然宿主机是访问不到的。</p><p>接着在项目的目录下，在控制台输出命令启动程序：<code>php http_server.php</code></p><p>你会看到光标卡住了，这说明程序已经运行了。</p><blockquote><p>swoole 本身就自带了 http 服务器的功能，因此不需要借助 nginx</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;firerabbit-engine&#x2F;</span><br><span class="line">php http_server.php </span><br></pre></td></tr></table></figure><p>做完这一步就可以用 IP 地址+端口号的方式访问了，</p><p>打开浏览器，输入地址：<code>127.0.0.1:9527</code></p><p>可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Swoole. #7090</span><br></pre></td></tr></table></figure><p>后面的是随机数字所以每次刷新都不一样。</p><p>控制台也打印出了请求详情，</p><p>这样，第一步就成功了。</p><h2 id="Nginx-转发"><a href="#Nginx-转发" class="headerlink" title="Nginx 转发"></a>Nginx 转发</h2><p>虽然 swoole 自带了 http 服务器，</p><p>但是 swoole 处理 css、js 等静态文件却没有什么好的方法，</p><p>而 nginx 的强项就是处理静态文件，一拍即合，各展所长！</p><p>所以这里我们结合 nginx 处理静态文件，</p><p>静态文件 nginx 处理，动态文件 swoole 处理；</p><p>同时还可以利用上面的虚拟域名来访问网站。</p><p>nginx 增加一个配置文件 <code>firerabbit.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name firerabbit-engine.ht;</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|jpeg|png|css|js|ico|ttf|woff|woff2|svg|map)$ &#123;</span><br><span class="line">        root &#x2F;www&#x2F;firerabbit-engine&#x2F;public;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;keep-alive&quot;;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        </span><br><span class="line">        if (!-e $request_filename)&#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;php-fpm72:9527; # 注意</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我是用 docker 搭建的 nginx 和 php 环境，</p><p>容器之间不能直接通过 IP 访问，而是要用容器名。</p><p>如果你不是用 docker 环境，php-fpm72 要改成 <code>127.0.0.1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http:&#x2F;&#x2F;127.0.0.1:9527;</span><br></pre></td></tr></table></figure><p>然后执行命令：<code>nginx -s reload</code> 来平滑重启 nginx。</p><p>接着在浏览器输入上面设置的虚拟域名：<code>http://firerabbit-engine.ht/</code></p><p>可以看到同样的 hello world 页面。</p><p>通过 nginx 的转发，</p><p>所有静态文件如图片、css 文件等都会被转发到请求 public 这个目录，</p><p>不会发送到 swoole 那边，只有找不到文件才会转发给 swoole。</p><p>捋一捋程序的处理流程：</p><p>在浏览器输入域名的时候，用户的请求先经过 nginx 的正则判断，</p><p>如果是 jpg 之类的结尾，就去 public 这个目录下面找，</p><p>如果找不到文件了，再转发给 <code>http://php-fpm72:9527</code>。</p><p>这样 nginx 的配置也弄好了。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>一个典型的框架，包含以下几个特征：</p><ul><li>单一入口</li><li>MVC 结构（模型、视图、控制器分离）</li><li>自动加载（composer）</li></ul><p>单一入口这个很好理解，</p><p>swoole 默认即单一入口，</p><p>也就是全部请求都转发给 <code>http_server.php</code> 文件处理。</p><p>MVC 就是分离代码，让每个类的功能更加单一，</p><p>简单的说就是 PHP 写接口，前端人员写前端页面，</p><p>但是我们并不会真正的完全分离，因为博客是要做 SEO 的，</p><p>如果全部都用接口，搜索引擎就不会收录了。</p><p>我们的 MVC 结构会用模板引擎来实现代码解耦。</p><p>自动加载是我们这个框架的核心部分，</p><p>因为我们会依赖其他组件，同时我们自己的类也需要加上命名空间。</p><p>现代 PHP composer 自动加载几乎是必备的。</p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>捋一捋框架的整体运行流程：</p><p>swoole 收到 nginx 转发来的请求，</p><p>通过“解析器”将请求 uri 解析成对应的控制器和方法，</p><p>（解析器就是路由功能，解析器是一个类文件，自己要写的）</p><p>以及获取各种参数、cookie 等等，</p><p>将这些参数传递给 controller，</p><p>controller 负责处理业务逻辑。</p><p>虽然 MVC 框架已经很流行了，</p><p>但是我们这里不推荐在 controller 处理逻辑，</p><p>在这里写业务，后面这个文件就会变成几千行，不方便维护。</p><p>我们再增加一个 Service 层，将业务逻辑的代码移到 Service 去处理。</p><p>这样整个框架的流程大致可以捋顺了，如下图：</p><p><img src="https://i.loli.net/2021/02/04/INCJc6vlGMBYH8r.png" alt="流程1.png"></p><p>swoole 收到 nginx 转发的请求，</p><p>通过解析器（一个类文件），</p><p>将请求的 uri 解析成对应的路由和参数，</p><p>实例化路由的类并且调用对应的方法，并将参数传递给类的实例化对象，</p><p>类的实例化对象（controller）再调用 service 来处理逻辑。</p><p>（controller 的作用 与 nginx 类似，也是分发请求，但是它还有一个返回响应的功能）</p><p>controller 得到参数和 cookie 等，交给 service 处理，</p><p>service 再调用 model 或者其他的类库，返回处理结果，将值返回给  controller，</p><p>最后一步，controoler 收到返回的值，再返回对应类型的响应。</p><p>（响应的种类有很多，例如 json、html 等等，如：<code>content-type: text/html; charset=UTF-8</code>）</p><p>原本 controller 是处理逻辑代码的地方，</p><p>在这里我们把它变成分发请求了，</p><p>这是防止以后 controller 变得臃肿，</p><p>但实际上，</p><p>逻辑代码转移到 service 会让 service 变得臃肿……</p><p>（目前没有更好的方法了）</p><p>控制器的处理流程可以看图：</p><p><img src="https://i.loli.net/2021/02/04/cm8xCQ5aLjNYbrK.png" alt="流程2.png"></p><p>我个人比较喜欢这种方式，</p><p>最终我们写的控制器会是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class IndexController &#123;</span><br><span class="line">    public function index() &#123;</span><br><span class="line">        &#x2F;&#x2F; 查询列表数据，为了方便调用，service全部做成单例的</span><br><span class="line">        $articles &#x3D; ArticleService::getInstance()-&gt;getList();</span><br><span class="line">        &#x2F;&#x2F; ... 这里返回视图</span><br><span class="line">        $this-&gt;view(&#39;index&#39;, [&#39;articles&#39; &#x3D;&gt; $articles]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制器的代码会变得十分简洁。</p><p>控制器还有一个作用就是验证数据，</p><p>比如用户提交的表单，</p><p>如果输入的邮箱格式不正确就直接返回错误的响应，</p><p>数据验证就全部在 controller 处理了，而不是传到 service。</p><p>我把控制器的功能限制为：① 验证数据 ② 转发给 service 处理 ③ 返回结果</p><p>而 service 则处理数据库操作之类的业务逻辑。</p><p>controller 和 service 的功能变得十分单一，从而降低耦合性。</p><p>问题就是，控制器干净了，service 却脏了……</p><p>service 不仅要处理数据库，还要更新缓存之类的，想想就可怕。</p><p>后面我们可以考虑把数据库处理的逻辑转移到 model，</p><p>这样可以减少 service 臃肿度。</p><h2 id="第一阶段目标"><a href="#第一阶段目标" class="headerlink" title="第一阶段目标"></a>第一阶段目标</h2><p>现在思路已经很明确了，</p><p>但是很多细节部分我们还没有设计，</p><p>比如日志系统、缓存系统、数据库系统、配置参数文件、中间件……</p><p>下期统一进行规划，本篇文章就到这了。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建自己的Swoole框架（序章）</title>
      <link href="/2021/02/04/my-swoole-framework-0/"/>
      <url>/2021/02/04/my-swoole-framework-0/</url>
      
        <content type="html"><![CDATA[<h2 id="开发目标及准备说明"><a href="#开发目标及准备说明" class="headerlink" title="开发目标及准备说明"></a>开发目标及准备说明</h2><p>这一篇不包含任何技术代码，如需要直接开始请阅读第（一）章。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>毕业三年，成为架构师！</p><p>这是我毕业时的梦想，结果没有实现。</p><p>现在重拾初心，从零设计一个属于自己的框架！</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>按照目前市面上的发展来看，</p><p>swoole 毫无疑问是目前 PHP 的天花板，</p><p>而自己在工作的时候做的都是流水线，几乎没机会接触到 swoole。</p><p>于是趁这个机会也学习一下。</p><p>这次设计的框架以开发博客系统作为案例，</p><p>我们不考虑它的适用性，正如标题所写的一样，</p><p>这是属于自己的框架，</p><p>而不是 Laravel 那样可以单独发布的 composer 包。</p><p>所以最终我们会完成一个单体博客应用，</p><p>如果你要把自己的框架做成发布到全网让别人使用你的框架，</p><p>可以了解一下 composer 的扩展包是怎么制作的。</p><p>只要这套框架做完了，</p><p>你自己改造成可以用 <code>composer require xxx/xxx</code> 那样引入的也完全没问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="PHP-环境"><a href="#PHP-环境" class="headerlink" title="PHP 环境"></a>PHP 环境</h3><p>本人使用的是 docker 环境，</p><p>window 系统也可以用 wamp、xampp 等等，</p><p>只要搭好 PHP 环境并且安装了 swoole 扩展就行了。</p><p>windows 系统安装 swoole 扩展比较麻烦，</p><p>如果你不会安装，可以在 windows 系统安装 docker，</p><p>然后再在 docker 里面安装 php 环境。</p><h3 id="Swoole-扩展"><a href="#Swoole-扩展" class="headerlink" title="Swoole 扩展"></a>Swoole 扩展</h3><p>Swoole 官方网站：<a href="https://swoole.com/">swoole.com</a></p><p>swoole 其实是一个 php 扩展并不是框架，它跟 yaf 一样是基于内存常驻的。</p><p>swoole 依然还在保持着更新，yaf 却 N 年没更新了。</p><p>所以如果要学的话，强烈推荐 swoole 而不是 yaf。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>因为我们要做的是一个博客系统的单体应用。</p><p>Swoole 对静态文件的处理能力比较弱，</p><p>所以我们的目标是 swoole 做服务器，</p><p>静态文件交给 nginx 处理，</p><p>php 请求转发给 swoole。</p><blockquote><p>单体应用是相对于微服务来说的，通俗的讲即整个项目就只有一个文件夹，而微服务则是把各个模块拆出来，比如用户模块、订单模块诸如此类，还可以把全站的 api 接口拆分出来当成一个项目（前后端分离）</p></blockquote><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>免费的数据库，除了这个还有 Mango，</p><p>但是我没用过，根据你个人兴趣选择即可。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>免费的高性能包括键值对、哈希、集合列表等等处理器。</p><p>用来做缓存和队列任务，文章排行榜等等。</p><h3 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h3><p>php 的包管理工具，现在的项目还是纯手撸那也太 lower 了。</p><p>我们在开发框架的时候，会像 Laravel 那样依赖一些第三方的包。</p><p>感觉好像有点作弊？</p><p>用 composer 就跟直接拿别人开发好的一样，</p><p>不是说好手撸框架么？</p><p>不用担心，开发框架最核心的是编程思想，</p><p>具体怎么实现，我相信大家看着源码也能模仿出来。</p><p>如果你愿意从写 MySQL 数据连接开始，那也没问题!</p><p>如果你要从最底层的代码开始写，</p><p>那么我建议你将数据库处理、上传组件、缓存处理、队列任务等等，</p><p>把这些都做成单独的 composer 包，</p><p>然后再在框架里引入自己写的 composer 组件包，</p><p>像拼积木一样，看起来很酷对吧！</p><p>这样一个高度定制化的框架就实现了。</p><p>我还真的试过这么做，但是做一个 composer 包就放弃了……</p><p>因为……工作量增加了好几倍。</p><p>很不现实，你做的越细，工作量就越大，</p><p>而我们自己一个人维护不过来，</p><p>所以不推荐一开始就有那么大的野心，</p><p>本篇文章要完成的目标仅仅只是一个单体博客应用而已，</p><p>甚至都不会把框架单独拆分出来（业务逻辑代码也混合在框架里）。</p><p><strong>核心内容是开发框架的编程思想，而不是具体的实现。</strong></p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>用 PHPStorm 即可，当然也可以用微软的 VScode。</p><h2 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h2><p>在我们学习 PHP 的时候，</p><p>第一个开发的项目是什么？</p><p>我猜大部分人都是博客系统！</p><p>那么，三年前的我和三年后的我，</p><p>制作相同的一套系统会有什么差别呢？</p><p>用毕生（三年）的功力，来开发这套博客系统吧！</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> FireRabbitEngine </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC 系统打开网页速度缓慢问题的解决方法</title>
      <link href="/2021/01/16/mac-os-internet-slowly-resolved/"/>
      <url>/2021/01/16/mac-os-internet-slowly-resolved/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>MAC系统的浏览器打开某些网站特别慢，有的甚至打不开。比如百度云网盘链接打开很快，但是点击输入提取码却要卡半天；百度图片甚至直接打不开了；还有B站打开也要半天，严重浪费时间和影响效率。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="改变位置"><a href="#改变位置" class="headerlink" title="改变位置"></a>改变位置</h3><p>其实不是家里网络的问题，而是苹果系统迷之BUG！</p><p>首先点击左上角的苹果图标，然后选择“系统偏好设置”，接着选择“网络”。</p><p>（小技巧：按Command+空格键可以打开聚焦搜索，然后直接输入“网络”两个字，MAC系统就会显示出系统偏好设置里的网络了）</p><p>左侧默认有：</p><ul><li>Wi-Fi（已连接）</li><li>蓝牙 PAN</li><li>雷雳网桥</li></ul><p>这里我们不用修改。</p><p>看中间部分，默认值是“自动”，点击下拉框，然后选择“编辑位置”。</p><p>然后点击“+”号，输入新的位置：“家”，再点击完成。</p><p>接着我们可以发现，左侧的 Wi-Fi 的 IP 地址已经没了，并且提示你无法连接到网络。</p><p>只要你点击下方的“应用”，就会重新寻找 IP 地址。</p><p>现在已经大功告成了！再打开那些网页，你可以发现速度起飞了！</p><h3 id="改变-DNS"><a href="#改变-DNS" class="headerlink" title="改变 DNS"></a>改变 DNS</h3><p>如果上述方法依然无法提高访问速度，那就有可能是 DNS 地址在作怪。</p><p>我们知道，域名只是一个指向服务器 IP 地址的代号，把域名解析为 IP 地址需要 DNS 服务商为我们提供服务，因此 DNS 服务器也会影响打开网页的速度。</p><p>依然是系统偏好设置里的网络，点击左侧的 Wi-Fi，然后右下角的“高级”。</p><p>在顶部选项卡选择“DNS”，然后点击左下角的“+”号，添加如下地址：</p><ul><li>8.8.8.8</li><li>8.8.4.4</li></ul><p>以上任意一个即可，这两个是谷歌的 DNS 服务器。</p><p>当然我们国内的还有臭名昭著的 114：</p><ul><li>114.114.114.114</li></ul><p>你也可以修改为 114，但是并不推荐这么做。</p><p>因为它经常会在你打开的网页里加入一些奇奇怪怪的广告，最常见的就是手机访问网页时，右侧经常会出现一个红包领取的图标（并不是网站有这种东西，而是使用了 114 服务器解析后，它给这个网站加上的）</p><p>以前刚毕业的时候，曾经被这个奇怪的问题困扰了半天，还以为自己的网站是被被人黑了呢！</p><p>还有，当你访问的网站 404 时，114 会把网页改成它们的广告页，要知道互联网上 404 的页面有很多，光是广告费的收入就可想而知了。</p><p>虽说 114 又不是在做公益，没道理不牟利。</p><p>404 页面修改成广告倒是情有可原，但拦截别人的网站并在里面加入领取红包的广告，这样做就很不厚道了。</p><h3 id="关闭蓝牙"><a href="#关闭蓝牙" class="headerlink" title="关闭蓝牙"></a>关闭蓝牙</h3><p>据说苹果的蓝牙也会影响 Wi-Fi，你可以尝试关闭蓝牙，如果能提高网页访问速度，那说明蓝牙也会影响。</p><p>但是苹果系统又没有耳机接口，这样蓝牙耳机就用不了了……</p><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><p>如果你用了代理，那访问国内网站的速度肯定会变慢。</p><p>最好的方法就是改成 PAC 自动模式，这样软件就会自动判断是否需要开启代理了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MAC OS </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL为什么不使用 SELECT *(星号)查询？</title>
      <link href="/2020/06/25/mysql-why-not-use-select-star/"/>
      <url>/2020/06/25/mysql-why-not-use-select-star/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不论书上还是网上的技术论坛分享的 MySQL 查询优化方面的文章都不推荐使用 SELECT *，但是他们从未说过为什么不能这样用或者仅仅只是浅显的描述原因，但并不能让人觉得心服口服，那么——到底在 MySQL 为什么不用 SELECT * 来查询呢？</p><p>老娘很好奇！——「千反田」</p><p><img src="https://i.loli.net/2020/06/25/UADdHxXB8p9hewO.gif" alt="mysql"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>实际上我标题党了！标题其实是一个伪命题。</p><p>抛开使用场景就提出命题全部都是无稽之谈！</p><p>比如一个 MySQL 的表 <code>users</code> 如下：</p><table><thead><tr><th>name</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>自增主键</td></tr><tr><td>name</td><td>varchar</td><td>用户昵称</td></tr><tr><td>email</td><td>varchar</td><td>注册邮箱</td></tr></tbody></table><p>现在需求是：产品需要查询全部的用户资料然后导出 Excel。</p><p>当然，我们肯定直接用 <code>SELECT * FROM users</code> 查询了。</p><p>你也可以用下面的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name,email FROM users;</span><br></pre></td></tr></table></figure><p>这两种方法是等价的，<code>*</code>（星号）的本质就是查询所有字段，并不是说使用星号就跟列出所有字段有什么不同的地方。</p><p>上述场景，两种方法的结果和过程完全一致。</p><h2 id="SELECT-的优点"><a href="#SELECT-的优点" class="headerlink" title="SELECT * 的优点"></a>SELECT * 的优点</h2><p>看到这里是不是颠覆常规的认知了？</p><p>众所周知，不论书上还是网上一致抵制 SELECT 星号查询。</p><p>为什么还能有优点呢？</p><p>抛开使用场景不谈而直接讨论命题的做法显然不可取。</p><p>以技术的角度来讨论这个问题，把不需要的字段查出来确实不好，为什么不好我们下文再介绍。</p><p>如果以项目经理的角度来说，<em><strong>SELECT 星号查询能大幅提升开发效率和减轻后续维护的时间</strong></em>。</p><p>这就涉及到「性能和开发效率的抉择」两者无法兼得。</p><p>为了提高查询效率，我们使用了 <code>SELECT 字段1,字段2,字段3</code> 进行查询，但如果后期我们修改表结构，表中新增了一个字段 4，那开发人员就得找到查询语句再补充一个字段 4，如果数据库模型使用了诸如 Laravel 的 <code>fillable</code> （可填充字段），你不仅要修改查询语句，还得修改模型。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Model;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 原本数据库只有两个字段 name 和 email</span><br><span class="line">    protected $fillable &#x3D; [&quot;name&quot;, &quot;email&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 某个业务逻辑</span><br><span class="line">$users &#x3D; User::select([&quot;name&quot;, &quot;email&quot;])-&gt;get();</span><br></pre></td></tr></table></figure><blockquote><p>虽然这个 fillable 跟查询没有关系，但是不设置 fillable 在插入数据字段就会屏蔽</p></blockquote><p>业务更新后，<code>users</code> 表新增了一个 <code>address</code> （住址）字段，业务需求不仅要显示出 <code>name</code> 和 <code>email</code> 现在还要把住址也显示出来。</p><p>于是，代码修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Model;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 添加新的字段 address</span><br><span class="line">    protected $fillable &#x3D; [&quot;name&quot;, &quot;email&quot;, &quot;address&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查询字段新增 address</span><br><span class="line">$users &#x3D; User::select([&quot;name&quot;, &quot;email&quot;, &quot;address&quot;])-&gt;get();</span><br></pre></td></tr></table></figure><p>是不是很麻烦？因为添加一个新字段要修改两个地方的代码，开发效率大大降低了。</p><p>相反，如果直接使用星号查询呢？</p><p>Laravel 的 Model 中，与 <code>fillable</code> 相反的是 <code>guarded</code>（不可填充字段），将 <code>guarded</code> 的值设置为空数组代表所有字段（*）都可以填充（fillable）。</p><p>代码修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Model;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 所有字段都可以填充</span><br><span class="line">    protected $guarded &#x3D; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 不使用 select 方法查询即返回全部字段，也就是 SELECT * 查询</span><br><span class="line">$users &#x3D; User::get();</span><br></pre></td></tr></table></figure><blockquote><p>guarded 也跟查询没有关系，它指代的是需要屏蔽哪些字段，与 fillable 相反</p></blockquote><p>现在即使添加了新的 <code>address</code> 字段，我们也不需要回去修改代码了。</p><p>所以，SELECT 星号的优点就是可以提高开发效率，而且这种开发效率的提升是极为显著的，试想一下如果一张表后期改了很多字段，不仅有新增字段还有删除的字段，如果使用 <code>SELECT 字段1,字段2</code> 的方法来查询，每次表结构更改就得重新审核一遍所有该表的查询语句，因为一旦忘记修改某处那就会报字段不存在的错误。</p><p>事情往往都有两面性，尽管 SELECT 星号查询会在一定程度上降低性能，但它却能提升开发效率，我们应该根据使用场景来决定具体用哪种方法，在需要高度优化的场景，我们自然不会使用低性能的 SELECT 星号，规则是死的，人是活的，场景不断变化，我们的查询语句也要跟随变化。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>上文提到使用 SELECT 星号查询会影响性能，这其实是一句很含糊的话，到底是什么性能？性能只是一种笼统的概念，网上大都没有深究具体哪些地方会受到影响，无非都是说查询的字段越多查询速度越慢，诸如此类。</p><p>老娘很好奇！！——「千反田」</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593061541376&di=9f36d3cb1049822e7147e83b9c27f75f&imgtype=0&src=http://img1.gtimg.com/comic/pics/hv1/4/68/2220/144372844.jpg" alt="mysql"></p><p>接下来就来详细的探讨 SELECT 星号影响的到底是哪些性能。</p><h3 id="磁盘-IO"><a href="#磁盘-IO" class="headerlink" title="磁盘 IO"></a>磁盘 IO</h3><p>我们知道 MySQL 的本质是存储在磁盘上的文件，因此查询操作就是一种读取文件的行为。</p><p>（当然还有一种是不需要读取文件的，后文介绍）</p><p>如果查询的字段越多，说明要读取的内容也就越多，因此会增大磁盘 IO 开销。</p><p>在对于 <code>TEXT</code>、<code>MEDIUMTEXT</code> 等更大长度的字段时，效果尤为明显。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>后端代码查询 MySQL 后将查询结果保存在变量中，变量会占用内存资源，字段越多变量占用的内存就越高，看下面的例子，展示了两种不同查询占用的内存情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查询语句</span><br><span class="line">select * from &#96;users&#96; limit 5000</span><br><span class="line"></span><br><span class="line"># PHP Laravel 框架测试内存使用情况</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取查询前内存使用</span><br><span class="line">$startMemory &#x3D; memory_get_usage();</span><br><span class="line">&#x2F;&#x2F; 查询</span><br><span class="line">$users &#x3D; User::limit(5000)-&gt;get();</span><br><span class="line">&#x2F;&#x2F; 获取查询后内存使用</span><br><span class="line">$endMemory &#x3D; memory_get_usage();</span><br><span class="line"></span><br><span class="line">echo &#39;查询前：&#39; . $startMemory . PHP_EOL;</span><br><span class="line">echo &#39;查询后：&#39; . $endMemory . PHP_EOL;</span><br><span class="line"></span><br><span class="line">## 输出结果</span><br><span class="line">查询前：15362584</span><br><span class="line">查询后：27977144</span><br></pre></td></tr></table></figure><p>如果只查询部分字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查询语句</span><br><span class="line">select id from &#96;users&#96; limit 5000</span><br><span class="line"></span><br><span class="line"># PHP Laravel 框架测试内存使用情况</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取查询前内存使用</span><br><span class="line">$startMemory &#x3D; memory_get_usage();</span><br><span class="line">&#x2F;&#x2F; 查询</span><br><span class="line">$users &#x3D; User::select([&#39;id&#39;])-&gt;limit(5000)-&gt;get();</span><br><span class="line">&#x2F;&#x2F; 获取查询后内存使用</span><br><span class="line">$endMemory &#x3D; memory_get_usage();</span><br><span class="line"></span><br><span class="line">echo &#39;查询前：&#39; . $startMemory . PHP_EOL;</span><br><span class="line">echo &#39;查询后：&#39; . $endMemory . PHP_EOL;</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">查询前：15363056</span><br><span class="line">查询后：21672336</span><br></pre></td></tr></table></figure><p>只查一个字段和查出全部字段内存占用差距非常大，尤其是在有 <code>text</code> 或者较大长度字段时，千万不要使用 SELECT 星号把无关的字段也包含到查询语句中，因为查找这些字段不仅没有意义还会徒增内存消耗。</p><h3 id="网络传输-带宽"><a href="#网络传输-带宽" class="headerlink" title="网络传输 / 带宽"></a>网络传输 / 带宽</h3><p>我们知道 MySQL 可以部署在与项目相同的服务器，也可以不在同一台服务器，当项目与 MySQL 不在同一台服务器时这种情况就会更加严重。</p><p>同理，如果使用了 <code>TEXT</code> 等大字段，要传输的内容也会变得更多。</p><p>从另一台部署了 MySQL 的服务器进行查询时，另一台服务器需要把数据传输给当前服务器，这中间是通过网络进行通信的，查询的数据越多返回的数据量也就越大。</p><p>数据传输量越大占用的网络资源就越多，这也是为什么前端要把 js 文件压缩成 min 减小体积的原因，只要传输的文件内容体积变小，传输花费的时间就越少，而大文件直到传输完成前网络连接不会断开，如果连接数一直增加最终可能超过服务器的承受能力导致后续连接直接未响应。</p><p>如果 MySQL 服务器是单独的，那么前面提到的缺点还会成倍的增加。</p><p>试想一下，MySQL 服务器中读取了多余字段（磁盘 IO / 网络等性能消耗），然后再把数据传给项目所在服务器（多余字段导致内存增加），也就是说两台服务器都徒增压力。</p><h3 id="无法高效利用索引"><a href="#无法高效利用索引" class="headerlink" title="无法高效利用索引"></a>无法高效利用索引</h3><p>在本博客前一篇文章中提到对 MySQL 占用内存过高的优化技巧。</p><p>因为 MySQL 为了查询优化占缓存了许多数据到内存中，而如果我们能利用内存的数据，查询效率能得到质的飞跃。</p><p>其中之一就是索引。</p><p>MySQL 中存在一种概念叫做「覆盖查询」，当查询的字段全部都是索引时，这时 MySQL 可以直接从索引中返回数据而不需要再次去查询表。</p><p>示例，orders 表中存在索引字段：<code>user_id</code> 和 <code>goods_id</code>，直接查询这两个字段时，通过 explain 分析可以发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select user_id,goods_id from orders where user_id &#x3D; 1 limit 10;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/25/LHKka4soi51XgEv.png" alt="image.png"></p><p><code>Extra</code> 字段返回的结果是：<code>Using index</code></p><p>这里说明查询结果用到了索引，「覆盖查询」的原理就是在 MySQL 创建表数据的时候，会对索引的数据创建单独的结构（注意：索引里面就包含了数据），因此查询索引字段直接从这个单独的结构里面就能拿到数据了，就不需要通过索引去定位行再从行中取记录。</p><p>如果我们把上述的查询语句修改一下，加入一个非索引字段 <code>price</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select user_id,goods_id,price from orders where user_id &#x3D; 1 limit 10;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/25/oXf6P8J7qr1BSa5.png" alt="image.png"></p><p>可以发现，<code>Extra</code> 原本的 <code>Using index</code> 已经变成 <code>NULL</code> 了。</p><p>这是因为 price 不是索引字段，因此 MySQL 无法直接得到数据，必须定位到行才能拿到 price 字段，这种通过索引定位行再回到表中查询的过程叫做「回表查询」。</p><p>「覆盖查询」是从索引直接拿到数据，不需要「回表查询」，因而查询速度更快。</p><p>通过上面的分析，我们知道要实现「覆盖查询」的条件必须是：查询的字段全部都是索引。</p><p>显然我们不可能给每一张表的所有字段都加上索引，因此使用 SELECT 星号在字段比较多的表中无法实现「覆盖查询」。</p><h2 id="尾语"><a href="#尾语" class="headerlink" title="尾语"></a>尾语</h2><p>保持一颗「千反田的好奇心」，相信技术一定会有很大突破。</p><p><img src="https://i.loli.net/2020/06/25/NgM2rOeXHQiFPwI.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL新增用户、修改密码、设置权限</title>
      <link href="/2020/06/21/mysql-init-action/"/>
      <url>/2020/06/21/mysql-init-action/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每次部署新项目都要重新设置 MySQL 的用户及权限，但这些基础命令又不经常用到，每次都要重新查找，于是整合了一下发成博文以便后续直接 <strong>复制粘贴</strong>。</p><p>网上搜索的大都是低版本 MySQL 或者根本就是错误的代码，不知道他们这样直接复制粘贴别人的代码但又没试过的是什么心态，简直浪费别人的时间。（尤其点明某 CSDN）</p><p>错误的范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges *.* to &#39;要创建的用户&#39;@&#39;localhost&#39; identified by &#39;自定义密码&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码在 MySQL 8 直接报错</p></blockquote><p>本文记录的命令以最新版的 MySQL 8 为基准。</p><h2 id="用户介绍"><a href="#用户介绍" class="headerlink" title="用户介绍"></a>用户介绍</h2><p>这一段科普 MySQL 用户知识，如需直接得到问题的解决答案可直接跳过。</p><p>MySQL 的所有用户均在 mysql 这个数据库里面保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select user,host from users;</span><br><span class="line">ERROR 1146 (42S02): Table &#39;mysql.users&#39; doesn&#39;t exist</span><br><span class="line">mysql&gt; select user,host from user;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql.infoschema | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">| root             | localhost |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>其中，<code>authentication_string</code> 为加密后的密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select user,host,authentication_string from user;</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line">| user             | host      | authentication_string                                                  |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line">| mysql.infoschema | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| mysql.session    | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| mysql.sys        | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| root             | localhost |                                                                        |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，即使是 MySQL 系统创建的数据库同样适用 SQL 语句，你可以直接通过 <code>update</code> 命令修改字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set host&#x3D;&quot;%&quot; where user&#x3D;&quot;root&quot;;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>上述命令是有效的，它的作用是把 <code>root</code> 用户的权限修改为 %（通配符），即除了 localhost（本地连接）之外，任何主机都可以通过该用户访问 MySQL。</p><p>当然这是不安全的，因为我们现在还没有给 root 用户设置密码，也就是说任何人都可以无密码访问到 MySQL。</p><p>虽然我们可以通过 <code>update</code> 直接修改 <code>authentication_string</code> 字段，但是这个字段是要经过加密的，不能直接修改成某个密码的值。</p><p>具体操作方法见下面的介绍。</p><h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><p>非本地连接时，最好不要使用 root 登录，而是创建一个新用户并且指定权限。</p><p>MySQL 创建新用户命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;用户名&#39;@&#39;权限&#39; identified by &#39;密码&#39;;</span><br></pre></td></tr></table></figure><p>其中，需要设置三个字段的值：</p><ul><li>用户名：即登录的用户名，如：root2</li><li>权限：可选值为 % 或者 localhost 或指定具体 IP，如果要通过第三方软件（如 Navicat）必须将这个值设置为 % 或者某个主机 IP，推荐使用 %，表示所有 IP，如果设置为 localhost（本地）表示只有这台服务器才能访问。</li><li>密码：设置登录的密码</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;huotu&#39;@&#39;%&#39; identified by &#39;huotublog&#39;;</span><br></pre></td></tr></table></figure><p>上述代码表示创建一个具有远程登录权限的用户 huotu 且密码为 huotublog。</p><blockquote><p>刷新权限命令：flush privileges;</p></blockquote><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>如果需要修改用户的密码可以使用如下命令，不能直接使用 update 更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alter user &#39;huotu&#39;@&#39;%&#39; identified by &#39;新密码&#39;;</span><br></pre></td></tr></table></figure><p>修改完成后需要刷新权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><p>如果不设置权限，那么新增的用户就无法操作表。</p><p>在 MySQL 中所有用户都拥有某些数据库和表的某些权限，比如 root 用户具有最高权限，拥有操作所有数据库和表的能力。</p><p>一个用户的权限可以是一整个数据库，也可以对应许多个数据库，也可以是一个数据库中的某个表。</p><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;huotu&#39;@&#39;%&#39; with grant option;</span><br></pre></td></tr></table></figure><p>上述命令赋予 <code>huotu</code> 用户所有数据库的表所有操作（增删改查）。</p><p><code>with gran option</code> 表示该用户可给其它用户赋予权限，但不可能超过该用户已有的权限。</p><p><code>all privileges</code> 对应具体的权限，可换成 select,update,insert,delete,drop,create 等操作。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update on *.* to &#39;huotu&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><p>表示 <code>huotu</code> 只有对数据库中的表查询、插入和修改的权限，因此他无法进行删除操作。</p><p><code>*.*</code> 这里的 * 指的是通配符，第一个 * 的位置指定数据库，设置为 * 表示所有数据库，也可以指定某个数据库，比如：myblog.*。（myblog 是一个数据库，表示拥有 myblog 数据库对所有表的操作权限）</p><p>第二个 * 指的是数据库中的某个表，设置为 * 表示对数据库所有表都有权限，也可以指定具体的表：myblog.articles。</p><h2 id="查看授权信息"><a href="#查看授权信息" class="headerlink" title="查看授权信息"></a>查看授权信息</h2><p>查询某个用户的操作权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#39;root&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><h2 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h2><p>删除某个用户的全部权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all privileges on *.* from &#39;huotu&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>将用户数据删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#39;huotu&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><h2 id="疑点解析"><a href="#疑点解析" class="headerlink" title="疑点解析"></a>疑点解析</h2><p>上述所有命令基本都是 <code>&#39;huotu&#39;@&#39;%&#39;</code>，在看到这些命令的时候我在想后面的权限是有必要的吗？</p><p>因为已经有用户名了，附带权限不是多此一举？</p><p>其实只要测试一下就知道了，我们可以通过 <code>create</code> 命令创建一个 user 字段相同的用户，比如 root，但是权限不同，即 <code>%</code>，此时查询出来这两个同名的用户是并存的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &#39;root&#39;@&#39;%&#39; identified by &#39;123&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host,authentication_string from user;</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line">| user             | host      | authentication_string                                                  |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line">| root             | %         | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257                              |</span><br><span class="line">| mysql.infoschema | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| mysql.session    | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| mysql.sys        | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| root             | localhost | *05F9DE4C759F49574C4400083F80107567B47C2E                              |</span><br><span class="line">+------------------+-----------+------------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果不添加权限那这两个同名用户就无法区分了，也就是说 user 字段加上 host 字段组成唯一键，而不是 user 字段唯一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拆分你的代码</title>
      <link href="/2020/05/26/split-your-code-file/"/>
      <url>/2020/05/26/split-your-code-file/</url>
      
        <content type="html"><![CDATA[<h2 id="前文概要"><a href="#前文概要" class="headerlink" title="前文概要"></a>前文概要</h2><p>本文讲述的是如何把一个大文件拆分成许许多多小文件的方法。</p><p>所谓大文件其实没有一个明确定义，暂且规定一个文件如果超过 1000 行就算大文件吧！</p><p>当然也不用死脑筋，一看到代码行数多就得拆分，这完全要看情况，就好比玩游戏辅助的位置就一定得跟射手？如果脑袋不会转弯，对以后学习都很不利。死脑筋在一定程度上等同于“杠精”，本文介绍的是拆分文件的方法，而如何使用取决于一个聪明的孩子。</p><p>拆分文件的目的是解决混乱的逻辑，因为一个文件只要很大，极有可能是混杂了本来不应该出现的东西。拆分之后的小文件可能只有 100-200 行，相比一个 1000 多行的文件，哪个更容易让人看懂？</p><p>（题外话：在我看来辅助是决定游戏成败的关键因素，它的位置与打野一样重，出了辅助装的辅助不会抢经济，也就意味着这个位置可以支援任何一路，帮助中路快速清兵 Gank 上路，或者开局配合队友入侵对面野区，或者在上单被单杀后去守塔并且吃掉本来会被浪费的兵线，或者在打野队友被对面反蓝的时候去支援等等，辅助是很灵活的位置，但是一个死脑筋的人理解范畴就是辅助只有跟了射手才是辅助。）</p><h2 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h2><p>技术的演变过程都是朝着分离代码发展。</p><p>最早的 PHP 文件前后端代码混合在一起，相信大家最开始学 PHP 的时候都接触过这种代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.php 文件</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&#x2F;&#x2F; ...此处省略998行</span><br><span class="line">&lt;h1&gt;&lt;?php echo &quot;hello world!&quot; ?&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这种文件又被归为：<code>.phtml</code> 格式，意思是 PHP 代码与 HTML 混合的文件。</p><p>因为 PHP 代码可以嵌入在 HTML 文件中，所以 PHP 又被叫做嵌入式语言。</p><p>可以嵌入其他语言感觉很 Cool，但其实这种做法是非常不可取的，试想一下公司忽然来了一个不懂 HTML 的 PHP 实习生，看着混合着 HTML 和 PHP 代码的文件肯定一脸懵逼。</p><p>为了维护混合代码的项目需要掌握前端知识，后端开发无形中增加了学习成本。</p><blockquote><p>重点知识：HTML 代码与 PHP 代码混合在一起</p></blockquote><p>也就是上面提到的“出现不应该出现的东西”，HTML 代码应该只包含 HTML、JS、CSS 之类的前端方面文件，而用来处理业务逻辑的 PHP 文件里也不应该出现前端的东西。只要出现了本来不应该出现的东西就会导致维护成本增加。</p><h2 id="传统-MVC-模式"><a href="#传统-MVC-模式" class="headerlink" title="传统 MVC 模式"></a>传统 MVC 模式</h2><p>首先介绍一下传统 MVC 模式，</p><p>这是早期用来处理代码文件膨胀的解决方案：</p><p>将代码文件分成：</p><ul><li>Model（模型）处理数据库操作</li><li>View（视图）渲染 HTML 文件</li><li>Controller（控制器）处理请求和响应</li></ul><p>在一定程度上满足了早期的需求，模型文件专门处理数据库的增删改查，而控制器只要实例化模型对象就可以直接调用数据库操作方法，然后把数据传递给视图进行渲染。</p><p>每一步都变得更加专业化了。</p><blockquote><p>模板视图：包括 PHP 代码与 HTML 代码的特殊文件</p></blockquote><p>但 MVC 结构依然没有摆脱代码混合的问题，而是使用了稍微好一些的模板视图（例如：smart 模板、blade 模板）。</p><p>模板视图就是用来处理前端和 PHP 代码，用来最终渲染出 HTML 页面的文件。</p><p>以 Laravel 使用的 blade 模板为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; IndexController.php</span><br><span class="line">class IndexController &#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 查询数据库，取 ID&#x3D;1 的 goods</span><br><span class="line">        $goods &#x3D; Goods::where(&#39;id&#39;, 1)-&gt;first();</span><br><span class="line">        </span><br><span class="line">        return view(&#39;index&#39;, compact(&#39;goods&#39;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.blade.php</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&#x2F;&#x2F; ... 省略998行</span><br><span class="line">&#123;&#123; $goods-&gt;name &#125;&#125;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过模板引擎编译后生成如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&#x2F;&#x2F; ... 省略998行</span><br><span class="line">&lt;?php echo $goods-&gt;name; ?&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>也就是说我们现在不需要直接在 HTML 上面写代码，而是在模板文件（index.blade.php）上面写代码。</p><p>但这种方法治标不治本，虽然模板文件是 PHP 文件，但还是夹杂着 HTML。</p><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>为了分离出 HTML 和 PHP 代码，人们研究出了通过接口调用实现前后端分离的方法。</p><p>这种技术叫做 Ajax，前端通过 JavaScript 发起 HTTP 请求，服务器返回查询的数据，前端再渲染数据。</p><p>整个过程实现了前后端代码的完全分离。</p><blockquote><p>现在我们后端开发人员已经从前端地狱中解放出来了！！</p></blockquote><h2 id="Service-模式"><a href="#Service-模式" class="headerlink" title="Service 模式"></a>Service 模式</h2><p>因为前后端分离，MVC 模式的 View（视图）已经不需要了，</p><p>取而代之的是新出现的 Service（服务）。</p><p>MVC 模式下，所有的业务逻辑都写在 Controller（控制器）上。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class GoodsController</span><br><span class="line">&#123;</span><br><span class="line">    public function index() &#123;</span><br><span class="line">        &#x2F;&#x2F; 按发布时间倒序获取20条商品数据</span><br><span class="line">        $goods &#x3D; Goods::orderByDesc(&#39;created_at&#39;)-&gt;limit(20)-&gt;get();</span><br><span class="line">        &#x2F;&#x2F; 拼装接口返回数据</span><br><span class="line">        $items &#x3D; [];</span><br><span class="line">        foreach($goods as $item) &#123;</span><br><span class="line">            $items[&#39;data&#39;][] &#x3D; [</span><br><span class="line">                &#39;id&#39; &#x3D;&gt; $item-&gt;id,</span><br><span class="line">                &#39;title&#39; &#x3D;&gt; $item-&gt;title,</span><br><span class="line">                &#39;time&#39; &#x3D;&gt; $item-&gt;created_at</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 返回接口响应</span><br><span class="line">        return api_response($items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有业务逻辑代码都写在控制器上会导致控制器文件逐渐膨胀。</p><p>控制器的作用是处理请求和响应，我们可以让它更加专业化一点，让它只负责处理请求然后给出响应。</p><p>至于逻辑处理，可以交给第三方：Service（服务）来处理。</p><p>所谓 Service 层只不过是再额外增加一个文件。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class GoodsService &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 按发布时间倒序获取20条商品数据</span><br><span class="line">    public function getGoodsItems() &#123;</span><br><span class="line">       $goods &#x3D; Goods::orderByDesc(&#39;created_at&#39;)-&gt;limit(20)-&gt;get();</span><br><span class="line">       &#x2F;&#x2F; 拼装接口返回数据</span><br><span class="line">       $items &#x3D; [];</span><br><span class="line">       foreach($goods as $item) &#123;</span><br><span class="line">           $items[&#39;data&#39;][] &#x3D; [</span><br><span class="line">               &#39;id&#39; &#x3D;&gt; $item-&gt;id,</span><br><span class="line">               &#39;title&#39; &#x3D;&gt; $item-&gt;title,</span><br><span class="line">               &#39;time&#39; &#x3D;&gt; $item-&gt;created_at</span><br><span class="line">           ];</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       return $goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在控制器里只需要实例化出一个 GoodsService 对象，调用方法即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class GoodsController</span><br><span class="line">&#123;</span><br><span class="line">    public function index() &#123;</span><br><span class="line">        $service &#x3D; new GoodsService();</span><br><span class="line">        $items &#x3D; $service-&gt;getGoodsItems();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 返回接口响应</span><br><span class="line">        return api_response($items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器里面只负责处理请求和给出响应，把逻辑处理交给 Service 处理，这样 Controller 的代码几乎已经没有多少了，以后某个接口出问题可以立即找到对应的控制器方法，大大减少排查问题的时间。</p><p>（把业务逻辑写在控制器里是一个非常让人吐血的事情，作为接盘了不少项目的我深有体会）</p><h2 id="更多的划分方法"><a href="#更多的划分方法" class="headerlink" title="更多的划分方法"></a>更多的划分方法</h2><p>机智的你一定发现，即使增加了 Service 层，业务逻辑代码还是很多啊，把本来囤积在 Controller 的代码移到 Service 有什么意义？</p><p>意义之一就是让每个结构更加专业化，Controller 只处理请求和响应，因为 Controller 如果有太多代码的话，如果一个接口出问题了，你要在 IDE 上面拖动滚轮才能定位到你想要的那个方法上面，然后直接在 Controller 层排查问题。而且 Controller 层如果囤积了太多业务代码，还有其他小伙伴也在修改这个控制器就很容易发生代码冲突造成不必要的麻烦。</p><p>Goods（商品）的相关业务逻辑就交给 GoodsService 处理；User（用户）的业务逻辑就交给 UserService 处理，这样你要修改哪个模块的业务逻辑也很方便不是吗？</p><p>但还是没有解决 Service 层代码囤积问题。</p><p>这里凭经验之谈，其中一个方法就是数据库操作的逻辑移动到 Model 层里面去处理，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class UserModel extends Model &#123;</span><br><span class="line">    &#x2F;&#x2F; 添加一名新用户</span><br><span class="line">    public function addUser($username) &#123;</span><br><span class="line">        &#x2F;&#x2F; user 表增加一条新用户记录</span><br><span class="line">        $user &#x3D; $this-&gt;create([</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; $username,</span><br><span class="line">        ]);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 为用户开通支付账户</span><br><span class="line">        UserAccountModel::create([</span><br><span class="line">            &#39;user_id&#39; &#x3D;&gt; $user-&gt;id</span><br><span class="line">        ]);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; ... 其他数据库相关操作</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 返回新创建的 user 对象</span><br><span class="line">        return $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 UserService 直接调用 Model 的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data &#x3D; request()-&gt;all();</span><br><span class="line">$model  &#x3D; new UserModel();</span><br><span class="line">$user &#x3D; $model-&gt;addUser($data);</span><br><span class="line">&#x2F;&#x2F; ... 处理其他逻辑</span><br></pre></td></tr></table></figure><p>这样 Service 层的代码一部分就转移到了 Model 层里去了！</p><p>把所有数据库增删改查的逻辑全部转移到 Model 层，</p><p>而 Service 只要实例化对应的 Model，调用方法（负责处理整体的逻辑）。</p><p>这样 Service 层也可以变得更加专业化。</p><blockquote><p>Model：喵喵喵？把锅甩给我！？</p></blockquote><p>新的问题又来了，Model 层膨胀了！</p><p>OK，用同样的逻辑，我们再分出一个 Action（操作）层。</p><p>新建 Action 类，每一个操作对应一个类文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class UserAddAction &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建新用户</span><br><span class="line">    public function add($data) &#123;</span><br><span class="line">        $model &#x3D; new UserModel();</span><br><span class="line">        $user &#x3D; $model-&gt;create($data);</span><br><span class="line">        </span><br><span class="line">        return $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class UserAccountAddAction &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 开通用户支付账户</span><br><span class="line">    public function add(UserModel $user) &#123;</span><br><span class="line">        $model &#x3D; new UserAccountModel();</span><br><span class="line">        $data &#x3D; [</span><br><span class="line">            &#39;user_id&#39; &#x3D;&gt; $user-&gt;id,</span><br><span class="line">            &#x2F;&#x2F; ... 省略其他数据</span><br><span class="line">        ];</span><br><span class="line">        $account &#x3D; $model-&gt;create($data);</span><br><span class="line">        </span><br><span class="line">        return $account;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在 Model 里面只要实例化 Action，然后调用方法就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class UserModel extends Model &#123;</span><br><span class="line">    &#x2F;&#x2F; 添加一名新用户</span><br><span class="line">    public function addUser($username) &#123;</span><br><span class="line">        &#x2F;&#x2F; user 表增加一条新用户记录</span><br><span class="line">        $userAddAction &#x3D; new UserAddAction();</span><br><span class="line">        $data &#x3D; [</span><br><span class="line">            &#39;username&#39; &#x3D;&gt; $username,</span><br><span class="line">            &#x2F;&#x2F; .. 其他数据</span><br><span class="line">        ];</span><br><span class="line">        $user &#x3D; $userAddAction-&gt;add($data);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 为用户开通支付账户</span><br><span class="line">        $userAccountAddAction &#x3D; new UserAccountAddAction();</span><br><span class="line">        $data &#x3D; [</span><br><span class="line">            &#39;user_id&#39; &#x3D;&gt; $user-&gt;id,</span><br><span class="line">            &#x2F;&#x2F; .. 其他数据</span><br><span class="line">        ];</span><br><span class="line">        $account &#x3D; $userAccountAddAction-&gt;add($data);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; ... 其他数据库相关操作</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 返回新创建的 user 对象</span><br><span class="line">        return $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个 Action 只对应一个方法，这样 Action 就不会膨胀了。</p><p>业务调用关系如下：</p><blockquote><p>Controller -&gt; Service -&gt; Model -&gt; Action</p></blockquote><p>但代码拆分的缺点就是会让文件变得越来越多，每一个数据库操作就要写一个 Action，以后可能会出现上千个文件，而我们知道 PHP 程序运行时需要加载全部的文件，无疑会降低性能。</p><p>代码变得更好维护的成本是降低性能，代价未免太大了。</p><p>所以优化也要适度，回到标题，如何选择是要看情况进行灵活变通的。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>微服务架构同样是为了拆分代码，</p><p>把一套系统的各个功能模块拆分成独立的模块，</p><p>每一个小模块都是一个新的项目。</p><p>例如一套系统有用户模块、商品模块、订单模块，</p><p>主项目负责处理请求，然后调用相应的模块，再将数据返回。</p><p>主服务器的作用类似于 Controller 层，</p><p>只负责处理请求和响应，但具体的实现都交给 Service（子模块）去处理。</p><p>把每一个功能都单独立项可以使项目更加专一化，原本一个项目包括了所有模块。</p><blockquote><p>“单体应用”模式</p></blockquote><p>单体应用只需要部署一套项目，项目里就已经包含了完整的模块。</p><p>所有开发人员都在一个项目上进行开发工作。</p><p>单体应用的缺点是随着业务增加会越来越难以维护（因为所有的代码都集中在一个地方）。</p><p>而所有人都在共同维护一套代码，每个人习惯不同，技术水平也不同，</p><p>代码质量参差不齐，新加入的小伙伴也不敢轻易修改老员工的代码。</p><p>（有时候虽然知道老员工写了一个可以直接调用的方法，但新员工依然会产生不信任感，总归不是自己写的代码，万一被原主人改了怎么办？完全不能放心调用。）</p><blockquote><p>单体应用排查 BUG 困难</p></blockquote><p>有时候新来的小伙伴为了找一个 BUG 可能要遍历用户模块、订单模块、商品模块……</p><p>几乎把所有的逻辑代码查了个遍。如果把每个模块都单独拆成小项目交给一个小团队去维护，大家各扫门前雪，用户模块出问题了就让负责用户模块的人去处理，这样大家互不影响，不会出现你删了别人代码，导致别人一脸懵逼的排查了一整天都没找到原因。</p><p>项目拆分成小项目，每个项目的运行速度就会变得更快，大大提高了系统性能。</p><blockquote><p>理想很美好！现实很残酷……</p></blockquote><p>到公司你还是要当打杂的角色，不可能让一个人只负责一个项目，</p><p>往往就是用了微服务架构，你一个人要负责全部的项目（工作量反而增加了）。</p><blockquote><p>不是技术负责人要压榨劳动力……而是他要为项目负责任。</p></blockquote><p>如果他招来的人跑路了，那负责这个模块的功能就没人维护了，所以当你加入微服务架构里，每个团队成员至少也要负责 2 个以上的项目，万一其中一个人跑路还有另一个可以顶替。</p><p>项目变多，单个项目维护成本降低，</p><p>但总体维护成本也会提高，尤其是架构师跑路，谁来接盘就是一个严重问题。</p><p>回到最开始的地方，我们最终还是没能解决接盘侠的问题……</p><p>总之，接盘侠是无可避免的要痛苦的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL占用内存过高优化记录</title>
      <link href="/2020/04/09/mysql-memory-optimize/"/>
      <url>/2020/04/09/mysql-memory-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在腾讯云购买的 1 核 1G 主机，使用 Docker 搭建的 MySQL 内存占用竟然高达 34%！再加上 Docker 其他容器运行起来和系统本身程序占用的内存，总内存高达 80+%，由于其他程序使用了 Redis 作为缓存，1G 内存就剩下 10%+ 可用内存（100MB+），一不小心可能就会让服务器卡成渣甚至直接 GG。</p><p>由于服务器一天的访问量并不多，并发访问也不高，并不需要把 MySQL 优化的多好，只要能正常运行就够了，加上有 Redis 缓存这一层，几乎很少会跑到 MySQL 查询。 </p><p>所以综合起来，MySQL 压根不用担心它会挂掉，可以把默认的优化方案修改一下，以便把占用的内存释放出来。</p><p>优化后的结果如下图：</p><p><img src="https://ae01.alicdn.com/kf/H8de4ff5c012d438f96db914a35d0e207i.png" alt="MySQL优化内存"></p><h2 id="查询内存占用"><a href="#查询内存占用" class="headerlink" title="查询内存占用"></a>查询内存占用</h2><p>使用 <code>top</code> 命令查询当前程序的内存占用情况。</p><p>我们需要关注的部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                          </span><br><span class="line"> 1751 root      20   0  740212  11140   1476 S  1.2  1.1 106:46.57 barad_agent                                                                                                      </span><br><span class="line"> 1750 root      20   0  164512   8648   1312 S  0.6  0.9  20:52.41 barad_agent                                                                                                      </span><br><span class="line">29245 root      20   0  155148   2380    660 S  0.6  0.2   0:24.18 sshd                                                                                                             </span><br><span class="line">31044 root      20   0  135552   6028   1468 S  0.6  0.6   0:11.02 YDService                                                                                                        </span><br><span class="line">    1 root      20   0   43656   2764   1364 S  0.0  0.3   2:19.11 systemd  </span><br></pre></td></tr></table></figure><ul><li><code>PID</code>：进程 ID</li><li><code> %CPU</code>：CPU 占用百分比</li><li><code>%MEM</code>：内存占用百分比</li><li><code>COMMAND</code>：程序命令名称</li></ul><p>如果发现某个不需要的进程占用了过高的内存或 CPU，可以直接使用 <code>kill &lt;PID&gt;</code> 杀掉进程。</p><p>进程杀掉程序就停了，我们不能直接杀掉 MySQL，具体解决思路见下一个步骤。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>MySQL 在启动的时候，会占用一部分的内存来作为缓冲区，这样做的原因是可以优化查询速度，我们可以发现只要查询过一次 MySQL，然后用相同的语句再次查询，第二次查询会比第一次更快，这其中就用到了 MySQL 自身的缓存系统。</p><p>MySQL 的缓存机制是当某一个连接访问某张表时，MySQL 会先检查访问的表是否在缓存区中，如果这张表已经在缓存区中打开，那就会直接访问缓存区从而加快查询速度，如果这张表不在缓存区，那就会从实际的数据库文件进行查询，然后再把这张表加入缓存区，以便后续查询加快速度。</p><p>由于这个机制我们的 MySQL 在运行过程占用的内存会逐渐增加，1G 的内存不适合用来做 MySQL 的优化，我们要做的就是去掉 MySQL 用来加快查询的各种机制。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改 MySQL 配置文件 <code>my.cnf</code>，找到 <code>[mysqld]</code> 下添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">&#x2F;&#x2F; 此处省略其他配置，添加如下内容</span><br><span class="line">table_open_cache&#x3D;200</span><br><span class="line">table_definition_cache&#x3D;400</span><br><span class="line">performance_schema_max_table_instances&#x3D;400</span><br><span class="line">performance_schema&#x3D;off</span><br></pre></td></tr></table></figure><p>保存然后重启 MySQL，OK！内存已经降到 10%+ 了。</p><p>各个配置项的具体用途：</p><table><thead><tr><th>字段</th><th>用途</th></tr></thead><tbody><tr><td>table_open_cache</td><td>高速缓存的大小，每当访问一个表时，如果在表缓冲区中还有空间，该表就被打开并放入其中，下次查询该表时首先从高速缓存区查询，如果表在缓存中则直接从缓存查询，从而大幅提高查询速度。</td></tr><tr><td>table_definition_cache</td><td>定义了内存中可打开的表结构数量。</td></tr><tr><td>performance_schema_max_table_instances</td><td>检测的表对象的最大数目。</td></tr><tr><td>performance_schema</td><td>主要用来收集 MySQL 性能参数，启用 performance_schema 之后，server 会持续不间断地监测。【罪魁祸首】</td></tr></tbody></table><p>通过调整前面 3 个配置项的值，占用内存均有 1~3% 程度的降低，罪魁祸首便是 <code>performance_schema</code>，将其设置为 off 之后，内存直接降低了 20%！</p><p>其详细介绍可参考 MySQL 官方文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/performance-schema.html">MySQL Performance Schema</a></p><p>当然除了上面几个配置项之外，MySQL 仍有许多可以优化的配置项，但是现在既然已经实现了自己的目的，就暂时不进行扩展阅读了，以后如果需要更深入的优化，到时候再学也不迟（日均 IP 100+ 根本不用考虑什么优化嘛~）。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏菜单系统开发之栈的妙用</title>
      <link href="/2020/04/02/game-developer-stack/"/>
      <url>/2020/04/02/game-developer-stack/</url>
      
        <content type="html"><![CDATA[<h2 id="菜单系统"><a href="#菜单系统" class="headerlink" title="菜单系统"></a>菜单系统</h2><p>菜单是所有游戏必不可少的一个系统。</p><p>在游戏场景中，按 X 键可以呼出菜单，在菜单中按上下键可以切换菜单选项，再按 Z 键可以选中菜单，然后进入子页面的操作，子页面的菜单中也有子菜单，子菜单的操作与父级菜单一致。当打开菜单的状态，再按 X 键会返回上一级的菜单，直到主菜单返回游戏场景。</p><p>演示效果如下：</p><p><img src="https://s1.ax1x.com/2020/04/02/GGIL5j.gif" alt="名为怪物的游戏 - 游戏菜单"></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>要实现菜单系统，最关键的地方在于防止按键冲突。</p><p>主菜单有按键事件，子菜单中也有按键事件，因此在主菜单中选中了子菜单，就要解除主菜单的监听事件而绑定子菜单的监听事件，多级菜单同理，可以归纳为：打开菜单——解除上一级的监听事件——绑定当前菜单的监听事件。</p><p>游戏的例子可能让从未接触过游戏的开发者难以理解，那么再看下一个例子。</p><p><img src="https://s1.ax1x.com/2020/04/02/GGLnsI.png" alt="电商菜单"></p><p>上图为某电商首页的 UI，假如产品经理提出一个需求，在这个网页上按 X 键可以展开商品分类的菜单，然后通过键盘的按键可以选择二级菜单，选中一个分类再按 Z 键展开三级菜单，在展开菜单的情况下按 X 键会返回上一级菜单，你应该如何实现此功能？</p><p>如果使用正常的方法，用变量来判断打开了哪些菜单，然后再绑定对应的事件，你会发现很难实现无限级的菜单系统，而且业务代码会变得乱糟糟的。</p><p>比如情报页面有线索二级菜单，线索菜单又可以进入到线索列表三级菜单，而角色状态可能只有一个显示角色信息的 UI，只有切换角色的按钮，没有三级菜单。</p><p>每个主菜单的选项都可能是不同的，它们没有共同点，因此你无法使用继承的关系把相同的操作提取出来，每一个菜单都要单独判断，简直是 <code>if-else</code> 地狱，不难想象代码会乱成什么样子。</p><p>在这里我们可以用“栈”的特性来优雅的实现菜单系统。</p><blockquote><p>栈：一种先进后出的数据结构</p></blockquote><p>栈是一种先进先出的结构，与队列正好相反，而我们打开菜单，按 X 键也正好是逐级向上返回，符合了栈的特性——先打开的菜单最后关闭。</p><p>在这里核心点是 <strong>监听事件与解除监听</strong>，无需关心具体的业务逻辑。</p><blockquote><p>示例语言为 TypeScript，cocos creator 游戏引擎开发</p></blockquote><p>首先我们定义一个父类 <code>StackComponent</code> 这个父类是需要调用栈的组件必须继承的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件名 Scene_StackComponent.ts</span><br><span class="line"></span><br><span class="line">const &#123; ccclass, property &#125; &#x3D; cc._decorator;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default abstract class NewClass extends cc.Component &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 添加监听按键 *&#x2F;</span><br><span class="line">    addListener() &#123;</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 移除监听按键 *&#x2F;</span><br><span class="line">    removeListener() &#123;</span><br><span class="line">        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract onKeyDown(event: cc.Event.EventKeyboard): void;</span><br><span class="line">    abstract onKeyUp(event: cc.Event.EventKeyboard): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>addListener</code> 方法添加按键监听，而 <code>removeListener</code> 方法则移除监听的事件，具体的按键事件进行了抽象，由子类来实现。</p><ul><li>onKeyDown：键盘按下的时候触发</li><li>onKeyUp：键盘弹起的时候触发</li></ul><p>接着定义一个栈结构，栈非常简单就可以实现，用一个数组来保存数据，用 <code>pop</code> 方法即可弹出最后一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 文件名 System_StackComponent.ts</span><br><span class="line"></span><br><span class="line">const &#123; ccclass, property &#125; &#x3D; cc._decorator;</span><br><span class="line">import System_StackComponent from &quot;.&#x2F;Scene_StackComponent&quot;;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default class NewClass extends cc.Component &#123;</span><br><span class="line">    private _componentStacks: System_StackComponent[] &#x3D; [];</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 清空栈</span><br><span class="line">     *&#x2F;</span><br><span class="line">    flushStack() &#123;</span><br><span class="line">        this._componentStacks &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 从栈取出最后一个元素</span><br><span class="line">     *&#x2F;</span><br><span class="line">    popStack() &#123;</span><br><span class="line">        var len &#x3D; this._componentStacks.length;</span><br><span class="line">        if (len &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            cc.error(&#39;栈已空，调用失败&#39;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 弹出当前窗口</span><br><span class="line">        let pop &#x3D; this._componentStacks.pop();</span><br><span class="line">        pop.removeListener();</span><br><span class="line">        &#x2F;&#x2F; 最后一个元素添加监听</span><br><span class="line">        if (this._componentStacks.length !&#x3D; 0) &#123;</span><br><span class="line">            let last &#x3D; this._componentStacks[this._componentStacks.length - 1];</span><br><span class="line">            last.addListener();</span><br><span class="line"></span><br><span class="line">            cc.log(&#39;窗口出栈,剩余：&#39; + this._componentStacks.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 菜单组件入栈</span><br><span class="line">     * @param  component </span><br><span class="line">     *&#x2F;</span><br><span class="line">    pushStack(component: System_StackComponent) &#123;</span><br><span class="line">        if (!component) &#123;</span><br><span class="line">            cc.error(&#39;这是一个空的元素&#39;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 原来最后一个元素移除监听</span><br><span class="line">        let len &#x3D; this._componentStacks.length;</span><br><span class="line">        if (len !&#x3D; 0) &#123;</span><br><span class="line">            let last &#x3D; this._componentStacks[len - 1];</span><br><span class="line">            last.removeListener();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 当前元素添加监听</span><br><span class="line">        component.addListener();</span><br><span class="line"></span><br><span class="line">        this._componentStacks.push(component);</span><br><span class="line"></span><br><span class="line">        cc.log(&quot;入栈：&quot;, this._componentStacks)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>popStack</code> 方法弹出栈最顶层的元素，并且移除监听事件，同时监听新的顶层元素事件。</p><p><code>pushStack</code> 方法将新的菜单入栈，监听当前菜单事件并且移除原来菜单的事件。</p><p>栈中所有的元素都继承 <code>System_StackComponent</code> 栈组件，因此它们都具有 <code>addListener</code> 方法和 <code>removeListener</code> 方法。</p><p>接下来为了方便，我们把对象保存在 JavaScript 的系统对象 window 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window[&quot;__game&quot;][&quot;stack&quot;] &#x3D; new System_Stack;</span><br></pre></td></tr></table></figure><p>这样我们就可以通过 <code>__game.stack</code> 来调用栈的方法了。</p><p>主菜单脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const &#123; ccclass, property &#125; &#x3D; cc._decorator;</span><br><span class="line">import Scene_Menu_Item from &quot;.&#x2F;Scene_Menu_Item&quot;;</span><br><span class="line">import Scene_StackComponent from &quot;.&#x2F;Scene_StackComponent&quot;;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default class Scene_Menu extends Scene_StackComponent &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 关闭菜单 *&#x2F;</span><br><span class="line">    closeMenu() &#123;</span><br><span class="line">        &#x2F;&#x2F; 弹出当前菜单事件</span><br><span class="line">        __game.stack.popStack();</span><br><span class="line">        &#x2F;&#x2F; 销毁菜单节点（让菜单消失）</span><br><span class="line">        this.node.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 显示情报面板 *&#x2F;</span><br><span class="line">    showInformationPanel() &#123;</span><br><span class="line">        &#x2F;&#x2F; 读取情报面板的预制资源</span><br><span class="line">        cc.loader.loadRes(&quot;&#x2F;prefab&#x2F;SceneInformation&quot;, (err, res) &#x3D;&gt; &#123;</span><br><span class="line">            let clueNode &#x3D; cc.instantiate(res);</span><br><span class="line">            let clue &#x3D; clueNode.getComponent(&quot;Scene_Information&quot;);</span><br><span class="line">            &#x2F;&#x2F; 把菜单脚本压入栈</span><br><span class="line">            __game.stack.pushStack(clue);</span><br><span class="line">            &#x2F;&#x2F; 调用菜单脚本的初始化方法</span><br><span class="line">            clue.init();</span><br><span class="line">            &#x2F;&#x2F; 把菜单节点添加到场景（显示菜单 UI）</span><br><span class="line">            cc.find(&quot;Scene&quot;).addChild(clueNode);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 具体的监听事件</span><br><span class="line">    onKeyDown(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断当前选项在“情报”菜单，如果此时按 Z 键则调用 showInformationPanel 方法显示情报页</span><br><span class="line">        &#x2F;&#x2F; 判断按 X 键调用 closeMenu 方法关闭菜单</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    onKeyUp(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">        &#x2F;&#x2F; 业务逻辑忽略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>closeMenu</code> 方法关闭当前菜单，并且弹出栈，在所有菜单关闭的时候都调用这个方法。</p><p><code>onKeyUp</code> 是键盘弹起事件，暂时不用理会。</p><p>在游戏场景加载中，为了能随时随地呼出菜单，我们再定义一个新的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; System_Menu.ts</span><br><span class="line"></span><br><span class="line">const &#123; ccclass, property &#125; &#x3D; cc._decorator;</span><br><span class="line"></span><br><span class="line">import Scene_Menu from &quot;.&#x2F;Scene_Menu&quot;;</span><br><span class="line">import Scene_StackComponent from &quot;.&#x2F;Scene_StackComponent&quot;;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default class System_Menu extends Scene_StackComponent &#123;</span><br><span class="line">    private _menuNode: cc.Node &#x3D; null;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line">        __game.stack.pushStack(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 监听 X 键</span><br><span class="line">    onKeyDown(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">        switch (event.keyCode) &#123;</span><br><span class="line">            case cc.macro.KEY.x:</span><br><span class="line">                this.show();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onKeyUp(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 显示菜单 *&#x2F;</span><br><span class="line">    show() &#123;</span><br><span class="line">        &#x2F;&#x2F; 加载菜单预制资源并添加到场景</span><br><span class="line">        cc.loader.loadRes(&quot;&#x2F;prefab&#x2F;Menu&quot;, (err, res) &#x3D;&gt; &#123;</span><br><span class="line">            let node &#x3D; cc.instantiate(res);</span><br><span class="line">            let menu: Scene_Menu &#x3D; node.getComponent(&quot;Scene_Menu&quot;);</span><br><span class="line">            &#x2F;&#x2F; 将主菜单入栈</span><br><span class="line">            __game.stack.pushStack(menu);</span><br><span class="line">            this._menuNode &#x3D; node;</span><br><span class="line">            &#x2F;&#x2F; 添加到场景</span><br><span class="line">            cc.find(&quot;Scene&quot;).addChild(node);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再将这个类添加到 window 系统对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加到 window 对象</span><br><span class="line">window[&quot;__game&quot;][&quot;menu&quot;] &#x3D; new System_Menu;</span><br><span class="line">&#x2F;&#x2F; 执行初始化操作（入栈）</span><br><span class="line">__game.menu.init();</span><br></pre></td></tr></table></figure><p>如此一来，我们就可以随时随地通过全局的方法 <code>__game.menu.show()</code> 调出菜单了！</p><p>注意！<code>System_Menu</code> 脚本并没有出栈的操作，因为如果这个脚本出栈了，那就不能监听 X 呼出菜单的事件，保留最底层的监听以便随时呼出菜单。</p><h2 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h2><p>由于菜单是一级一级往上打开，而关闭的时候是一级一级向下关闭，因此它符合栈的结构，当一个菜单节点入栈时，我们为它绑定监听事件，同时解除上一级菜单的监听事件；当一个菜单出栈时，我们就解除这个菜单的监听事件，然后再给栈新的顶层节点绑定监听事件，无论有多少级的菜单都能够用这种结构来实现，只要让它们继承 <code>StackComponent</code> 类即可实现栈的调用控制事件的监听与解除，比起用变量来判断打开了哪些菜单，是不是优雅得多呢？</p>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏开发 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript使用对象必须知道的一件事</title>
      <link href="/2020/04/01/javascript-object-issue/"/>
      <url>/2020/04/01/javascript-object-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-的对象"><a href="#JavaScript-的对象" class="headerlink" title="JavaScript 的对象"></a>JavaScript 的对象</h2><p>JavaScript 中，对象即引用。</p><p>我们知道引用的特性：</p><p>将对象赋值给另一个变量，另一个变量的值如果改变，原对象的值也会改变。</p><p>引用即是内存地址的指向，将对象赋值给另一个变量，相当于另一个变量也指向了同一块内存地址，因此改变值时，原对象的值也会跟着变。通过下面的例子来了解一下引用的特性。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 声明一个json对象</span><br><span class="line">let json &#x3D; &#123;</span><br><span class="line">    &quot;aa&quot;: &quot;Im aa&quot;,</span><br><span class="line">    &quot;bb&quot;: &quot;Im bb&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 将json对象赋值给另一个变量</span><br><span class="line">let data &#x3D; json;</span><br><span class="line">data.aa &#x3D; &quot;no ok!&quot;;</span><br><span class="line">&#x2F;&#x2F; 输出两个对象</span><br><span class="line">console.log(json, data);</span><br></pre></td></tr></table></figure><p>在控制面板上的输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Object &#123; aa: &quot;no ok!&quot;, bb: &quot;Im bb&quot; &#125; Object &#123; aa: &quot;no ok!&quot;, bb: &quot;Im bb&quot; &#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们原本是希望把 json 变量的值赋值给另一个变量 data，本意是不希望修改 json 的值，但由于 JavaScript 中对象即引用的特性会导致原来的值发生改变。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以使用 <code>Object.assign(target, source)</code> 方法将 source 对象复制一份给 target 变量，类似 PHP 中的 clone，复制出来的变量会独立占据一片内存空间，而不是原对象的引用。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 声明一个json对象</span><br><span class="line">let json &#x3D; &#123;</span><br><span class="line">    &quot;aa&quot;: &quot;Im aa&quot;,</span><br><span class="line">    &quot;bb&quot;: &quot;Im bb&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 复制对象到data</span><br><span class="line">let data &#x3D; &#123;&#125;;</span><br><span class="line">Obejct.assign(data, json);</span><br><span class="line">&#x2F;&#x2F; 修改aa的值</span><br><span class="line">data.aa &#x3D; &quot;no ok!&quot;;</span><br><span class="line">&#x2F;&#x2F; 输出两个对象</span><br><span class="line">console.log(json, data);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Object &#123; aa: &quot;Im aa&quot;, bb: &quot;Im bb&quot; &#125; Object &#123; aa: &quot;no ok!&quot;, bb: &quot;Im bb&quot; &#125;</span><br></pre></td></tr></table></figure><p>可以看到，原来的 json 对象的值没有改变。</p><p>在 TypeScript 中，不能直接使用 <code>Object.assign</code> 方法，而是要使用 <code>(&lt;any&gt;Object).assign</code>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 声明一个json对象</span><br><span class="line">let json &#x3D; &#123;</span><br><span class="line">    &quot;aa&quot;: &quot;Im aa&quot;,</span><br><span class="line">    &quot;bb&quot;: &quot;Im bb&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 复制对象到data</span><br><span class="line">let data &#x3D; &#123;&#125;;</span><br><span class="line">(&lt;any&gt;Object).assign(data, json);</span><br></pre></td></tr></table></figure><h2 id="完结感言"><a href="#完结感言" class="headerlink" title="完结感言"></a>完结感言</h2><p>由于 cocos creator 使用的是 JavaScript 和 TypeScript 开发，今天在制作游戏的事件系统，遇到一个神秘的 BUG，排查了好久一直没找到原因，突然想起来以前也遇到过同样的问题，为了涨点记性，特此记录。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自定义别名——大幅提高工作效率！</title>
      <link href="/2020/03/31/linux-alias/"/>
      <url>/2020/03/31/linux-alias/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-系统命令"><a href="#Linux-系统命令" class="headerlink" title="Linux 系统命令"></a>Linux 系统命令</h2><p>在 <code>Linux</code> 系统中，诸如 <code>ls</code>、<code>top</code>、<code>ps</code> 此类为 <code>Linux</code> 系统内置的命令，我们希望通过自定义命令来作为某些复杂命令的组合，如自定义 <code>ll</code> 为 <code>ls -alF</code> 的简写，通过简写可以大幅缩短输入命令的时间，还可以避免输错命令，何乐而不为呢？</p><h2 id="自定义-Linux-命令-添加别名-Alias"><a href="#自定义-Linux-命令-添加别名-Alias" class="headerlink" title="自定义 Linux 命令 / 添加别名 Alias"></a>自定义 Linux 命令 / 添加别名 Alias</h2><p>自定义命令其实就是添加一个别名，执行如下命令创建别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><p>在这个文件里输入需要创建的别名，例如 <code>ll</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias ll&#x3D;&#39;ls -alF&#39;</span><br></pre></td></tr></table></figure><p>然后保存，再执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>现在，使用 <code>ll</code> 等价于输入 <code>ls -alF</code>。</p><p>可以将常用的命令组合简写，例如我们常用来查看进程的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias psp&#x3D;&#39;ps -ef|grep&#39;</span><br></pre></td></tr></table></figure><p>以后只需要输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看 PHP 进程</span><br><span class="line">psp php</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">FireRabbitdeMacBook-Pro:~ firerabbit$ psp php</span><br><span class="line">  501 89356     1   0 二07下午 ??        29:02.94 &#x2F;Applications&#x2F;PhpStorm.app&#x2F;Contents&#x2F;MacOS&#x2F;phpstorm</span><br><span class="line">  501 99412 99183   0  9:20下午 ttys005    0:00.00 grep php</span><br></pre></td></tr></table></figure><p>对于记不住命令的小金鱼们来说，利用好别名可以事半功倍哟！</p><h2 id="注意事项！"><a href="#注意事项！" class="headerlink" title="注意事项！"></a>注意事项！</h2><p>别名的使用只有定义者自己知道，因此不适合多人协作的工作。在日常的开发中（如在个人的 Mac），可以自定义一些常用的别名来提高自己工作的效率。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis添加密码验证</title>
      <link href="/2020/03/31/redis-add-permission/"/>
      <url>/2020/03/31/redis-add-permission/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要为-Redis-添加密码验证？"><a href="#为什么要为-Redis-添加密码验证？" class="headerlink" title="为什么要为 Redis 添加密码验证？"></a>为什么要为 Redis 添加密码验证？</h2><p>默认情况下，<code>redis</code> 不需要使用密码即可连接，而由于默认开放端口为 6379（用户一般不会去修改这个端口），导致基本信息完全暴露给试图攻击服务器者。</p><blockquote><p>IDCE.COM 建站之初未设置 redis 密码，结果被注入了挖矿病毒 %&gt;_&lt;%</p></blockquote><p>没有任何密码验证，意味着任何人都能访问到服务器的 Redis 服务，可能造成重要的信息泄露或者被访问者恶意删除造成严重后果！</p><p>总而言之，如果要使用 Redis 服务，那么最好为 <code>redis</code> 加上密码验证可以增加系统的安全性。</p><h2 id="开启-redis-密码验证"><a href="#开启-redis-密码验证" class="headerlink" title="开启 redis 密码验证"></a>开启 redis 密码验证</h2><p>以 <code>Linux</code> 系统为例，首先找到 <code>redis.conf</code> 配置文件，如果不知道文件在哪可以使用命令 <code>find / -name redis.conf</code> 找到。</p><p>添加 <code>requirepass</code> 字段，后面即你需要设置的密码，建议生成一个足够长的随机字符串来作为密码。</p><p><img src="https://i.loli.net/2019/08/29/l7msnYqtQeOiUNp.png" alt="image.png"></p><p>完成后保存，重启 <code>redis</code> 即可！</p><h2 id="Redis-cli-验证密码"><a href="#Redis-cli-验证密码" class="headerlink" title="Redis-cli 验证密码"></a>Redis-cli 验证密码</h2><p>在 <code>cli</code> 模式下，如果设置了密码需要验证之后才能执行 <code>redis</code> 操作，进入 <code>redis</code> 服务，然后执行 <code>auth 密码</code> 即可。</p><p><img src="https://i.loli.net/2019/08/29/VqJUpRx25HbELGA.png" alt="image.png"></p><h2 id="PHP-验证-Redis-密码"><a href="#PHP-验证-Redis-密码" class="headerlink" title="PHP 验证 Redis 密码"></a>PHP 验证 Redis 密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$redis &#x3D; new Redis(); </span><br><span class="line">$redis-&gt;connect(&#39;127.0.0.1&#39;, 6379); &#x2F;&#x2F;连接Redis</span><br><span class="line">$redis-&gt;auth(&#39;123456&#39;); &#x2F;&#x2F;密码验证</span><br><span class="line">$redis-&gt;select(2);&#x2F;&#x2F;选择数据库2</span><br><span class="line">$redis-&gt;set( &quot;testKey&quot; , &quot;Hello Redis&quot;); &#x2F;&#x2F;设置测试key</span><br><span class="line">echo $redis-&gt;get(&quot;testKey&quot;);&#x2F;&#x2F;输出value</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker更换镜像源</title>
      <link href="/2020/03/31/docker-change-mirrors/"/>
      <url>/2020/03/31/docker-change-mirrors/</url>
      
        <content type="html"><![CDATA[<h2 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h2><h3 id="Docker-官方镜像中国区"><a href="#Docker-官方镜像中国区" class="headerlink" title="Docker 官方镜像中国区"></a>Docker 官方镜像中国区</h3><p><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><h3 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h3><p><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><h3 id="中科大"><a href="#中科大" class="headerlink" title="中科大"></a>中科大</h3><p><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里的镜像异常麻烦，本着求真的角度，还是把这一部分补充了 %&gt;_&lt;%。</p><p>首先需要注册成为阿里开发者，前往：<a href="https://dev.aliyun.com/search.html">阿里云开发者中心</a>。</p><p>注册并登陆后，点击右上角的<strong>控制台</strong>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64141265-f297c080-ce39-11e9-92ca-1c89280fe717.png" alt="image"></p><p>想吐槽阿里云的界面设计，阿里云是一个超级聚合体……里面的服务实在太多，如果不写这样一个图文教程很难找到自己想要的功能，操作步骤如下图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/64141431-91242180-ce3a-11e9-87d2-6edc56597f8c.png" alt="image"></p><p>进入容器镜像服务，点击左侧菜单的<strong>镜像中心-镜像加速器</strong>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64141511-e5c79c80-ce3a-11e9-8fe4-037f95849052.png" alt="image"></p><p>根据阿里的提示操作即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;93m46zjd.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>这里的 <code>https://93m46zjd.mirror.aliyuncs.com</code> 是我的个人镜像源加速地址，建议自己申请一个。</p><h2 id="更换-Docker-镜像源"><a href="#更换-Docker-镜像源" class="headerlink" title="更换 Docker 镜像源"></a>更换 Docker 镜像源</h2><h3 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h3><p>Docker 使用 <code>daemon.json</code> 作为配置文件，如果没有的话则创建，编辑 <code>daemon.json</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>添加仓库地址（以中科大镜像源为例）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成并保存，重启 docker：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><p>作为一个学府，中科大还十分贴心的写了帮助文档：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">Docker 镜像使用帮助</a></p><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p>Docker for Window 可以直接通过右键右下角小鲸鱼，选择 Settings，选择 Daemon 选项卡，在右下角的 Registry mirrors 添加对应的镜像源地址即可。</p><h3 id="Mac-系统"><a href="#Mac-系统" class="headerlink" title="Mac 系统"></a>Mac 系统</h3><p>如果你是下载了 Docker 桌面版的 Mac 系统用户，启动 Docker，选择右上角的小鲸鱼图标，选择菜单中的 <code>Preferences</code>：</p><p><img src="https://i.loli.net/2019/09/03/PeijKIqDGrZVgct.png" alt="image.png"></p><p>在选项卡中选择 Daemon，点击 <code>Registry mirrors</code> 下方的加号，输入需要添加的国内镜像源地址，完成后点击底部的 <code>Apply &amp; Restart</code> 应用配置并重启 Docker：</p><p><img src="https://user-images.githubusercontent.com/28209810/64140700-f4f91b00-ce37-11e9-8e02-e5c4d2b1682c.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac系统安装Pecl</title>
      <link href="/2020/03/31/mac-install-pecl/"/>
      <url>/2020/03/31/mac-install-pecl/</url>
      
        <content type="html"><![CDATA[<h2 id="PECL-简介"><a href="#PECL-简介" class="headerlink" title="PECL 简介"></a>PECL 简介</h2><p>PECL（The PHP Extension Community Library）是 PHP 扩展的存储库，为 PHP 所有的扩展提供提供托管和下载服务。</p><p>一些常用及优秀的 PHP 扩展均被收录在 PECL 中，如：yaf、swoole 等等，我们可以方便的使用 pecl 命令来安装这些扩展。</p><p>PECL 支持的扩展：<a href="http://pecl.php.net/">PECL All Packages</a></p><p>在 Mac 系统或 Linux 系统中可能没有默认安装 pear，因此无法使用 pecl 命令，本文将介绍如何安装 pear。</p><h2 id="PEAR-安装方法"><a href="#PEAR-安装方法" class="headerlink" title="PEAR 安装方法"></a>PEAR 安装方法</h2><p>官方文档：<a href="https://pear.php.net/manual/en/installation.getting.php">Getting and installing the PEAR package manager</a></p><h3 id="1、下载-PEAR"><a href="#1、下载-PEAR" class="headerlink" title="1、下载 PEAR"></a>1、下载 PEAR</h3><p>使用 curl 命令下载即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;pear.php.net&#x2F;go-pear.phar</span><br></pre></td></tr></table></figure><h3 id="2、-安装-PEAR"><a href="#2、-安装-PEAR" class="headerlink" title="2、 安装 PEAR"></a>2、 安装 PEAR</h3><p>下载完成后，执行下面命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php -d detect_unicode&#x3D;0 go-pear.phar</span><br></pre></td></tr></table></figure><h3 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h3><p>安装过程需要配置参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Below is a suggested file layout for your new PEAR installation.  To</span><br><span class="line">change individual locations, type the number in front of the</span><br><span class="line">directory.  Type &#39;all&#39; to change all of them or simply press Enter to</span><br><span class="line">accept these locations.</span><br><span class="line"></span><br><span class="line"> 1. Installation base ($prefix)                   : &#x2F;usr</span><br><span class="line"> 2. Temporary directory for processing            : &#x2F;tmp&#x2F;pear&#x2F;install</span><br><span class="line"> 3. Temporary directory for downloads             : &#x2F;tmp&#x2F;pear&#x2F;install</span><br><span class="line"> 4. Binaries directory                            : &#x2F;usr&#x2F;bin</span><br><span class="line"> 5. PHP code directory ($php_dir)                 : &#x2F;usr&#x2F;share&#x2F;pear</span><br><span class="line"> 6. Documentation directory                       : &#x2F;usr&#x2F;docs</span><br><span class="line"> 7. Data directory                                : &#x2F;usr&#x2F;data</span><br><span class="line"> 8. User-modifiable configuration files directory : &#x2F;usr&#x2F;cfg</span><br><span class="line"> 9. Public Web Files directory                    : &#x2F;usr&#x2F;www</span><br><span class="line">10. System manual pages directory                 : &#x2F;usr&#x2F;man</span><br><span class="line">11. Tests directory                               : &#x2F;usr&#x2F;tests</span><br><span class="line">12. Name of configuration file                    : &#x2F;private&#x2F;etc&#x2F;pear.conf</span><br><span class="line"></span><br><span class="line">1-12, &#39;all&#39; or Enter to continue: </span><br></pre></td></tr></table></figure><p>修改安装时的根目录，输入 1，再输入 <code>/usr/local/pear</code>，回车；</p><p>修改命令的安装目录，输入 4，再输入 <code>/usr/local/bin</code>，回车；</p><p>其它选项使用默认即可，一路回车。</p><h3 id="4、测试是否安装成功"><a href="#4、测试是否安装成功" class="headerlink" title="4、测试是否安装成功"></a>4、测试是否安装成功</h3><p>输入命令 <code>pear version</code>，如果成功安装将会看到类似如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PEAR Version: 1.10.9</span><br><span class="line">PHP Version: 7.1.23</span><br><span class="line">Zend Engine Version: 3.1.0</span><br><span class="line">Running on: Darwin hongjiahuangdeMac-mini.local 18.6.0 Darwin Kernel Version 18.6.0: Thu Apr 25 23:16:27 PDT 2019; root:xnu-4903.261.4~2&#x2F;RELEASE_X86_64 x86_64</span><br></pre></td></tr></table></figure><p>接下来就可以使用 <code>pecl install &lt;扩展名称:版本号&gt;</code> 安装各种被 PECL 收录的扩展了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis淘汰机制</title>
      <link href="/2020/03/31/redis-delete-policy/"/>
      <url>/2020/03/31/redis-delete-policy/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>redis 的配置文件为 <code>redis.conf</code>，当 redis 占用的内存达到配置的最大内存时，再使用 redis 增加新的值时会触发淘汰机制将占用的内存释放出来，以创建新的键值。</p><p>redis 允许占用的最大内存，约在 567 行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure><p>找到 <code>maxmemory</code> 去掉前面的 <code>#</code> 井号， 将 <code>&lt;bytes&gt;</code>（单位：字节） 改为需要设置的最大内存值，一般而言，建议设置为服务器总内存的 50%~75%（需根据服务器情况确定），如果服务器其他进程占用较多内存的话，可以减少这个值。</p><p>当 redis 内存占用达到设置的最大值，触发的淘汰策略，约在 598 行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># maxmemory-policy noeviction</span><br></pre></td></tr></table></figure><p>去掉前面的 <code>#</code> 井号，后面即为淘汰的策略，淘汰策略有许多种，下面进行介绍。不过在此之前，我们可以理解一下 redis 如何淘汰掉键值。</p><p>我们通过给一个键值设置过期时间，来让它“自动过期”，但实际上，即使到了过期时间，这个键其实并没有立即被删除，而是当下次取这个键值的时候进行判断，如果这个键设置了过期时间，同时已经过了过期时间再进行删除，这是一种惰性的删除策略。</p><p>此外，除了这种被动删除的策略之外还有主动删除策略，例如定期扫描过期的键值，扫描也不可能将全部的键都扫秒一遍，而是通过某种随机算法获取某些键，判断键是否过期再决定是否删除。</p><p>为什么键设定了过期时间不能在到期后立即删除呢？因为从技术的角度上来考虑这是一件十分困难的事，如果要追踪一个键值的过期时间，可能需要启动一个进程来追踪并且在过期时“杀掉”这个键，这样使用 redis 的优势就全部没有了，反而要消耗更多的系统资源。</p><p>redis 过期的键太多而没有删除，会造成内存资源的浪费，反之，如果过于频繁的去检查过期的键，希望在第一时间释放出内存资源，频繁的检查也是十分耗费资源的事，因此两者之间必须存在一个平衡，这就需要依靠 redis 的淘汰策略。</p><h2 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h2><p>redis 有如下淘汰策略：</p><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧</p><p>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</p><p>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key，这个一般没人用吧</p><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key（这个一般不太合适）</p><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key</p><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2020/03/31/redis-base/"/>
      <url>/2020/03/31/redis-base/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是由 ANSI C（标准C语言）写的键值对存储系统，由于是存储在内存中的，所以性能极高，但我们知道存储在内存中一旦电脑关闭就会丢失数据，Redis 还提供了数据持久化的功能，也就是说，Redis 的数据也可以保存在本地硬盘中。</p><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>所谓原子操作指的是不可再分割的操作，要么都成功，要么都失败。</p><p>Redis 的操作结果一定是确定的，例如将商品库存存储在 Redis 中，此时由于高并发场景有 1000 个请求进入，判断减少库存，总库存为 999 个，那么第 1000 个请求会因为高并发的场景而判断失误吗？答案是不会。</p><p>同理，一些抽奖活动将奖品数量存储在 Redis 进行操作，不会出现奖品被人领光还能领到奖品的情况，当有面试官问你就这么告诉他。</p><p>以抽奖场景示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 读取数据库奖品余额</span><br><span class="line">$count &#x3D; PrizeModel::getCount();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 判断是否还有可以领取的奖品</span><br><span class="line">if($count &gt; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F; 处理领奖逻辑，并且减少奖品数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个场景中，涉及到读后写的问题，在读取奖品余额后更新奖品数量，由于读写操作是分开的，可能因为请求的先后而产生不同结果；比如 A 进来领取奖品，奖品的库存是 1，此时 B 也进来领取奖品，这个时候他也判断了奖品库存是 1，这个时候奖品的数量只剩 1 个，却有两个人被判断为可以领取奖品，就出现奖品库存变为负数的情况。</p><p>导致问题的根本原因在于读操作与写操作是分离的，中间如果有其他的请求进来，那么读操作的结果就是不准确的，可以使用 Redis 的 <code>decr</code>（自减）来操作商品库存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis &#x3D; new Redis();</span><br><span class="line">$count &#x3D; $redis-&gt;decr(&#39;prize&#39;);</span><br><span class="line">if($count &gt; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F; 处理领奖逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis 的 <code>decr</code> 命令将值减 1，并且返回了计算后的结果，实现了读写同步的操作，因此不会产生因为高并发场景读取了错误数据的情况。</p><p>这些都是依赖 Redis 的原子操作，之所以能够实现原子操作，是因为 <strong>Redis 是单线程</strong>。</p><p>假如对方问你，为什么单线程就是原子操作？</p><blockquote><p>扩展阅读：<a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101">什么是线程</a></p></blockquote><p>操作系统调度任务以线程为基本单位，Redis 所有的指令都在一个线程中进行，不会扩展出额外的线程；多线程，比如 MySQL 启动的时候是一个进程，而执行增删改查操作就是一个新的线程。多线程指的是可以同时干很多件事，而单线程只能一件事一件事的干，做完一件事才做下一件事，从效率上来说多线程远远超出单线程，但单线程的优势是每一步的执行结果都是确定的，要么都成功，要么都失败。</p><p>实际上，Redis 虽然是单线程但效率也是非常高的，因为它完全基于内存操作。</p><h2 id="键"><a href="#键" class="headerlink" title="键"></a>键</h2><p>Redis 使用键值对的形式存储数据，键类似于变量名字，键是一个字符串，最大长度 512MB，与开发语言不同的是　Redis 中的键可以使用一些开发语言中不能作为命名的符合，如：冒号、横杠。</p><p>键名称太长，会占用更多的内存空间，此外，太长的键名也会多查找造成影响；名称太短，又会造成语义不清，所以在取键名的时候需要有规范。</p><p><strong>键的名称区分大小写</strong>，不建议大小写混用，要么全部大写，要么全部小写，取名“见名知意”为佳。</p><p>可以参考如下规则：</p><p>第一段为项目名称或者缩写形式（非必需），如：project 或 pro<br>第二段为表的名字，如：user<br>第三段为区分键的字段，如：MySQL 主键的列名，属性名<br>第四段为键的特征字段，可以作为查询依据，如：MySQL 中主键 ID 的值</p><p>键的各个字段通常用冒号隔开。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 根据 ID</span><br><span class="line">idce:users:id:1</span><br><span class="line"></span><br><span class="line"># 根据属性名 name</span><br><span class="line">idce:users:name</span><br></pre></td></tr></table></figure><p>前缀增加项目名称的用途是：当一个 Redis 服务器部署了多个项目可以进行区分，如果是单个项目，则可以去掉项目名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users:id:1</span><br><span class="line"></span><br><span class="line"># 根据属性名 name</span><br><span class="line">users:name</span><br></pre></td></tr></table></figure><p>在项目中，最好有一个统一管理键名称的地方，否则后期无法进行维护。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Redis 支持如下数据结构：</p><ul><li>String：字符串</li><li>Hash：哈希</li><li>List：列表</li><li>Set：集合</li><li>Sorted Set：有序集合</li></ul><h2 id="PHP-使用-Redis"><a href="#PHP-使用-Redis" class="headerlink" title="PHP 使用 Redis"></a>PHP 使用 Redis</h2><p>PHP 想要使用 Redis 需要安装 redis 相关的扩展：<a href="https://pecl.php.net/package/redis">PECL - REDIS 扩展下载</a>。</p><p>也可以不使用扩展，直接下载 predis：<a href="https://github.com/nrk/predis">Github - Predis 下载</a></p><p>将下载的包使用 <code>require</code> 命令引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &quot;.&#x2F;lib&#x2F;predis-1.1&#x2F;autoload.php&quot;;</span><br></pre></td></tr></table></figure><h2 id="Redis-应用场景"><a href="#Redis-应用场景" class="headerlink" title="Redis 应用场景"></a>Redis 应用场景</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>由于其高性能的特性可以作为数据缓存，对于频繁查询但是不经常更新的数据可以将其缓存到 Redis 中，从而减少数据库查询压力，例如商品的库存、金额，需要注意的是当这些数据更新的时候也必须同步更新缓存数据。</p><p>此外，对于像微博的阅读量此类频繁更新的数据，也可以用缓存处理。方法是获取一条微博详情的时候，先判断是否有缓存，有的话先从缓存读取阅读量的数据，没有的话就从数据库读取，然后保存在 Redis 中；当用户访问时，直接在 Redis 操作访问量的增加，然后设置一个定时器程序，定期将缓存中的阅读量写入数据库，不过，这种类型的数据一般是比较不重要的，因为有可能会发生意外服务器重启导致数据丢失而没有正常写入数据库。</p><p>当某种数据需要频繁的查询或更新时可以使用 Redis 作为缓存。</p><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><p>我们经常会收到亲朋好友要求帮忙给他们家的小盆友投票（一般是才艺表演之类的），根据点赞数进行排行，排在前几名的会有奖励之类的。排行榜的数据变化十分频繁，这个时候就可以使用 Redis 的有序集合结构来存储排行数据。</p><h3 id="分布式锁、本地锁"><a href="#分布式锁、本地锁" class="headerlink" title="分布式锁、本地锁"></a>分布式锁、本地锁</h3><p>Redis 中有一种命令 <code>setnx</code> 意为 <code>set if not exists</code>，即当不存在时设置数据，否则不进行操作，利用这种特性可以实现分布式锁。当成功设置的时候就执行后面的逻辑，如果未能成功设置代表之前已经执行过了，就不再走后面的逻辑。</p><p>锁的作用是防止重复动作，比如用户在点击领取奖励的时候，发现没有响应（网络延迟导致），结果用户以为自己没点下去就多点了几次，如果不做防止重复提交的处理，很有可能会造成领取到多次奖励的 BUG。</p><p>分布式就是多台机子间，而本地锁指的是本机，其原理类似，比如设置一个带有过期时间的 String 类型的缓存，如果这个键不为空则代表加过锁了。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>Redis 中的列表结构由于读取头尾的速度非常快，因此适合作为消息队列的容器，将任务队列存储在 Redis 中可以大大提高程序的执行效率（与传统的数据库存储相比）。</p><h2 id="Redis-安全隐患"><a href="#Redis-安全隐患" class="headerlink" title="Redis 安全隐患"></a>Redis 安全隐患</h2><p>其中一个是未设置密码问题：<a href="https://idce.com/archive/PLlWREOZ?id=VDej">Redis 未设置密码导致服务器被安装挖矿病毒</a></p><p>此外，Redis 即使正常使用也可能存在安全隐患。</p><p>缓存分为过期缓存和不过期缓存，不过期缓存过多可能造成内存溢出，而过期缓存又可能带来新的问题。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透指的是查询一个缓存中不存在的数据，比如我们设置了一个根据用户 ID 来获取用户信息的缓存，此时如果我们输入 -1 或者其他不存在的 ID，那么系统将会判断缓存不存在，接着就去数据库查询。</p><p>这种“绕过”缓存查询数据库的行为类似于直接穿透了 Redis。</p><p>如果有人利用了这一点编写程序大量查询不存在的用户 ID 就很可能造成数据库崩溃。</p><p>解决方法是即使不存在的用户 ID 也设置一个空的缓存的键值，不过此类键值需要设置一个较短的过期时间，否则也可能会被恶意查询造成内存溢出。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>雪崩指的是一种短期内产生的爆发性冲击，在 Redis 中，如果有许多缓存在同一时刻过期，就会造成大量的数据需要从数据库查询，面对冲击性涌入的查询，数据库很可能造成崩溃。</p><p>解决方法是尽可能的让缓存的过期时间不一样，热门数据的缓存时间更长一些，对于同类型的数据可以设置一个额外的随机时间来让同类型的数据也会在不同时刻过期。</p><p>除此之外，还可以设计多级缓存结构来防止缓存雪崩。</p><p>当第一层的缓存过期了，不从数据库读取，而是判断第二层缓存是否存在，如果有就直接取数据，如果没有再判断下一层缓存……以此类推。这样的结构称为多级缓存，多级缓存结构比较复杂，其中第一层缓存叫做一级缓存，第二层叫做二级缓存……多级缓存结构可以防止突发性的冲击造成数据库崩溃，不过这样系统的复杂性会变高，多级缓存需要有一个程序来定期维护下级缓存，一般由架构师进行设计。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿与缓存雪崩有些类似，不过不同的是缓存击穿指的是某个单一的键值过期，但是此时却有大量的流量涌入，造成所有的请求都直接到数据库那边，相当于在某个点凿出了一个洞，因此叫做“击穿”。</p><p>防止缓存击穿的方法：</p><p>方法（一）：后台增加一个定期任务刷新缓存的过期时间。</p><p>方法（二）：将缓存的过期时间也保存在值里面，当获取这个缓存数据的时候判断过期时间，在超过设置的阀值时更新这个缓存的过期时间。</p><p>方法（三）：可以使用缓存雪崩所说的多级缓存方法。</p><p>方法（四）：增加锁机制，当缓存过期查询数据库时，判断锁，只允许一个请求进来，其他请求都进入等待状态，进入的请求在查好数据后更新缓存，此时等待中的请求就可以获取到数据了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Redis 还有许多应用，持续保持学习中……</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window环境下安装Docker的坑</title>
      <link href="/2020/03/31/window-install-docker-issue/"/>
      <url>/2020/03/31/window-install-docker-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近下载了 Docker for Window 搭建 Win10 系统的 PHP 环境，结果遇到了一大堆问题，网络上搜索答案极少，而且也很难找到能解决问题的方法，通过不断尝试和推测，踩了很多坑，也找到了填坑的办法，在此记录下来。</p><p>Docker for Window 下载地址：<a href="https://www.docker.com/products/docker-desktop">Docker 官方网站下载</a></p><h2 id="Docker-Hub-登录问题"><a href="#Docker-Hub-登录问题" class="headerlink" title="Docker Hub 登录问题"></a>Docker Hub 登录问题</h2><p>需要注册一个 Docker Hub 来进行登录，登录的帐号只能是 Docker ID，也就是注册时的用户名，而不是邮箱，此处需要注意，在使用 <code>docker login</code> 命令时经常会犯错而无法成功登录。</p><h2 id="Hyper-V-缺失问题"><a href="#Hyper-V-缺失问题" class="headerlink" title="Hyper-V 缺失问题"></a>Hyper-V 缺失问题</h2><p>Docker for Window 依赖 Hyper-V（微软的虚拟机系统），只有 Window 专业版才有这个功能，家庭版如果需要开启此功能就需要升级到专业版。</p><blockquote><p>查看电脑系统的方法：右键我的电脑，选择属性即可看到 Window 版本信息。</p></blockquote><p>家庭版也可以不升级，安装另一个 Docker 的产品——Docker Tool。</p><p>Docker Tool 不依赖 Hyper-V，而是 VirtualBox（也是一种虚拟机软件），如果安装了 Docker Tool，则会自动安装 VirtualBox。Docker Tool 的操作方法与 Docker for Window 不太一样，更复杂一些，虽然本人也尝试下载过，但是感觉十分不便，因此最后卸载了。（由于安装了 Docker Tool，这里又挖了一个新坑，后面进行介绍）</p><p>本人用的是 Win10 专业版系统，却发现没有 Hyper-V 这个选项，原来是因为下载了精简版的 ISO 作为装机镜像，一些装机系统那边下载的软件都是经过二次封装的，削减了一部分的功能，因此推荐用那些精简过的系统。</p><p>找了许多装机的 ISO 镜像，最后决定下载微软官方原版的 ISO 镜像（十分干净，不带第三方软件），然后重新安装了 Win10 专业版。</p><p>Window MSDN 镜像下载：<a href="https://msdn.itellyou.cn/">MSDN 我告诉你</a></p><p>选择左侧的系统，根据个人需求安装即可，不过据说对 Window 版本有一定的要求，太早的版本可能还是没有这个功能，建议至少 Win 8 以上(专业版)。</p><p>查看 Hyper-V 的方法是打开 <strong>控制面板</strong>，然后选择 <strong>程序</strong>，再选择 <strong>启用或关闭 Windows 功能</strong>。</p><p>重装后的系统已经可以看到 Hyper-V 这个选项了，如下图所示：</p><p><img src="https://i.loli.net/2019/10/20/uHBJOYP3Mtze6jc.png" alt="image.png"></p><p>勾选后选择确定，重新启动电脑。</p><h2 id="开启-Hyper-V-导致无法开机问题"><a href="#开启-Hyper-V-导致无法开机问题" class="headerlink" title="开启 Hyper-V 导致无法开机问题"></a>开启 Hyper-V 导致无法开机问题</h2><p>在开启 Hyper-V 的过程中，又遇到新的问题，如果将 Hyper-V 勾选起来点击确定，系统会安装软件然后提示重新启动，此时重新启动会导致电脑无法开机，一直在开始界面，并且提示“系统正在自动修复”。</p><p>只有进入到安全模式，将 Hyper-V 取消掉才能正常开机；又或者多次重启失败，系统自动恢复最后一次正确的配置。网上查了很多资料都没有找到解决方法，于是推测是因为相关的虚拟机服务没有启动导致的。</p><p>解决方法是进入服务管理，将 Hyper-V 的相关服务调整为“自动启动”，点击开始，选择运行（或者直接按 Win+R 快捷键），然后输入 <code>services.msc</code> 进入服务管理。</p><p><img src="https://i.loli.net/2019/10/20/75OeL1pd4x6QtzS.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/20/hkmugev9KtBzlZ3.png" alt="image.png"></p><p>然后打开 Hyper-V，再重启就可以了。</p><h2 id="Docker-命令被占用"><a href="#Docker-命令被占用" class="headerlink" title="Docker 命令被占用"></a>Docker 命令被占用</h2><p>在安装好了 Docker for Window 后，打开命令行使用 docker 命令，却提示如下的错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to resolve docker endpoint: open C:\Users\Administrator\.docker\machi....</span><br></pre></td></tr></table></figure><p>大致意思是找不到某个文件，而 <code>docker-machine</code> 是 Docker Tool 用到的东西，在翻找了许多资料后才发现原来是卸载时残留的环境变量导致的问题，Docker Tool 虽然卸载了，但是环境变量还在，这就导致了使用 docker 命令用的环境变量路径还是 Docker Tool 设置的路径，由于软件被卸载了，路径自然就找不到了。</p><p>解决方法是删掉残留的环境变量。</p><p>右键我的电脑，高级系统设置，环境变量。</p><p><img src="https://i.loli.net/2019/10/20/VLGM5XjYpJhZEeW.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/20/1HFzeVMgtSoLRb7.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/20/QYVrGO3k2M8By1D.png" alt="image.png"></p><p>然后在用户变量与系统变量中，找到 Docker 相关的变量全部删除，然后卸载掉 Docker for Window，重装一遍，即可解决（建议重启一次电脑）。</p><h2 id="磁盘共享"><a href="#磁盘共享" class="headerlink" title="磁盘共享"></a>磁盘共享</h2><p>Docker 恢复正常以后，本人使用的是自己封装的一套 docker-compose 系统，由于里面用到了容器卷，在 Window 系统中还存在磁盘共享问题。</p><p>在使用 <code>docker-compose up -d</code> 的时候遇到如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create container for service redis: b&#39;Drive sharing failed for an unk...</span><br></pre></td></tr></table></figure><p>大致意思是说磁盘共享失败。</p><p>解决方法是打开 Docker for Window 的 Settings，右键右下角的小鲸鱼图标进入设置界面，在设置界面中选择 Shared Drives 选项卡，将需要共享的磁盘勾选起来，然后点击 Apply（应用）保存设置，这个过程可能需要输入 Window 系统的用户名和密码，如果没有设置密码则需要设置一个。</p><p><img src="https://i.loli.net/2019/10/20/RCuri4gzwynGNeH.png" alt="image.png"></p><h2 id="Docker-Compose-路径问题"><a href="#Docker-Compose-路径问题" class="headerlink" title="Docker-Compose 路径问题"></a>Docker-Compose 路径问题</h2><p>接着又遇到新的问题，执行 <code>docker-compose up -d</code> 弹出如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: for workspace_redis_1  Cannot start service redis: OCI runtime create failed: container_linux.go:345: starting container process caused &quot;process_linux.go:430: container init caused \&quot;rootfs_linux.go:58: mounting \\\&quot;&#x2F;etc&#x2F;localtime\\\&quot; to rootfs \\\&quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;c6e01c3620bbec9f7dc46bc22dbda8a9cdbf050746f17af60e665fb2191f5d27&#x2F;merged\\\&quot; at \\\&quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;c6e01c3620bbec9f7dc46bc22dbda8a9cdbf050746f17af60e665fb2191f5d27&#x2F;merged&#x2F;usr&#x2F;share&#x2F;zonStarting workspace_mysql_1 ... error </span><br></pre></td></tr></table></figure><p>这是由于我在 <code>docker-compose.yml</code> 文件中写了一个错误的路径，<code>/etc/localtime</code> 是 Linux 系统里面的路径，将它去掉就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis:</span><br><span class="line">        build: redis&#x2F;</span><br><span class="line">        restart: always</span><br><span class="line">        volumes:</span><br><span class="line">          - .&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br><span class="line">          - .&#x2F;var&#x2F;logs&#x2F;redis.log:&#x2F;var&#x2F;log&#x2F;redis.log</span><br><span class="line">          - &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime</span><br><span class="line">        ports:</span><br><span class="line">          - &quot;6379:6379&quot;</span><br><span class="line">        networks:</span><br><span class="line">          - default</span><br></pre></td></tr></table></figure><p>去掉后就可以正常运行了。</p><h2 id="Vmware、Hyper-V-不兼容问题"><a href="#Vmware、Hyper-V-不兼容问题" class="headerlink" title="Vmware、Hyper-V 不兼容问题"></a>Vmware、Hyper-V 不兼容问题</h2><p>第一次因为 Hyper-V 缺失而无法安装时，曾经尝试过使用 Vmware 来安装虚拟机，想要在虚拟机里面装一个 MacOS 系统，结果也是一个大坑，默认情况下的 Vmware 不支持 MacOS，而需要安装一个补丁，结果折腾了半天也没搞定，MacOS 的镜像高达 7 个 G，还因为百度网盘暂停会导致重新开始……折腾得心累，于是放弃了。</p><p>Hyper-V 与 Vmware 是不兼容的，一山不容二虎，如果要使用其中的一种，需要卸载掉另外一种。否则可能会因为服务的问题导致软件不能正常启动。</p><h2 id="完结感言"><a href="#完结感言" class="headerlink" title="完结感言"></a>完结感言</h2><p>在中途曾经放弃过安装 Docker 的念头，而是手动安装了 PHP、MySQL、Redis、Nginx 等环境，但是后面又发现许多 PHP 扩展在 Window 系统的安装都十分麻烦，比如 swoole 扩展还需要安装 cygwin，折腾的心累于是放弃了。</p><p>真是艰辛的过程~~~</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主键详解</title>
      <link href="/2020/03/31/mysql-primary-key/"/>
      <url>/2020/03/31/mysql-primary-key/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从书本上学到的 MySQL 主键知识十分有限，我们只是知道基础的理论。</p><p>在一次面试中，面试官提问：主键索引与普通索引有什么区别？</p><p>当场懵逼。</p><p>为了深入学习 MySQL 记录下此文。</p><h2 id="MySQL-主键（Primary-Key）"><a href="#MySQL-主键（Primary-Key）" class="headerlink" title="MySQL 主键（Primary Key）"></a>MySQL 主键（Primary Key）</h2><p>MySQL 中的键即某种约束，键具有索引的作用，通过约束条件可以使得数据更快的被查到。</p><p><strong>主键</strong> 是基本每张表都会用到的，一般类型为整型（integer、bigInteger）或者无符号整型（unsigned integer)并按照自然数的顺序自增。</p><p>主键是唯一的。</p><p>主键是一种索引，可以加快查询效率。</p><p>这是我们通常理解的主键，那么主键作为索引，又与普通索引有什么不同？为什么表需要主键？</p><h2 id="主键的分类"><a href="#主键的分类" class="headerlink" title="主键的分类"></a>主键的分类</h2><p>主键的字段名称一般设置为 ID，当这个 ID 与业务无关时，称为逻辑主键（即 ID 没有实际的意义），如果将用户名（name） 字段设置为主键，该字段是业务中会用到的字段，称为业务主键。</p><p>由于主键是业务中经常会用到的键，而业务又经常变更，因此不适合将业务字段作为主键，而是设置一个与业务毫无关系的（ID）字段作为主键。</p><p>如果将业务字段用来做主键，例如上面的例子中的 name，系统后台需要修改某个用户的 name 字段，意味着主键也跟着变更了。</p><p>如果存在以下场景：</p><p>用户个人空间的地址为：<code>http://domain.com/:name</code>，<code>:name</code> 是用户名（即数据库中的 name 字段）。</p><p>主键一旦变更，某些页面如个人空间也会跟着变更，假如我收藏了某个用户的空间到浏览器：<code>http://domain.com/user/xiaoming</code>，结果因为用户改名为：xiaohong，这个用户的空间地址就变成了：<code>http://domain.com/user/xiaohong</code>，那我收藏的地址就 404 了，除了这方面的原因，由于可以随意修改主键，也就导致你改了主键的值，其他人又改成之前用过的主键，会产生许多问题，如果某个人又将 xiaogang 的名字改成 xiaoming，那我收藏的地址就会变成原名为 xiaogang 的个人空间，业务变得十分混乱。</p><p>主键通常是不能变更的值，因此建议设置一个与业务毫无关系的字段作为主键的值，之所以要用整型是因为查询效率比字符串更高、所需空间更小，可以使用自增自动生成唯一的值。</p><p>其他类型如字符串作为主键，由于在插入数据时需要生成唯一字符串，同时还需要判断是否已存在该值，故在插入数据的时候效率也会降低。</p><p>除了将单个字段设置为主键，也可以将多个字段绑定在一起作为联合主键（也称复合主键）。</p><p>主键设计原则：</p><ul><li>主键的值 <strong>应该</strong> 无法被修改</li><li>主键的值 <strong>不应该</strong> 与业务有关</li><li>主键的值 <strong>建议</strong> 使用系统自动生成（如自增整型）</li><li><strong>建议</strong> 使用单个字段作为主键</li><li>每张表都 <strong>建议</strong> 设置主键</li></ul><h2 id="为什么表需要主键"><a href="#为什么表需要主键" class="headerlink" title="为什么表需要主键"></a>为什么表需要主键</h2><p>想一下如果没有主键，需要删改查除某条数据的时候会有多麻烦：“帮我删掉 name 为 xiaohong 的那条数据”，而 name 属性又没有设置唯一键，存在很多条同名数据，到底是删除哪条？</p><p>而当我们设置了 ID 作为主键，那我们就可以说：“删除 ID 为 6 的数据”、“帮我把 ID 为 6 的 name 字段改成 xiaohong”。</p><p>主键的其中一个作用即指向该行的数据，<strong>键具有约束作用</strong>，主键约束可以令数据具有唯一性，设置身份证为主键，那么这个主键就决定了一个人的个人资料，从千千万万个人当中，可以用身份证来指代唯一的一个人。</p><p>此外，主键索引可以提升查询效率，将一个字段设置为主键时，便会创建主键索引。</p><p>（下文介绍主键索引与普通索引区别）</p><h2 id="MySQL-主键与唯一键（Unique-Key）的区别"><a href="#MySQL-主键与唯一键（Unique-Key）的区别" class="headerlink" title="MySQL 主键与唯一键（Unique Key）的区别"></a>MySQL 主键与唯一键（Unique Key）的区别</h2><p>主键字段的值是唯一的，唯一键也要求字段值唯一，这两者的区别在于唯一键的值可以为 NULL，并且可以存在重复的 NULL 数据。</p><p>梳理如下：</p><p>唯一键的值 <strong>可以为空</strong>，且不能存在除空值以外重复的值。</p><p>主键的值必须 <strong>不为空</strong> 且不存在重复。</p><p>每张表中 <strong>只能</strong> 存在一个主键，可以存在 <strong>多个</strong> 唯一键。</p><p>从存在意义上来说，主键的作用是指代这一行的数据（如身份证代表一个人），而唯一键只是一种约束作用，用来约束这个字段在这张表不能存在相同值（如限制用户手机号码只能注册一个账号）。</p><h2 id="主键索引与普通索引（Normal-Index）的区别"><a href="#主键索引与普通索引（Normal-Index）的区别" class="headerlink" title="主键索引与普通索引（Normal Index）的区别"></a>主键索引与普通索引（Normal Index）的区别</h2><blockquote><p>扩展阅读：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></p></blockquote><p>普通索引的作用只是加快查询效率，并且可以存在重复的值，而主键索引的值是唯一的，它也可以提高查询效率，普通索引的值可以为 NULL，查询一个存在 NULL 的普通索引会导致查询效率提升的作用失效，当一个列设置了索引，同时也应当将其设置为 NOT NULL。</p><p>主键索引与普通索引的结构也不同。</p><h3 id="聚簇索引和非聚簇索引（二级索引）"><a href="#聚簇索引和非聚簇索引（二级索引）" class="headerlink" title="聚簇索引和非聚簇索引（二级索引）"></a>聚簇索引和非聚簇索引（二级索引）</h3><ul><li>聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据</li><li>非聚簇索引：将数据存储于索引分开结构，索引结构的叶子节点指向了数据的对应行</li></ul><p>Innodb 存储引擎中，数据表 table 由 table.frm、table.idb 组成。table.frm 保存表结构的定义，table.idb 保存的是数据和索引，这样的结构称为聚簇索引。</p><p>Myisam 存储引擎中，数据表 table 由 table.frm、table.myi、table.myd 组成。table.frm 保存表结构的定义，table.myi 保存索引，table.myd 保存数据。在用到索引时，先到 table.myi(索引树)中进行查找，取到数据所在 table.myd 的行位置，拿到数据。所以 Myisam 引擎的索引文件和数据文件是独立分开的，称之为非聚簇索引。</p><p>聚簇索引是按照数据存放的物理位置为顺序的，聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索更快。</p><p>在 Innodb 中，主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引，如果没有唯一键，则隐式的生成一个键来建立聚簇索引。</p><p>在表结构中只存在一个聚簇索引（主键索引），除此之外都是非聚簇索引（普通索引）。</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>一种特殊情况可以不通过聚簇索引查询数据，那就是通过创建联合索引（多个字段作为索引），如果查询的数据在索引中可以直接获取到，那就不需要再到数据行进行查询了。</p><p>例如创建索引：idx_name_email</p><p>name 字段 和 email 字段是联合索引，当我们使用如下语句查询时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name where email &#x3D; &quot;xxx@idce.com&quot;</span><br></pre></td></tr></table></figure><p>通过 email 来查询 name，由于它们是一组联合索引，因此可以直接从索引中拿到对应的数据。</p><p>覆盖索引查询数据只需要从索引中获得，而不需要到数据表中获取，因此可以极大的提高查询效率。</p><p>之所以能够从索引中得到数据，是因为索引的结构中保存了对应字段的值。</p><p>容易混淆的一个地方：上面介绍的聚簇索引才能保存数据，那为什么普通索引也能保存数据？</p><p>其实这里指的是表的数据，通过聚簇索引找到的数据是直接找到表对应行的一整行数据，而索引保存的数据是这个字段的值，因此可以通过索引得到对应字段的值。</p><p>面试官曾经问我的问题：索引会保存字段的值吗？</p><p>当时觉得不会，应该是保存对应行的所在地址才对。但其实是会保存的，因为只有保存了这个数据，查询索引字段才能快速进行数据对比从而筛选数据，如果能不回到表查询，则不回到表查询，回到表查询的效率比直接从索引拿数据低得多。</p><p>索引的结构，一侧是字段的值，另一侧是下一个数据的地址：</p><p><img src="https://i.loli.net/2019/11/26/hArR2ISmwPLzNCy.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx SSL证书配置问题</title>
      <link href="/2020/03/31/nginx-ssl-issue/"/>
      <url>/2020/03/31/nginx-ssl-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="SSL-问题"><a href="#SSL-问题" class="headerlink" title="SSL 问题"></a>SSL 问题</h2><p>Nginx 重启时，报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [warn] the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;xxx.conf:57</span><br></pre></td></tr></table></figure><p>通常我们会在 server 有如下 Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssl on;</span><br><span class="line">ssl_certificate   &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;xxx.com.pem;</span><br><span class="line">ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;xxx.com.key;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure><p>访问网页提示错误代码 <code>ERR_SSL_PROTOCOL_ERROR</code>。</p><p><img src="https://i.loli.net/2019/12/05/R3GCLPZ8tsbpzS2.png" alt="image.png"></p><p>原因在于 Nginx 升级到 1.15 版之后，SSL 的配置不再使用 <code>ssl on</code>，把这一句去掉就可以。</p><p>这时再执行：<code>nginx -s reload</code> 平滑重启 Nginx 就不会报错了。</p><h2 id="CURL-无法正常访问"><a href="#CURL-无法正常访问" class="headerlink" title="CURL 无法正常访问"></a>CURL 无法正常访问</h2><p>按照上面的步骤重启 Nginx 后，使用 curl 尝试连接到网站，结果依然报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (35) SSL received a record that exceeded the maximum permissible length.</span><br></pre></td></tr></table></figure><p>这其实也是升级后配置发生了变化，第一个步骤的提示信息已经给与了提示：<code>use the &quot;listen ... ssl&quot;</code>，再次编辑 <code>xxx.conf</code>，将 <code>listen 443</code> 修改为：<code>listen 443 ssl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  idce.com;</span><br><span class="line">    &#x2F;&#x2F; ...此处省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存，然后再执行重启，OK！</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm逼死强迫症患者解决方法</title>
      <link href="/2020/03/31/phpstorm-no-ext-tip-issue/"/>
      <url>/2020/03/31/phpstorm-no-ext-tip-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="PHPStorm"><a href="#PHPStorm" class="headerlink" title="PHPStorm"></a>PHPStorm</h2><p>在使用 JSON 函数的时候，会报如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext-json missing in composer.json</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/26/sYow5WKkvbRdXOV.png" alt="image.png"></p><p>花花绿绿看得猛男落泪，简直要逼死强迫症啊！</p><p>原因可能是因为使用了 Docker 或者其他的环境，由于扩展是安装在虚拟机上就导致本机无法正确识别 PHP 的扩展，并不是本机上没有安装这个扩展，代码没有问题也不会报错，就是看得难受。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>所幸，这里提供了两种方法可以根治此问题。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>针对缺失的扩展，在 <code>composer.json</code> 文件的 <code>require</code> 字段进行添加。</p><p>例如：<code>&quot;ext-json&quot;: &quot;*&quot;</code>：</p><p><img src="https://i.loli.net/2019/11/26/IH3GgJQB4XWpz8y.png" alt="image.png"></p><p>如果没有 <code>composer.json</code> 文件，在项目根目录下自行创建一个即可。</p><p>这种方法针对特定的扩展，除了 JSON 扩展，常见的还有 CURL 扩展也无法正常识别，用相同的方法即可解决，扩展不多的时候可以用这种方法，要是使用了诸多第三方扩展而 PHPStorm 无法识别，可以参考下面的方案二一次性解决问题。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>关闭 PHPStorm 缺失扩展提示。</p><p>打开左上角 <code>File-&gt;Settings</code> 搜 PHP，然后找到下方一行的 <code>Inspections</code>，在右侧搜索 <code>extension</code>，找到 <code>Extension is mission in composer.json</code> 取消勾选保存即可，见下图：</p><p><img src="https://i.loli.net/2019/11/26/bB9RVYwCf6DtmGL.png" alt="image.png"></p><p>以上方法任选一种即可。</p><p><img src="https://i.loli.net/2019/11/26/UZdEPz9Hg5MkXyt.png" alt="image.png"></p><p>猛的一顿操作之后——舒服多了！！</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-CLI 常用命令参数</title>
      <link href="/2020/03/15/php-cli-arguments/"/>
      <url>/2020/03/15/php-cli-arguments/</url>
      
        <content type="html"><![CDATA[<h2 id="运行-PHP-文件"><a href="#运行-PHP-文件" class="headerlink" title="运行 PHP 文件"></a>运行 PHP 文件</h2><p>可以直接使用 <code>php &lt;文件路径&gt;</code> 执行 PHP 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php &#x2F;var&#x2F;www&#x2F;html&#x2F;project&#x2F;index.php;</span><br></pre></td></tr></table></figure><h2 id="进入命令行模式"><a href="#进入命令行模式" class="headerlink" title="进入命令行模式"></a>进入命令行模式</h2><p>使用命令 <code>php -a</code> 可以进入命令行模式，在这里可以直接运行 PHP 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; echo &quot;hello world&quot;;</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h2 id="加载指定配置文件"><a href="#加载指定配置文件" class="headerlink" title="加载指定配置文件"></a>加载指定配置文件</h2><p>使用 <code>php -c</code> 可以加载指定的配置文件 <code>php.ini</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -c &#x2F;test&#x2F;my_php.ini</span><br></pre></td></tr></table></figure><h2 id="显示当前配置文件路径"><a href="#显示当前配置文件路径" class="headerlink" title="显示当前配置文件路径"></a>显示当前配置文件路径</h2><p>使用命令 <code>php --ini</code> 查看当前加载的配置文件路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php --ini</span><br><span class="line">Configuration File (php.ini) Path: &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php</span><br><span class="line">Loaded Configuration File:         &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;php.ini</span><br><span class="line">Scan for additional .ini files in: &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d</span><br><span class="line">Additional .ini files parsed:      &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-bcmath.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-gd.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-gmp.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-mysqli.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-opcache.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-pdo_mysql.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-redis.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-sockets.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-sodium.ini,</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;docker-php-ext-swoole.ini</span><br></pre></td></tr></table></figure><h2 id="启动一个-WebServer"><a href="#启动一个-WebServer" class="headerlink" title="启动一个 WebServer"></a>启动一个 WebServer</h2><p>Web Server（网页服务）一般是由 Apache、Nginx 或是 Windows 系统的 IIS 提供。</p><p>从 <code>PHP 5.4.0</code> 起，也可以使用 cli 模式来启动 PHP 内置的 Web Server。</p><blockquote><p>这个内置的 Web 服务器主要用于本地开发使用，不可用于线上产品环境。</p></blockquote><p>使用命令 <code>php -S localhost:&lt;端口号&gt; [文件路径]</code> 来启动一个 WebServer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -S localhost:999</span><br><span class="line">[Sun Mar 15 04:25:52 2020] PHP 7.4.1 Development Server (http:&#x2F;&#x2F;localhost:999) started</span><br></pre></td></tr></table></figure><blockquote><p>localhost 等价于 127.0.0.1</p></blockquote><p>启动 PHP WebServer 时可以指定一个文件作为启动脚本（如框架的入口文件），在该文件注册所需要的插件及分发路由等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 127.0.0.1:666 test.php</span><br></pre></td></tr></table></figure><p>命令添加 <code>-t</code> 参数，将会以目录作为 WebServer 的启动目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 127.0.0.1:666 -t public&#x2F;</span><br></pre></td></tr></table></figure><p>关掉命令行窗口或者按 <code>Ctrl + C</code> 即可退出 PHP WebServer。</p><h2 id="PHP-版本号"><a href="#PHP-版本号" class="headerlink" title="PHP 版本号"></a>PHP 版本号</h2><p>使用 <code>php -v</code> 命令可以查看 PHP 版本信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -v</span><br><span class="line">PHP 7.4.1 (cli) (built: Dec 28 2019 20:56:41) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br><span class="line">    with Zend OPcache v7.4.1, Copyright (c), by Zend Technologies</span><br></pre></td></tr></table></figure><h2 id="PHP-扩展"><a href="#PHP-扩展" class="headerlink" title="PHP 扩展"></a>PHP 扩展</h2><p>使用 <code>php -m</code> 命令可以查看 PHP 安装的扩展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -m</span><br><span class="line">[PHP Modules]</span><br><span class="line">bcmath</span><br><span class="line">Core</span><br><span class="line">ctype</span><br><span class="line">curl</span><br><span class="line">date</span><br><span class="line">dom</span><br><span class="line">fileinfo</span><br><span class="line">filter</span><br><span class="line">ftp</span><br><span class="line">gd</span><br></pre></td></tr></table></figure><h2 id="PHP-参数"><a href="#PHP-参数" class="headerlink" title="PHP 参数"></a>PHP 参数</h2><p>使用 <code>php -i</code> 命令可以查看 PHP / 扩展的配置参数，等价于 <code>phpinfo</code>。</p><h2 id="语法查错"><a href="#语法查错" class="headerlink" title="语法查错"></a>语法查错</h2><p>可以用 <code>php -l &lt;文件路径&gt;</code> 来检测该 php 文件是否有语法错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -l index.php</span><br><span class="line">No syntax errors detected in index.php</span><br></pre></td></tr></table></figure><h2 id="执行一段代码"><a href="#执行一段代码" class="headerlink" title="执行一段代码"></a>执行一段代码</h2><p>使用 <code>php -r &quot;代码&quot;</code> 来执行一段 PHP 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php -r &quot;echo &#39;ok&#39;;&quot;</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><h2 id="查看扩展详情"><a href="#查看扩展详情" class="headerlink" title="查看扩展详情"></a>查看扩展详情</h2><p>使用命令 <code>php --ri &lt;扩展名称&gt;</code> 获取扩展配置详情：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php --ri swoole</span><br><span class="line"></span><br><span class="line">swoole</span><br><span class="line"></span><br><span class="line">Swoole &#x3D;&gt; enabled</span><br><span class="line">Author &#x3D;&gt; Swoole Team &lt;team@swoole.com&gt;</span><br><span class="line">Version &#x3D;&gt; 4.4.14</span><br><span class="line">Built &#x3D;&gt; Jan  6 2020 07:22:54</span><br><span class="line">coroutine &#x3D;&gt; enabled</span><br><span class="line">epoll &#x3D;&gt; enabled</span><br><span class="line">eventfd &#x3D;&gt; enabled</span><br><span class="line">signalfd &#x3D;&gt; enabled</span><br><span class="line">cpu_affinity &#x3D;&gt; enabled</span><br><span class="line">spinlock &#x3D;&gt; enabled</span><br><span class="line">rwlock &#x3D;&gt; enabled</span><br><span class="line">openssl &#x3D;&gt; OpenSSL 1.1.1d  10 Sep 2019</span><br><span class="line">http2 &#x3D;&gt; enabled</span><br><span class="line">zlib &#x3D;&gt; 1.2.11</span><br><span class="line">mutex_timedlock &#x3D;&gt; enabled</span><br><span class="line">pthread_barrier &#x3D;&gt; enabled</span><br><span class="line">futex &#x3D;&gt; enabled</span><br><span class="line">mysqlnd &#x3D;&gt; enabled</span><br><span class="line">async_redis &#x3D;&gt; enabled</span><br><span class="line"></span><br><span class="line">Directive &#x3D;&gt; Local Value &#x3D;&gt; Master Value</span><br><span class="line">swoole.enable_coroutine &#x3D;&gt; On &#x3D;&gt; On</span><br><span class="line">swoole.enable_library &#x3D;&gt; On &#x3D;&gt; On</span><br><span class="line">swoole.enable_preemptive_scheduler &#x3D;&gt; Off &#x3D;&gt; Off</span><br><span class="line">swoole.display_errors &#x3D;&gt; On &#x3D;&gt; On</span><br><span class="line">swoole.use_shortname &#x3D;&gt; On &#x3D;&gt; On</span><br><span class="line">swoole.unixsock_buffer_size &#x3D;&gt; 8388608 &#x3D;&gt; 8388608</span><br></pre></td></tr></table></figure><h2 id="查看扩展提供的方法"><a href="#查看扩展提供的方法" class="headerlink" title="查看扩展提供的方法"></a>查看扩展提供的方法</h2><p>使用命令 <code>php --re &lt;扩展名称&gt;</code> 获取扩展的所有方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --re swoole</span><br></pre></td></tr></table></figure><h2 id="获取函数详情"><a href="#获取函数详情" class="headerlink" title="获取函数详情"></a>获取函数详情</h2><p>使用命令 <code>php --rf &lt;函数名称&gt;</code> 获取函数详情，可以用来检测函数是否存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php --rf array_columns</span><br><span class="line">Exception: Function array_columns() does not exist</span><br><span class="line">root@0139eebfa774:&#x2F;var&#x2F;www&#x2F;html# php --rf array_column</span><br><span class="line">Function [ &lt;internal:standard&gt; function array_column ] &#123;</span><br><span class="line"></span><br><span class="line"> - Parameters [3] &#123;</span><br><span class="line">    Parameter #0 [ &lt;required&gt; $arg ]</span><br><span class="line">    Parameter #1 [ &lt;required&gt; $column_key ]</span><br><span class="line">    Parameter #2 [ &lt;optional&gt; $index_key ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trait - 优雅的复用方法</title>
      <link href="/2020/03/15/trait/"/>
      <url>/2020/03/15/trait/</url>
      
        <content type="html"><![CDATA[<h2 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h2><p>为了解决单继承问题，从 PHP 5.4 开始新增了 <code>trait</code> 关键字来实现代码的复用。<code>trait</code> 定义的代码块在类的内部引入，类就能获得由 <code>trait</code> 定义的属性及方法。</p><p>通过定义一个 <code>SingletonTrait</code>，来实现单例模式的类共用代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trait SingletonTrait</span><br><span class="line">&#123;</span><br><span class="line">    protected static $instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public static function getInstance() &#123;</span><br><span class="line">        if (null &#x3D;&#x3D;&#x3D; self::$instance) &#123;</span><br><span class="line">            self::$instance &#x3D; new static();</span><br><span class="line">        &#125;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要引用 <code>Trait</code> 十分简单，只要在类的内部使用 <code>use</code> 关键字即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class SomeService</span><br><span class="line">&#123;</span><br><span class="line">    use SingletonTrait;</span><br><span class="line"></span><br><span class="line">    public function test()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;ok!&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$service &#x3D; SomeService::getInstance();</span><br><span class="line">$service-&gt;test();</span><br></pre></td></tr></table></figure><p>通过引用 <code>SingletonTrait</code> 代码块 <code>SomeService</code> 直接获得了 <code>trait</code> 定义的方法及属性，通过 <code>trait</code> 引用实现复用单例模式方法，而不是直接复制粘贴同样的代码到每个单例的类中，让代码变得更加优雅！</p><blockquote><p>Trait 的实现原理是简单的把代码块拷贝到类</p></blockquote><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>在类的继承关系中，如果父类的属性或方法使用了 <code>private</code> 声明，子类是无法调用的，但是在 Trait 中不同，因为 Trait 相当于把代码引入到类里面，也就是变成了类的一部分，因此当 Trait 声明了私有属性或方法，在类的内部是可以直接使用的。</p><p>Trait 定义的代码块同样可以使用 <code>static</code>、<code>abstract</code> 等修饰符。</p><h2 id="多个-Trait"><a href="#多个-Trait" class="headerlink" title="多个 Trait"></a>多个 Trait</h2><p>一个类可以引用多个 Trait，中间使用逗号隔开。</p><p>当引入的多个 Trait 里面存在同名方法时，需要通过两种方式来解决冲突，否则会报出致命异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Fatal error:  Trait method xxx has not been applied, because there are collisions with other trait methods on Test in xxx</span><br></pre></td></tr></table></figure><h3 id="insteadof"><a href="#insteadof" class="headerlink" title="insteadof"></a>insteadof</h3><p>使用 <code>insteadof</code> 关键字来让其中一个 Trait 的方法覆盖另一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">trait A</span><br><span class="line">&#123;</span><br><span class="line">    public function hello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;A:hello&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function world()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;A:world&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait B</span><br><span class="line">&#123;</span><br><span class="line">    public function hello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;B:hello&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function world()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;B:world&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    use A,B &#123;</span><br><span class="line">        &#x2F;&#x2F; 使用 A trait 中的 hello 覆盖 B 的 hello</span><br><span class="line">        A:: hello insteadof B;</span><br><span class="line">        &#x2F;&#x2F; 使用 B trait 中的 world 覆盖 A 的 world</span><br><span class="line">        B:: world insteadof A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new Test();</span><br><span class="line">$test-&gt;hello();</span><br><span class="line">$test-&gt;world();</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A:hello</span><br><span class="line">B:world</span><br></pre></td></tr></table></figure><h3 id="as-方法重命名"><a href="#as-方法重命名" class="headerlink" title="as 方法重命名"></a>as 方法重命名</h3><p>如果需要保留两者的方法，可以使用 <code>as</code> 重命名，然后再用另一个的方法进行覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">trait A</span><br><span class="line">&#123;</span><br><span class="line">    public function hello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;A:hello&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function world()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;A:world&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait B</span><br><span class="line">&#123;</span><br><span class="line">    public function hello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;B:hello&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function world()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;B:world&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    use A, B &#123;</span><br><span class="line">        &#x2F;&#x2F; 将 A trait 中的方法重命名</span><br><span class="line">        A::hello as ahello;</span><br><span class="line">        A::world as aworld;</span><br><span class="line">        &#x2F;&#x2F; 再使用 insteadof 关键字覆盖冲突的方法</span><br><span class="line">        B:: hello insteadof A;</span><br><span class="line">        B:: world insteadof A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test &#x3D; new Test();</span><br><span class="line">$test-&gt;hello();</span><br><span class="line">$test-&gt;world();</span><br><span class="line">$test-&gt;ahello();</span><br><span class="line">$test-&gt;aworld();</span><br></pre></td></tr></table></figure><p>注意，即使重命名了也需要使用 <code>insteadof</code> 覆盖原来的代码，不然同样会产生致命报错。</p><h2 id="Trait-嵌套"><a href="#Trait-嵌套" class="headerlink" title="Trait 嵌套"></a>Trait 嵌套</h2><p>Trait 里面也可以引用其他 Trait。</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>当 Trait 中定义的方法或属性与类或其父类相同时，其优先级如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类 &gt; trait &gt; 父类</span><br></pre></td></tr></table></figure><h2 id="Trait-的意义"><a href="#Trait-的意义" class="headerlink" title="Trait 的意义"></a>Trait 的意义</h2><p>Trait 能实现代码块的复用，但是继承（extends）、实现（implements）同样可以复用父类的方法或实现接口的方法，它们之间有什么区别呢？</p><p>我们知道面向对象编程里代码的关联性十分重要，例如继承关系即把子类的属性和方法进行了抽象，接口同样是把相同的东西抽象出来，然后在子类进行实现，这样有时候我们遇到像“水陆两栖动物”这种特殊的类型，既要让它继承水生动物的特性，又要让它继承陆生动物的特性，而 PHP 不支持多继承，要实现这种效果会变得十分麻烦。</p><p>而 Trait 定义的代码块，并没有严格意义上的关联性，仅仅只是为了复用代码块而被设计。Trait 的作用更像是一个功能块，不论是谁，只要让其他的类“嵌入”这个功能块就能让它具有对应的效果。</p><p>就好比 LOL 里的提莫，你可以出帽子、法穿棒等纯粹的 AP 装让它变成 AP 提莫，也可以出纳什之牙、飓风让提莫变成一个普攻型的 APC（远程输出单位），Trait 的作用类似于装备效果，任何人都可以出这件装备，只要装备了就能得到对应的能力。</p><p>在 Laravel 框架里，要实现“软删除”功能十分简单，只需要在数据库迁移中添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schema::create(&#39;orders&#39;, function (Blueprint $table) &#123;</span><br><span class="line">            $table-&gt;bigIncrements(&#39;id&#39;);</span><br><span class="line">            &#x2F;&#x2F; .. 省略其他字段</span><br><span class="line">            $table-&gt;softDeletes();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>然后在 Model 里直接引入 Trait：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace App\Model;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line">use Illuminate\Database\Eloquent\SoftDeletes;</span><br><span class="line"></span><br><span class="line">class Order extends Model</span><br><span class="line">&#123;</span><br><span class="line">    use SoftDeletes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可让一个模型具有软删除的功能。</p><p>Laravel 还有许多地方存在此类的应用，通过这样的设计让代码更加优雅！</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>凡是在开发过程中，只要意识到自己通过 Ctrl+C、Ctrl+V 复制了同一份的代码，就表明这个地方写的不够好，一定存在优化的空间。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2020/03/14/mini-server/"/>
      <url>/2020/03/14/mini-server/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微服务是一种服务架构模式，目标是架构师的话，当然不能放过这个知识点。</p><h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><p>一般的项目架构有两种形式：单体应用和微服务。</p><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p>单体应用就是用一套代码实现全部功能。</p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>微服务就是把单体应用的代码按照功能拆分出来，形成多套独立的代码，通过某种方式让它们连接在一起，实现完整功能。</p><p>单体应用好比早期的网站开发，用 PHP 搭建的网站：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;?php echo &quot;hello world!&quot; ?&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>HTML 代码与 PHP 代码混合在一起。</p><p>而随着技术的发展，又推出了 MVC 模式，实现模型、视图、控制器的分离。</p><p>然而问题的本质依然没有改变，还不是要一个人去完成同样的工作？</p><p>技术从未停下发展的脚本，职业的分工越来越明确，开始出现专门写 HTML 和 JavaScript 的前端人员和专门写 PHP 代码的后端人员，前端人员通过一项技术“Ajax”调用后端人员写的接口，使他们看似分离但却紧紧的联系到一起，共同实现一个完整的项目。</p><p>这样的分工方式就叫做微服务。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>比如有一套系统，包括如下业务：</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3518914240,1325113277&fm=26&gp=0.jpg" alt="微服务架构"></p><p>把这些业务拆分出来，单独做成一套系统，然后以某种方式让独立的项目之前能够进行通信，这就完成了一套微服务架构。</p><h2 id="微服务通信模式"><a href="#微服务通信模式" class="headerlink" title="微服务通信模式"></a>微服务通信模式</h2><h3 id="HTTP-通信"><a href="#HTTP-通信" class="headerlink" title="HTTP 通信"></a>HTTP 通信</h3><h3 id="RPC-通信"><a href="#RPC-通信" class="headerlink" title="RPC 通信"></a>RPC 通信</h3><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h2 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h2><p>优点</p><ul><li>大型项目解耦，提高整体性能</li><li>每个服务都很小，开发人员可以聚焦自己负责的功能模块。</li><li>只需要极少的人来维护一套代码</li><li>可以用不同的语言开发</li></ul><p>缺点</p><ul><li>架构需要花费一定的精力，如果架构得不好，后期反而会变成麻烦</li><li>由于服务分散成很多个，因此难以快速定位错误</li><li>管理成本提高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM</title>
      <link href="/2020/03/14/php-fpm/"/>
      <url>/2020/03/14/php-fpm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学 PHP 的时候，搜索网上教程一顿操作配置了 LNMP（Linux + Nginx + MySQL + PHP）环境，在配置 Nginx 的时候听说了 PHP-FPM，然而却没有进行深究，只知道让 Nginx 转发就完事了。</p><p>为了进一步的学习 PHP，需要了解 PHP-FPM 是什么。</p><h2 id="CGI-通用网关接口"><a href="#CGI-通用网关接口" class="headerlink" title="CGI 通用网关接口"></a>CGI 通用网关接口</h2><p>通用网关接口（Common Gateway Interface，CGI）是一个为用户和 WEB 服务（如 Nginx）与其他应用（如 PHP）提供交互的程序。</p><p>早期的 WEB 应用只处理静态的页面，用户访问站点只要请求指定的 <code>.htm</code> 或 <code>.html</code> 文件，静态文件可以直接输出给浏览器，所以 Nginx 不需要做额外的处理。</p><p>随着互联网的发展，只有静态的页面已经不能满足人们的需求了。</p><p>Nginx 本身不处理文件，只是分发请求，比如用户请求 <code>/index.html</code>，它会去服务器寻找这个文件，找到了就输出给浏览器，没找到就返回 404。这里分发的是静态数据，但如果用户请求的是 <code>/index.php</code>，这是一个 PHP 文件，不能像 <code>.html</code> 文件一样直接返回给浏览器。</p><p>这个时候就犯难了，Nginx 应该如何处理非静态的文件呢？</p><p>为了解决如何处理非静态文件的问题，CGI 诞生了。</p><p>CGI 做的事情就是解析用户的请求，然后将请求的结果解析成 HTML 返回给浏览器，开发者可以使用任何语言处理 Web Server 发来的请求，生成动态的内容。</p><p>上面的例子，用户访问 <code>/index.php</code> 文件，由于 Nginx 无法处理这种格式的文件，于是将请求（包括参数等等）转发给 CGI 程序（可理解为语言解释器）进行处理，这里的 CGI 就是 PHP-CGI，PHP-CGI 可以解析 PHP 文件，<code>index.php</code> 文件在 PHP-CGI 程序进行解析和处理后才会输出给浏览器。</p><p><code>index.php</code> 文件就交给 PHP 程序去处理，<code>.jsp</code> 文件就让 Java 去处理，每种动态语言都有对应的 CGI，Nginx 只需要将请求转发给 CGI 就可以了，再通过 CGI 输出数据给浏览器。</p><h2 id="FastCGI-快速网关接口"><a href="#FastCGI-快速网关接口" class="headerlink" title="FastCGI 快速网关接口"></a>FastCGI 快速网关接口</h2><p>CGI 在高并发时存在性能问题，作为改进版的 FastCGI 便出现了。</p><p>快速网关接口（Fast Common Gateway Interface，FastCGI）是 CGI 的增强版。</p><h3 id="CGI-原理"><a href="#CGI-原理" class="headerlink" title="CGI 原理"></a>CGI 原理</h3><p>在接收到请求时，先 fork 出 CGI 进程，然后处理请求，处理完后结束这个进程，这就是 fork-and-execute 模式。</p><p>所以用 CGI 方式的服务器有多少连接请求就会有多少 CGI 进程，每个进程都会加载解析配置文件，初始化执行环境，那么当高并发请求时，会大量挤占系统的资源如内存，CPU 等，造成效能低下。</p><h3 id="FastCGI-原理"><a href="#FastCGI-原理" class="headerlink" title="FastCGI 原理"></a>FastCGI 原理</h3><p>FastCGI 进程管理器启动时会创建一个主（Master）进程和多个 CGI 解释器进程（Worker 进程），然后等待 Web 服务器的连接。</p><p>Web 服务器接收 HTTP 请求后，将 CGI 报文通过 UNIX 或 TCP Socket 进行通信，将环境变量和请求数据写入标准输入，转发到 CGI 解释器进程。</p><p>CGI 解释器进程完成处理后将标准输出和错误信息从同一连接返回给 Web 服务器。</p><p>CGI 解释器进程变为空闲状态，等待下一个 HTTP 请求的到来。</p><p>由于 FastCGI 模式在启动时便创建了很多个子进程，这些子进程常驻内存中，一旦接收到请求就可以立即进入工作状态，而传统的 CGI 模式，只有在接收到请求的时候才会去创建进程，重新读取配置文件等一系列初始化操作，毫无疑问性能会相差很多。</p><h2 id="PHP-FPM-FastCGI-进程管理器"><a href="#PHP-FPM-FastCGI-进程管理器" class="headerlink" title="PHP-FPM FastCGI 进程管理器"></a>PHP-FPM FastCGI 进程管理器</h2><p>PHP 的 FastCGI进程管理器（FastCGI Process Manager，PHP-FPM），PHP-FPM 即 FastCGI 的具体实现。</p><p>PHP 的解释器是 PHP-CGI，它本身只会解析请求返回结果，不能进行进程的调度，而 PHP-FPM（进程管理器）所做的事情便是管理进程。</p><p>PHP-FPM 包含了一个 <code>master</code> 进程和许多个 <code>worker</code> 进程，<code>worker</code> 进程的数量是可以动态调节的，创建和销毁全部由 <code>master</code> 进程来控制。</p><p><img src="https://user-images.githubusercontent.com/28209810/64397840-35090980-d095-11e9-959e-eda11f5cb000.png" alt="image"></p><p>其中，<code>master</code> 进程负责分发请求，首先 <code>master</code> 进程检测是否有可用的 <code>worker</code> 进程，如果没有则返回错误（502），然后将请求分发给空闲的 <code>worker</code> 进程处理，然后接取下一个请求，再将请求分发给空闲的 <code>worker</code>，如果 <code>worker</code> 进程处理请求超时则返回错误（504）。</p><p>这样的协作方式大大的提高了程序处理并发请求的性能，<code>worker</code> 进程的数量可以通过 <code>php.ini</code> 文件进行配置。</p><p>理论上进程越多，可以处理的请求也越多，但空闲的进程太多反而会造成内存的浪费。</p><h2 id="Nginx-与-PHP-FPM-通信"><a href="#Nginx-与-PHP-FPM-通信" class="headerlink" title="Nginx 与 PHP-FPM 通信"></a>Nginx 与 PHP-FPM 通信</h2><p>Nginx 与 PHP-FPM 的通信方式有两种：TCP SOCKET 和 Unix SOCKET。</p><p>TCP socket 的优点是可以跨服务器，Nginx 服务器不需要与 PHP-FPM 在同一台服务器上，由于跨服务器的特性，还可以实现分布式部署。</p><p>Unix socket 用于实现同一主机上的进程间通信，相较于 TCP socket，Unix socket 跳过了许多验证的步骤，因此 Unix socket 的效率比 TCP socket 要高，但是不稳定。</p><h3 id="TCP-socket"><a href="#TCP-socket" class="headerlink" title="TCP socket"></a>TCP socket</h3><p>一个基于 TCP socket 的 PHP 站点 Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root &#x2F;www&#x2F;web;</span><br><span class="line">    index index.html index.php;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能够使 Nginx 理解 fastcgi 协议，Nginx 提供了 fastcgi 模块来将 http 请求映射为对应的 fastcgi 请求。</p><p>Nginx 的 FastCGI 模块提供了 fastcgi_param 来主要处理这些映射关系，其主要完成的工作是将 Nginx 中的变量翻译成 PHP 中能够理解的变量，fastcgi_param 是一个文件，包含了 Nginx 中的变量映射关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param  QUERY_STRING       $query_string;</span><br><span class="line">fastcgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">fastcgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">fastcgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_URI       $document_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">fastcgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">fastcgi_param  HTTPS              $https if_not_empty;</span><br><span class="line"></span><br><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI&#x2F;1.1;</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx&#x2F;$nginx_version;</span><br><span class="line"></span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr;</span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port;</span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name;</span><br></pre></td></tr></table></figure><p>除此之外，还有一个重要的指令 <code>fastcgi_pass</code>，这个指令用于指定 FPM 进程监听的地址，Nginx 会把所有的 PHP 请求翻译成 FastCGI 请求之后再发送到这个地址。</p><p>上面的 Nginx 配置文件中，我们配置了 <code>fastcgi_pass 127.0.0.1:9000;</code>，其含义是将请求转发到本机 9000 端口（PHP-FPM 进程）处理，这样的方式叫做 TCP socket。</p><p>TCP socket 的好处是可以将 Nginx 服务器与 FPM 服务器进行分离，因此可以实现分布式 PHP-FPM 架构：</p><p><img src="https://user-images.githubusercontent.com/28209810/64407389-c5a41180-d0b6-11e9-8d5f-5b5ef39a52ce.png" alt="image"></p><p>配置 <code>upstream</code> 来指定 PHP-FPM 服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">upstream php-fpm &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">    server 127.0.0.2:9000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root &#x2F;www&#x2F;web;</span><br><span class="line">    index index.html index.php;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_pass php-fpm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unix-socket"><a href="#Unix-socket" class="headerlink" title="Unix socket"></a>Unix socket</h3><p>基于 Unix socket 的 Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fasrcgi_pass &#x2F;usr&#x2F;run&#x2F;php-fpm.sock</span><br></pre></td></tr></table></figure><p>PHP-FPM 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen &#x3D; 127.0.0.1:9000</span><br><span class="line"># 或者</span><br><span class="line">listen &#x3D; &#x2F;var&#x2F;run&#x2F;php-fpm.sock</span><br></pre></td></tr></table></figure><blockquote><p>socket 的本质是一个文件，因此还存在权限问题，所以需要注意 Nginx 所在的用户组是否有该文件的操作权限。</p></blockquote><p>Unix socket 通信方式需要在本机生成 sock 文件，因此 Nginx 服务器与 PHP-FPM 必须在同一台机子。</p><p>关于两者的取舍，当并发量较小时（比如几百），可以选择 Unix socket 以提高处理效率，在并发量较大时，可以选择 TCP socket 以保持连接的稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂Nginx</title>
      <link href="/2020/03/10/nginx-introduction/"/>
      <url>/2020/03/10/nginx-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-是什么？"><a href="#Nginx-是什么？" class="headerlink" title="Nginx 是什么？"></a>Nginx 是什么？</h2><p>Nginx 是高性能 HTTP 和反向代理 WEB 服务器，还提供了邮件代理服务。</p><p>简而言之即<strong>分发服务器请求的软件</strong>。</p><p>访问一个网站的本质：</p><ul><li>在浏览器输入网址</li><li>DNS 服务商将网址解析成服务器 IP 地址</li><li>访问此 IP 的服务器</li><li>服务器收到请求，建立连接</li><li>服务器上的 Nginx 解析请求并转发给对应程序处理</li><li>程序处理请求</li><li>程序返回请求的结果（响应）</li></ul><p>在此过程，Nginx 负责分发请求给指定的程序处理。</p><p>Nginx 在分发请求的时候，会携带请求参数和请求头等其他信息，Nginx 自身无法处理请求，它只是将请求转发给对应程序处理，如果是 PHP 搭建的网站，则转发给 PHP-CGI，由 PHP-CGI 返回结果给客户端。</p><blockquote><p>PHP-CGI 是处理 PHP 文件的程序</p></blockquote><h2 id="Nginx-起源"><a href="#Nginx-起源" class="headerlink" title="Nginx 起源"></a>Nginx 起源</h2><p>Nginx 是伊戈尔·赛索耶夫为俄罗斯访问量第二的 rambler.ru 站点设计开发的。</p><p>第一个公开版本 0.1.0 发布于 2004 年 10 月 4 日。</p><p>从发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>中国大陆使用 Nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><h2 id="URI-是什么？"><a href="#URI-是什么？" class="headerlink" title="URI 是什么？"></a>URI 是什么？</h2><p>在了解 Nginx 是如何分发请求之前需要先了解什么是 URI。</p><p>URI 统一资源标识符(Uniform Resource Identifier， URI)，它由三个部分组成：</p><ul><li>协议</li><li>主机</li><li>资源路径</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.huotuyouxi.com&#x2F;img&#x2F;1.jpg</span><br></pre></td></tr></table></figure><ul><li>https：协议</li><li>blog.huotuyouxi.com：主机</li><li>/img/1.jpg：资源路径</li></ul><p>上面也提到了，访问网址的本质是访问服务器上某个文件，示例的网址访问 blog.huotuyouxi.com 所在服务器上的 1.jpg 这个文件。</p><p>如果这样理解不能，换句话说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\games\Lol\Lol.exe</span><br></pre></td></tr></table></figure><p>访问服务器上的文件与访问本地 F 盘并无太大的差别，区别在于访问网址相当于访问远程服务器上的文件。</p><p>通俗的讲 URI 就是远程服务器文件的路径。</p><p>至于协议部分，协议即一种人为约定的规则，除了 http、https 协议，还有 ftp、sftp 等等各种协议，请求协议跟后文没有多大关系，有兴趣可以自行查阅当做扩展阅读。</p><h2 id="Nginx-如何分发请求？"><a href="#Nginx-如何分发请求？" class="headerlink" title="Nginx 如何分发请求？"></a>Nginx 如何分发请求？</h2><p>客户端请求 URI 对应的文件，Nginx 是如何处理的呢？</p><p>在分发请求之前，Nginx 首先需要解析请求。</p><p>假如我们把域名：blog.huotuyouxi.com 解析到 IP 为 xxx.xxx.xxx.xxx 的服务器上。</p><p>然后在该服务器上安装 Nginx，并且添加如下配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 监听 80 端口</span><br><span class="line">    listen 80;</span><br><span class="line">    </span><br><span class="line">    # 对应的域名</span><br><span class="line">    server_name  blog.huotuyouxi.com;</span><br><span class="line">    </span><br><span class="line">    # 项目根目录</span><br><span class="line">    root &#x2F;www&#x2F;blog&#x2F;public;</span><br><span class="line"></span><br><span class="line">    # 访问日志存储位置</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_access.log;</span><br><span class="line">    </span><br><span class="line">    # 错误日志存储位置</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_error.log;</span><br><span class="line"></span><br><span class="line">    # 字符集</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    # 匹配 URI 以 &#x2F; 开头（因为所有的 URI 都是以 &#x2F; 开头，所以会匹配到所有请求）</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 尝试获取这几种文件</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # 匹配后缀为 .php 的请求</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>小知识：80 是 http 默认端口，443 是 https 默认端口，访问域名时无需指定端口即可访问，使用其他端口时，就需要在域名后面加上 :端口号才能访问，例如：<a href="http://blog.huotuyouxi.com:81/">http://blog.huotuyouxi.com:81</a></p></blockquote><p><code>location</code> 是 Nginx 主要的模块之一，用来匹配 URI，满足条件时进入到模块内执行，我们在这个配置文件里设置了两个 <code>location</code> 模块匹配资源文件。</p><p>第一个 <code>location</code> 定制了规则 <code>/</code>，匹配以 <code>/</code> 开头的所有 URI，由于所有的 URI 都是以 / 开头，所以会匹配到所有请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try_files</code> 按顺序检查文件是否存在，返回第一个找到的文件，至少需要两个参数，当前面的文件都找不到时，会内部重定向到最后一个参数：</p><ul><li>$uri</li><li>$uri/</li><li>/index.php?$query_string</li></ul><p><code>$uri</code> 指的是完全匹配的文件，<code>$uri/</code> 指的是文件夹，当前面两个都没有时，会访问 <code>/index.php</code>，而后面的 <code>?$query_string</code> 指的是携带请求参数，如果不携带参数，使用 <code>$_GET</code> 会获取不到任何参数。</p><p>访问目录是以配置的项目相对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root &#x2F;www&#x2F;blog&#x2F;public;</span><br></pre></td></tr></table></figure><p>最后的值访问 <code>index.php</code> 即访问 <code>/www/blog/public/index.php</code>。</p><p>接着第二个 <code>location</code>，<code>~</code> 是一种标识符，用于正则匹配 URI，区分大小写，正则匹配规则为：<code>.php$</code> 也就是以 <code>.php</code> 结尾的文件，当满足条件时进入此模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    try_files $uri &#x3D;404;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意！反斜杠 \ 一定要存在，因为 .（点）也是正则表达式，需要加上反斜杠转义才能匹配 .php 后缀 </p></blockquote><p><code>location</code> 在配置文件里的前后顺序并不是匹配的顺序，<code>location</code> 匹配的规则及顺序后文介绍，在这个例子中 <code>/</code> 的匹配优先级低于 <code>~</code>，也就是先匹配 <code>.php</code> 后缀的文件，如果匹配不到再匹配 <code>/</code> 规则。</p><p>假如某个用户访问：blog.huotuyouxi.com/php-fpm</p><p>此时，在 Nginx 中的处理流程是：</p><p>首先匹配到了 <code>server_name</code>：blog.huotuyouxi.com，进入当前配置文件进行处理。</p><p>接着解析 $uri（文件路径）即 <code>server_name</code> 后面的部分 <code>/php-fpm</code>，然后优先匹配规则 <code>~ .php</code>，发现它并没有 <code>.php</code> 结尾，接着往下级匹配 <code>/</code>，满足条件，进入到该模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    # 尝试获取这几种文件</span><br><span class="line">    try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try_files 会尝试获取 <code>/www/blog/public/php-fpm</code> 文件，发现没有，继续匹配第二个参数；<code>$uri/</code> 比之前的参数多加了一个 <code>/</code> 结尾，指的是文件夹，发现也没有 <code>/www/blog/public/php-fpm</code> 这个目录，前面两个参数都匹配完了，因此请求会变为内部重定向到最后一个参数 <code>index.php</code> 这个文件，然后重新开始匹配，此时正好匹配了规则 <code>.php</code> 结尾，进入 <code>location ~ .php</code> 模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    try_files $uri &#x3D;404;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到这个模块后，实际上是将请求转发给了 PHP-CGI 进行处理，前面几个字段暂时不用理会，只需要知道请求被转发给了 <code>fastcgi_pass</code> 这个字段，也就是 <code>127.0.0.1:9000</code>（PHP-FPM 本机端口），CGI 处理完请求后将结果返回给客户端。</p><p>以上就是 Nginx 解析和分发请求的过程。</p><h2 id="Nginx-匹配规则及优先级"><a href="#Nginx-匹配规则及优先级" class="headerlink" title="Nginx 匹配规则及优先级"></a>Nginx 匹配规则及优先级</h2><p>Nginx 配置文件中的 <code>location</code> 即匹配规则，匹配规则可以有任意个，按照优先级逐个匹配，匹配成功时停止往下匹配。</p><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>Nginx 的 <code>location</code> 模块包含 4 种匹配标识符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标识符描述</span><br><span class="line">&#x3D;精确匹配：当 $uri 完全匹配。</span><br><span class="line">~正则匹配：正则表达式匹配 $uri，区分大小写。</span><br><span class="line">~*正则匹配：正则表达式匹配 $uri，不区分大小写。</span><br><span class="line">^~非正则匹配：匹配到前缀最多的 $uri 后就结束，该模式匹配成功后，不会使用正则匹配。</span><br></pre></td></tr></table></figure><p>标识符置于 <code>location</code> 语句后面，标识符后面为匹配规则。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location [标识符] &lt;匹配规则&gt; &#123;</span><br><span class="line">    # 匹配成功时执行的代码块</span><br><span class="line">    return 200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了标识符之外，可以不使用标识符进行前缀匹配（最长字符匹配）。</p><h3 id="匹配优先级"><a href="#匹配优先级" class="headerlink" title="匹配优先级"></a>匹配优先级</h3><blockquote><p><code>location</code> 的匹配优先级与 <code>location</code> 在配置文件的书写顺序无关</p></blockquote><p>Nginx <code>location</code> 匹配优先级为：</p><p>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location <del>,</del>* 正则顺序) &gt; (location 部分起始路径) &gt; (location /)</p><p>换而言之，即：</p><p>（精确匹配）&gt; (最长字符串匹配，但完全匹配) &gt;（非正则匹配）&gt;（正则匹配）&gt;（最长字符串匹配，不完全匹配）&gt;（location 通配）</p><h3 id="“-”精准匹配"><a href="#“-”精准匹配" class="headerlink" title="“=”精准匹配"></a>“=”精准匹配</h3><p>使用精准匹配时，URI 必须完全相同才能匹配成功。</p><p>如下面的匹配规则，只有 URI 等于 <code>/php-fpm</code> 时才会触发成功，模块里的 <code>return 403;</code> 将会返回一个 <code>403 Forbidden</code> 提示信息，模拟我们不希望用户能直接访问的目录或文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x3D; &#x2F;php-fpm &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把 <code>server_name</code> 字段修改为 <code>localhost</code> 方便本地调试。</p><blockquote><p>修改 Nginx 配置需要重启或平滑重启使配置生效，平滑重启命令：nginx -s reload</p></blockquote><p>请求 URI：<code>127.0.0.1/php-fpm</code></p><p>可以使用 <code>curl</code> 命令来测试，即 <code>curl 127.0.0.1/php-fpm</code>，也可以直接打开浏览器输入这个地址查看结果。</p><p>返回结果：403</p><p>请求 URI：<code>127.0.0.1/php-fpm/1.jpg</code></p><p>匹配失败，<code>=</code> 号必须完全匹配。</p><h3 id="“-”正则匹配，区分大小写"><a href="#“-”正则匹配，区分大小写" class="headerlink" title="“~”正则匹配，区分大小写"></a>“~”正则匹配，区分大小写</h3><p><code>location</code> 后跟波浪线标识符 <code>~</code>，可以实现按照正则表达式规则进行匹配，<code>~</code> 波浪线标识符正则匹配时会区分大小写，下面的规则表示不希望用户访问所有后缀为 <code>.php</code> 的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 URI：<code>127.0.0.1/php-fpm.php</code></p><p>结果：403</p><p>请求 URI：<code>127.0.0.1/php-fpm.phP</code></p><p>第二个请求里，最后一个字母 P 为大写，因此匹配失败。</p><p>在波浪线前面加上感叹号，形成 <code>!~</code> 标识符，表示<strong>不匹配</strong>正则表达式（区分大小写）的规则，也就是跟 <code>~</code> 的作用相反。</p><h3 id="“-”正则匹配，不区分大小写"><a href="#“-”正则匹配，不区分大小写" class="headerlink" title="“~*”正则匹配，不区分大小写"></a>“~*”正则匹配，不区分大小写</h3><p>波浪线后加上星号 <code>~*</code> 标识符将不区分大小写进行正则匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~* .php&#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 URI：<code>127.0.0.1/php-fpm.php</code></p><p>结果：403</p><p>请求 URI：<code>127.0.0.1/php-fpm.phP</code></p><p>结果：403</p><p>由于使用了不区分大小写的规则，因此最后一个 P 改成大写也能匹配成功。</p><p>在波浪线前面加上感叹号，形成 <code>!~*</code> 标识符，表示<strong>不匹配</strong>正则表达式（不区分大小写）的规则，也就是跟 <code>~*</code> 的作用相反。</p><h3 id="“-”非正则匹配前缀"><a href="#“-”非正则匹配前缀" class="headerlink" title="“^~”非正则匹配前缀"></a>“^~”非正则匹配前缀</h3><p>“^~” 非正则匹配，后面的参数为匹配的路径，只要 URI 满足了这个前缀就匹配成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ &#x2F;encrpyt&#x2F; &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 URI：<code>127.0.0.1/encrpyt/</code></p><p>结果：403</p><p>请求 URI：<code>127.0.0.1/encrpyt</code></p><p>匹配失败，<code>/encrpyt</code> 没有满足 <code>/encrpyt/</code>，缺少了后面的 <code>/</code>。</p><p>请求 URI：<code>127.0.0.1/encrpyt/1.jpg</code></p><p>结果：403</p><p>请求 URI：<code>127.0.0.1/encrpyt/images/1.jpg</code></p><p>结果：403</p><p>也就是说，只要前缀满足了这个条件就匹配成功，上面的匹配规则含义是 <code>encrypt</code> 目录下所有的文件都禁止访问。</p><h3 id="不使用标识符"><a href="#不使用标识符" class="headerlink" title="不使用标识符"></a>不使用标识符</h3><p>不使用标识符即按照最长字符串匹配，优先匹配最长的字符串，只要完全匹配就停止继续往下匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;files&#x2F;encrypt&#x2F; &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;post.php &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 URI：<code>127.0.0.1/post.php</code></p><p>首先会查找最长的字符串规则：<code>/files/encrypt/</code> 发现不匹配，接着匹配第二长的规则：<code>/post.php</code>，匹配成功，返回 403。</p><p>请求 URI：<code>127.0.0.1/files/encrypt/post.php</code></p><p>首先查找最长字符串规则：<code>/files/encrypt/</code> 前缀满足条件，匹配成功，停止往下匹配。</p><blockquote><p>注意！测试匹配规则时，如果你拷贝了上面完整的 Nginx 配置文件，.php 结尾是有 location ~ .php$ 规则的，记得删掉，否则会优先匹配到正则规则，建议测试时删除多余的所有规则，避免干扰结果，只建立一个对照组进行测试</p></blockquote><h2 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h2><p>Nginx 包括主配置文件与子配置文件，默认路径为：</p><ul><li>/etc/nginx/nginx.conf（主配置）</li><li>/etc/nginx/conf.d/（子配置目录）</li></ul><p>Nginx 提供了官方的中文文档可供查阅：<a href="https://www.nginx.cn/doc/index.html">Nginx - 官方中文文档</a></p><h3 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h3><p>主配置文件可以让所有子配置文件共享通用的配置，可以定义 Nginx 基本参数等。</p><p>编辑主配置文件 <code>/etc/nginx/nginx.conf</code>，对应参数及作用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># Nginx 运行时的用户和用户组</span><br><span class="line">user  nginx;</span><br><span class="line"></span><br><span class="line"># Nginx 工作进程数，推荐设置为 CPU 核心数</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># 全局错误日志存储路径及类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;nginx_error.log warn;</span><br><span class="line"></span><br><span class="line"># 进程 PID 文件路径</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件模块</span><br><span class="line">events &#123;</span><br><span class="line">    # 每个工作进程的最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTP 服务</span><br><span class="line">http &#123;</span><br><span class="line">    # 文件扩展名与文件类型映射表</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    </span><br><span class="line">    # 默认文件类型</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"> </span><br><span class="line">    # 日志格式</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    # 全局访问日志目录</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;nginx_access.log  main;</span><br><span class="line">    </span><br><span class="line">    # 是否调用 sendfile 函数输出文件</span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    # 此选项仅在使用 sendfile 的时候使用</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    # http 层面的连接超时时长（单位：秒），如一个网页打开 65 秒后服务器还没给出响应，则显示超时</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    # 是否开启 gzip 压缩，开启时可以压缩文件体积减少网络传输，使得网页打开更快，但是会消耗 CPU 资源</span><br><span class="line">    #gzip  on;</span><br><span class="line"> </span><br><span class="line">    # 读取子配置文件</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>events</code> 模块包含了 Nginx 处理连接的设置，常见的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line">    # 设置网路连接序列化，防止惊群现象发生，默认为 on</span><br><span class="line">    accept_mutex on;</span><br><span class="line">    # 设置一个进程是否同时接受多个网络连接，默认为 off</span><br><span class="line">    multi_accept on;</span><br><span class="line">    # 事件驱动模型，select|poll|kqueue|epoll|resig|&#x2F;dev&#x2F;poll|eventport</span><br><span class="line">    use epoll;</span><br><span class="line">    # 最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Events 模块的更多配置项：<a href="https://www.nginx.cn/doc/core/events.html">Nginx - 指令</a></p><p><code>log_format</code> 字段可以定义日志的输出格式，具体可设置的参数格式及说明如下：</p><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>$remote_addr</td><td>客户端地址</td><td>219.227.111.255</td></tr><tr><td>$remote_user</td><td>客户端用户名称</td><td>—</td></tr><tr><td>$time_local</td><td>访问时间和时区</td><td>18/Jul/2014:17:00:01 +0800</td></tr><tr><td>$request</td><td>请求的URI和HTTP协议</td><td>“GET /article-10000.html HTTP/1.1”</td></tr><tr><td>$http_host</td><td>请求地址，即浏览器中你输入的地址（IP或域名）</td><td><a href="http://www.blog.huotuyouxi.com/">www.blog.huotuyouxi.com</a> 198.98.120.87</td></tr><tr><td>$status</td><td>HTTP请求状态</td><td>200</td></tr><tr><td>$upstream_status</td><td>upstream状态</td><td>200</td></tr><tr><td>$body_bytes_sent</td><td>发送给客户端文件内容大小</td><td>1547</td></tr><tr><td>$http_referer</td><td>url跳转来源</td><td><a href="https://www.google.com/">https://www.google.com/</a></td></tr><tr><td>$http_user_agent</td><td>用户终端浏览器等信息</td><td>“Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</td></tr><tr><td>$ssl_protocol</td><td>SSL协议版本</td><td>TLSv1</td></tr><tr><td>$ssl_cipher</td><td>交换数据中的算法</td><td>RC4-SHA</td></tr><tr><td>$upstream_addr</td><td>后台upstream的地址，即真正提供服务的主机地址</td><td>10.36.10.80:80</td></tr><tr><td>$request_time</td><td>整个请求的总时间</td><td>0.165</td></tr><tr><td>$upstream_response_time</td><td>请求过程中，upstream响应时间</td><td>0.002</td></tr></tbody></table><p><code>server</code> 模块用于配置站点，可以在主配置文件添加，但是后期不方便维护，我们可以单独为每个站点编辑一份配置文件。</p><h3 id="子配置文件"><a href="#子配置文件" class="headerlink" title="子配置文件"></a>子配置文件</h3><p>子配置文件是一个包含 <code>server</code> 模块的配置文件，由自己来创建，推荐为每个站点单独创建一个配置文件。</p><p>命名规则一般是根据站点名称，如：<code>blog.huotuyouxi.com.conf</code>。</p><p>当然这个没有严格要求，也可以写成：<code>blog.conf</code>。</p><p>当子配置文件多的时候方便区分即可。</p><p>使用命令 <code>vim/etc/nginx/conf.d/blog.conf</code> 来创建博客的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.huotuyouxi.com;</span><br><span class="line">    </span><br><span class="line">    return 301 https:&#x2F;&#x2F;blog.huotuyouxi.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # https</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name blog.huotuyouxi.com;</span><br><span class="line">    root &#x2F;www&#x2F;blog;</span><br><span class="line">    index index.html;</span><br><span class="line">    </span><br><span class="line">    # 访问日志存储位置</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_access.log;</span><br><span class="line">    </span><br><span class="line">    # 错误日志存储位置</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_error.log;</span><br><span class="line"></span><br><span class="line">    # 以下为 SSL 相关配置</span><br><span class="line">    ssl_certificate   &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;3527929_blog.huotuyouxi.com.pem;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;3527929_blog.huotuyouxi.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置文件将默认的 http 80 端口重定向到了 https 的链接上。</p><p>编辑完成后运行：<code>nginx -s reload</code> 平滑重启即可使配置生效。</p><p>在子配置里可以单独设置访问日志和错误日志，让每个站点都有独立的日志记录文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 访问日志存储位置</span><br><span class="line">access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_access.log;</span><br><span class="line"></span><br><span class="line"># 错误日志存储位置</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_error.log;</span><br></pre></td></tr></table></figure><p>access_log：访问日志主要记录客户端的请求。客户端向 Nginx 服务器发起的每一次请求都记录在这里。客户端 IP，浏览器信息，referer，请求处理时间，请求 URL 等都可以在访问日志中得到。当然具体要记录哪些信息，你可以通过 log_format 指令定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log path [format [buffer&#x3D;size] [gzip[&#x3D;level]] [flush&#x3D;time] [if&#x3D;condition]]; # 设置访问日志</span><br><span class="line">access_log off; # 关闭访问日志</span><br></pre></td></tr></table></figure><ul><li>path 指定日志的存放位置。</li><li>format 指定日志的格式。默认使用预定义的 combined。</li><li>buffer 用来指定日志写入时的缓存大小。默认是 64k。</li><li>gzip 日志写入前先进行压缩。压缩率可以指定，从 1 到 9 数值越大压缩比越高，同时压缩的速度也越慢。默认是 1。</li><li>flush 设置缓存的有效时间。如果超过 flush 指定的时间，缓存中的内容将被清空。</li><li>if 条件判断。如果指定的条件计算为 0 或空字符串，那么该请求不会写入日志。</li></ul><p>error_log：记录服务器和请求处理过程中的错误信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log path [level];</span><br></pre></td></tr></table></figure><ul><li>path：指定错误日志的存储位置</li><li>level：指定要记录的错误级别，只有发生错误的级别大于等于 level 的时候才会记录错误，可取值为：debug, info, notice, warn, error, crit, alert,emerg，默认值为 error。</li></ul><p>如果没有配置单独的日志文件，则会记录在全局日志里。</p><h2 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h2><p>代理指的是中介服务。</p><p>分为正向代理与反向代理。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理可以理解成代购模式，例如你的朋友要去国外旅游，于是你拜托他帮忙购买你需要的商品，他从国外买好回来再交给你。</p><p>在这里你就是客户端，而你的朋友就是代理服务器。</p><p>这样直接由代理服务器去完成某件事的过程，叫做正向代理。</p><p>正向代理的应用例子——VPN：</p><p>由于国内无法访问到国外的某些网站，比如谷歌；但不是所有的国外服务器都被墙了，因此你可以买一台没有被墙的国外服务器，当你需要访问国外网站的时候，就让服务器去访问，然后再让服务器把结果转发给你。</p><p>正向代理的特征是你知道自己委托了谁去干这件事。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理与正向代理不同的地方在于：客户委托中介完成一件事，结果中介私底下把需求转交给了别人去干，客户不知道究竟是谁帮自己做完了需求，但是得到了自己想要的结果就够了。</p><p>好比游戏里面的公会，村民可以把自己的委托贴在公会告示板上，然后公会的看板娘会把委托的需求分配给适合的冒险者来完成。</p><p>反向代理的应用例子——负载均衡：</p><p>“负载”可以理解成负荷，用户访问一个非静态网站，程序需要读取数据库、渲染 HTML 页面、维持 TCP 连接等操作需要消耗 CPU、内存资源，会给服务器带来一定的负荷。</p><p>假如服务器可以承受的压力为 100N（物理学单位）</p><p>在某个瞬间，每有一名用户访问这个网站，会给服务器带来 5N 的压力，那么这个瞬间最大承载量就是 20 名用户，当服务器压力超过 100N 时就会崩溃。</p><p>要解决这个问题，可以进行硬件提升或者优化项目代码。</p><p>硬件提升可以提升服务器最大承受压力值，比如双核的服务器升级到 4 核，使服务器的最大承受压力从 100N 提升到 200N。</p><p>软件优化可以减少每个访客造成的压力，比如某些数据库 N+1 的问题严重影响了数据库的性能，造成数据库卡顿，优化了这个问题后，访客造成的压力值从 5N 降低到了 4N。</p><p>但是这两种方法提升都有一个临界点，比如硬件优化继续往上提升，服务器的价格就越来越贵，也不可能存在无限核心数的服务器；软件优化到一定程度后已经很难再找到优化的空间。</p><p>达到临界值后就无法再继续优化了，单机的性能已经达到了极致。</p><p>此时，如果能再买一台同样的服务器并且部署同一套项目，是不是可以使最大承载访客数翻倍呢？</p><p>确实可以，只要有两台服务器，那么它们的处理能力就会翻倍！</p><p>只要把一半的请求转发给另一台相同的服务器，平均分担压力。</p><p>但是应该怎么让请求分别进入到不同的服务器呢？</p><p>答案是通过 Nginx，利用上文介绍的反向代理功能。</p><p><img src="http://p3.pstatp.com/large/pgc-image/1534991903053fc12397bd0" alt="负载均衡"></p><p>这个过程称为“均衡”，负责维持均衡的那台服务器只负责分发请求，把请求转发给其他能完成功能的服务器处理，由其他服务器返回结果。</p><p>负责分发请求的服务器称为“均衡调度器”，Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream huotu-server &#123;</span><br><span class="line">    server 192.168.0.14;</span><br><span class="line">    server 192.168.0.15;</span><br><span class="line">    server 192.168.0.16;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name blog.huotuyouxi.com;</span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;huotu-server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>upstream</code> 字段定义了代理服务器的 IP 地址，当访客进来的时候，Nginx 会按照某种规则将请求分发给其中一个服务器处理。</p><p><code>server</code> 模块里通过 <code>proxy_pass http://huotu-server;</code> 将匹配到规则的请求转发给代理服务器来处理。</p><p>当用户访问：blog.huotuyouxi.com</p><p>Nginx 会把请求转发给某台服务器处理，因此每次访问网站看到的返回 IP 可能都会不同。</p><h2 id="Nginx-模块"><a href="#Nginx-模块" class="headerlink" title="Nginx 模块"></a>Nginx 模块</h2><p>Nginx 发展迅速的原因除了开源之外，还可以使用官方提供的模块或用户自定义开发的模块，由于模块化使得 Nginx 的定制能力很强，可以使用第三方扩展模块让 Nginx 适应各种场景，有能力的大神也可以分享自己写好的模块让其他人直接使用，像这样可以自由 DIY 的软件，有谁会不喜欢呢？</p><p>例如，由淘宝的工程师清无（王晓哲）和春来（章亦春）所开发的 nginx_lua_module 可以将 Lua 语言嵌入到 Nginx 配置中，从而利用 Lua 极大增强了 Nginx 本身的编程能力，甚至可以不用配合其它脚本语言（如 PHP 或 Python 等），只靠 Nginx 本身就可以实现复杂业务的处理。</p><p>Nginx 本身支持多种模块，如 HTTP 模块、EVENT 模块和 MAIL 模块等。</p><p>前文提到，在 HTTP 请求中，Nginx 的工作仅仅只是分析请求然后转发给匹配规则的 <code>location</code> 去处理，<code>location</code> 模块中的内容才是真正干活的人。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 匹配规则</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 实际的工作者</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已安装模块可以用命令：<code>nginx -V</code> 查看，输出结果类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">built by gcc 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) </span><br><span class="line">built with OpenSSL 1.1.0j  20 Nov 2018</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix&#x3D;&#x2F;etc&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --modules-path&#x3D;&#x2F;usr&#x2F;lib&#x2F;nginx&#x2F;modules --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.lock --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;client_temp --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;proxy_temp --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;fastcgi_temp --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;uwsgi_temp --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;cache&#x2F;nginx&#x2F;scgi_temp --user&#x3D;nginx --group&#x3D;nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt&#x3D;&#39;-g -O2 -fdebug-prefix-map&#x3D;&#x2F;data&#x2F;builder&#x2F;debuild&#x2F;nginx-1.15.12&#x2F;debian&#x2F;debuild-base&#x2F;nginx-1.15.12&#x3D;. -fstack-protector-strong -Wformat -Werror&#x3D;format-security -Wp,-D_FORTIFY_SOURCE&#x3D;2 -fPIC&#39; --with-ld-opt&#x3D;&#39;-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&#39;</span><br></pre></td></tr></table></figure><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><p>Nginx 有许多可以自定义安装的模块，下面以 echo 为例。</p><p>echo 仓库地址：<a href="https://github.com/openresty/echo-nginx-module">Github - echo-nginx-module</a></p><p>安装 echo 模块 <code>echo-nginx-module</code> 可以使 Nginx 具有输出字符串的能力，这个功能可以用来简单的调试，如输出参数等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;hello &#123; </span><br><span class="line">    return 200 &#39;hello!&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;hello_echo &#123; </span><br><span class="line">    echo &quot;hello, echo!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="官方模块"><a href="#官方模块" class="headerlink" title="官方模块"></a>官方模块</h3><p>官方模块是 Nginx 官方提供的可扩展模块。</p><p>例如 Nginx 预制的模块 stub_status 可以用来查看 Nginx 的运行状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;test &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问后的输出页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 3 3 2 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1 </span><br></pre></td></tr></table></figure><p>更多 Nginx 官方模块以使用方法：<a href="http://nginx.org/en/docs/">http://nginx.org/en/docs/</a></p><p>如上面的 <code>stub_status</code>，可以通过查询手册：<a href="http://nginx.org/en/docs/http/ngx_http_stub_status_module.html">ngx_http_stub_status_module</a> 来获取如何使用。</p><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>可以通过搜索 Github 寻找来自全世界开发者分享的模块：<a href="https://github.com/search?q=nginx+module">Github - Nginx 扩展模块</a></p><p>具体的使用方法可以参照作者写的 README 文档。</p><h2 id="Nginx-应用场景"><a href="#Nginx-应用场景" class="headerlink" title="Nginx 应用场景"></a>Nginx 应用场景</h2><p>最后再来总结一下，Nginx 具体的应用场景。</p><h3 id="HTTP-服务"><a href="#HTTP-服务" class="headerlink" title="HTTP 服务"></a>HTTP 服务</h3><p>Nginx 可以为站点提供 HTTP 服务。</p><p>利用 <code>location</code> 模块匹配 URI 规则，再将其分发到对应的程序进行处理。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>Nginx 的反向代理服务，可以实现分发请求的功能。</p><p>具体方法是配置 <code>upstream</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream myproject &#123;</span><br><span class="line">        server 127.0.0.1:8000 weight&#x3D;3;</span><br><span class="line">        server 127.0.0.1:8001;</span><br><span class="line">        server 127.0.0.1:8002;</span><br><span class="line">        server 127.0.0.1:8003;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">        server_name www.domain.com;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;myproject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡有以下几种模式：</p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>轮询模式</td><td>Nginx 默认配置，当客户端访问服务的时候，请求按时间顺序逐一分配到不同的后端服务器，如果有某台服务器挂了，Nginx 会自动剔除</td></tr><tr><td>权重模式</td><td>可以为每个服务器配置不同的权重，权重值越高的越容易被分发到请求，当多台服务器性能存在差异时，可以让配置高的服务器分配更高的权重</td></tr><tr><td>IP 哈希</td><td>如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。解决 Session 丢失的问题，保证每个用户访问到同一台服务器。</td></tr><tr><td>第三方插件</td><td>可以通过安装第三方插件实现更多的模式</td></tr></tbody></table><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>当自己网站的图片、视频等静态资源被其他人引用时，其他人访问了别人的网站，就会请求到我们服务器上的资源，给我们的服务器带来压力。</p><p>Nginx 可以验证来源网站 referers 来判断请求是否是本站点，如果是其他的站点则不让它们获取到图片资源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    root html</span><br><span class="line">    valid_referers none blocked *.huotuyouxi.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDN-服务器"><a href="#CDN-服务器" class="headerlink" title="CDN 服务器"></a>CDN 服务器</h3><p>可以用 Nginx 搭建 CDN 服务器。</p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>Nginx 的 <code>ngx_http_limit_req_module</code> 模块可以限制访问频率和并发连接数。</p><p>HttpLimit zone：<a href="https://www.nginx.cn/doc/standard/httplimitzone.html">HttpLimit zone</a></p><p>HttpLimitReqest：<a href="https://www.nginx.cn/doc/standard/httplimitrequest.html">HttpLimitReqest</a></p><h3 id="黑-白名单"><a href="#黑-白名单" class="headerlink" title="黑/白名单"></a>黑/白名单</h3><p>可以禁止某些 IP 访问，或允许指定 IP 访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    deny 8.8.8.8;</span><br><span class="line">    allow 9.9.9.9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><p>以 Ajax 方式访问非本站点的链接时，浏览器出于安全考虑会禁止访问，也就是跨域问题（HTTP 访问限制，CORS）。</p><p>在 Nginx 中只需要配置允许访问的来源类型即可解决跨域问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 允许访问的来源，* 指的是全部，可以是 IP 地址或者域名</span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line"># 允许请求的类型</span><br><span class="line">add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line"># 允许请求的方法</span><br><span class="line">add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br></pre></td></tr></table></figure><h3 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h3><p>Nginx 提供了邮件代理服务，具体参照官方文档：<a href="https://www.nginx.cn/doc/mail/mailcore.html">Nginx - MailCore</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的反射</title>
      <link href="/2020/03/10/php-reflex/"/>
      <url>/2020/03/10/php-reflex/</url>
      
        <content type="html"><![CDATA[<h2 id="反射是什么？"><a href="#反射是什么？" class="headerlink" title="反射是什么？"></a>反射是什么？</h2><p>反射原本指的是一种光学现象，光在传播时照射在物体上会产生返回原物体的现象。在 PHP 中，反射的作用类似光的传播，PHP 可以通过反射机制拿到代码本身，也就是通过代码得到代码，反射一词十分形象。</p><p>通过反射机制可以获取类中的变量、方法名称甚至是注释等等，在正常的开发环境中几乎不会用到，一般都是在框架设计时使用，目的是增加框架的扩展性。</p><p>Laravel、Swoft 框架都用到了反射机制，Swoft 注解的实现原理就是使用反射机制来实现的。</p><p>一些 API 文档插件可以通过注释来编译生成 API 文档，其原理同样是使用了 PHP 的反射机制。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>定义一个类，类里面有常量、私有属性（private 声明的变量）、类的注释和方法的注释等等。</p><p>思考下面几个业务中几乎不会用到的问题：</p><p>如果我们要获取类里面的所有常量，应该怎么做？</p><p>如果我们要获取方法的注释，或者类的注释，应该怎么做？</p><p>如果我们要获得类的命名空间，又该怎么做？</p><p>此时习惯了做业务的我们肯定一脸懵逼，PHP 中的反射就是为了解决这一类的问题，通过反射提供的 API 可以拿到一个类的所有信息。</p><p>通过下面的代码举例，你马上就会弄懂什么是反射了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 类的注释</span><br><span class="line"> *&#x2F;</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    const BOY &#x3D; 1;</span><br><span class="line">    const GIRL &#x3D; 2;</span><br><span class="line"></span><br><span class="line">    private $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name) &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 我是方法注释</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#39;hello!&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class &#x3D; new ReflectionClass(&#39;User&#39;);  &#x2F;&#x2F; 将类名User作为参数，即可建立User类的反射类</span><br><span class="line">$properties &#x3D; $class-&gt;getProperties();  &#x2F;&#x2F; 获取User类的所有属性，返回ReflectionProperty的数组</span><br><span class="line">$property &#x3D; $class-&gt;getProperty(&#39;name&#39;); &#x2F;&#x2F; 获取User类的属性ReflectionProperty</span><br><span class="line">$methods &#x3D; $class-&gt;getMethods();   &#x2F;&#x2F; 获取User类的所有方法，返回ReflectionMethod数组</span><br><span class="line">$method &#x3D; $class-&gt;getMethod(&#39;sayHello&#39;);  &#x2F;&#x2F; 获取User类的方法的ReflectionMethod</span><br><span class="line">$constants &#x3D; $class-&gt;getConstants();   &#x2F;&#x2F; 获取所有常量，返回常量定义数组</span><br><span class="line">$constant &#x3D; $class-&gt;getConstant(&#39;BOY&#39;);   &#x2F;&#x2F; 获取常量</span><br><span class="line">$namespace &#x3D; $class-&gt;getNamespaceName();  &#x2F;&#x2F; 获取类的命名空间</span><br><span class="line">$comment_class &#x3D; $class-&gt;getDocComment();  &#x2F;&#x2F; 获取User类的注释文档，即定义在类之前的注释</span><br><span class="line">$comment_method &#x3D; $class-&gt;getMethod(&#39;sayHello&#39;)-&gt;getDocComment();  &#x2F;&#x2F; 获取User类中方法的注释文档</span><br><span class="line"></span><br><span class="line">var_dump($comment_method);</span><br></pre></td></tr></table></figure><p>上面的代码会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string(39) &quot;&#x2F;**</span><br><span class="line">     * 我是方法注释</span><br><span class="line">     *&#x2F;&quot;</span><br></pre></td></tr></table></figure><h2 id="反射-API"><a href="#反射-API" class="headerlink" title="反射 API"></a>反射 API</h2><p>PHP 官方手册：<a href="https://www.php.net/reflection">https://www.php.net/reflection</a></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>反射机制会打破类的封装性，日常业务也不需要获取代码的注释。</p><p>因此在日常开发中几乎不会直接用到，但是在框架或者插件的设计上却能发挥很大的作用。</p><h3 id="生成-API-文档"><a href="#生成-API-文档" class="headerlink" title="生成 API 文档"></a>生成 API 文档</h3><p>由于反射可以拿到类的属性、方法，就可以自动生成类的文档。</p><p>典型例子：<a href="https://apidocjs.com/">API DOC</a></p><p>通过在方法名称上添加注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @api &#123;get&#125; &#x2F;user&#x2F;:id Request User information</span><br><span class="line"> * @apiName GetUser</span><br><span class="line"> * @apiGroup User</span><br><span class="line"> *</span><br><span class="line"> * @apiParam &#123;Number&#125; id Users unique ID.</span><br><span class="line"> *</span><br><span class="line"> * @apiSuccess &#123;String&#125; firstname Firstname of the User.</span><br><span class="line"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User.</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>然后运行编译程序就可以直接生成一个美观、排版整齐的 API 文档。</p><p><img src="https://apidocjs.com/img/example.png" alt="APIDOC"></p><p>一些 IDE 提示工具也利用反射获取类的注释，然后实现提示的功能，注释时需要根据一定的规范。</p><p>注释示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 测试方法</span><br><span class="line"> * @param $a</span><br><span class="line"> * @param $b</span><br><span class="line"> *&#x2F;</span><br><span class="line">function test($a,$b)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量复刻文件"><a href="#批量复刻文件" class="headerlink" title="批量复刻文件"></a>批量复刻文件</h3><p>既然可以拿到类的所有成员，那么以类为母版，克隆出子类文件轻而易举，在一些框架或插件中经常用到。</p><p>Laravel 框架可以使用 <code>php artisan make:controller UserController</code> 命令创建一个控制器类的模板，还可以加上参数 <code>-r</code> 生成一个 RESTful 风格的 API 控制器类。</p><p>还有数据库迁移工具（Laravel 内置了此插件），可以通过命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php vendor&#x2F;bin&#x2F;phinx create MyMigration</span><br></pre></td></tr></table></figure><p>直接生成一个数据库迁移文件。</p><p>直接用命令的方式生成文件，可以少写很多重复的代码。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>先不需要知道依赖注入是什么，看下面的例子，Laravel 很普通的控制器类的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use App\Service\UserService;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public $service;</span><br><span class="line"></span><br><span class="line">    public function __construct(UserService $service)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service &#x3D; $service;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $users &#x3D; $this-&gt;service-&gt;getAllUsers();</span><br><span class="line">        </span><br><span class="line">        dd($users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们通过构造函数赋予了属性 <code>$service</code>，但问题是——控制器类并没有被实例化！</p><p>一般情况下，我们需要这样把参数传给构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$service &#x3D; new UserService();</span><br><span class="line">$user &#x3D; new UserController($service);</span><br></pre></td></tr></table></figure><p>上面的例子并没有 <code>UserController</code> 的实例化操作，而且在 PHP 中参数前面加上类名称，只是起到变量类型限制的作用。</p><p>到底是哪里传来实例化的 <code>UserService</code> 呢？</p><p>其实是通过反射机制实现的，通过反射获取到了控制器类的构造方法，然后将这个控制器所需要<strong>依赖</strong>的类实例化后生成的对象<strong>注入</strong>到控制器里，所以这个叫做依赖注入。</p><p>依赖注入这个概念是从 Java 中传过来的，并非 Laravel 特有。</p><p>假设不使用反射机制注入依赖，那么我们的控制器是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use App\Service\UserService;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public $service;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service &#x3D; new UserService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $users &#x3D; $this-&gt;service-&gt;getAllUsers();</span><br><span class="line"></span><br><span class="line">        dd($users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯……？代码量好像差不多！</p><p>依赖注入是一种设计模式，运行的结果没有差别。</p><p>其实在学 Laravel 的时候，我发现了一个很奇怪的地方。</p><p>比如存在路由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;users&#39;, &#39;UserController@index&#39;)-&gt;name(&#39;users.index&#39;);</span><br><span class="line">Route::get(&#39;&#x2F;users&#x2F;&#123;id&#125;&#39;, &#39;UserController@show&#39;)-&gt;name(&#39;users.show&#39;);</span><br></pre></td></tr></table></figure><p>然后控制器的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        dd($request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function show(Request $request, $id)</span><br><span class="line">    &#123;</span><br><span class="line">        dd($request, $id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index 方法的第一个<code>Illuminate\Http\Request</code> 类型的参数，我们在路由中没有任何参数，既然不是通过匹配路由得到的参数，这个参数又是怎么来的呢？</p><p>更不可思议的是第二个路由的 show 方法，我们在声明路由的时候只指明了一个参数 <code>/users/&#123;id&#125;</code>，但我们现在却在方法中写了两个参数，又是怎么精确地匹配到 ID 值的？</p><p>其实同样是用了依赖注入的方法实现的，在学习了反射之后，它们的原理就大概知道了。</p><p>首先通过反射得到一个方法的参数，如果这个参数定义了某些类型，就将其实例化后再传递给该方法，在 Laravel 中有专门的解析类在处理这些参数。</p><h3 id="通过注释生成路由"><a href="#通过注释生成路由" class="headerlink" title="通过注释生成路由"></a>通过注释生成路由</h3><p>Swoft 框架把注释当做定义路由的方法，称为“注解”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">use Swoft\Http\Message\Request;</span><br><span class="line">use Swoft\Http\Server\Annotation\Mapping\Controller;</span><br><span class="line">use Swoft\Http\Server\Annotation\Mapping\RequestMapping;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Class Home</span><br><span class="line"> *</span><br><span class="line"> * @Controller(prefix&#x3D;&quot;home&quot;)</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Home</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 该方法路由地址为 &#x2F;home&#x2F;index</span><br><span class="line">     *</span><br><span class="line">     * @RequestMapping(route&#x3D;&quot;&#x2F;index&quot;, method&#x3D;&quot;post&quot;)</span><br><span class="line">     *</span><br><span class="line">     * @param Request $request</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function index(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; TODO:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 PHP 的反射机制可以做一些奇奇怪怪的事，这也算是 Swoft 独特的风格吧。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的魔术方法</title>
      <link href="/2020/03/10/php-magic-methods/"/>
      <url>/2020/03/10/php-magic-methods/</url>
      
        <content type="html"><![CDATA[<h2 id="魔术方法是什么？"><a href="#魔术方法是什么？" class="headerlink" title="魔术方法是什么？"></a>魔术方法是什么？</h2><p>魔术方法是 PHP 类中特殊的方法，以双下划线 <code>__</code> 开头，具有特殊用途，比如我们常用的 <code>__construct</code> 构造函数就属于魔术方法，构造函数的作用是类实例化自动调用的方法。</p><p>魔术方法的名称都是系统预定义的，无法修改，我们在写 PHP 代码的时候，为了避免与系统预定义函数相同，不建议用双下划线 <code>__</code> 作为函数的前缀。</p><p>魔术方法的作用可以归纳为：<strong>对象在 xxx 的时候，应该实现的功能。</strong></p><p>比如，上述构造函数可以理解为：对象在“实例化”的时候，应该实现的功能。</p><p>除此之外，与构造函数相对的 <strong>析构函数</strong> <code>__destruct</code> 可以在对象被回收时自动调用。</p><p>如果有 Java 基础，你可以发现类默认有一种 <code>toString</code> 方法，可以把对象转化成字符串。其实 PHP 中也存在同样的魔术方法 <code>__toString</code>，当类的对象被当做字符串调用时会自动执行此方法。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;Just a dog.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">echo $dog;</span><br></pre></td></tr></table></figure><p>执行的结果会输出：Just a dog.</p><p>为什么在上述代码中，echo 可以输出一个对象呢？</p><p>这是因为我们设置了 <code>__toString</code> 方法，当对象被当做字符串调用时会自动触发 <code>__toString</code> 方法。</p><p>换而言之，<strong>魔术方法是一类由系统预定义了函数名称，在某些情况下被动触发的函数</strong>。</p><p>所有的魔术方法都不是用来主动调用的，如下错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误示范</span><br><span class="line">$obj &#x3D; new MyClass();</span><br><span class="line">$obj-&gt;__construct();</span><br></pre></td></tr></table></figure><p>魔术方法也是类的方法，上述代码逻辑上没有问题而且可以运行且不会报错。不会报错不代表这么写没问题，魔术方法中<strong>不应该</strong>放入业务逻辑相关的代码。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>魔术方法大都用于框架且与设计模式关联紧密，日常业务除了构造方法之外几乎很少接触到其他魔术方法。<br>Laravel 框架将魔术方法用到了极致，被称为“优雅”的框架。</p><h2 id="PHP-中的魔术方法"><a href="#PHP-中的魔术方法" class="headerlink" title="PHP 中的魔术方法"></a>PHP 中的魔术方法</h2><p>下面介绍 PHP 常见的魔术方法以及应用场景和示例代码。</p><h3 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h3><p>俗称类的构造方法，当类被实例化为对象时自动调用。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;Just a dog.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br></pre></td></tr></table></figure><p>输出：Just a dog.</p><blockquote><p>void __construct ([ mixed $args [, $… ]] )</p></blockquote><p>构造函数的几大特征：</p><ul><li>构造函数可以接受参数，能够在创建对象时赋值给对象属性</li><li>构造函数可以调用类方法或其他函数</li><li>构造函数可以调用其他类的构造函数</li><li>构造函数的权限可以被修改</li></ul><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Animal</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;This is animal.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal</span><br><span class="line">&#123;</span><br><span class="line">    protected $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 父类构造函数不会自动调用，需要手动进行调用</span><br><span class="line">        parent::__construct();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 对象赋值</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 调用类中的方法</span><br><span class="line">        $this-&gt;jump();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function jump()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;name . &#39; jump.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog(&#39;小白&#39;);</span><br></pre></td></tr></table></figure><p>最后一条：<strong>构造函数的权限可以被修改。</strong></p><p>在设计模式中会用到，例如单例模式，为了防止子类被实例化，会将构造函数限制为 <code>private</code> 私有化。</p><p>一个比较标准的单例模式示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Singleton &#123;</span><br><span class="line">    &#x2F;&#x2F; 私有属性，用于保存实例</span><br><span class="line">    private static $instance;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 构造方法私有化，防止外部创建实例</span><br><span class="line">    private function __construct()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 公有方法，用于获取实例</span><br><span class="line">    public static function getInstance()&#123;</span><br><span class="line">        &#x2F;&#x2F; 没有的话创建实例并返回，有的话直接返回</span><br><span class="line">        if(!(self::$instance instanceof self))&#123;</span><br><span class="line">            self::$instance &#x3D; new self();</span><br><span class="line">        &#125;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 克隆方法私有化，防止复制实例</span><br><span class="line">    private function __clone()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h3><p>俗称析构函数，当对象被回收时自动调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;The dog is dead.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">unset($dog);</span><br></pre></td></tr></table></figure><p>输出：The dog is dead.</p><blockquote><p>void __destruct ( void )</p></blockquote><p>析构函数的特征：</p><ul><li>析构函数不能接受参数</li><li>析构函数不能抛出异常</li></ul><p>由于析构函数在对象被回收时触发，因此如果抛出异常将无法被捕获，抛出异常情况下将报出致命错误。</p><p>和构造函数一样，父类的析构函数不会被隐式调用。要执行父类的析构函数，必须在子类的析构函数体中显式调用： <code>parent::__destruct();</code></p><h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>当调用对象中不存在的属性时，自动触发该方法。</p><p>Laravel 框架里几乎随处可见，如 Model 对象调用表的字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; User::find(1);</span><br><span class="line">echo $user-&gt;name;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $attrs &#x3D; [];</span><br><span class="line"></span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!isset($this-&gt;attrs[$name])) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;attrs[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">var_dump($dog-&gt;name);</span><br></pre></td></tr></table></figure><p>输出：NULL</p><p>通常情况下，如果直接调用对象中不存在的属性会产生报错，但是设置了 <code>__get</code> 方法后，如果调用了不存在的属性则会转而调用这个方法处理。通常 <code>__get</code> 要结合 <code>__set</code> 一起使用。</p><h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>当设置对象中不存在的属性时，自动触发该方法。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $attrs &#x3D; [];</span><br><span class="line"></span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!isset($this-&gt;attrs[$name])) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;attrs[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __set($name, $value)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;attrs[$name] &#x3D; $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">$dog-&gt;name &#x3D; &#39;小白&#39;;</span><br><span class="line">var_dump($dog-&gt;name);</span><br></pre></td></tr></table></figure><p>输出：string(6) “小白”</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h3><p>当对象被当成字符串调用时，自动触发该方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#39;Dog name is &#39; . $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog(&#39;小黑&#39;);</span><br><span class="line">echo $dog;</span><br></pre></td></tr></table></figure><p>输出：Dog name is 小黑</p><p>这个魔术方法在调试的时候非常有用，可以把对象中的参数信息打印出来，记录到日志里。</p><h3 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h3><p>当对象调用了一个类中不存在的方法或者没有权限调用的方法时，自动触发。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $name;</span><br><span class="line"></span><br><span class="line">    public function __call($name, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($name,$arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function aPrivateMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;Im private.&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">$dog-&gt;fly(&#39;666&#39;);</span><br><span class="line">$dog-&gt;aPrivateMethod();</span><br></pre></td></tr></table></figure><p>第一个 fly 方法，不存在 Dog 类中；第二个 aPrivateMethod 是私有方法，不能直接被对象调用，因而触发了 <code>__call</code> 方法。</p><p>在 Laravel 中也可以看到许多 <code>__call</code> 应用的场景，还是 Model 类的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; User::whereName(&#39;xiaobai&#39;)-&gt;first();</span><br><span class="line">dd($user);</span><br></pre></td></tr></table></figure><p>这里的 where 后面接大驼峰方式的参数，相当于如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user &#x3D; User::where(&#39;name&#39;, &#39;xiaobai&#39;)-&gt;first();</span><br></pre></td></tr></table></figure><p>通过 <code>__call</code> 方法实现简写的目的。</p><p><code>__call</code> 方法接收两个参数，第一个参数是调用方法的名称，第二个参数是调用方法时传入的参数，数组格式。</p><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic"></a>__callStatic</h3><p>当对象调用了一个不存在的静态方法时，自动触发。</p><p><code>__callStatic</code> 与 <code>__call</code> 的作用基本相似，只不过 <code>__callStatic</code> 针对的是静态方法。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $name;</span><br><span class="line"></span><br><span class="line">    public static function __callStatic($name, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($name,$arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">$dog::whatsYourProblem();</span><br></pre></td></tr></table></figure><p>这样的设计在 Laravel 框架中也能看到，依然是 Model 的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$users &#x3D; User::all();</span><br><span class="line">$items &#x3D; Item::where(&#39;price&#39;, &#39;&gt;&#39;, 100)-&gt;paginate(20);</span><br></pre></td></tr></table></figure><p>Laravel 中的 Model 并不是把方法真的当做静态方法，而是利用 <code>__callStatic</code> 让你产生“静态调用”的错觉。</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h3><p>当尝试以调用方法的形式来调用一个对象时，自动触发该方法。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    protected $name;</span><br><span class="line"></span><br><span class="line">    public function __invoke($parm1, $parm2)</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($parm1,$parm2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">$dog(&#39;小白&#39;,&#39;小黑&#39;);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string(6) &quot;小白&quot;</span><br><span class="line">string(6) &quot;小黑&quot;</span><br></pre></td></tr></table></figure><p><code>__invoke</code> 可以接收自定义的任意参数，与函数的形参规则一致。</p><p>我们知道这种方法有点奇怪，谁也不会把一个对象当成方法来用吧？</p><p>让我们来康康 Laravel 框架是怎么利用 <code>__invoke</code> 让代码变得更“优雅”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1、指定路由及对应的方法</span><br><span class="line">Route::get(&#39;&#x2F;user&#39;, &#39;UserController@index&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2、不指定对应的方法，自动调用 __invoke</span><br><span class="line">Route::get(&#39;&#x2F;user&#x2F;default&#39;, &#39;UserController&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 1、&#x2F;user 调用 index 方法</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 2、&#x2F;user&#x2F;default 没有指定方法，自动调用 __invoke</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不指定具体的方法时，Laravel 的路由会把对象当做方法来执行，从而调用 <code>__invoke</code> 方法，简化了路由部分的代码。</p><h3 id="clone"><a href="#clone" class="headerlink" title="__clone"></a>__clone</h3><p>当对象被克隆时，自动调用。</p><p>PHP 中存在一个关键词 clone 可以复制对象，并且复制出来的对象为独立的个体，与原对象不存在互相影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line"></span><br><span class="line">    public function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;new dog birth.&#39; . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dog &#x3D; new Dog();</span><br><span class="line">$dog-&gt;name &#x3D; &#39;小白&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 克隆出来的对象属性与原对象一模一样</span><br><span class="line">$cloneDog &#x3D; clone $dog;</span><br><span class="line">var_dump($cloneDog-&gt;name);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改克隆对象的属性，不会影响原对象</span><br><span class="line">$cloneDog-&gt;name &#x3D; &#39;小黑&#39;;</span><br><span class="line">var_dump($dog, $cloneDog);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new dog birth.</span><br><span class="line">string(6) &quot;小白&quot;</span><br><span class="line">object(Dog)#1 (1) &#123;</span><br><span class="line">  [&quot;name&quot;]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;小白&quot;</span><br><span class="line">&#125;</span><br><span class="line">object(Dog)#2 (1) &#123;</span><br><span class="line">  [&quot;name&quot;]&#x3D;&gt;</span><br><span class="line">  string(6) &quot;小黑&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现，克隆出来的对象修改了属性，但是原来对象的属性保持不变，它们是互相独立的个体，也就是说并非引用关系，clone 会开辟一块新的内存来存储复制出来的新对象。</p><p><code>__clone</code> 方法在 clone 出新对象时自动调用。</p><p>clone 业务中用得比较少，应用场景能想到的一个是重构代码，我们需要增加一个新的接口来应对新的需求，但同时又不希望破坏旧接口的内部结构，也不希望直接在旧接口的代码上修改，此时可以使用 clone，既可以向下兼容作用，又能在旧接口上添加新功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class NewDogAction</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 新接口代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OldDogAction</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 旧版接口代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 动作类对象</span><br><span class="line">    private $action;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;action &#x3D; new OldDogAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;action &#x3D; new NewDogAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 clone 出来的时候，action 被替换成新的接口代码。</p><p>换成比较形象的例子：</p><p>鸣人使用多重影分身之术，可以看成是 clone 出很多个分身，但是这些分身并不能 100% 继承本体的能力，本体的能力可以看成上面的 <code>oldDogAction</code>，而分身的能力则是 <code>newDogAction</code>，分身除了 action 属性之外其他的地方与本体并无差异。</p><h2 id="更多的魔术方法"><a href="#更多的魔术方法" class="headerlink" title="更多的魔术方法"></a>更多的魔术方法</h2><p>如果有兴趣了解全部的魔术方法，请访问 <a href="https://www.php.net/manual/zh/language.oop5.magic.php">PHP：魔术方法</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理工具 Supervisord</title>
      <link href="/2020/03/10/supervisord/"/>
      <url>/2020/03/10/supervisord/</url>
      
        <content type="html"><![CDATA[<h2 id="Supervisord-是什么？"><a href="#Supervisord-是什么？" class="headerlink" title="Supervisord 是什么？"></a>Supervisord 是什么？</h2><p>Supervisord 是一个进程管理工具，它可以用来执行一些需要在后台持续存在的进程（守护进程）的启动命令。</p><p>比如前端的 Nuxt 框架使用 SSR（服务端渲染），需要启动服务端的进程，会使用 pm2 来管理进程的启动。</p><p>Supervisord 同样是一种进程管理工具。</p><p>下文将演示 Supervisord 管理 Laravel 的队列任务进程。 </p><h2 id="安装-Supervisord"><a href="#安装-Supervisord" class="headerlink" title="安装 Supervisord"></a>安装 Supervisord</h2><p>以 Centos 为例，直接使用 yum 安装即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1、安装 epel-release</span><br><span class="line">yum install -y epel-release</span><br><span class="line"></span><br><span class="line"># 2、安装 supervisor</span><br><span class="line">yum install -y supervisor</span><br><span class="line"></span><br><span class="line"># 3、将 supervisor 设置为开机启动</span><br><span class="line">systemctl enable supervisord</span><br></pre></td></tr></table></figure><p>以上就安装完成了，但是还没有启动 supervisor，先不用着急启动。</p><h2 id="Supervisor-配置文件"><a href="#Supervisor-配置文件" class="headerlink" title="Supervisor 配置文件"></a>Supervisor 配置文件</h2><p>supervisor 的配置文件默认路径为：<code>/etc/supervisor/supervisord.conf</code>，使用 <code>vim</code> 命令编辑，大致可以看到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod&#x3D;0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log ; (main log file;default $CWD&#x2F;supervisord.log)</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor            ; (&#39;AUTO&#39; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">&quot;&#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf&quot; 28L, 1178C                 8,1           Top</span><br><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;var&#x2F;run&#x2F;supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod&#x3D;0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor&#x2F;supervisord.log ; (main log file;default $CWD&#x2F;supervisord.log)</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir&#x3D;&#x2F;var&#x2F;log&#x2F;supervisor            ; (&#39;AUTO&#39; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock ; use a unix:&#x2F;&#x2F; URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;*.conf</span><br><span class="line">                                                                                                                                                                                          19,36         All</span><br></pre></td></tr></table></figure><p>如果不一样说明版本不同，通过下面的命令可以查看自己安装的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看 supervisor 版本</span><br><span class="line">supervisord -v</span><br><span class="line"></span><br><span class="line"># 我下载的版本是 3.3.5</span><br></pre></td></tr></table></figure><p>需要注意的地方只有最底下的一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;*.conf</span><br></pre></td></tr></table></figure><p>在一些旧的版本这里会有差别，这里的意思是说包含了路径 <code>/etc/supervisor/conf.d</code> 文件夹里面所有后缀为 <code>.conf</code> 的文件，现在不需要改动这个文件。</p><p><code>/etc/supervisor/conf.d/</code> 文件夹下默认是空的，我们要自己创建新的配置文件。</p><p>使用命令：<code>vim /etc/supervisor/conf.d/my.conf</code>，编辑并保存如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:myprogram]</span><br><span class="line">process_name&#x3D;%(program_name)s_%(process_num)02d</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;php &#x2F;www&#x2F;myproject&#x2F;artisan queue:work --quiet --tries&#x3D;3 --sleep&#x3D;3</span><br><span class="line">directory&#x3D;&#x2F;www&#x2F;myproject</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">user&#x3D;www-data</span><br><span class="line">numprocs&#x3D;1</span><br><span class="line">redirect_stderr&#x3D;true</span><br></pre></td></tr></table></figure><p>这里我们启动了一个守护进程，用来执行 Laravel 的队列任务：<code>php artisan queue:work</code>。</p><p>配置项说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># program:&lt;进程名字&gt;</span><br><span class="line">[program:myprogram]</span><br><span class="line"></span><br><span class="line"># 进程的名字规则，按照下面的配置就可以了</span><br><span class="line">process_name&#x3D;%(program_name)s_%(process_num)02d</span><br><span class="line"></span><br><span class="line"># 执行的命令 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;php 是 PHP 二进制文件位置，相当于在 Laravel 下执行 php artisan 一样</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;php &#x2F;www&#x2F;myproject&#x2F;artisan queue:work --quiet --tries&#x3D;3 --sleep&#x3D;3</span><br><span class="line"></span><br><span class="line"># 项目所在目录，注意这里一定要填，网上搜的教程很多都忽略了这个字段</span><br><span class="line">directory&#x3D;&#x2F;www&#x2F;myproject</span><br><span class="line"></span><br><span class="line"># 是否在 supervisor 启动的时候自动启动进程</span><br><span class="line">autostart&#x3D;true</span><br><span class="line"></span><br><span class="line"># 当进程在 running 状态下 exit 时，是否自动重启</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line"></span><br><span class="line"># 这里一定要填对，如果你是用 Laravel 执行队列任务，那跟我填的一样就可以，如果你执行其他任务，请填写所属的用户组，不然会有权限问题</span><br><span class="line">user&#x3D;www-data</span><br><span class="line"></span><br><span class="line"># 启动多少个子进程，一般启动 1 个就够了</span><br><span class="line">numprocs&#x3D;1</span><br><span class="line"></span><br><span class="line"># 设置为 true 时，将进程报错的输出内容写到 supervisor 的输出文件 stdout 里，建议为 true，这样报错了可以查错误信息</span><br><span class="line">redirect_stderr&#x3D;true</span><br></pre></td></tr></table></figure><blockquote><p>注意把上面的 myproject 替换成自己项目的路径</p></blockquote><p>保存好配置文件后，就可以启动 supervisor 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 以下两种方法皆可启动 supervisor</span><br><span class="line"></span><br><span class="line"># 1、指定配置文件的方式启动 supervisor（推荐）</span><br><span class="line">supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf</span><br><span class="line"></span><br><span class="line"># 2、服务的方式启动</span><br><span class="line">systemctl start supervisord</span><br></pre></td></tr></table></figure><p>执行成功的情况下，你会看到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unlinking stale socket &#x2F;var&#x2F;run&#x2F;supervisor.sock</span><br></pre></td></tr></table></figure><p>如果不是这个信息，说明你的配置文件有问题，检查一下 <code>command</code> 和 <code>directory</code> 路径是否填写正确，99% 启动不成功都是这两个字段填写不正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 supervisor 进程</span><br><span class="line">supervisorctl status</span><br><span class="line"></span><br><span class="line"># 可以看到下面的输出结果</span><br><span class="line">myproject:myprogram                 RUNNING   pid 17, uptime 0:01:40</span><br></pre></td></tr></table></figure><p>显示为 <code>RUNNING</code> 则说明正常运行，如果不是这个状态就是配置文件出错了。</p><p>如果修改了配置文件，或者创建了新的配置文件，需要重载才能读取到新的配置，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重新读取配置文件</span><br><span class="line">supervisorctl reread</span><br><span class="line"></span><br><span class="line"># 更新运行状态</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h2 id="Laravel-队列任务无法写入-Log-日志问题"><a href="#Laravel-队列任务无法写入-Log-日志问题" class="headerlink" title="Laravel 队列任务无法写入 Log 日志问题"></a>Laravel 队列任务无法写入 Log 日志问题</h2><p>用 supervisor 执行队列任务时发现 Laravel 的日志系统 Log 竟然无法写入日志文件，查了下也没有任何报错信息，问题的原因是所在用户组没有权限。</p><p>也就是配置文件中的，user 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;www-data</span><br></pre></td></tr></table></figure><p>这里一定要填写运行程序的用户组，比如 PHP 的用户组是 <code>www-data</code>，如果你填的是 <code>root</code>，这样就没有权限操作日志文件了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Supervisord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序猿提升自我修养的网站推荐</title>
      <link href="/2020/03/09/programmer-recommend-website/"/>
      <url>/2020/03/09/programmer-recommend-website/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为程序猿，阅读其他人分享的技术文章除了学习新的技术之外，对于提升自己的思维能力也有很大的帮助。比起自己摸爬滚打尝试出来所耗费的时间，也许别人一句简单的提醒就能使你豁然开朗。</p><p>当然，对于一些刚刚入坑的新人来说，也许依赖别人不是一个好的建议，自己摸索可以提升自学能力，作为新入道途的小司机来说，在听取别人的建议后，别忘了加入自己的思考。</p><p>对老司机老说，关键的学习能力和处理问题的能力已经在日常业务中得到锻炼，与其不断摸索不如听取建议以最快的速度解决问题。然后再细细回味其中的道理。</p><p>下面推荐一些自己平时经常去的论坛或社区，自己在早晨上班的时候都会花 30 分钟左右去阅（mo）读（yu）别人分享的文章，虽然不一定能学到什么，但这种无差别的阅读会成为你知识的积淀，说不定在哪一刻你突然听到同事谈到某个专业术语，你会惊奇的发现——这不是我早上读的那篇文章提到的东西吗！？</p><h2 id="前端人员"><a href="#前端人员" class="headerlink" title="前端人员"></a>前端人员</h2><p>前端人员不能满足于当个切图仔只会网页布局和 CSS 样式，JS 用的 JQuery 别的就不懂了。其实现在前后端的区分度已经不大了，从 nodeJS 出现以后，前端的格局就改变了，不要把自己的思维局限在“前端只是做网页样式”而已，如果你还保留这种思想，建议早点舍弃。前端学点后端的思维跟后端学点 HTML、CSS 都是很普通的事情。</p><p>除了 WEB 前端，安卓前端、IOS 前端同理。</p><p>下面的推荐顺序没有排名，纯粹是想到什么就写下来。</p><h3 id="掘金社区"><a href="#掘金社区" class="headerlink" title="掘金社区"></a>掘金社区</h3><p>前端技术有一个比较火的社区，而且里面也有许多大佬，这个社区叫做“掘金”：</p><p>传送门：<a href="https://juejin.im/">大佬之家 - 掘金社区</a></p><p>掘金社区会有大佬发布技术相关的文章，也会有人告诉你面试的技巧 <strong>（还能相亲）</strong> 。</p><p>但是里面有一个地方我建议不要点开，那就是“沸点”，要是沉迷在沸点就跟刷微博差不多了。</p><p>前不久还上线了“掘金小册”，可以将自己的知识进行变现。</p><p>掘金是一个前端大佬云集的地方。</p><h3 id="V2EX"><a href="#V2EX" class="headerlink" title="V2EX"></a>V2EX</h3><p>这也是一个神奇的社区，不过内容比较综合，各种东西都会有，偶尔还有大佬出现，也有人喜欢在这里刷帖摸鱼，鱼龙混杂的地方。</p><p>V2EX 可以让你发现许多黑科技，提升自己的姿势水平，偶尔会有人把自己异想天开的想法发到这里进行讨论，还有一些企业的黑幕（如暴力裁员等黑料）。</p><p>总之，在这里更多的是提升自己的阅历。</p><p>传送门：<a href="https://v2ex.com/">八卦与涨姿势的地方 - V2EX</a></p><p>这个社区的名字究竟是何义至今不明。</p><h3 id="思否-amp-stackOverFlow"><a href="#思否-amp-stackOverFlow" class="headerlink" title="思否 &amp; stackOverFlow"></a>思否 &amp; stackOverFlow</h3><p>思否是国内比较大的交流讨论社区，应该是致敬国外的 stackOverFlow，从 UI 看起来两者非常相似。</p><p>可以把思否当做国内版的 stackOverFlow。</p><p>先来介绍国外的 stackOverFlow。</p><p>传送门：<a href="https://stackoverflow.com/">解决问题的宝库 - stackOverFlow</a></p><p>根据个人阅读的帖子来看，这里主要是解决问题的帖子居多，很多时候你搜索某个报错信息，跳出来的就是这个网站的帖子，而且你经常可以从帖子里找到解决问题的方法。</p><p>所以，这个网站给我的感觉是一个可以帮助你快速查错和解决问题的平台。如果遇到开发上的难题或者不明的报错信息，可以到这个平台上搜索看看（对英文稍有要求），大多数情况下都可以找到解决问题的方法。</p><p>接着是我们国内的思否，个人非常喜欢这个社区，因为这边文章详情页的排版、字体、背景颜色十分协调，可以拥有十分良好的阅读体验。</p><p>传送门：<a href="https://segmentfault.com/">享受阅读的乐趣 - Segmentfault</a></p><p>这个社区同样也有许多解决问题的帖子，同时还有许多分享技术的帖子，也有人把这个平台当做了自己个人博客记录的地方。</p><p>思否上面提供了“视频课程”，价格上来看还算蛮便宜的，比起报培训班流水线式的作业，倒不如拿那些钱支持一些真正有技术的作者。</p><h2 id="后端人员"><a href="#后端人员" class="headerlink" title="后端人员"></a>后端人员</h2><p>其实前面介绍的几个也有后端的文章，后端开发也可以去逛逛。</p><p>因为我的本职是 PHP 开发，所以这里推荐的是偏向 PHP 的社区。</p><h3 id="Laravel-China"><a href="#Laravel-China" class="headerlink" title="Laravel - China"></a>Laravel - China</h3><p>现在更名为 LearnKu 了，PHP 较为出名的一个社区，也是 Laravel 框架最大的交流论坛之一。</p><p>传送门：<a href="https://learnku.com/">刻意学习，与日精进 - LearnKu</a></p><p>LearnKu 社区是 Summer 个人开发的 Laravel 技术论坛，如今已经扩展了更多的板块，不再局限于 Laravel 或是 PHP 语言，诸如 Python、Java 等语言也拥有独立的板块了。</p><p>LearnKu 里面比较有意思的一个地方是可以翻译国外的文档，然后留下你的大名，虽然本人的英文水平不咋样，但是也曾翻译过几篇文章的段落，成就感十足！</p><p>除此之外，个人感觉要学习 Laravel 框架的话，首选 LearnKu，因为这里有最全、最新的 Laravel 文档（并且阅读体验良好）。</p><p>LearnKu 的前身 Laravel - China 曾经是国内最早一批提供 Composer 国内镜像源的地方，个人感觉 Summer 在推动 Laravel 框架在国内的推广做出了十分巨大的贡献，如果没有翻译国外的文档和提供 Composer 国内镜像源，想要入门这个“优雅”的框架可不容易。</p><p>LearnKu 是集文档、技术分享、问题提问的综合社区，想要入门 Laravel 的萌新，选择 LearnKu 准没错！</p><p>LearnKu 这个名字听起来怪怪的，难道是 learn Kungfu 的缩写！？</p><h3 id="Laravel-学院"><a href="#Laravel-学院" class="headerlink" title="Laravel 学院"></a>Laravel 学院</h3><p>现在改名为学院君（感觉之前的名字更好）。</p><p>Laravel 学院也是学习 Laravel 的好去处，只不过这里比较偏向于查阅资料的地方，虽然提供了“问题”的板块，但是讨论的氛围还是偏向于冷清。</p><p>传送门：<a href="https://xueyuanjun.com/">优质的 Laravel 中文学习资料 - 学院君</a></p><p>Laravel 学院也为 Laravel 在国内的推广做出了重要贡献，在搜索 Laravel 相关问题的时候，经常能搜到 Laravel 学院的网站，而且从中找到解决问题的方法。</p><p>所以，个人感觉 Laravel 学院偏向于查资料与搜索问题。</p><p>本站点的起源本人尚不清楚，但是从文档的分享者来看居然全部都是同一个人——学院君。</p><p>只凭借网站本身的力量竟然能够整理出如此众多的文档，令人钦佩。</p><p>Laravel 学院除了文档之外，还有项目的实践教程，而且每一步都十分详细甚至还有配图，萌新想学不会都难！</p><h3 id="简书"><a href="#简书" class="headerlink" title="简书"></a>简书</h3><p>一个略微神奇的网站，咋看之下是文人墨客记录生活情感的地方，然而程序猿却在这开辟出一片属于自己的天地。</p><p>传送门：<a href="https://www.jianshu.com/">众多教程 - 简书</a></p><p>简书上面记录得比较多的是一些软件的安装教程和使用方法。</p><p>目前开通了钻石系统，口号是：“能让创作变现”。</p><p>如果有技术大佬喜欢写文章的，可以到这个平台试试，分享技术还能赚点小钱，不亦乐乎！</p><p>简书有不少女性作家，说不定还有意外的邂逅（笑）。</p><h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h3><p>“你们以后找工作，如果面试官问你经常去看哪些网站，你就说 CSDN。”</p><p>这是我大学老师跟我们说的一句话。</p><p>但是现在，我去面试的时候是绝对不会提 CSDN 的。</p><p>因为它已经完全变质了，也许在我老师的那个年代这是一个大神聚集的社区，但如今在我看来，它只不过是一个盗版成灾的地方，而且百度给的权重还很高，CSDN 的搜索结果总是置于前几名。</p><p>这里把 CSDN 列举出来是为了点名批评的。</p><p>盗版文章是对原作者版权不尊重；其次，我们搜索问题是为了找到解决方法的，但是 CSDN 盗版的文章经常还存在重复，造成我们搜索结果里面有很多条都是 CSDN 的文章而且还不能解决问题，CSDN 出现在搜索结果里大大增加了我们解决问题的时间成本。</p><blockquote><p>小技巧：使用百度搜索时在关键词后面加上 -csdn 可以排除所有 CSDN 网站的结果</p></blockquote><p>CSDN 做的恶不仅仅只是盗版文章。</p><p>还有盗版资源。</p><p>相信大家都有这样的体验：在百度搜索一个资源时，跳出的是 CSDN 的下载地址，点进去发现还要积分。而这些资源大都是从其他技术分享者那里拿到的，转手就成为了谋取利益的手段。</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>composer配置参数详解</title>
      <link href="/2020/03/08/composer-config/"/>
      <url>/2020/03/08/composer-config/</url>
      
        <content type="html"><![CDATA[<h2 id="composer-json"><a href="#composer-json" class="headerlink" title="composer.json"></a>composer.json</h2><p>Composer 使用配置文件 <code>composer.json</code> 来指明依赖关系或者包信息。</p><p>一个简单的 <code>composer.json</code> 配置文件如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;phpmailer&#x2F;phpmailer&quot;: &quot;^6.0&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;require-dev&quot;: &#123;</span><br><span class="line">    &quot;robmorgan&#x2F;phinx&quot;: &quot;^0.10.8&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\Library\\&quot;: &quot;application&#x2F;library&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发配置项"><a href="#开发配置项" class="headerlink" title="开发配置项"></a>开发配置项</h2><p>如果你不打算将自己的包开源，或者这个配置文件并不是一个库，而是你的项目依赖第三方包的配置文件，那么许多字段都是不需要用到的，以下是几个比较核心的配置字段。</p><h3 id="require-项目依赖关系"><a href="#require-项目依赖关系" class="headerlink" title="require : 项目依赖关系"></a>require : 项目依赖关系</h3><p>执行 <code>composer install</code> 或者 <code>composer update</code> 将会下载依赖的包。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;phpmailer&#x2F;phpmailer&quot;: &quot;^6.0&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们声明了我们需要下载安装的包 <code>phpmailer/phpmailer</code> 和对应的版本信息 <code>^6.0</code>。</p><p><code>require</code> 也可以用来指明 PHP 的版本信息。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">   &quot;php&quot;: &quot;&gt;&#x3D;5.5.0&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它要求使用者的 PHP 版本至少是 5.5.0 以上的。</p><h3 id="require-dev-只在开发环境的依赖"><a href="#require-dev-只在开发环境的依赖" class="headerlink" title="require-dev : 只在开发环境的依赖"></a>require-dev : 只在开发环境的依赖</h3><p>有时候，我们可能需要一些帮助我们调试的第三方包，但是线上环境并不需要用到这些包，这个时候可以将它们放在 <code>require-dev</code> 中进行声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;require-dev&quot;: &#123;</span><br><span class="line">    &quot;phpmailer&#x2F;phpmailer&quot;: &quot;^6.0&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线上环境</strong>在执行 <code>composer install</code> 或者 <code>composer update</code> 的时候，<strong>需要添加 <code>--no-dev</code> 参数</strong>来跳过 <code>require-dev</code> 依赖的包。</p><p>如果直接使用 <code>composer install</code>，则 <code>require-dev</code> 依赖的包也会被安装。</p><h3 id="autoload-自动加载"><a href="#autoload-自动加载" class="headerlink" title="autoload : 自动加载"></a>autoload : 自动加载</h3><p>通过配置 <code>autoload</code> 可以实现类的自动加载。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\Library\\&quot;: &quot;application&#x2F;library&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，我们使用了 <code>psr-4</code> 的自动加载规范来加载 <code>library</code> 中的类。</p><p>除了 <code>psr-4</code> 还有几种可选的类型：</p><ul><li>psr-0</li><li>classmap</li><li>files</li></ul><h3 id="repositories-仓库地址"><a href="#repositories-仓库地址" class="headerlink" title="repositories : 仓库地址"></a>repositories : 仓库地址</h3><p>声明依赖所在仓库的地址，默认情况下使用 Packagist 官方网站：<a href="https://packagist.org./">https://packagist.org。</a></p><p>国内镜像源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 阿里</span><br><span class="line">https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Composer 中文网</span><br><span class="line">https:&#x2F;&#x2F;packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>此外，还可以搭建自己的仓库地址。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">    &quot;packagist&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>支持以下类型（type）的包资源库：</p><ul><li>composer: 一个 composer 类型的资源库，是一个简单的网络服务器（HTTP、FTP、SSH）上的 packages.json 文件，它包含一个 composer.json 对象的列表，有额外的 dist 和/或 source 信息。这个 packages.json 文件是用一个 PHP 流加载的。你可以使用 options 参数来设定额外的流信息。</li><li>vcs: 从 git、svn 和 hg 取得资源。</li><li>pear: 从 pear 获取资源。</li><li>package: 如果你依赖于一个项目，它不提供任何对 composer 的支持，你就可以使用这种类型。你基本上就只需要内联一个 composer.json 对象。</li></ul><h2 id="开源项目配置项"><a href="#开源项目配置项" class="headerlink" title="开源项目配置项"></a>开源项目配置项</h2><p>如果你的包希望上传到 Packagist 提供给他人使用，需要提供包的基本信息，如作者、包的描述等等。</p><p>一个开源的项目，<a href="https://github.com/PHPMailer/PHPMailer/blob/master/composer.json">PHPMailer</a> 的配置文件示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;phpmailer&#x2F;phpmailer&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;PHPMailer is a full-featured email creation and transfer class for PHP&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Marcus Bointon&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;phpmailer@synchromedia.co.uk&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Jim Jagielski&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;jimjag@gmail.com&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Andy Prevost&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;codeworxtech@users.sourceforge.net&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Brent R. Matzelle&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;&gt;&#x3D;5.5.0&quot;,</span><br><span class="line">        &quot;ext-ctype&quot;: &quot;*&quot;,</span><br><span class="line">        &quot;ext-filter&quot;: &quot;*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;require-dev&quot;: &#123;</span><br><span class="line">        &quot;friendsofphp&#x2F;php-cs-fixer&quot;: &quot;^2.2&quot;,</span><br><span class="line">        &quot;phpdocumentor&#x2F;phpdocumentor&quot;: &quot;2.*&quot;,</span><br><span class="line">        &quot;phpunit&#x2F;phpunit&quot;: &quot;^4.8 || ^5.7&quot;,</span><br><span class="line">        &quot;zendframework&#x2F;zend-serializer&quot;: &quot;2.7.*&quot;,</span><br><span class="line">        &quot;doctrine&#x2F;annotations&quot;: &quot;1.2.*&quot;,</span><br><span class="line">        &quot;zendframework&#x2F;zend-eventmanager&quot;: &quot;3.0.*&quot;,</span><br><span class="line">        &quot;zendframework&#x2F;zend-i18n&quot;: &quot;2.7.3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;suggest&quot;: &#123;</span><br><span class="line">        &quot;psr&#x2F;log&quot;: &quot;For optional PSR-3 debug logging&quot;,</span><br><span class="line">        &quot;league&#x2F;oauth2-google&quot;: &quot;Needed for Google XOAUTH2 authentication&quot;,</span><br><span class="line">        &quot;hayageek&#x2F;oauth2-yahoo&quot;: &quot;Needed for Yahoo XOAUTH2 authentication&quot;,</span><br><span class="line">        &quot;stevenmaguire&#x2F;oauth2-microsoft&quot;: &quot;Needed for Microsoft XOAUTH2 authentication&quot;,</span><br><span class="line">        &quot;ext-mbstring&quot;: &quot;Needed to send email in multibyte encoding charset&quot;,</span><br><span class="line">        &quot;symfony&#x2F;polyfill-mbstring&quot;: &quot;To support UTF-8 if the Mbstring PHP extension is not enabled (^1.2)&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;PHPMailer\\PHPMailer\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;autoload-dev&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;PHPMailer\\Test\\&quot;: &quot;test&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;license&quot;: &quot;LGPL-2.1-only&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="name-包名"><a href="#name-包名" class="headerlink" title="name : 包名"></a>name : 包名</h3><p>包的名称，它包括供应商名称和项目名称，使用 / 分隔，左边为供应商名称，右边为项目名称。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">monolog&#x2F;monolog</span><br><span class="line">igorw&#x2F;event-source</span><br></pre></td></tr></table></figure><p>对于需要发布的包（库），这是必须填写的。</p><h3 id="description-描述"><a href="#description-描述" class="headerlink" title="description : 描述"></a>description : 描述</h3><p>一个包的简短描述，通常用来描述包的功能，最长只有一行。</p><p>对于需要发布的包（库），这是必须填写的。</p><h3 id="version-版本"><a href="#version-版本" class="headerlink" title="version : 版本"></a>version : 版本</h3><p>version 不是必须的，并且建议忽略。</p><p>它应该符合 ‘X.Y.Z’ 或者 ‘vX.Y.Z’ 的形式， -dev、-patch、-alpha、-beta 或 -RC 这些后缀是可选的。在后缀之后也可以再跟上一个数字。</p><p>示例：</p><ul><li>1.0.0</li><li>1.0.2</li><li>1.0.0-dev</li><li>1.0.0-alpha3</li><li>1.0.0-beta2</li><li>1.0.0-RC5</li></ul><h3 id="type-安装类型"><a href="#type-安装类型" class="headerlink" title="type : 安装类型"></a>type : 安装类型</h3><p>包的安装类型，默认为 library。</p><p>composer 原生支持以下4种类型：</p><ul><li>library: 这是默认类型，它会简单的将文件复制到 vendor 目录。</li><li>project: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。</li><li>metapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。</li><li>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。<br>仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。</li></ul><h3 id="keywords-关键字"><a href="#keywords-关键字" class="headerlink" title="keywords : 关键字"></a>keywords : 关键字</h3><p><strong>非必选，但建议填写。</strong> 该包相关的关键词的数组，可用于搜索和过滤，相当于在 composer 中的 SEO，有助于让更多的人搜索到你的包。</p><h3 id="homepage-项目主页"><a href="#homepage-项目主页" class="headerlink" title="homepage : 项目主页"></a>homepage : 项目主页</h3><p>该项目网站的 URL 地址，可选。</p><h3 id="time-版本发布时间"><a href="#time-版本发布时间" class="headerlink" title="time : 版本发布时间"></a>time : 版本发布时间</h3><p>必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式，可选。</p><h3 id="license-许可协议"><a href="#license-许可协议" class="headerlink" title="license : 许可协议"></a>license : 许可协议</h3><p>包的许可协议，它可以是一个字符串或者字符串数组。</p><p>最常见的许可协议的推荐写法：</p><ul><li>Apache-2.0</li><li>BSD-2-Clause</li><li>BSD-3-Clause</li><li>BSD-4-Clause</li><li>GPL-2.0</li><li>GPL-2.0+</li><li>GPL-3.0</li><li>GPL-3.0+</li><li>LGPL-2.1</li><li>LGPL-2.1+</li><li>LGPL-3.0</li><li>LGPL-3.0+</li><li>MIT</li></ul><p>可选，但强烈建议提供此内容。</p><h3 id="authors-作者"><a href="#authors-作者" class="headerlink" title="authors : 作者"></a>authors : 作者</h3><p>包的作者，这是一个对象数组。</p><p>这个对象必须包含以下属性：</p><ul><li>name: 作者的姓名，通常使用真名。</li><li>email: 作者的 email 地址。</li><li>homepage: 作者主页的 URL 地址。</li><li>role: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Nils Adermann&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;naderman@naderman.de&quot;,</span><br><span class="line">            &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;www.naderman.de&quot;,</span><br><span class="line">            &quot;role&quot;: &quot;Developer&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Jordi Boggiano&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;j.boggiano@seld.be&quot;,</span><br><span class="line">            &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;seld.be&quot;,</span><br><span class="line">            &quot;role&quot;: &quot;Developer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选，但强烈建议提供此内容。</p><h3 id="support-支持信息"><a href="#support-支持信息" class="headerlink" title="support : 支持信息"></a>support : 支持信息</h3><p>获取项目支持的向相关信息对象。</p><p>这个对象必须包含以下属性：</p><ul><li>email: 项目支持 email 地址。</li><li>issues: 跟踪问题的 URL 地址。</li><li>forum: 论坛地址。</li><li>wiki: Wiki 地址。</li><li>irc: IRC 聊天频道地址，类似于 irc://server/channel。</li><li>source: 网址浏览或下载源。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;support&quot;: &#123;</span><br><span class="line">        &quot;email&quot;: &quot;support@example.org&quot;,</span><br><span class="line">        &quot;irc&quot;: &quot;irc:&#x2F;&#x2F;irc.freenode.org&#x2F;composer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选。</p><h3 id="minimum-stability-root-only"><a href="#minimum-stability-root-only" class="headerlink" title="minimum-stability (root-only)"></a>minimum-stability (root-only)</h3><p>这定义了通过稳定性过滤包的默认行为。默认为 stable（稳定）。因此如果你依赖于一个 dev（开发）包，你应该明确的进行定义。</p><p>对每个包的所有版本都会进行稳定性检查，而低于 minimum-stability 所设定的最低稳定性的版本，将在解决依赖关系时被忽略。对于个别包的特殊稳定性要求，可以在 require 或 require-dev 中设定。</p><p>可用的稳定性标识：dev、alpha、beta、RC、stable。</p><h3 id="prefer-stable-root-only"><a href="#prefer-stable-root-only" class="headerlink" title="prefer-stable (root-only)"></a>prefer-stable (root-only)</h3><p>当此选项被激活时，Composer 将优先使用更稳定的包版本。</p><p>使用 “prefer-stable”: true 来激活它。</p>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始开发自己的Composer包</title>
      <link href="/2020/03/08/composer-package/"/>
      <url>/2020/03/08/composer-package/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 <code>composer</code> 的时候，我们几乎都是在用其他人分享出来的包，久而久之，难免会产生开发自己包的想法，不仅可以加深对 <code>composer</code> 的理解程度，同时还可以把自己常用的功能封装起来，作为自己的“小金库”储备起来。</p><blockquote><p>使用 <code>composer</code> 开发依赖包是一项非常考验能力的事情，它涉及到一个微型系统的架构，阅读<strong>设计模式</strong>有助于帮助我们开发一个优秀的 <code>composer</code> 依赖包。</p></blockquote><h2 id="开发自己的第一个-Composer-包"><a href="#开发自己的第一个-Composer-包" class="headerlink" title="开发自己的第一个 Composer 包"></a>开发自己的第一个 Composer 包</h2><p><code>composer.json</code> 是 <code>composer</code> 的基础，文件夹目录下存在 <code>composer.json</code> 文件，那么这个文件夹就是一个<strong>资源包</strong>。</p><p>我们可以手动创建 <code>composer.json</code> 文件，不过，我们推荐使用 <code>composer init</code> 命令。</p><blockquote><p>composer init 命令帮助我们自动生成 composer.json，文件可以修改，不必担心按错了什么会产生不好的影响。</p></blockquote><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p><code>composer.json</code> 配置项的字段较多，后续步骤如果对配置文件的字段抱有疑问，可以返回此处查看：<a href="/composer-config">composer.json 详解</a>。</p><p>现在，不需要了解这些。</p><h3 id="创建包目录"><a href="#创建包目录" class="headerlink" title="创建包目录"></a>创建包目录</h3><p>我们的操作是在命令行界面操作的，如果是 Windows 系统，则需要进入 CMD 界面，进入到你的工作磁盘目录下，使用快捷键 <code>Shift + 鼠标右键</code>，在菜单栏中选择进入命令行（DOS 界面）。</p><p>首先，我们需要创建一个包的目录 <code>packagist</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Mac OS 系统</span><br><span class="line">mkdir packagist</span><br><span class="line"></span><br><span class="line"># Windows 系统(可以直接右键创建）</span><br><span class="line">md packagist</span><br><span class="line"></span><br><span class="line"># 创建完成后进入文件夹</span><br><span class="line">cd packagist</span><br></pre></td></tr></table></figure><h3 id="输入包的名字"><a href="#输入包的名字" class="headerlink" title="输入包的名字"></a>输入包的名字</h3><p>在 <code>packagist </code> 目录下，执行 <code>composer init</code>，<code>composer</code> 会提示我们设置配置参数信息，如下图：</p><p><img src="https://i.loli.net/2019/08/24/NSPn6GYuE83jcs1.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package name (&lt;vendor&gt;&#x2F;&lt;name&gt;) [firerabbit&#x2F;packagist]:</span><br></pre></td></tr></table></figure><p>提示让你输入包的名字，格式为 <code>&lt;vendor&gt;/&lt;name&gt;</code>，<code>vendor</code> 为服务商名字，个人开发可以使用自己在 GitHub 中使用的昵称，<code>name</code> 为包的名字，<code>&lt;vendor&gt;/&lt;name&gt;</code> 不能存在同名，这里设置的名字即后面使用 <code>composer require</code> 的名字。</p><p>中括号内的 <code>[firerabbit/packagist]</code> 是默认值，直接按回车的话就会使用这个名字。</p><h3 id="输入包的描述信息"><a href="#输入包的描述信息" class="headerlink" title="输入包的描述信息"></a>输入包的描述信息</h3><p>包名输入完成后，接下来需要设置 <code>Description</code> （描述）字段，这个字段是包的功能性描述，作为练习包就随便输入啦：</p><p><img src="https://i.loli.net/2019/08/24/y6EWBMhGbZ1V3Qt.png" alt="image.png"></p><h3 id="输入作者信息"><a href="#输入作者信息" class="headerlink" title="输入作者信息"></a>输入作者信息</h3><p>接下来设置 <code>Author</code> (作者信息)，格式为 <code>name example@email.com</code>，输入 n 可以跳过：</p><p><img src="https://i.loli.net/2019/08/24/V7UsaPQpm5LyKqu.png" alt="image.png"></p><h3 id="minimum-stability-最小稳定版本"><a href="#minimum-stability-最小稳定版本" class="headerlink" title="minimum-stability 最小稳定版本"></a>minimum-stability 最小稳定版本</h3><p>通过设置 <code>minimum-stability</code> 的值，来告诉 <code>Composer</code> 当前开发的项目的依赖要求的包的全局稳定性级别，它的值包括：dev、alpha、beta、RC、stable，stable 是默认值。</p><p><img src="https://i.loli.net/2019/08/24/IFecMfkGXYgWU9T.png" alt="image.png"></p><p>稳定性介绍：<a href="https://learnku.com/php/t/9929/understanding-composers-stability-stability-identity">理解 Composer 的稳定性（Stability）标识</a></p><p>我们直接按回车默认值即可。</p><h3 id="Package-Type-包类型"><a href="#Package-Type-包类型" class="headerlink" title="Package Type 包类型"></a>Package Type 包类型</h3><p>接下来设置包的类型：</p><p><img src="https://i.loli.net/2019/08/24/4PMEiWuaXIb2Zyd.png" alt="image.png"></p><p>composer 原生支持以下4种类型：</p><ul><li>library: 默认类型，它会简单的将文件复制到 vendor 目录。</li><li>project: 一个项目，而不是一个库。</li><li>metapackage: 空的包，包含依赖并且需要触发依赖的安装。</li><li>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。</li></ul><p>这里我们直接按回车，采用默认的 library。</p><h3 id="License-许可协议"><a href="#License-许可协议" class="headerlink" title="License 许可协议"></a>License 许可协议</h3><p>接下来输入包的许可协议：</p><p><img src="https://i.loli.net/2019/08/24/UW2StviLwyIO9ef.png" alt="image.png"></p><p>包的许可协议，它可以是一个字符串或者字符串数组。</p><p>最常见的许可协议的推荐写法：</p><ul><li>Apache-2.0</li><li>BSD-2-Clause</li><li>BSD-3-Clause</li><li>BSD-4-Clause</li><li>GPL-2.0</li><li>GPL-2.0+</li><li>GPL-3.0</li><li>GPL-3.0+</li><li>LGPL-2.1</li><li>LGPL-2.1+</li><li>LGPL-3.0</li><li>LGPL-3.0+</li><li>MIT</li></ul><p>这里我们输入 MIT （开源许可协议）。</p><h3 id="定义依赖项"><a href="#定义依赖项" class="headerlink" title="定义依赖项"></a>定义依赖项</h3><p>接下来设置依赖项：</p><p><img src="https://i.loli.net/2019/08/24/6iHFcMvR8UK7o2O.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]?</span><br></pre></td></tr></table></figure><p>我们的练习项目不需要设置此项，输入 no。</p><h3 id="dev-依赖项"><a href="#dev-依赖项" class="headerlink" title="dev 依赖项"></a>dev 依赖项</h3><p>设置 dev 环境依赖项：</p><p><img src="https://i.loli.net/2019/08/24/LEelWoaq4dwNts2.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]?</span><br></pre></td></tr></table></figure><p>同上，输入 no。</p><h3 id="最后一步：确认信息"><a href="#最后一步：确认信息" class="headerlink" title="最后一步：确认信息"></a>最后一步：确认信息</h3><p>最后一步，确认包的信息：</p><p><img src="https://i.loli.net/2019/08/24/fDkiBObK9QXo1aJ.png" alt="image.png"></p><p>输入 yes，回车，然后查看当前目录即可看到 <code>composer.json</code> 文件。</p><p><code>composer init</code> 命令帮助你自动生成文件，实际上你可以直接在<strong>包的目录下</strong>创建 <code>composer.json</code>，并且输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;huotu&#x2F;test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;我的第一个包。&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;火兔兔子&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上两种方式都是一样的。</p><h2 id="依赖包的基本结构"><a href="#依赖包的基本结构" class="headerlink" title="依赖包的基本结构"></a>依赖包的基本结构</h2><p>一个 <code>composer</code> 依赖包的基本结构，以我们上面的 <code>packagist</code> 为例：</p><ul><li>packagist<ul><li>src<ul><li>类文件</li><li>…</li></ul></li><li>tests<ul><li>单元测试文件</li><li>… </li></ul></li><li>README.md</li><li>composer.json</li><li>LICENSE</li></ul></li></ul><h3 id="src-文件夹"><a href="#src-文件夹" class="headerlink" title="src 文件夹"></a>src 文件夹</h3><p><code>src</code> 是包所在的路径，一般我们都会将其命名为 <code>src</code>（业界共识），不建议改成其他的名字。</p><p>开发包的工作就是在这个目录下进行的，你可以在这个目录下创建更多的文件夹来划分不同功能的类。</p><h3 id="tests-文件夹"><a href="#tests-文件夹" class="headerlink" title="tests 文件夹"></a>tests 文件夹</h3><p><code>tests</code> 文件夹用来存放单元测试的，如果你不写的话，这个文件夹可以不要。</p><h3 id="README-md-文件"><a href="#README-md-文件" class="headerlink" title="README.md 文件"></a>README.md 文件</h3><p><code>README.md</code> 是包描述的 Markdown 语法的介绍文档，在 GitHub 中将会自动解析这个文件并且展示出来，每一个包都<strong>应该</strong>要包含 <code>README.md</code> 文件，用来介绍这个包的基本信息和操作方法。</p><p>创建 <code>README.md</code> 文件的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Mac OS</span><br><span class="line">vim README.md</span><br><span class="line"></span><br><span class="line"># Windows 系统</span><br><span class="line">创建 README.txt，保存后改成 .md</span><br><span class="line">如需编辑，右键以文本文档打开即可</span><br></pre></td></tr></table></figure><h3 id="composer-json-文件"><a href="#composer-json-文件" class="headerlink" title="composer.json 文件"></a>composer.json 文件</h3><p>包的配置信息。</p><h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><p>许可协议文本，文本格式。</p><p>练习项目中，我们只需要 <code>src</code> 和 <code>README.md</code> 即可。</p><p>推荐使用 <code>PHPstorm</code> 作为编辑工具，最后我们的包目录结构如图所示：</p><p><img src="https://i.loli.net/2019/08/24/he9UfyOz2W6Z5Qi.png" alt="image.png"></p><h2 id="配置自动加载规则"><a href="#配置自动加载规则" class="headerlink" title="配置自动加载规则"></a>配置自动加载规则</h2><p>为了防止命名空间冲突，开发的包需要配置自动加载，修改 <code>composer.json</code> 添加 <code>autoload</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Huotu\\Test\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们采用 <code>psr-4</code> 的规范来自动加载包目录下 <code>src</code> 文件夹内的类文件，这里的 <code>&quot;Huotu\\Test\\&quot;</code> 是我们使用的命名空间，<code>\\</code> 不能写成 <code>\</code>，一般而言，命名空间以包的名字来命名。</p><p>完整的 <code>composer.json</code> 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;huotu&#x2F;test&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;我的第一个包。&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;火兔兔子&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;huoshaotuzi@icloud.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;&#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;Huotu\\Test\\&quot;: &quot;src&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建包的类文件"><a href="#创建包的类文件" class="headerlink" title="创建包的类文件"></a>创建包的类文件</h3><p>在 <code>src</code> 目录下创建 <code>Robot.php</code> 文件，我们希望写一个可以自动打招呼的机器人（类）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Huotu\Test;</span><br><span class="line"></span><br><span class="line">class Robot</span><br><span class="line">&#123;</span><br><span class="line">    public function sayHello($name) &#123;</span><br><span class="line">        echo &#39;hello,&#39; . $name . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就完成了一个依赖包的开发，使用者只需要引入这个包就可以调用 <code>Robot</code> 的 <code>sayHello</code> 方法。</p><h2 id="测试包的功能"><a href="#测试包的功能" class="headerlink" title="测试包的功能"></a>测试包的功能</h2><p>我们现在已经写好了一个包，但是开发过程以及准备发布的时候，我们都需要对功能进行调试，你可以在目录下创建一个 <code>test.php</code>，然后运行 <code>php test.php</code> 来测试，不过这样总是不太方便的，尤其是某些有其他依赖的操作（如需要连接数据库、Redis）等等。最好的方法是将包文件放在一个真实的项目里进行测试，下面模拟创造一个 <code>project</code> 来作为我们实际的项目。</p><p>在 <code>packagist</code> 同级目录下，创建一个文件夹 <code>project</code>。</p><p>由于我们本地开发的包并未上传的 Packagist，无法通过 <code>composer require</code> 进行安装，因此我们必须手动配置加载目录，进入 project 文件夹，创建 <code>composer.json</code>：</p><ul><li>project<ul><li>composer.json</li></ul></li></ul><p>编辑 <code>composer.json</code>，输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;Huotu\\Test\\&quot;: &quot;..&#x2F;packagist&#x2F;src&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完成后，我们需要执行 <code>composer dump-autoload</code> 来生成自动加载文件。</p><blockquote><p>如果对依赖包添加了新的类或者删除了类，涉及到类文件数量、名称改变的，都需要重新执行 composer dump-autoload，否则无法读取到最新的类文件</p></blockquote><p>执行完成后，在当前目录下生成了 <code>vendor</code> 文件夹，这个文件夹里即包含了我们依赖包的自动加载信息。</p><p><img src="https://i.loli.net/2019/08/24/nCVmNxviFpfJUw5.png" alt="image.png"></p><p>接着一个文件用来测试结果 <code>test.php</code>：</p><ul><li>project<ul><li>composer.json</li><li>test.php</li><li>vendor<ul><li>composer<ul><li>…</li></ul></li><li>autoload.php </li></ul></li></ul></li></ul><p>输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require &#39;.&#x2F;vendor&#x2F;autoload.php&#39;;</span><br><span class="line"></span><br><span class="line">use Huotu\Test\Robot;</span><br><span class="line"></span><br><span class="line">$robot &#x3D; new Robot();</span><br><span class="line">$robot-&gt;sayHello(&#39;IDCE.COM&#39;);</span><br></pre></td></tr></table></figure><p>终端中输入 <code>php test.php</code> 执行结果：</p><p><img src="https://i.loli.net/2019/08/24/BYavLTK2W9JDncZ.png" alt="image.png"></p><p>可以看到我们成功调用自己开发的包了！</p><p>必须将 <code>autoload</code> 引入才能实现自动加载，如果提示找不到类可能就是没有正确引入的关系或者 <code>composer.json</code> 配置的 <code>psr-4</code> 路径不正确。</p><h2 id="上传到-GitHub"><a href="#上传到-GitHub" class="headerlink" title="上传到 GitHub"></a>上传到 GitHub</h2><p>开发完成后，我们需要把包文件上传到 <a href="https://github.com/">GitHub</a>，如果没有账号则注册一个。</p><p>进入个人主页，在左侧的 Repositories（仓库）选择 New 创建一个新的仓库：</p><p><img src="https://i.loli.net/2019/08/24/ISdkXipUAeLfv2c.png" alt="image.png"></p><p>仓库信息，权限要选择 <code>public</code>（公开的），完成后点击 <code>Create repository</code>：</p><p><img src="https://i.loli.net/2019/08/24/FuyLgqBpdAH3W8R.png" alt="image.png"></p><p>创建好的项目：</p><p><img src="https://i.loli.net/2019/08/24/WZdpEtnvL3qCeVX.png" alt="image.png"></p><p>GitHub 十分友好的提示了上传文件的步骤，我们只需要执行以下几个步骤即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;huoshaotuzi&#x2F;test.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>返回 <code>packagist</code> 目录下，我们按照 GitHub 上提示的内容，执行 <code>git init</code>，并添加文件：</p><p><img src="https://i.loli.net/2019/08/24/B1vg4hK95lz2VkC.png" alt="image.png"></p><blockquote><p>注！由于 ide 产生的文件是必须添加 .gitigonre 排除的</p></blockquote><p>然后添加上传的仓库信息，并执行 <code>push</code> 推送到 GitHub 的仓库：</p><p><img src="https://i.loli.net/2019/08/24/FK5Gz1rpVluQLgn.png" alt="image.png"></p><p>返回 GitHub 仓库，刷新页面即可看到上传文件的信息：</p><p><img src="https://i.loli.net/2019/08/24/IbWEe8VnKwmZhCP.png" alt="image.png"></p><h2 id="上传到-Packagist"><a href="#上传到-Packagist" class="headerlink" title="上传到 Packagist"></a>上传到 Packagist</h2><p>如果希望自己的包被其他人安装，就需要将包上传到 Packagist 官网上。</p><p>Packagist 官网：<a href="https://packagist.org/">https://packagist.org/</a></p><p><img src="https://i.loli.net/2019/08/24/sX6AxhSyfEC9pVg.png" alt="image.png"></p><p>如果没有账号可以注册一个，或者直接使用 GitHub 登录（推荐）。</p><p>登录后，选择右上角的 <code>Submit</code>（提交）：</p><p><img src="https://i.loli.net/2019/08/24/8zhUPTDwsbOt5fa.png" alt="image.png"></p><p>在提交页面会提示你输入 GitHub 上仓库的地址：</p><p><img src="https://i.loli.net/2019/08/24/GQSMnub7JdOxWjH.png" alt="image.png"></p><p>输入刚才创建的仓库地址，点击 <code>Check</code>：</p><p><img src="https://i.loli.net/2019/08/24/qeuQ6oEsWdLl2cF.png" alt="image.png"></p><p>这边会提示一些同名的包，并且出现了 <code>Submit</code> 按钮，我们直接点击 <code>Submit</code>，此时会进入包页面，<code>update</code> 会进入转圈圈状态，表示正在同步包信息，稍等一会刷新页面即可看到包信息。</p><p>到目前为止，已经将包上传到 Packagist 官网了，但是我们还没有设置版本信息，需要返回到包目录下，给这个包打上标签。</p><p>输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0 -m &quot;初始版本&quot;</span><br><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure><p>然后返回 Packagist 官网，点击 <code>update</code> 同步包信息，然后刷新页面就能看到刚刚提交的版本信息了。</p><p>现在，用户可以使用 <code>composer require</code> 命令下载你的包了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require huotu&#x2F;test:1.0</span><br></pre></td></tr></table></figure><h2 id="自动同步版本更新"><a href="#自动同步版本更新" class="headerlink" title="自动同步版本更新"></a>自动同步版本更新</h2><p>每次更新包都需要手动点击 <code>update</code> 十分不便，实际上 GitHub 提供了钩子可以用来推送更新信息到 Packagist，默认情况下已经帮助我们打开了自动更新功能。</p><p>回到 GitHub 的仓库地址，选择 <code>Setting</code>，左侧菜单 <code>Webhook</code>，可以看到配置的推送信息：</p><p><img src="https://user-images.githubusercontent.com/28209810/63644830-3432b800-c724-11e9-98c1-8ee55b76825c.png" alt="webhook"></p><p>每当我们推送新的版本标签到 GitHub 时，Packagist 就会接收到一个 GitHub 的 Hook（钩子）发出的 POST 请求，这样 Packagist 上的包就会与 GitHub 上的同步了。</p><p>如果你不需要自动更新功能，可以点击右侧的 <code>Delete</code> 将其删除，删除后每次更新包都要前往 Packagist 点击 <code>Update</code> 手动进行更新。</p><p>开启自动更新情况下，每次 <code>push</code> 标签后都会自动同步到 Packagist，刷新页面即可看到最新提交的版本：</p><p><img src="https://user-images.githubusercontent.com/28209810/63644872-eff3e780-c724-11e9-9507-f722204a1422.png" alt="new version"></p><h2 id="依赖包编写小建议"><a href="#依赖包编写小建议" class="headerlink" title="依赖包编写小建议"></a>依赖包编写小建议</h2><p>开发依赖包需要要丰富的开发经验，可以多参考其他开源包，尤其是具有团队进行维护的，观察他们是如何区分目录和封装类的，可以学到很多知识。</p><p>推荐阅读：<a href="https://learnku.com/docs/php-design-patterns/2018">PHP 设计模式</a></p><p>编写依赖包能得到锻炼和成长的机会，开源自己的包也是一件十分具有成就感的事。</p><blockquote><p>分享，是最好的学习方式 —— IDCE.COM</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录原理及方法</title>
      <link href="/2020/03/07/ssh-no-password-method/"/>
      <url>/2020/03/07/ssh-no-password-method/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH-命令"><a href="#SSH-命令" class="headerlink" title="SSH 命令"></a>SSH 命令</h2><p>使用 <code>ssh 用户名@服务器IP</code> 可以连接到服务器，这样做的缺点是每次都要输入密码，一方面是不安全，另一方面是麻烦。</p><h2 id="SSH-免密登录服务器"><a href="#SSH-免密登录服务器" class="headerlink" title="SSH 免密登录服务器"></a>SSH 免密登录服务器</h2><p>在本地主机上使用 <code>ssh-keygen -t rsa</code> 生成密匙对，这里的 <code>-t rsa</code> 指的是用 <code>rsa</code> 加密方式生成密匙：</p><p><img src="https://i.loli.net/2019/08/31/wpMU4vaBQfOoej8.png" alt="image.png"></p><p>第一步，输入密匙存放目录，使用默认路径直接按回车即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private rsa key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa):</span><br></pre></td></tr></table></figure><p>第二步，输入密码，建议直接回车使用空密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>如果输入了密码则需要再输入一次确认密码。这里的密码不是指远程登录主机的密码，而是使用密匙时的密码，既然我们是希望免密登录了，自然不希望再输入任何密码，因此此处填空即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    ..    .      |</span><br><span class="line">|    o. . . o     |</span><br><span class="line">|   o...+* +      |</span><br><span class="line">|    .o+*+O       |</span><br><span class="line">|    . &#x3D;+So+o     |</span><br><span class="line">| . . . @.*B.     |</span><br><span class="line">|  o . . Eoo.     |</span><br><span class="line">|   o   * ..      |</span><br><span class="line">|    ..o o.       |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>上面会生成 <code>randomart image</code> 图案，这个图案是根据密匙生成的，因此每个人看到的都不同。</p><blockquote><p>趣味小科普：为什么要生成这种图案呢？这是由于密匙对是一个很长的随机字符串，比起加密的字符串人们更容易接受图片，可以说是很贴心了</p></blockquote><p>生成的密匙包含一对，<strong>公钥和私匙</strong>（<strong>其实叫做私钥</strong>，但感觉这样比较有意思所以就这么写）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.</span><br><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.</span><br></pre></td></tr></table></figure><p>我们根据路径可以找到文件所在位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_8_centos ~]# cd &#x2F;root&#x2F;.ssh</span><br><span class="line">[root@VM_0_8_centos .ssh]# ls</span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><p>这两个密匙文件分别是：</p><ul><li>id_rsa 生成的私钥文件</li><li>id_rsa.pub 生成的公钥文件</li></ul><p>另外一个 <code>authorized_keys</code> 是保存远程免密登录公钥的文件，主要通过这个文件记录多台机器的公钥，我们要做的就是把本机的公钥发送到服务器主机的这个文件里。</p><p>接着，把公钥发到需要登录的服务器主机上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub 服务器IP地址:&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>接着会要求你输入一次密码，输入完成后就可以实现免密登录了。</p><p>在本机上执行 <code>ssh 用户名@服务器IP</code>，不再需要输入密码验证。</p><h2 id="SSH-添加别名"><a href="#SSH-添加别名" class="headerlink" title="SSH 添加别名"></a>SSH 添加别名</h2><p>网络上的教程一般到上一步就结束了，在这里传授一个小技巧可以事半功倍。</p><p>虽然我们现在跳过了输入密码这个步骤，但是每次都要输入 IP 也是很蛋疼的一件事，<strong>我们甚至想要不输入 IP 就能登录到远程服务器</strong> ？</p><p>这也能做到！</p><p>在本地进入 <code>.ssh</code> 目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入 .ssh 目录</span><br><span class="line">FireRabbitdeMacBook-Pro:.ssh firerabbit$ cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><p>使用 <code>vim config</code> 编辑文件并且输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host dev</span><br><span class="line">HostName 127.0.0.1</span><br><span class="line">User root</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure><p>这里的 <code>dev</code> 是我们给远程主机起的别名，<code>127.0.0.1</code> 是远程主机的地址，请替换成你的服务器 IP，<code>User</code> 即登录的用户名，<code>Port</code> 为服务器访问端口，如果修改了端口在这里也要修改。</p><p>现在我们的目录应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FireRabbitdeMacBook-Pro:.ssh firerabbit$ ls</span><br><span class="line">configid_rsaid_rsa.pubknown_hosts</span><br></pre></td></tr></table></figure><p><code>known_hosts</code> 是连接过的主机记录，可以随意删除。</p><p>接着在命令行输入：<code>ssh dev</code> 即可连接到服务器！</p><blockquote><p>阅读至此，恭喜你！Linux Exp + 1</p></blockquote><h2 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h2><p>如果出现如下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: ERROR: ssh: Could not resolve hostname xxx:&#x2F;root&#x2F;.ssh&#x2F;authorized_keys: nodename nor servname provided, or not known</span><br></pre></td></tr></table></figure><p>网上查了下，大都是说 hosts 文件的问题。</p><p>可以尝试修改 <code>/etc/hosts</code> 看看是否有如下行，如果没有则添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure><p>经过本人尝试结果无效，可用别的方法。</p><p>那就是——手动上传！！！</p><p>编辑本地主机的密匙文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>把密匙内容全部拷贝下来。</p><p>接着先用 <code>ssh root@远程主机IP</code> 用密码登录进去，然后在远程主机中 <code>vim /root/.ssh/authorized_keys</code>。</p><p>把复制的密钥直接粘贴下来就可以啦！</p><h2 id="免密登录原理"><a href="#免密登录原理" class="headerlink" title="免密登录原理"></a>免密登录原理</h2><p>网上的教程一般都是直接贴出代码和操作步骤，但这样我们根本不清楚它的原理是什么。</p><p>我们希望能像侦探一样追根究底，查清楚它的原理是什么。</p><blockquote><p>真正理解后的知识才能永远刻入你的脑海里</p></blockquote><p>上面的步骤，我们在本机生成一个密匙对，一共包含两个文件，一个是公钥，一个是私匙，公钥是发送到服务器主机的，私匙是留在本地的。</p><p>这样包含一对公钥私匙的加密叫做“<strong>非对称加密</strong>”。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>在了解非对称加密之前需要先了解对称加密，所有新事物的出现必然伴随着某种需求。</p><p>小红和小明私底下正在交往，但又不希望被别人发现，于是他们约定了一种加密算法，每个字母向后移动一位，如 a 往后移一位是 b，b 往后移一位是 c……z往后移是 a。</p><p>那么，<code>ni hao</code> 就变成了 <code>oj ibp</code>。</p><p>由于双方约定好了同样的加密算法，所以小红发给小明消息时，就可以按照约定好的算法进行解密。</p><p>于是他们大胆的在班级群里用加密后的消息进行聊天，其他同学一脸茫然的看着不明觉厉的消息。</p><p>但是此时，<strong>名侦探小刚</strong>破解了他们约定好的加密算法，并且截获了（截获很简单，毕竟他们公然秀恩爱）他们互通的消息，此时小红和小明的聊天记录就被小刚一清二楚的知道了！</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>聊天记录被小刚公开后，小明和小红十分尴尬，于是机智的小明想出了一种方法，把前面约定的加密算法做了一些小的改进，小明告诉小红，我发给你一个密匙串，你用这个给消息进行加密（某种加密算法），你发给我消息后，<strong>我再用我这边的密匙进行解密，我发给你的密匙和我本地的密匙是不同的，只有我本地的密匙才能解密你加密过的内容。</strong></p><blockquote><p>问题又来了……现在只有小明破解小红的消息，小明用公钥加密消息发给小红，小红是解密不了的；如果需要双向沟通的话，自然是用同样的方法，小红也给小明一个密匙，小红本地存有另外一个用来解密的密匙。但是 Linux 免密登录是本机免密登录到服务器，属于单向的沟通，如果你希望服务器也能免密登录本机（一般不会有这种需求），就在服务器用同样的方法生成密匙，把密匙发生到本机就可以了。</p></blockquote><p>接下来的日子，小刚也无法破解他们的聊天记录，恼羞成怒的小刚带着三名小弟放学后去堵小红，逼迫小红把小明给她的加密密匙交出来，小红无奈之下将密匙交出，然而，即使拿到密匙，小刚依然无法破解小红的密码，因为，<strong>还需要小明手里的密匙才能解密小红的消息</strong>。</p><p>非对称加密的存在就是为了避免加密算法被第三者知道，导致密码泄露。上面的故事中小明交给小红的加密串叫做<strong>公钥</strong>，公钥可以让任何第三者知道，公钥加密过的密码只有小明手里的加密串——<strong>私匙</strong>才能解密，对于加密和解密使用不同的加密策略，叫做<strong>非对称加密</strong>。</p><h3 id="使用公钥实现免密登录"><a href="#使用公钥实现免密登录" class="headerlink" title="使用公钥实现免密登录"></a>使用公钥实现免密登录</h3><p>我们通过 <code>ssh-keygen -t rsa</code> 生成了公钥和私匙对，接着我们把公钥发送到服务器上，当连接的时候，服务端会发送一个用公钥加密的字符串过来，本地再使用私匙进行解密，实现了登录验证，从而不需要输入密码就能进行登录。</p><p>用盗来的一张图解释：</p><p><img src="https://i.loli.net/2019/08/31/pk2cFyIrHoVAJYE.png" alt="image.png"></p><h2 id="RSA-非对称加密算法"><a href="#RSA-非对称加密算法" class="headerlink" title="RSA 非对称加密算法"></a>RSA 非对称加密算法</h2><p>参考：<a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&fromid=210678&fr=aladdin">百度百科 - RSA</a></p><p>只做兴趣了解，不需要掌握原理，因为我们的研究方向不是这个。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Gitlab</title>
      <link href="/2020/03/07/centos-install-gitlab/"/>
      <url>/2020/03/07/centos-install-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安准基础依赖"><a href="#1、安准基础依赖" class="headerlink" title="1、安准基础依赖"></a>1、安准基础依赖</h2><p>安装 Gitlab 所需依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br></pre></td></tr></table></figure><p>启动 ssh 服务并设置开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure><h2 id="2、安装邮件服务"><a href="#2、安装邮件服务" class="headerlink" title="2、安装邮件服务"></a>2、安装邮件服务</h2><p>Postfix 是一个邮件服务器，GitLab 发送邮件需要用到。</p><p>安装 postfix：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y postfix</span><br></pre></td></tr></table></figure><p>启动 postfix 并设置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start postfix</span><br><span class="line">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure><h2 id="3、开放-ssh-以及-http-服务（80-端口）"><a href="#3、开放-ssh-以及-http-服务（80-端口）" class="headerlink" title="3、开放 ssh 以及 http 服务（80 端口）"></a>3、开放 ssh 以及 http 服务（80 端口）</h2><p>查看防火墙是否启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>以下为我的服务器上的防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-86c0 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure><p>如果看到 Active: inactive (dead)，表示防火墙没有启动，执行下面的命令启动防火墙并且设置为开机启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><p>此时，在查看防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-86c0 ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 一 2019-09-02 17:56:23 CST; 2s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 26477 (firewalld)</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;firewalld.service</span><br><span class="line">           └─26477 &#x2F;usr&#x2F;bin&#x2F;python -Es &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid</span><br></pre></td></tr></table></figure><p><code>Active: active (running)</code> 表示防火墙正常运行。</p><p>开放 ssh、http 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --add-service&#x3D;ssh --permanent</span><br><span class="line">sudo firewall-cmd --add-service&#x3D;http --permanent</span><br></pre></td></tr></table></figure><blockquote><p>只有防火墙开启状态才能执行上述命令，否则会报 FirewallD is not running 错误</p></blockquote><p>重新加载防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="4、安装-Gitlab"><a href="#4、安装-Gitlab" class="headerlink" title="4、安装 Gitlab"></a>4、安装 Gitlab</h2><p>我们使用 Gitlab 的社区版：gitlab-ce，如果需要使用商业版，则安装：gitlab-ee。</p><h3 id="4-1、添加-Gitlab-社区版资源包"><a href="#4-1、添加-Gitlab-社区版资源包" class="headerlink" title="4.1、添加 Gitlab 社区版资源包"></a>4.1、添加 Gitlab 社区版资源包</h3><p>默认情况下 yum 源没有 gitlab-ce 软件包，需要手动下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><h3 id="4-2、使用-yum-安装-gitlab-ce"><a href="#4-2、使用-yum-安装-gitlab-ce" class="headerlink" title="4.2、使用 yum 安装 gitlab-ce"></a>4.2、使用 yum 安装 gitlab-ce</h3><p>在这里强烈推荐阅读：<a href="https://idce.com/document/VO4j">Centos 系统更新 yum 源为国内镜像源</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>软件包的安装大小足足有 1.4 G，更换镜像后只需要数十秒就下载完了。</p><p><img src="https://i.loli.net/2019/09/02/eAobTa7M8LyECUn.png" alt="image.png"></p><p>安装成功后可以看到一个类似“狐狸头像”的图案：</p><p><img src="https://i.loli.net/2019/09/02/PcAFUhG7LDm4TfJ.png" alt="image.png"></p><h3 id="4-3、配置-Gitlab-访问地址"><a href="#4-3、配置-Gitlab-访问地址" class="headerlink" title="4.3、配置 Gitlab 访问地址"></a>4.3、配置 Gitlab 访问地址</h3><p>Gitlab 安装完成后，配置文件所在路径为 <code>/etc/gitlab/gitlab.rb</code>，编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br></pre></td></tr></table></figure><p>将 <code>external_url</code> 字段修改为你的域名信息，如果没有域名可以改成 <code>IP:端口</code> 的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## GitLab configuration settings</span><br><span class="line">##! This file is generated during initial installation and **is not** modified</span><br><span class="line">##! during upgrades.</span><br><span class="line">##! Check out the latest version of this file to know about the different</span><br><span class="line">##! settings that can be configured by this file, which may be found at:</span><br><span class="line">##! https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-org&#x2F;omnibus-gitlab&#x2F;raw&#x2F;master&#x2F;files&#x2F;gitlab-config-template&#x2F;gitlab.rb.template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## GitLab URL</span><br><span class="line">##! URL on which GitLab will be reachable.</span><br><span class="line">##! For more details on configuring external_url see:</span><br><span class="line">##! https:&#x2F;&#x2F;docs.gitlab.com&#x2F;omnibus&#x2F;settings&#x2F;configuration.html#configuring-the-external-url-for-gitlab</span><br><span class="line">external_url &#39;http:&#x2F;&#x2F;gitlab.example.com&#39;</span><br></pre></td></tr></table></figure><h3 id="4-4、启动-Gitlab"><a href="#4-4、启动-Gitlab" class="headerlink" title="4.4、启动 Gitlab"></a>4.4、启动 Gitlab</h3><p>重新载入配置并启动 Gitlab（如果修改了配置文件需要再运行此命令）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>翻车现场：</p><p><img src="https://i.loli.net/2019/09/02/6kpd51B8TZqHyGD.png" alt="image.png"></p><p>报错原文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Running handlers:</span><br><span class="line">There was an error running gitlab-ctl reconfigure:</span><br><span class="line"></span><br><span class="line">Multiple failures occurred:</span><br><span class="line">* Chef::Exceptions::MultipleFailures occurred in chef run: Multiple failures occurred:</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: ruby_block[restart_log_service] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 69) had an error: Errno::ENOMEM: ruby_block[wait for logrotate service socket] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 266) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: ruby_block[reload_log_service] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 77) had an error: Errno::ENOMEM: ruby_block[wait for logrotate service socket] (&#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;cookbooks&#x2F;cache&#x2F;cookbooks&#x2F;runit&#x2F;libraries&#x2F;provider_runit_service.rb line 266) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line"></span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: execute[clear the gitlab-rails cache] (gitlab::gitlab-rails line 408) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: service[gitaly] (dynamically defined) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: runit_service[gitaly] (gitaly::enable line 75) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br><span class="line">* Errno::ENOMEM occurred in delayed notification: service[gitlab-workhorse] (dynamically defined) had an error: Errno::ENOMEM: Cannot allocate memory - fork(2)</span><br></pre></td></tr></table></figure><p>%&gt;_&lt;%</p><p>原来是我的测试机内存（1G）不够！</p><blockquote><p>穷人没有资格安装 Gitlab （╯‵□′）╯︵┴─┴ </p></blockquote><h3 id="4-5、访问-Gitlab"><a href="#4-5、访问-Gitlab" class="headerlink" title="4.5、访问 Gitlab"></a>4.5、访问 Gitlab</h3><p>如果不出意外，输入 <code>external_url</code> 配置的地址，即可看到 Gitlab 页面。</p><p>第一次登陆 Gitlab 时需要设置 root 密码，然后就可以愉快的创建项目了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再战！Docker 安装 Gitlab</title>
      <link href="/2020/03/07/docker-install-gitlab/"/>
      <url>/2020/03/07/docker-install-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一次因为服务器配置太低翻车了，现在重新挑战一次。</p><h2 id="Gitlab-硬件要求"><a href="#Gitlab-硬件要求" class="headerlink" title="Gitlab 硬件要求"></a>Gitlab 硬件要求</h2><p>Gitlab 十分吃机器的配置，Gitlab 官方推荐 2核 4G，最低建议 1 核 2G，再低的话可能会像我上次那样直接翻车或者运行起来十分卡顿。</p><p>由于是个人学习，就不打算将其部署到线上的服务器上了，这一次我采用在本地安装的方式搭建 Gitlab。</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>拉取 Gitlab 官方最新版本镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>由于镜像较大，建议换成国内镜像提高下载速度。</p><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>下载完成后，再执行 <code>run</code> 启动容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname localhost \</span><br><span class="line">    --publish 4443:443 --publish 999:80 --publish 22:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \</span><br><span class="line">    --volume ~&#x2F;docker&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \</span><br><span class="line">    gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure><p><code>run</code> 参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--detach：让容器在后台运行</span><br><span class="line">--hostname：主机地址，本地使用 localhost，可以换成域名</span><br><span class="line">--publish：宿主机的端口映射到容器的端口，由于我本地已经有其他容器使用了 443 和 80 端口，因此我改成了 4443 和 999 端口。</span><br><span class="line">--name：自定义容器的名称</span><br><span class="line">--restart：容器重启策略，在退出时容器应该如何重启或不应该重启，always 始终重启 </span><br><span class="line">--volume：宿主机映射到容器的卷，用来做容器数据的持久化，这里我将卷的目录设置为 ~&#x2F;docker&#x2F;gitlab</span><br></pre></td></tr></table></figure><p><code>run</code> 命令执行后，可以执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;docker&#x2F;gitlab</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>可以看到自动生成了以下几个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configdatalogs</span><br></pre></td></tr></table></figure><p>这些文件就是宿主机与容器之间通过卷映射的文件（容器数据持久化）。</p><p>执行 <code>docker ps</code> 可以看到容器运行状态：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143262-d0a23c00-ce41-11e9-81d3-4b727313dacf.png" alt="image"></p><h3 id="Gitlab-初始化"><a href="#Gitlab-初始化" class="headerlink" title="Gitlab 初始化"></a>Gitlab 初始化</h3><p>容器启动后，需要稍等几分钟，然后再访问 <code>127.0.0.1:999</code>，如果直接访问的话可能 Gitlab 还未完全启动，这个时候是访问不了的。</p><p>第一次访问时，需要设置管理员（root 用户）密码：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143324-10692380-ce42-11e9-98a9-f7372dc57b02.png" alt="image"></p><p>初始化密码设置完成后，返回到登录页面，使用账户 root 以及刚才设置的密码进行登录：</p><p><img src="https://user-images.githubusercontent.com/28209810/64143342-31317900-ce42-11e9-98df-6ea83f67a14a.png" alt="image"></p><p>登录成功后，就可以操作界面啦！</p><p><img src="https://user-images.githubusercontent.com/28209810/64143494-dba99c00-ce42-11e9-864a-861c4a2adacc.png" alt="image"></p><h3 id="添加-SSH-key"><a href="#添加-SSH-key" class="headerlink" title="添加 SSH key"></a>添加 SSH key</h3><p>在开始使用之前，需要添加 <code>ssh key</code> 才能拉取或者推送到仓库，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>查看是否生成过 <code>ssh key</code>，如果当前目录下没有文件，则需要创建新的 <code>ssh key</code>，执行以下命令生成 <code>ssh key</code>，<code>-C</code> 参数后面是你的邮箱地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>完成后在当前目录下会生成 <code>ssh key</code>，包含两个文件，这是一对密匙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsaid_rsa.pub</span><br></pre></td></tr></table></figure><p>其中，<code>id_rsa.pub</code> 是公钥，我们需要的就是这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的密匙字符串复制下来（注意是把所有的内容都复制下来，包括邮箱）。</p><p><img src="https://user-images.githubusercontent.com/28209810/64162429-dca5f200-ce71-11e9-8812-5d3a965ea569.png" alt="image"></p><p>接着返回 Gitlab，点击左上角个人头像，选择 <code>Settings</code>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64161700-a320b700-ce70-11e9-8444-2370d88bff56.png" alt="image"></p><p>选择左侧菜单 <code>SSH Keys</code>，将你的 <code>ssh key</code> 黏贴到方框内，然后点击 <code>Add key</code> 即可：</p><p><img src="https://user-images.githubusercontent.com/28209810/64162574-27276e80-ce72-11e9-95e6-e2e23ca57098.png" alt="image"></p><p>接下来就可以愉快的开始使用 Gitlab 啦！</p><h2 id="为什么安装后的-Gitlab-可以直接访问？"><a href="#为什么安装后的-Gitlab-可以直接访问？" class="headerlink" title="为什么安装后的 Gitlab 可以直接访问？"></a>为什么安装后的 Gitlab 可以直接访问？</h2><p>这是由于 Gitlab 内置了 nginx 服务器，所以才能在安装完成后通过地址进行访问。</p><p>完结撒花～ ҉٩(<em>´︶`</em>)۶҉ ??</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab + Satis 搭建私有 Composer 仓库</title>
      <link href="/2020/03/07/install-gitlab-satis-composer/"/>
      <url>/2020/03/07/install-gitlab-satis-composer/</url>
      
        <content type="html"><![CDATA[<h2 id="Satis-介绍"><a href="#Satis-介绍" class="headerlink" title="Satis 介绍"></a>Satis 介绍</h2><p>Satis 是开源的静态 Composer 仓库生成器，可用于托管公司私有包的元数据。</p><p>环境要求：PHP &gt;= 7.2</p><h2 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h2><p>Centos 搭建 Gitlab：<a href="/centos-install-gitlab">Centos 系统安装 Gitlab</a><br>Docker 搭建 Gitlab：<a href="/docker-install-gitlab">再战！Docker 安装 Gitlab</a></p><h2 id="上传-Composer-包"><a href="#上传-Composer-包" class="headerlink" title="上传 Composer 包"></a>上传 Composer 包</h2><p>Composer 包开发教程：<a href="/composer-package">从零开始开发自己的 Composer 包</a></p><p>在 Gitlab 新建一个仓库，把自己开发完成的包上传到这个仓库，上传完成后的仓库如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/64165187-204f2a80-ce77-11e9-9532-fbe4a9239a37.png" alt="image"></p><p>包的配置文件 <code>composer.json</code> 如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/64166482-c7cd5c80-ce79-11e9-8b25-7719a08c156e.png" alt="image"></p><p>包的名字叫做：<code>huotu/test</code>，我们后面需要用到。</p><p>这个仓库的地址就是我们私有包的地址，接下来拿这个包作为演示。</p><h2 id="安装-Satis"><a href="#安装-Satis" class="headerlink" title="安装 Satis"></a>安装 Satis</h2><p>可以使用两种方式安装 Satis。</p><h3 id="1、Composer-安装"><a href="#1、Composer-安装" class="headerlink" title="1、Composer 安装"></a>1、Composer 安装</h3><p>可以直接使用 <code>composer</code> 命令安装 Satis： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project composer&#x2F;satis --stability&#x3D;dev --keep-vcs</span><br></pre></td></tr></table></figure><h3 id="2、从-GitHub-下载"><a href="#2、从-GitHub-下载" class="headerlink" title="2、从 GitHub 下载"></a>2、从 GitHub 下载</h3><p>使用 <code>git clone</code> 将 Satis 下载到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;composer&#x2F;satis.git</span><br></pre></td></tr></table></figure><h2 id="添加-Satis-配置文件"><a href="#添加-Satis-配置文件" class="headerlink" title="添加 Satis 配置文件"></a>添加 Satis 配置文件</h2><p>在下载好的 satis 目录下，创建 <code>satis.json</code> 配置文件，一个示例的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;packages.example.org&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;mycompany&#x2F;privaterepo&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;svn.example.org&#x2F;private&#x2F;repo&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;mycompany&#x2F;privaterepo2&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">    &quot;company&#x2F;package&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;company&#x2F;package2&quot;: &quot;*&quot;,</span><br><span class="line">    &quot;company&#x2F;package3&quot;: &quot;2.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name：仓库的名字，将会展示在页面上</li><li>homepage：satis 访问地址</li><li>repositories：包所在的地址</li><li>require：获取指定的包</li><li>require-all：如果为 true 表示获取所有包</li></ul><p>根据自己的情况进行配置，这里我们拿刚刚上传到 Gitlab 的包演示，配置如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>http://satis.com</code> 为 satis 访问页面地址，<code>http://gitlab.com/huotu/test</code> 为私有包所在地址。</p><h2 id="Composer-配置"><a href="#Composer-配置" class="headerlink" title="Composer 配置"></a>Composer 配置</h2><p>由于我们使用 <code>http</code>，在这里需要修改设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g secure-http false</span><br></pre></td></tr></table></figure><h2 id="生成-Satis-索引页面"><a href="#生成-Satis-索引页面" class="headerlink" title="生成 Satis 索引页面"></a>生成 Satis 索引页面</h2><p>在 satis 目录下执行命令 <code>composer install</code> 安装所需依赖，然后再执行如下命令生成 satis 页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php bin&#x2F;satis build &lt;configuration file&gt; &lt;build dir&gt;</span><br><span class="line"></span><br><span class="line"># 示例 ：</span><br><span class="line">php bin&#x2F;satis build satis.json public&#x2F;</span><br><span class="line"></span><br><span class="line"># 跳过 Gitlab 密码验证</span><br><span class="line">php bin&#x2F;satis build -n satis.json public&#x2F;</span><br></pre></td></tr></table></figure><p>执行完命令后，在当前目录生成了 public 文件夹，接着配置 nginx，将域名指向这个目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name satis.com;</span><br><span class="line">    root &#x2F;www&#x2F;satis&#x2F;public;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        try_files $uri &#x3D;404;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 nginx，不出意外就可以通过域名访问 satis 了！</p><blockquote><p>使用域名记得添加解析到服务器</p></blockquote><p>访问 <code>http://satis.com</code>（这个是你配置的域名）：</p><p><img src="https://user-images.githubusercontent.com/28209810/64164278-8044d180-ce75-11e9-8b1a-9e81d905418c.png" alt="image"></p><h2 id="Composer-使用私有仓库"><a href="#Composer-使用私有仓库" class="headerlink" title="Composer 使用私有仓库"></a>Composer 使用私有仓库</h2><p>我们现在完成了 Satis + Gitlab 的全部安装，接下来我们的项目就可以使用自己搭建的私有 Composer 源了。</p><p>新建一个 test 文件夹，在 test 目录下创建 <code>compsoer.json</code>，编辑 <code>composer.json</code> 添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;huotu&#x2F;test&quot;: &quot;*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;repositories&quot;: [&#123;</span><br><span class="line">        &quot;type&quot;: &quot;composer&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存，然后在当前目录下执行 <code>composer install</code>：</p><p><img src="https://user-images.githubusercontent.com/28209810/64166283-58576d00-ce79-11e9-9cf3-233193e4963e.png" alt="image"></p><p>成功把自己私有仓库的包下载下来了。</p><p>如果有多个包，则添加多个仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;My Repository&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test2&quot; &#125;,</span><br><span class="line">    &#123; &quot;type&quot;: &quot;vcs&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;gitlab.com&#x2F;huotu&#x2F;test3&quot; &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;require-all&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存包资源"><a href="#缓存包资源" class="headerlink" title="缓存包资源"></a>缓存包资源</h2><p>可以把所需要的包都缓存在本地 Satis 上，这样可以避免每次都需要从仓库中 clone，在 <code>satis.json</code> 添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;archive&quot;: &#123;</span><br><span class="line">        &quot;directory&quot;: &quot;dist&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;tar&quot;,</span><br><span class="line">        &quot;prefix-url&quot;: &quot;http:&#x2F;&#x2F;satis.com&quot;,</span><br><span class="line">        &quot;skip-dev&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>archive</code> 参数：</p><ul><li>directory: 表示生成的压缩包存放的目录，会在我们 build 时的目录中</li><li>format: 压缩包格式，zip（默认） tar</li><li>prefix-url: 下载链接的前缀的 Url, 默认从 homepage 中取</li><li>skip-dev: 默认为 false，是否跳过开发分支</li><li>absolute-directory: 可选，包文件存储到绝对路径的目录</li><li>whitelist: 可选，如果设置为包名称列表，则只会转储这些包的 dist 文件</li><li>blacklist: 可选，如果设置为包名称列表，则不会转储这些包的 dist 文件</li><li>checksum: 可选，默认情况下为 true，禁用时（false）不会为 dist 文件提供 sha1 校验 启用后，所有下载（包括来自 GitHub 和 BitBucket 的下载） 将替换为本地版本。</li></ul><p>添加 <code>archive</code> 后，配置的包信息就会下载到本地 Satis 目录下 dist 文件夹中，从 Satis 下载依赖时将从这个文件夹获取资源。</p><h2 id="定期更新-Satis"><a href="#定期更新-Satis" class="headerlink" title="定期更新 Satis"></a>定期更新 Satis</h2><p>需要定期执行 <code>php bin/satis build satis.json public/</code> 命令来生成最新的 Composer 包信息，可以将此命令作为定期任务执行，或是增加一个钩子 push 来更新 Satis。</p>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> composer </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的抽奖是否应该有保底机制？</title>
      <link href="/2020/03/07/game-draw-card-mechanism/"/>
      <url>/2020/03/07/game-draw-card-mechanism/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏中的抽奖机制是几乎所有游戏都要面临的问题，在一定程度上来说，抽奖机制可以决定游戏的命运。</p><p>当一个打算弃坑的玩家，想在最后抽个爽，结果却出了许多氪金大佬都没有的神宠！在游戏广播下，世界频道异口同声的喊起“狗托”，豹子头“零充”玩家心情自然不言而喻，十有八九会享受万众羡慕的眼神继续愉快的玩耍。</p><p>反之，一个氪金大佬怒抽 100 连，砸了 N 个 648 结果还不出货，正气急败坏，却看楼上那位零氪玩家的广播 <strong>XXX 玩家抽到 XXX</strong>，试问氪金大佬此时作何感想？</p><p>当然，上面的情景仅为 YY，实际上可能并没有那么夸张，举例只是为了说明在某些特定情况下可以决定玩家是否继续玩下去。</p><h2 id="游戏中的抽奖机制"><a href="#游戏中的抽奖机制" class="headerlink" title="游戏中的抽奖机制"></a>游戏中的抽奖机制</h2><p>游戏中的抽奖机制经过不断演变，发展为两种比较常见的形式：<strong>无保底机制</strong> 与 <strong>保底机制</strong>。</p><h3 id="无保底机制"><a href="#无保底机制" class="headerlink" title="无保底机制"></a>无保底机制</h3><p>如字面意思，无论抽几次，概率都是一样。</p><p>这种模型会造成某些玩家运气好，尤其是零元党在抽到好东西的时候很喜欢在 <strong>贴吧秀</strong>，对包括零氪、土豪玩家造成暴击伤害，“脸帝”是玩家公敌。</p><p>无保底机制的弊端会造成游戏过于依赖运气成分。</p><p>脸黑玩家可能永远抽不到，土豪玩家可能连砸 N 个 648 依然得不到。</p><p>站在游戏开发者的角度，希望绝大多数玩家可以体验到游戏绝大多数内容，而不是单纯的靠运气决定，这个时候就可以依靠俗话说的“努力就会有回报”。</p><h3 id="保底机制"><a href="#保底机制" class="headerlink" title="保底机制"></a>保底机制</h3><p>玩家通过抽奖，达到一定次数就能得到最好的奖励，这就是保底奖励。</p><p>保底奖励又有两种形式。</p><h4 id="积分兑换"><a href="#积分兑换" class="headerlink" title="积分兑换"></a>积分兑换</h4><p>第一种是以累计 <strong>“积分”</strong> 的形式，玩家可以用积分在商店兑换到最好的奖励。</p><p>这种方式的好处是，玩家可以 <strong>明确的知道</strong> 抽几次一定可以拿到大奖，虽然可能会损失几分惊喜的感觉，但是会让玩家心里感到踏实。即使失败也不会有太大的负面影响，因为失败也会累计积分作为补偿。</p><h4 id="幸运值"><a href="#幸运值" class="headerlink" title="幸运值"></a>幸运值</h4><p>第二种是通过抽奖累计 <strong>“幸运值”</strong>，每次抽奖都可以使下次抽到大奖的几率提高，幸运值达到满时必定抽到。比如王者荣耀的水晶/积分抽奖，玩家可以通过日常获得的钻石去抽奖，即使没抽到也可以积累幸运值，慢慢积累直到抽到水晶然后兑换韩信这个英雄。有些游戏的强化系统也采用这种形式，每次强化失败，下一次强化的成功几率就会提高。</p><p>这种方式的好处是可以让玩家 <strong>保持对于抽奖的期待</strong>，因为概率不断提高，玩家的内心就会觉得可能下一次就中了，而且有保底满幸运值必中的结果，玩家对于失败的感觉就很淡然了，现在的抽奖已经变为 <strong>“可以让我省多少钱”</strong>，越早抽到，玩家反而会觉得赚到了。</p><h2 id="游戏的抽奖该不该保底？"><a href="#游戏的抽奖该不该保底？" class="headerlink" title="游戏的抽奖该不该保底？"></a>游戏的抽奖该不该保底？</h2><p>回到标题，让我们思考下面几个问题：</p><ul><li><p>游戏的抽奖该不该保底？</p></li><li><p>开发商会因为保底而亏损吗？</p></li><li><p>保底抽奖机制到底对哪种类型的玩家更有好处？</p></li></ul><p><strong>1、个人的看法是游戏抽奖以保底机制更好</strong></p><p>我是一个游戏开发者，我希望玩家可以体验到游戏的更多内容（毕竟是我亲自设计的），故意吊玩家的胃口，让某些神宠只让个别人拥有，固然可以提高玩家对神宠的追求，但如果一个永远无法达成的目标，只会让玩家失望，累积越来越多的失望最终就会失去玩家。</p><p><strong>2、不会因为保底抽奖而亏损</strong><br>首先保底机制可以减少玩家的流失，这是其一；其二，保底机制也让土豪玩家更有动力去充钱，以上面的积分模型为例，土豪玩家如果想要得到所有最好的奖励，“最坏”的结果已经可以通过计算明确知道了，当人知道最坏结果时，对失败的承担能力就会越强，而且土豪也可以通过计算推出自己 <strong>应该充多少钱</strong> 才能拿到所有的奖励，土豪并不差钱，但是土豪并不想被 <strong>概率</strong> 忽悠。</p><p>策划也可以通过 <strong>临界值</strong> 来诱使玩家进行充值，这个方法十分见效，我自己就上过很多次当。</p><p>下面是我被网易坑的血泪史（┭┮﹏┭┮）：</p><p>网易新出的游戏百闻牌，里面故意设计红玉和蓝玉兑换机制，让玩家误以为充值的就是红玉，其实充值的是蓝玉，需要再兑换成红玉才能抽奖。</p><p>（<strong>这种欺骗玩家或者诱导玩家错觉的行为极其不可取！</strong>）</p><p>抽奖处显示抽 10 次就可以得到妖刀姬，我就充了 30（计算得出只要充 30 就可以抽 10 次奖），结果发现充值的是蓝玉，兑换之后只有 5 次抽奖机会（真是神坑！）</p><p>好吧，现在已经抽了 5 次，再抽 5 次才能抽到，那我是抽还是不抽呢？这里还涉及到沉默成本，后文介绍。</p><p>当然是选择继续抽，而且这次还充了 68，原因是首充有额外赠送。</p><p>落入策划步步设计的深坑 ┭┮﹏┭┮</p><p>然后又抽了 5 次才拿到妖刀姬。</p><p>这里，由于我之前已经累积了 5 次，只要再抽 5 次就可以拿到大奖，因此我会有驱动力去继续抽下去，如果是在临界值，这个动力就会更强，例如：299/300 的时候，只需要再一次就可以抽到！</p><p>接下来谈一谈 <strong>沉默成本</strong>。</p><p>沉默成本是经济学里面的概念（我大学也是学过经济学的2333）。</p><p>比如你投一只股票，当天亏损了 5 万，你会卖掉还是等明天看看？</p><p>很多人都会留着看看，因为这样白白亏损很不甘心。</p><p>但实际上，你亏损的 5 万已经成为了事实，已经无法改变，不应该影响下一步的决策。</p><p>就像上面我充了 30，结果发现只抽了 5 次，但此时我损失 30 块钱已经是板上钉钉子的事了，但是我的心里面就会想：“我已经充了 30，再充 30 就可以拿到想要的了，不能让之前充的白白浪费”。</p><p>这里就是沉默成本在作怪。</p><p>实际上，沉默成本也是决定游戏命运至关重要的要素，如果一个策划可以让玩家在游戏里投入更多的时间，那玩家就会越来越难以失去这个游戏，甚至以为是“情怀”什么的，比如魔兽玩家经常会说，“那不是游戏，而是我逝去的青春”，可以说是沉默成本非常形象的说明了。</p><p><strong>3、保底机制更利于氪金玩家</strong><br>由于保底机制，只要无限氪金 <strong>必然可以得到一切</strong>，也就造成了有钱可以为所欲为的情况，难道开发商不希望土豪充更多的钱吗？所以，开发商是绝对不会亏的，这一点可以保证。</p><p>由于氪金玩家可以不断充钱得到所有的奖励，如果不是保底机制呢？氪金玩家投入将是无底洞，无论投入多少钱，也许永远都得不到想要的一只英雄或者宠物。</p><p>其次，对于零氪玩家来说也是极好的，只是提升的程度没有土豪玩家那么大而已。</p><p>保底机制对“脸帝”来说是最大的威胁，由于保底，这样他们根本 <strong>秀不起来</strong>，他们由于脸好得到的神宠已经是人手可得的普通宠物了，晒这样的宠物已经无法满足他们日渐膨胀的虚荣心。</p><p>作为贴吧 13 级的大水比，已经见惯了秀脸贴。</p><p>“萌新求问 XXX 有用吗？”</p><h2 id="抽奖中的暗箱操作"><a href="#抽奖中的暗箱操作" class="headerlink" title="抽奖中的暗箱操作"></a>抽奖中的暗箱操作</h2><p>之前看了一期游戏抽奖的视频，介绍了游戏抽奖中的各种暗箱操作。</p><p>其中之一是最坑的，下面用一个故事来说明。</p><p>隔壁老王有一颗价值 1 万的钻石，他想了一个办法，可以让这颗钻石赚到更多钱。</p><p>他做了 300 个空盒子，接着把钻石放在其中一个盒子，其他 299 个盒子都放一颗与钻石等重的碎玻璃，然后他开始在大街上摆摊吆喝：300 个盒子里有一颗价值 1 万的钻石，其他都是玻璃，每个盒子卖 50 块，买盒子的人不能说出自己开到什么东西。</p><p>众人听到，纷纷想以 50 博 1 万，结果所有的盒子都卖出去了，老王共得 1.5 万，比直接出售钻石还多赚了 5000。</p><p>在这里有一个很坑的点，假设第一个买盒子的人开到钻石，那后面 299 个人必定无法开到钻石，也就是必定亏损的，但是由于 <strong>“不能说出自己开到什么”</strong> 导致后面来买盒子的人仍然抱有期待，因而继续购买盒子。</p><p>在一些游戏中，由于玩家并不能知道游戏的抽奖机制是什么，因此就会有策划想出这种“歪点子”，有些游戏里的大奖每天只会发放一份（或者固定份数），而后续的玩家永远抽不到。</p><p>除此之外，还有另一种暗箱操作——奖池机制。</p><p>这种方式的特点是全服玩家共享一个奖池，上面的例子也可以归为此类，只不过奖池机制有些不同。</p><p>奖池是彩票或者棋牌游戏中的概念，所有玩家一起打牌，每轮都要下赌资，赌资全部汇集到奖池中，直到某个玩家开牌，牌面最大的玩家得到所有奖池的钱。</p><p>游戏抽奖机制也存在这种情况，所有玩家都在一个奖池里抽奖，玩家的每次抽奖相当于 <strong>“投入赌资”</strong>，只有抽奖次数达到一定水平时才会出现大奖，大奖被一个玩家得到以后，奖池清空，开启下一轮的奖池，以此类推。</p><p>所以在某些游戏中，垫子之类的说法存在一定道理，一个服务器里面抽奖的玩家越多，抽到大奖的几率就越高，在鬼区没人抽奖的情况下，甚至有可能抽奖几率为负数。</p><h2 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h2><p>在这里写一下个人的想法。</p><p>假如作为开发商，自然希望玩家能多充钱，因为开发商开发游戏的目的很明确就是为了赚钱。</p><p>作为游戏制作者，我希望玩家可以体验到更多的游戏内容，而不是靠运气和财富差距造成严重游戏体验偏差。至于钱，目前并没有太大的想法，现在只是单纯的因为喜欢游戏而做游戏，也许以后会为了钱设计坑玩家的套路，但是赚到钱（维持生计）的同时，一定会并行开发一款自己真正想做的游戏（单机游戏）。</p><p>作为玩家，希望策划别坑！</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猴子都能学会的hexo博客安装教程</title>
      <link href="/2020/03/01/easy-to-start-hexo/"/>
      <url>/2020/03/01/easy-to-start-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h2><p>hexo 是一款开源博客项目。</p><p>即使是小白借助 hexo 也能轻松搭建属于自己的博客。</p><p>根据下面的教程，你能学会搭建个人博客，并且其他人可以通过外网访问到你的博客！</p><p>hexo 官网：<a href="https://hexo.io/">https://hexo.io/</a></p><p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p><p>【FAQ】</p><p>需要买服务器和域名吗？</p><p>通过 Github Pages 可以白嫖域名和服务器，所以不用买。</p><p>当然，如果你的钱包预算足够，买一款心仪的域名和自己的服务器那就更完美了！</p><p>话不多说，接下来直接进入教学篇。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本教程主要基于 Linux 系统，如果是 Window 系统也不用急，只是增加一个配置环境变量的步骤，机智的你一定懂得怎么做！</p><p>代码编辑器：<a href="https://code.visualstudio.com/">VS Code</a></p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>hexo 依赖于 node，首先需要安装 node 环境。</p><h3 id="1、安装-Nodejs"><a href="#1、安装-Nodejs" class="headerlink" title="1、安装 Nodejs"></a>1、安装 Nodejs</h3><p><strong>Windows 系统</strong></p><p>nodejs 官网下载：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>如果确实是小白，建议下载 Windows 安装包 (.msi)，msi 安装包会自动配置环境变量，真正实现小白式操作。</p><p><strong>Linux 系统</strong></p><p>Linux 版本众多，在这里只介绍 Centos 的安装方法。</p><p>第一步：安装 node 相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ openssl-devel epel-release</span><br></pre></td></tr></table></figure><p>第二步：安装 nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><p>安装完成后，在控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果可以看得到版本信息说明安装成功。</p><p>安装完 node 之后，即可使用 npm 命令，由于 npm 的源是国外网站，速度会很慢，为了节省时间我们可以更换淘宝提供的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装完成后就可以使用 <code>cnpm</code> 命令了，在后续的操作用 cnpm 来代替 npm。</p><h3 id="2、安装-Git"><a href="#2、安装-Git" class="headerlink" title="2、安装 Git"></a>2、安装 Git</h3><p>Git 是代码托管工具，整个过程 Git 的戏份很少，不懂的小白也不用担心，安装好就对了！</p><ul><li>Windows：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a>.</li><li>Mac：使用 Homebrew, MacPorts 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：sudo apt-get install -y git-core</li><li>Linux (Fedora, Red Hat, CentOS)：sudo yum install -y git-core</li></ul><blockquote><p>Mac 用户请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><h3 id="3、安装-hexo"><a href="#3、安装-hexo" class="headerlink" title="3、安装 hexo"></a>3、安装 hexo</h3><p>使用 cnpm 命令一键安装 hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，在控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo</span><br></pre></td></tr></table></figure><p>如果看得到如下信息说明安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &#39;hexo help [command]&#39; for the detailed information</span><br><span class="line">or you can check the docs: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;</span><br></pre></td></tr></table></figure><h2 id="搭建博客！"><a href="#搭建博客！" class="headerlink" title="搭建博客！"></a>搭建博客！</h2><p>现在开始搭建博客项目，运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>这个 blog 是文件夹的名字，你可以随意取，在这里我把它取名 blog。</p><p>执行完这个命令会自动在当前目录下创建一个 blog 文件夹，使用命令 <code>cd blog</code> 进入这个文件夹，接着再执行 <code>cnpm install</code>。</p><p>安装完成后，文件夹的目录如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>需要注意两个主要的配置文件：</p><h3 id="1、-config-yml"><a href="#1、-config-yml" class="headerlink" title="1、_config.yml"></a>1、_config.yml</h3><p>网站的配置信息，比如网站的名字什么的，都在这里进行配置。</p><h3 id="2、package-json"><a href="#2、package-json" class="headerlink" title="2、package.json"></a>2、package.json</h3><p>网站依赖的包（小白不用管这个东西），默认已经帮你配置好常用的包了。</p><p>以上，你的博客已经搭建完啦！</p><h2 id="访问博客！"><a href="#访问博客！" class="headerlink" title="访问博客！"></a>访问博客！</h2><p>什么鬼！？这就搭建完了？？</p><p>yes，我们打开控制台，在博客目录下执行命令启动博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619193-9a0c6a80-5bb3-11ea-88af-f8ea2b22b051.png" alt="启动hexo博客"></p><p>然后打开浏览器，输入 <code>http://localhost:4000</code> 或 <code>127.0.0.1:4000</code>。</p><p>你就可以看到搭建好的博客啦！</p><p>如下图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619228-6716a680-5bb4-11ea-99c2-d121aba9338f.png" alt="hexo博客"></p><h2 id="写下第一篇博文！"><a href="#写下第一篇博文！" class="headerlink" title="写下第一篇博文！"></a>写下第一篇博文！</h2><p>好吧，其实你的第一篇博客已经被系统写好了，也就是你在上图看到的标题为 Hello World 的博文。</p><p>接下来我们要手动创建第一篇博客！</p><p>使用命令 <code>hexo n &lt;博文标题&gt;</code> 来创建一篇新的博文。</p><p>控制台下输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure><p>执行完命令后，可以看到生成了一个 .md 格式的文件 <code>/blog/source/_posts/我的第一篇博客.md</code>，如下图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619292-13588d00-5bb5-11ea-9ff2-4833965a8456.png" alt="image"></p><p>这个文件就是我们的博文内容，进入 <code>/blog/source/_posts/</code> 然后打开 <code>我的第一篇博客.md</code>， 可以看到默认内容类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2020-03-01 10:49:10</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开头的部分不要动，在结尾部分写自己想写的文章即可，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2020-03-01 10:49:10</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 兔子的日记</span><br><span class="line"></span><br><span class="line">今天的天气真好！</span><br></pre></td></tr></table></figure><p>如果你用的是 Markdown 还能看到预览效果！</p><p>Markdown 编辑器推荐：<a href="http://note.youdao.com/semdl/markdown.html">有道云笔记</a></p><p>（你可以在其他地方编辑好文章，然后复制过来）</p><p>我用的是 PHPstorm，预览效果如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619349-c5905480-5bb5-11ea-89d2-d2abf88cdef4.png" alt="hexo第一篇博文"></p><p>文章内容已经写好了，接下来要生成静态页面，按 <code>Ctrl+C</code> 把刚才启动的博客关掉：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619390-2ae44580-5bb6-11ea-8835-12430e945e21.png" alt="关闭hexo服务"></p><p>然后依次运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清空数据库，如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619432-8d3d4600-5bb6-11ea-9985-a56c65a7cf48.png" alt="hexo clean"></p><p>接着输入 <code>hexo g</code> 重新编译生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619447-c4135c00-5bb6-11ea-827b-28be7914d84c.png" alt="hexo 生成博文"></p><p>最后，再启动 hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器输入：<code>127.0.0.1:4000</code> 就可以看到自己刚才写的那篇文章了。</p><p>如图所示：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619492-5451a100-5bb7-11ea-9af3-c25af149898f.png" alt="hexo第一篇博文"></p><p>至此，hexo 的基本操作已经 OK 了。</p><p>再来总结一下怎么发一篇博文。</p><p>1、执行 <code>hexo n &lt;标题&gt;</code> 创建博文文件</p><p>2、在 Markdown 编辑器完成博文书写，把内容复制到上面生成的博文文件里</p><p>3、执行 <code>hexo clean</code> 清空数据</p><p>4、执行 <code>hexo g</code> 重新编译生成静态文件</p><p>此外，本地调试用 <code>hexo s</code> 开启本地服务，在浏览器输入 <code>127.0.0.1:4000</code> 访问博客项目。</p><p>要记住这些步骤和命令对小白来说十分吃力，这是很正常的事情。</p><p>如果忘记了怎么操作，回头多看几遍本博文，熟能生巧！</p><h2 id="自定义主题！"><a href="#自定义主题！" class="headerlink" title="自定义主题！"></a>自定义主题！</h2><p>默认博客页面太丑，想换一个怎么办？</p><p>网上找到其他人分享的主题：<a href="https://github.com/zhvala/hexo-material-x-black">https://github.com/zhvala/hexo-material-x-black</a></p><p>然后把它下载下来，点击右侧 Clone or download：</p><p>下载下来并且解压，把解压后的文件复制到博客项目的 themes 目录下。</p><p>或者直接 clone 到 themes 目录下并且命名为 material-x：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-material-x themes&#x2F;material-x</span><br></pre></td></tr></table></figure><p>主题文件都很大，等下载完成就可以了。</p><p>主题下载下来以后，目录结构如下：</p><p><img src="https://s2.ax1x.com/2020/03/01/3g86hV.png" alt="3g86hV.png"></p><p>themes 下面的文件夹都是主题。</p><p>接着编辑 .config.yml，拉到底部，修改 theme 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: material-x</span><br></pre></td></tr></table></figure><p>theme 默认是 landscape，改成刚刚下载的主题 material-x（即文件夹的名字）。</p><p>然后安装主题所需的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts</span><br></pre></td></tr></table></figure><p>接着执行下面几个命令（如果之前启动了博客项目，记得按 Ctrl+C 先关掉）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code>，可以发现主题已经被更换成新的了。</p><p>在 Github 上还有更多主题可以选择：<a href="https://github.com/search?q=hexo+theme&type=Repositories">点击此处获取更多主题</a></p><h2 id="发布博客！"><a href="#发布博客！" class="headerlink" title="发布博客！"></a>发布博客！</h2><p>上面的步骤只能在自己的电脑打开博客项目，现在我们要把博客发到外网去，让别人来参观你的博客！</p><p>— 小剧场 —</p><p>你是想要节操，还是想白嫖域名和服务器？</p><p>我是想要节操还把域名和服务器嫖了！</p><p>嫖不成。</p><p>啪一声，你把 300 块大洋拍在桌子上。</p><p>这个能不能换来节操？</p><p>能，但是钱包空了。</p><p>啪一声，你把节操拍在桌子上，300 块大洋收回兜里。</p><p>嫖谁的？</p><p>GitHub 的！</p><p>就那个全球最大同性交流社区？</p><p>正是。</p><p>敢问君为何方神圣？</p><p>GitHub 基佬是也。</p><p>— 小剧场（完） —</p><p>没错，我们要白嫖 GitHub 提供的免费域名和空间——GitHub Pages！</p><p>GitHub Pages 提供了免费的服务可以让我们部署博客项目。</p><p>Github：<a href="https://github.com/">https://github.com/</a></p><p>注册一个账户并登陆。</p><p>接着点击左侧 Repositories 旁边的按钮 New 创建一个新的仓库，如图：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619699-608b2d80-5bba-11ea-8bff-2570abd32650.png" alt="image"></p><p>仓库的配置有两点需要注意，如果你没按照下面的要求，你的博客就访问不了：</p><p>1、仓库名称必须为：你的 GitHub 用户名.github.io，比如我的 Github 用户名是 huoshaotuzi，那么仓库的名字就是：huoshaotuzi.github.io</p><p>2、仓库必须为 Public 公开权限，如果选择 Private，就不能白嫖了，这也是上面的小剧场所说的出卖节操的原因，一旦公开权限，你的仓库 <strong>任何人都能访问</strong>，你的仓库设置成 Public，相当于你光着屁股暴露在 Github 几百万基佬面前，知道啥意思了吧？</p><p>创建好仓库后，可以看到如下的仓库信息：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619801-8107b780-5bbb-11ea-9b9b-77f1eb0b4078.png" alt="image"><br>（xxoo 是随便取的名字，不要问 xxoo 是什么意思，问了也不会告诉你。）</p><p>在这里把 SSH 后面的仓库地址复制下来，后面会用到。</p><p>接着返回到你博客的目录下，执行命令安装 git 插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>安装完成后，编辑根目录下的 _config.yml，拉到最底部，deploy 后面添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;huoshaotuzi&#x2F;xxoo.git（填你自己的）</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这里的 repo 填入上面说的仓库地址：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619912-0fc90400-5bbd-11ea-9636-1d7bbc7310ce.png" alt="image"></p><p>保存配置文件后，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>执行命令后开始自动编译并且上传到 GitHub 仓库，然后会提示要输入 Github 的账号跟密码。</p><p>为了避免每次上传都要重复输入账号密码，你可以输入下面的命令记住密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>上传成功后，返回仓库就能看到上传好的代码。</p><p>然后就可以通过仓库名称访问到你的博客了！</p><p>我的仓库名称是：huoshaotuzi.github.io</p><p>在浏览器输入：huoshaotuzi.github.io</p><p>刚刚部署上去的时候，需要等几分钟才能看到博客，不然会出现 404 或者其他问题。</p><p>白嫖党只能使用 GitHub 提供的域名，接下来给大家介绍如何指定域名进行访问。</p><p>比如我的网站是：<a href="https://blog.huotuyouxi.com/">blog.huotuyouxi.com</a></p><p>这是怎么实现的呢?</p><h2 id="指定域名！"><a href="#指定域名！" class="headerlink" title="指定域名！"></a>指定域名！</h2><p>首先，你得有一个域名。</p><p>万网阿里云、百度云、腾讯云、京东云、华为云、国外的 GoDaddy……诸如此类域名服务提供商，任选一家即可。</p><p>建议购买 .com 后缀的域名，域名的名称就按照你自己喜欢的挑选了。</p><p>比如张三：zhangsan.com</p><p>皮卡丘博客：pikachublog.com</p><p>简单好记的域名，这个没什么要求的，选你喜欢的就好。</p><p>域名买好之后，在仓库主页的菜单栏，选择 Settings：</p><p><img src="https://user-images.githubusercontent.com/28209810/75619981-0be9b180-5bbe-11ea-8b71-1a5cc2f906df.png" alt="image"></p><p>拉到下面，直到看到 GitHub Pages，然后点击 Choose a theme 选择一个主题：</p><p><img src="https://ae01.alicdn.com/kf/Hb6adf75de5bb405396b8991dcab4ccf2d.png" alt="image"></p><p>主题按照你喜欢的随便选一个就好：</p><p><img src="https://ae01.alicdn.com/kf/Hdad8baba745a4a5698426e9b386d9606a.png" alt="image"></p><p>比如选第一个，然后点击右下角 Select theme。</p><p>接着返回 Github Pages 配置域名：</p><p><img src="https://ae01.alicdn.com/kf/Ha7c7c267f4594459854b89d8782cf9366.png" alt="image"></p><p>在 Custom domain 栏处填写你购买的域名，然后点击 Save。</p><p>如果需要启用 https 域名，把 Enforce HTTPS 勾选即可，刚部署时需要等待几分钟 Enforce HTTPS 才会显示可选，并且勾选完成后也需要等待几分钟，Github 会为你免费提供 SSL 证书。</p><p>然后打开你购买域名的网站，例如阿里云，登录后打开右上角控制台-点击左上角展开菜单-选择域名：</p><p><img src="https://ae01.alicdn.com/kf/H59ae77f519c645c486feacd4c8e68ff8d.png" alt="image"></p><p>在域名右侧选择解析：</p><p><img src="https://ae01.alicdn.com/kf/H0f6fb6011e264e39a694159c9deac969C.png" alt="域名解析"></p><p>点击“添加记录”，记录类型 CNAME，主机记录 @，记录值填你自己仓库的名字：</p><p><img src="https://ae01.alicdn.com/kf/Hfa26d74adaf24408aba88ef049091802E.png"></p><p>如果你希望可以用 www 访问，那就再添加一条记录，主机记录填 www，其他跟上面的一样：</p><p><img src="https://ae01.alicdn.com/kf/H638380f92dbf4ff0bd97f57117e225fcv.png"></p><p>完成这一步你就可以通过购买的域名访问到博客了！</p><h2 id="指定服务器！"><a href="#指定服务器！" class="headerlink" title="指定服务器！"></a>指定服务器！</h2><p>不想出卖节操，就买台服务器自己安装环境，这样可以保证代码不被其他基佬看到。</p><h3 id="1、域名和服务器的选择"><a href="#1、域名和服务器的选择" class="headerlink" title="1、域名和服务器的选择"></a>1、域名和服务器的选择</h3><p>选服务器可是很有讲究的，看你网站的受众，如果是面向海外用户，就选国外的服务器；如果面向国内用户，那就买国内的服务器。服务器放在哪很大程度上会影响你网站的打开速度。</p><p>再者，如果你选国内服务器，还需要注意域名备案的问题。</p><p>想要搭建博客，最好提前买个域名进行备案。</p><p>没有备案的域名只能选择国外主机。</p><p>只建议购买：com、cn、net 这三个老牌域名。</p><p>非主流域名即使能备案，搜索引擎也很难收录，所以不推荐。</p><p>有条件或者嫌备案麻烦的，可以购买香港或者台湾地区的服务器，靠近大陆，延迟相对低一点，域名即买即用。</p><h3 id="2、服务器环境"><a href="#2、服务器环境" class="headerlink" title="2、服务器环境"></a>2、服务器环境</h3><p>服务器推荐 Centos 系统，如果是小白也可以选 Windows Server。</p><p>要让网站解析到服务器，首先需要安装 Web 服务器，老牌的 Web 服务器软件有 Apache，Windows 的 IIS。</p><p>这两个本人几乎没用过，就不在这里介绍了。</p><p>推荐使用 Nginx。</p><p>以 Centos 为例，安装十分简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>安装完成后，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;blog.conf</span><br></pre></td></tr></table></figure><p>按下 i 键插入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name blog.huotuyouxi.com;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;blog;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按 Esc，输入 <code>wq!</code> 保存。</p><p>接着重启 Nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>在这里，<code>server_name</code> 是你的域名。</p><p><code>root</code> 是你的博客项目路径，可以下载 FileZilla 把博客上传到服务器，或者直接使用 <code>git clone</code> 下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www</span><br><span class="line">git clone &lt;你的博客仓库地址&gt;</span><br></pre></td></tr></table></figure><p>然后你在哪买的域名，就登录到控制台把域名解析到服务器的公网 IP。</p><p>解析的方法在上面已经有介绍了，这里不再重复。</p><p>3、更新博客内容</p><p>前面的文章介绍了如何编写和更新博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>更新博客内容并且推送到 Github 上面，你就可以回到服务器上，然后执行 <code>git pull</code> 把最新的博客内容拉取下来，实现博客的更新。</p><p>其中，<code>hexo g</code> 和 <code>hexo d</code> 两个命令可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><blockquote><p>有兴趣的可以去了解一下 Git 自动构建，延伸的内容太多了，本文写不下</p></blockquote><h3 id="4、博客代码备份"><a href="#4、博客代码备份" class="headerlink" title="4、博客代码备份"></a>4、博客代码备份</h3><p>使用 <code>hexo d</code> 上传到 Github 的只是编译后的静态文件，博客的代码并没有上传到仓库里。</p><p>这样一旦你的博客代码丢失，你就无法继续更新了。</p><p>为了避免这种情况，我们要把博客代码也上传到仓库里，最好是上传到同一个仓库。</p><p>回到本地的博客项目，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop</span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>这两个步骤，第一个是切换到新的分支 <code>develop</code>（名字可以随便取），然后把新的分支推送到远程仓库。</p><p>如此一来，你的博客代码也被保存至仓库里。</p><p>前往 Github 查看，点击 Branch 即可看到新的分支：</p><p><img src="https://s2.ax1x.com/2020/03/01/3g2BzF.png" alt="git 分支"></p><p>还记得最早我们在 _config.yml 设置的 Github 仓库地址吗？</p><p><img src="https://s2.ax1x.com/2020/03/01/3g2gd1.png" alt="hexo github 配置"></p><p>这里我们把静态文件的分支设置成 master，因此我们可以专注于在 develop 分支上写博文，然后用 <code>hexo d -g</code> 进行推送，不需要进行分支切换，十分方便！</p><p>把博客代码上传到远程仓库，即使你在另一台电脑上面也可以把项目克隆下来，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p>切换到 develop 分支上去写博文。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>借助 hexo 可以快速搭建属于自己的博客，平时学习到新东西的时候就可以记录下来，养成良好的习惯有助于学习成果的积累。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
